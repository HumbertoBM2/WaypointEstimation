
tractorrabioso_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  0800c048  0800c048  0001c048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9fc  0800c9fc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca04  0800ca04  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca08  0800ca08  0001ca08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800ca0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  240001e8  0800cbf4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000638  0800cbf4  00020638  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e31  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345f  00000000  00000000  00042047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  000454a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  00046fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e1dd  00000000  00000000  000489e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209a8  00000000  00000000  00086bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198ce7  00000000  00000000  000a7565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024024c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008628  00000000  00000000  0024029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c030 	.word	0x0800c030

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c030 	.word	0x0800c030

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff73 	bl	8003708 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ff6a 	bl	8003708 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000214 	.word	0x24000214
 8000840:	24000218 	.word	0x24000218

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 ff53 	bl	8003708 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 ff4a 	bl	8003708 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000214 	.word	0x24000214
 8000880:	2400021a 	.word	0x2400021a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fd20 	bl	80062ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 ff0a 	bl	80066d0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400021c 	.word	0x2400021c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 fcf5 	bl	80062ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 fee0 	bl	80066d0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400021c 	.word	0x2400021c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fccb 	bl	80062ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400021c 	.word	0x2400021c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fcab 	bl	80062ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fca4 	bl	80062ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400021c 	.word	0x2400021c

080009b8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80009bc:	21ff      	movs	r1, #255	; 0xff
 80009be:	20e1      	movs	r0, #225	; 0xe1
 80009c0:	f7ff ffb0 	bl	8000924 <NRF24_write_register>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80009cc:	21ff      	movs	r1, #255	; 0xff
 80009ce:	20e2      	movs	r0, #226	; 0xe2
 80009d0:	f7ff ffa8 	bl	8000924 <NRF24_write_register>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80009d8:	b082      	sub	sp, #8
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <NRF24_begin+0x1b0>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2288      	movs	r2, #136	; 0x88
 80009f6:	4619      	mov	r1, r3
 80009f8:	f008 fcd2 	bl	80093a0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80009fc:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <NRF24_begin+0x1b4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a02:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <NRF24_begin+0x1b8>)
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a08:	4a62      	ldr	r2, [pc, #392]	; (8000b94 <NRF24_begin+0x1bc>)
 8000a0a:	883b      	ldrh	r3, [r7, #0]
 8000a0c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef8 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff15 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f001 ff04 	bl	8002828 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a20:	2108      	movs	r1, #8
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff7e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000a28:	213f      	movs	r1, #63	; 0x3f
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff7a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000a30:	2103      	movs	r1, #3
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff76 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff ff72 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000a40:	2103      	movs	r1, #3
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff ff6e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000a48:	2102      	movs	r1, #2
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f7ff ff6a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000a50:	210f      	movs	r1, #15
 8000a52:	2006      	movs	r0, #6
 8000a54:	f7ff ff66 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000a58:	210e      	movs	r1, #14
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff ff62 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff ff5e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f7ff ff5a 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a70:	23e7      	movs	r3, #231	; 0xe7
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	23e7      	movs	r3, #231	; 0xe7
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	23e7      	movs	r3, #231	; 0xe7
 8000a7a:	72bb      	strb	r3, [r7, #10]
 8000a7c:	23e7      	movs	r3, #231	; 0xe7
 8000a7e:	727b      	strb	r3, [r7, #9]
 8000a80:	23e7      	movs	r3, #231	; 0xe7
 8000a82:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	f7ff ff6b 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000a92:	23c2      	movs	r3, #194	; 0xc2
 8000a94:	733b      	strb	r3, [r7, #12]
 8000a96:	23c2      	movs	r3, #194	; 0xc2
 8000a98:	72fb      	strb	r3, [r7, #11]
 8000a9a:	23c2      	movs	r3, #194	; 0xc2
 8000a9c:	72bb      	strb	r3, [r7, #10]
 8000a9e:	23c2      	movs	r3, #194	; 0xc2
 8000aa0:	727b      	strb	r3, [r7, #9]
 8000aa2:	23c2      	movs	r3, #194	; 0xc2
 8000aa4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2205      	movs	r2, #5
 8000aac:	4619      	mov	r1, r3
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f7ff ff5a 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000ab4:	21c3      	movs	r1, #195	; 0xc3
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000abc:	21c4      	movs	r1, #196	; 0xc4
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000ac4:	21c5      	movs	r1, #197	; 0xc5
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000acc:	21c6      	movs	r1, #198	; 0xc6
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ad4:	23e7      	movs	r3, #231	; 0xe7
 8000ad6:	733b      	strb	r3, [r7, #12]
 8000ad8:	23e7      	movs	r3, #231	; 0xe7
 8000ada:	72fb      	strb	r3, [r7, #11]
 8000adc:	23e7      	movs	r3, #231	; 0xe7
 8000ade:	72bb      	strb	r3, [r7, #10]
 8000ae0:	23e7      	movs	r3, #231	; 0xe7
 8000ae2:	727b      	strb	r3, [r7, #9]
 8000ae4:	23e7      	movs	r3, #231	; 0xe7
 8000ae6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2205      	movs	r2, #5
 8000aee:	4619      	mov	r1, r3
 8000af0:	2010      	movs	r0, #16
 8000af2:	f7ff ff39 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2011      	movs	r0, #17
 8000afa:	f7ff ff13 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2012      	movs	r0, #18
 8000b02:	f7ff ff0f 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2013      	movs	r0, #19
 8000b0a:	f7ff ff0b 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2014      	movs	r0, #20
 8000b12:	f7ff ff07 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2015      	movs	r0, #21
 8000b1a:	f7ff ff03 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2016      	movs	r0, #22
 8000b22:	f7ff feff 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000b26:	f000 f9df 	bl	8000ee8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f7ff fef9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	201d      	movs	r0, #29
 8000b36:	f7ff fef5 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000b3a:	f000 f9ef 	bl	8000f1c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000b3e:	210f      	movs	r1, #15
 8000b40:	200f      	movs	r0, #15
 8000b42:	f000 f89d 	bl	8000c80 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f90f 	bl	8000d6a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f945 	bl	8000ddc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f988 	bl	8000e68 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000b58:	f000 f8da 	bl	8000d10 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f000 f8bf 	bl	8000ce0 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000b62:	f000 f9b8 	bl	8000ed6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f000 f8a5 	bl	8000cb6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000b6c:	f7ff ff24 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b70:	f7ff ff2a 	bl	80009c8 <NRF24_flush_rx>

	NRF24_powerDown();
 8000b74:	f000 f9a0 	bl	8000eb8 <NRF24_powerDown>

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2400021c 	.word	0x2400021c
 8000b8c:	24000214 	.word	0x24000214
 8000b90:	24000218 	.word	0x24000218
 8000b94:	2400021a 	.word	0x2400021a

08000b98 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fe71 	bl	8000884 <NRF24_read_register>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f043 0303 	orr.w	r3, r3, #3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff feb9 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <NRF24_startListening+0x48>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NRF24_startListening+0x48>)
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f7ff fed1 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000bc6:	f7ff fef7 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bca:	f7ff fefd 	bl	80009c8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fe38 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000bd4:	2096      	movs	r0, #150	; 0x96
 8000bd6:	f7ff fdf3 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000208 	.word	0x24000208

08000be4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4601      	mov	r1, r0
 8000bec:	e9c7 2300 	strd	r2, r3, [r7]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bfe:	491c      	ldr	r1, [pc, #112]	; (8000c70 <NRF24_openReadingPipe+0x8c>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d82d      	bhi.n	8000c66 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d808      	bhi.n	8000c22 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	4639      	mov	r1, r7
 8000c18:	2205      	movs	r2, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fea4 	bl	8000968 <NRF24_write_registerN>
 8000c20:	e007      	b.n	8000c32 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <NRF24_openReadingPipe+0x94>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <NRF24_openReadingPipe+0x98>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe70 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fe1d 	bl	8000884 <NRF24_read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fe5f 	bl	8000924 <NRF24_write_register>
	}

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000208 	.word	0x24000208
 8000c74:	0800c5e8 	.word	0x0800c5e8
 8000c78:	0800c5f0 	.word	0x0800c5f0
 8000c7c:	24000210 	.word	0x24000210

08000c80 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff fe3b 	bl	8000924 <NRF24_write_register>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000cc0:	237f      	movs	r3, #127	; 0x7f
 8000cc2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	bf28      	it	cs
 8000ccc:	4613      	movcs	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f7ff fe26 	bl	8000924 <NRF24_write_register>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000cea:	2320      	movs	r3, #32
 8000cec:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bf28      	it	cs
 8000cf6:	4613      	movcs	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <NRF24_setPayloadSize+0x2c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	24000210 	.word	0x24000210

08000d10 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d14:	201d      	movs	r0, #29
 8000d16:	f7ff fdb5 	bl	8000884 <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f023 0304 	bic.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	201d      	movs	r0, #29
 8000d26:	f7ff fdfd 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <NRF24_disableDynamicPayloads+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24000211 	.word	0x24000211

08000d40 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d50:	213f      	movs	r1, #63	; 0x3f
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fde6 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d58:	e003      	b.n	8000d62 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fde1 	bl	8000924 <NRF24_write_register>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff fd85 	bl	8000884 <NRF24_read_register>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0306 	bic.w	r3, r3, #6
 8000d84:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d104      	bne.n	8000d96 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f043 0306 	orr.w	r3, r3, #6
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e019      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d104      	bne.n	8000da6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e011      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d104      	bne.n	8000db6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e009      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d103      	bne.n	8000dca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f043 0306 	orr.w	r3, r3, #6
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f7ff fda8 	bl	8000924 <NRF24_write_register>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dea:	2006      	movs	r0, #6
 8000dec:	f7ff fd4a 	bl	8000884 <NRF24_read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e00:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d107      	bne.n	8000e18 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	73bb      	strb	r3, [r7, #14]
 8000e16:	e00d      	b.n	8000e34 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e002      	b.n	8000e34 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	4619      	mov	r1, r3
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff fd73 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff fd20 	bl	8000884 <NRF24_read_register>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e002      	b.n	8000e5a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000212 	.word	0x24000212

08000e68 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fd06 	bl	8000884 <NRF24_read_register>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f023 030c 	bic.w	r3, r3, #12
 8000e7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e007      	b.n	8000ea6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fce1 	bl	8000884 <NRF24_read_register>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fd29 	bl	8000924 <NRF24_write_register>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eda:	2170      	movs	r1, #112	; 0x70
 8000edc:	2007      	movs	r0, #7
 8000ede:	f7ff fd21 	bl	8000924 <NRF24_write_register>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fc88 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ef4:	2350      	movs	r3, #80	; 0x50
 8000ef6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ef8:	2373      	movs	r3, #115	; 0x73
 8000efa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	2202      	movs	r2, #2
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <NRF24_ACTIVATE_cmd+0x30>)
 8000f04:	f005 f9f2 	bl	80062ec <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc7b 	bl	8000804 <NRF24_csn>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2400021c 	.word	0x2400021c

08000f1c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	b0a1      	sub	sp, #132	; 0x84
 8000f20:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	49c3      	ldr	r1, [pc, #780]	; (8001234 <printRadioSettings+0x318>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 fe93 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f9d4 	bl	80002e0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	230a      	movs	r3, #10
 8000f42:	48bd      	ldr	r0, [pc, #756]	; (8001238 <printRadioSettings+0x31c>)
 8000f44:	f007 f94c 	bl	80081e0 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fc9b 	bl	8000884 <NRF24_read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <printRadioSettings+0x5e>
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	49b2      	ldr	r1, [pc, #712]	; (800123c <printRadioSettings+0x320>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f008 fe6e 	bl	8009c54 <siprintf>
 8000f78:	e00c      	b.n	8000f94 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	49b0      	ldr	r1, [pc, #704]	; (8001240 <printRadioSettings+0x324>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fe67 	bl	8009c54 <siprintf>
 8000f86:	e005      	b.n	8000f94 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	49ad      	ldr	r1, [pc, #692]	; (8001244 <printRadioSettings+0x328>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f008 fe60 	bl	8009c54 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f9a1 	bl	80002e0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f107 0108 	add.w	r1, r7, #8
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	48a3      	ldr	r0, [pc, #652]	; (8001238 <printRadioSettings+0x31c>)
 8000faa:	f007 f919 	bl	80081e0 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fc68 	bl	8000884 <NRF24_read_register>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fbe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bfcc      	ite	gt
 8000fc6:	2301      	movgt	r3, #1
 8000fc8:	2300      	movle	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fd2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bfcc      	ite	gt
 8000fda:	2301      	movgt	r3, #1
 8000fdc:	2300      	movle	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfcc      	ite	gt
 8000fee:	2301      	movgt	r3, #1
 8000ff0:	2300      	movle	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ffa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfcc      	ite	gt
 8001002:	2301      	movgt	r3, #1
 8001004:	2300      	movle	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800100a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800100e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001012:	2b00      	cmp	r3, #0
 8001014:	bfcc      	ite	gt
 8001016:	2301      	movgt	r3, #1
 8001018:	2300      	movle	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800101e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001022:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfcc      	ite	gt
 800102a:	2301      	movgt	r3, #1
 800102c:	2300      	movle	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f107 0008 	add.w	r0, r7, #8
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	9402      	str	r4, [sp, #8]
 8001038:	9101      	str	r1, [sp, #4]
 800103a:	9200      	str	r2, [sp, #0]
 800103c:	4633      	mov	r3, r6
 800103e:	462a      	mov	r2, r5
 8001040:	4981      	ldr	r1, [pc, #516]	; (8001248 <printRadioSettings+0x32c>)
 8001042:	f008 fe07 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f948 	bl	80002e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	4877      	ldr	r0, [pc, #476]	; (8001238 <printRadioSettings+0x31c>)
 800105c:	f007 f8c0 	bl	80081e0 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fc0f 	bl	8000884 <NRF24_read_register>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800106c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001070:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfcc      	ite	gt
 8001078:	2301      	movgt	r3, #1
 800107a:	2300      	movle	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001084:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001088:	2b00      	cmp	r3, #0
 800108a:	bfcc      	ite	gt
 800108c:	2301      	movgt	r3, #1
 800108e:	2300      	movle	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001098:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfcc      	ite	gt
 80010a0:	2301      	movgt	r3, #1
 80010a2:	2300      	movle	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bfcc      	ite	gt
 80010b4:	2301      	movgt	r3, #1
 80010b6:	2300      	movle	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfcc      	ite	gt
 80010c8:	2301      	movgt	r3, #1
 80010ca:	2300      	movle	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f107 0008 	add.w	r0, r7, #8
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	9402      	str	r4, [sp, #8]
 80010ea:	9101      	str	r1, [sp, #4]
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4633      	mov	r3, r6
 80010f0:	462a      	mov	r2, r5
 80010f2:	4956      	ldr	r1, [pc, #344]	; (800124c <printRadioSettings+0x330>)
 80010f4:	f008 fdae 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8ef 	bl	80002e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	230a      	movs	r3, #10
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <printRadioSettings+0x31c>)
 800110e:	f007 f867 	bl	80081e0 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fbb6 	bl	8000884 <NRF24_read_register>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	3302      	adds	r3, #2
 8001128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800112c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4946      	ldr	r1, [pc, #280]	; (8001250 <printRadioSettings+0x334>)
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fd8c 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f8cd 	bl	80002e0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	230a      	movs	r3, #10
 8001150:	4839      	ldr	r0, [pc, #228]	; (8001238 <printRadioSettings+0x31c>)
 8001152:	f007 f845 	bl	80081e0 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff fb94 	bl	8000884 <NRF24_read_register>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4939      	ldr	r1, [pc, #228]	; (8001254 <printRadioSettings+0x338>)
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fd6f 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f8b0 	bl	80002e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0108 	add.w	r1, r7, #8
 8001188:	230a      	movs	r3, #10
 800118a:	482b      	ldr	r0, [pc, #172]	; (8001238 <printRadioSettings+0x31c>)
 800118c:	f007 f828 	bl	80081e0 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001190:	2006      	movs	r0, #6
 8001192:	f7ff fb77 	bl	8000884 <NRF24_read_register>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800119c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <printRadioSettings+0x29a>
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <printRadioSettings+0x33c>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f008 fd50 	bl	8009c54 <siprintf>
 80011b4:	e005      	b.n	80011c2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4928      	ldr	r1, [pc, #160]	; (800125c <printRadioSettings+0x340>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f008 fd49 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f88a 	bl	80002e0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 0108 	add.w	r1, r7, #8
 80011d4:	230a      	movs	r3, #10
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <printRadioSettings+0x31c>)
 80011d8:	f007 f802 	bl	80081e0 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80011dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f003 0306 	and.w	r3, r3, #6
 80011e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	085b      	lsrs	r3, r3, #1
 80011ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80011f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <printRadioSettings+0x2ec>
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4918      	ldr	r1, [pc, #96]	; (8001260 <printRadioSettings+0x344>)
 8001200:	4618      	mov	r0, r3
 8001202:	f008 fd27 	bl	8009c54 <siprintf>
 8001206:	e03b      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001208:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <printRadioSettings+0x302>
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <printRadioSettings+0x348>)
 8001216:	4618      	mov	r0, r3
 8001218:	f008 fd1c 	bl	8009c54 <siprintf>
 800121c:	e030      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	2b02      	cmp	r3, #2
 8001224:	d122      	bne.n	800126c <printRadioSettings+0x350>
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	490f      	ldr	r1, [pc, #60]	; (8001268 <printRadioSettings+0x34c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fd11 	bl	8009c54 <siprintf>
 8001232:	e025      	b.n	8001280 <printRadioSettings+0x364>
 8001234:	0800c048 	.word	0x0800c048
 8001238:	240002a4 	.word	0x240002a4
 800123c:	0800c07c 	.word	0x0800c07c
 8001240:	0800c098 	.word	0x0800c098
 8001244:	0800c0b4 	.word	0x0800c0b4
 8001248:	0800c0c8 	.word	0x0800c0c8
 800124c:	0800c10c 	.word	0x0800c10c
 8001250:	0800c158 	.word	0x0800c158
 8001254:	0800c174 	.word	0x0800c174
 8001258:	0800c188 	.word	0x0800c188
 800125c:	0800c1a0 	.word	0x0800c1a0
 8001260:	0800c1b8 	.word	0x0800c1b8
 8001264:	0800c1cc 	.word	0x0800c1cc
 8001268:	0800c1e0 	.word	0x0800c1e0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	2b03      	cmp	r3, #3
 8001272:	d105      	bne.n	8001280 <printRadioSettings+0x364>
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	49d7      	ldr	r1, [pc, #860]	; (80015d8 <printRadioSettings+0x6bc>)
 800127a:	4618      	mov	r0, r3
 800127c:	f008 fcea 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f82b 	bl	80002e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f107 0108 	add.w	r1, r7, #8
 8001292:	230a      	movs	r3, #10
 8001294:	48d1      	ldr	r0, [pc, #836]	; (80015dc <printRadioSettings+0x6c0>)
 8001296:	f006 ffa3 	bl	80081e0 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800129a:	463b      	mov	r3, r7
 800129c:	2205      	movs	r2, #5
 800129e:	4619      	mov	r1, r3
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fb17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	461c      	mov	r4, r3
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	461d      	mov	r5, r3
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	787a      	ldrb	r2, [r7, #1]
 80012b2:	7839      	ldrb	r1, [r7, #0]
 80012b4:	f107 0008 	add.w	r0, r7, #8
 80012b8:	9102      	str	r1, [sp, #8]
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	462b      	mov	r3, r5
 80012c0:	4622      	mov	r2, r4
 80012c2:	49c7      	ldr	r1, [pc, #796]	; (80015e0 <printRadioSettings+0x6c4>)
 80012c4:	f008 fcc6 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f807 	bl	80002e0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f107 0108 	add.w	r1, r7, #8
 80012da:	230a      	movs	r3, #10
 80012dc:	48bf      	ldr	r0, [pc, #764]	; (80015dc <printRadioSettings+0x6c0>)
 80012de:	f006 ff7f 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80012e2:	463b      	mov	r3, r7
 80012e4:	2205      	movs	r2, #5
 80012e6:	4619      	mov	r1, r3
 80012e8:	200b      	movs	r0, #11
 80012ea:	f7ff faf3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012ee:	793b      	ldrb	r3, [r7, #4]
 80012f0:	461c      	mov	r4, r3
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	461d      	mov	r5, r3
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	787a      	ldrb	r2, [r7, #1]
 80012fa:	7839      	ldrb	r1, [r7, #0]
 80012fc:	f107 0008 	add.w	r0, r7, #8
 8001300:	9102      	str	r1, [sp, #8]
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	462b      	mov	r3, r5
 8001308:	4622      	mov	r2, r4
 800130a:	49b6      	ldr	r1, [pc, #728]	; (80015e4 <printRadioSettings+0x6c8>)
 800130c:	f008 fca2 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffe3 	bl	80002e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	230a      	movs	r3, #10
 8001324:	48ad      	ldr	r0, [pc, #692]	; (80015dc <printRadioSettings+0x6c0>)
 8001326:	f006 ff5b 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800132a:	463b      	mov	r3, r7
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	200c      	movs	r0, #12
 8001332:	f7ff facf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001336:	783b      	ldrb	r3, [r7, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	49aa      	ldr	r1, [pc, #680]	; (80015e8 <printRadioSettings+0x6cc>)
 8001340:	4618      	mov	r0, r3
 8001342:	f008 fc87 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffc8 	bl	80002e0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	230a      	movs	r3, #10
 800135a:	48a0      	ldr	r0, [pc, #640]	; (80015dc <printRadioSettings+0x6c0>)
 800135c:	f006 ff40 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001360:	463b      	mov	r3, r7
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	200d      	movs	r0, #13
 8001368:	f7ff fab4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800136c:	783b      	ldrb	r3, [r7, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	499d      	ldr	r1, [pc, #628]	; (80015ec <printRadioSettings+0x6d0>)
 8001376:	4618      	mov	r0, r3
 8001378:	f008 fc6c 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ffad 	bl	80002e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	230a      	movs	r3, #10
 8001390:	4892      	ldr	r0, [pc, #584]	; (80015dc <printRadioSettings+0x6c0>)
 8001392:	f006 ff25 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001396:	463b      	mov	r3, r7
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	200e      	movs	r0, #14
 800139e:	f7ff fa99 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013a2:	783b      	ldrb	r3, [r7, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4991      	ldr	r1, [pc, #580]	; (80015f0 <printRadioSettings+0x6d4>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 fc51 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff92 	bl	80002e0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	230a      	movs	r3, #10
 80013c6:	4885      	ldr	r0, [pc, #532]	; (80015dc <printRadioSettings+0x6c0>)
 80013c8:	f006 ff0a 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80013cc:	463b      	mov	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	200f      	movs	r0, #15
 80013d4:	f7ff fa7e 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4984      	ldr	r1, [pc, #528]	; (80015f4 <printRadioSettings+0x6d8>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fc36 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe ff77 	bl	80002e0 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	230a      	movs	r3, #10
 80013fc:	4877      	ldr	r0, [pc, #476]	; (80015dc <printRadioSettings+0x6c0>)
 80013fe:	f006 feef 	bl	80081e0 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001402:	463b      	mov	r3, r7
 8001404:	2205      	movs	r2, #5
 8001406:	4619      	mov	r1, r3
 8001408:	2010      	movs	r0, #16
 800140a:	f7ff fa63 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	461c      	mov	r4, r3
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	461d      	mov	r5, r3
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	787a      	ldrb	r2, [r7, #1]
 800141a:	7839      	ldrb	r1, [r7, #0]
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	9102      	str	r1, [sp, #8]
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	462b      	mov	r3, r5
 8001428:	4622      	mov	r2, r4
 800142a:	4973      	ldr	r1, [pc, #460]	; (80015f8 <printRadioSettings+0x6dc>)
 800142c:	f008 fc12 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff53 	bl	80002e0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0108 	add.w	r1, r7, #8
 8001442:	230a      	movs	r3, #10
 8001444:	4865      	ldr	r0, [pc, #404]	; (80015dc <printRadioSettings+0x6c0>)
 8001446:	f006 fecb 	bl	80081e0 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800144a:	2011      	movs	r0, #17
 800144c:	f7ff fa1a 	bl	8000884 <NRF24_read_register>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4966      	ldr	r1, [pc, #408]	; (80015fc <printRadioSettings+0x6e0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f008 fbf5 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff36 	bl	80002e0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	f107 0108 	add.w	r1, r7, #8
 800147c:	230a      	movs	r3, #10
 800147e:	4857      	ldr	r0, [pc, #348]	; (80015dc <printRadioSettings+0x6c0>)
 8001480:	f006 feae 	bl	80081e0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001484:	2012      	movs	r0, #18
 8001486:	f7ff f9fd 	bl	8000884 <NRF24_read_register>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001490:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4958      	ldr	r1, [pc, #352]	; (8001600 <printRadioSettings+0x6e4>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 fbd8 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ff19 	bl	80002e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f107 0108 	add.w	r1, r7, #8
 80014b6:	230a      	movs	r3, #10
 80014b8:	4848      	ldr	r0, [pc, #288]	; (80015dc <printRadioSettings+0x6c0>)
 80014ba:	f006 fe91 	bl	80081e0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80014be:	2013      	movs	r0, #19
 80014c0:	f7ff f9e0 	bl	8000884 <NRF24_read_register>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	494b      	ldr	r1, [pc, #300]	; (8001604 <printRadioSettings+0x6e8>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fbbb 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fefc 	bl	80002e0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f107 0108 	add.w	r1, r7, #8
 80014f0:	230a      	movs	r3, #10
 80014f2:	483a      	ldr	r0, [pc, #232]	; (80015dc <printRadioSettings+0x6c0>)
 80014f4:	f006 fe74 	bl	80081e0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80014f8:	2014      	movs	r0, #20
 80014fa:	f7ff f9c3 	bl	8000884 <NRF24_read_register>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001504:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	493d      	ldr	r1, [pc, #244]	; (8001608 <printRadioSettings+0x6ec>)
 8001512:	4618      	mov	r0, r3
 8001514:	f008 fb9e 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fedf 	bl	80002e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	f107 0108 	add.w	r1, r7, #8
 800152a:	230a      	movs	r3, #10
 800152c:	482b      	ldr	r0, [pc, #172]	; (80015dc <printRadioSettings+0x6c0>)
 800152e:	f006 fe57 	bl	80081e0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001532:	2015      	movs	r0, #21
 8001534:	f7ff f9a6 	bl	8000884 <NRF24_read_register>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800153e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4930      	ldr	r1, [pc, #192]	; (800160c <printRadioSettings+0x6f0>)
 800154c:	4618      	mov	r0, r3
 800154e:	f008 fb81 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fec2 	bl	80002e0 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	f107 0108 	add.w	r1, r7, #8
 8001564:	230a      	movs	r3, #10
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <printRadioSettings+0x6c0>)
 8001568:	f006 fe3a 	bl	80081e0 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800156c:	2016      	movs	r0, #22
 800156e:	f7ff f989 	bl	8000884 <NRF24_read_register>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001578:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4922      	ldr	r1, [pc, #136]	; (8001610 <printRadioSettings+0x6f4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f008 fb64 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fea5 	bl	80002e0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	f107 0108 	add.w	r1, r7, #8
 800159e:	230a      	movs	r3, #10
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <printRadioSettings+0x6c0>)
 80015a2:	f006 fe1d 	bl	80081e0 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015a6:	201c      	movs	r0, #28
 80015a8:	f7ff f96c 	bl	8000884 <NRF24_read_register>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfcc      	ite	gt
 80015be:	2301      	movgt	r3, #1
 80015c0:	2300      	movle	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bfcc      	ite	gt
 80015d2:	2301      	movgt	r3, #1
 80015d4:	2300      	movle	r3, #0
 80015d6:	e01d      	b.n	8001614 <printRadioSettings+0x6f8>
 80015d8:	0800c1f4 	.word	0x0800c1f4
 80015dc:	240002a4 	.word	0x240002a4
 80015e0:	0800c208 	.word	0x0800c208
 80015e4:	0800c238 	.word	0x0800c238
 80015e8:	0800c268 	.word	0x0800c268
 80015ec:	0800c290 	.word	0x0800c290
 80015f0:	0800c2b8 	.word	0x0800c2b8
 80015f4:	0800c2e0 	.word	0x0800c2e0
 80015f8:	0800c308 	.word	0x0800c308
 80015fc:	0800c334 	.word	0x0800c334
 8001600:	0800c350 	.word	0x0800c350
 8001604:	0800c36c 	.word	0x0800c36c
 8001608:	0800c388 	.word	0x0800c388
 800160c:	0800c3a4 	.word	0x0800c3a4
 8001610:	0800c3c0 	.word	0x0800c3c0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfcc      	ite	gt
 8001624:	2301      	movgt	r3, #1
 8001626:	2300      	movle	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001630:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfcc      	ite	gt
 8001638:	2301      	movgt	r3, #1
 800163a:	2300      	movle	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001644:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001648:	2b00      	cmp	r3, #0
 800164a:	bfcc      	ite	gt
 800164c:	2301      	movgt	r3, #1
 800164e:	2300      	movle	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001658:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800165c:	2b00      	cmp	r3, #0
 800165e:	bfcc      	ite	gt
 8001660:	2301      	movgt	r3, #1
 8001662:	2300      	movle	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f107 0008 	add.w	r0, r7, #8
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	9402      	str	r4, [sp, #8]
 800166e:	9101      	str	r1, [sp, #4]
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	4633      	mov	r3, r6
 8001674:	462a      	mov	r2, r5
 8001676:	4936      	ldr	r1, [pc, #216]	; (8001750 <printRadioSettings+0x834>)
 8001678:	f008 faec 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fe2d 	bl	80002e0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 0108 	add.w	r1, r7, #8
 800168e:	230a      	movs	r3, #10
 8001690:	4830      	ldr	r0, [pc, #192]	; (8001754 <printRadioSettings+0x838>)
 8001692:	f006 fda5 	bl	80081e0 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001696:	201d      	movs	r0, #29
 8001698:	f7ff f8f4 	bl	8000884 <NRF24_read_register>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <printRadioSettings+0x7a0>
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4929      	ldr	r1, [pc, #164]	; (8001758 <printRadioSettings+0x83c>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f008 facd 	bl	8009c54 <siprintf>
 80016ba:	e005      	b.n	80016c8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4926      	ldr	r1, [pc, #152]	; (800175c <printRadioSettings+0x840>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f008 fac6 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe07 	bl	80002e0 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	230a      	movs	r3, #10
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <printRadioSettings+0x838>)
 80016de:	f006 fd7f 	bl	80081e0 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80016e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <printRadioSettings+0x7e0>
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <printRadioSettings+0x844>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f008 faad 	bl	8009c54 <siprintf>
 80016fa:	e005      	b.n	8001708 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4918      	ldr	r1, [pc, #96]	; (8001764 <printRadioSettings+0x848>)
 8001702:	4618      	mov	r0, r3
 8001704:	f008 faa6 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fde7 	bl	80002e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	230a      	movs	r3, #10
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <printRadioSettings+0x838>)
 800171e:	f006 fd5f 	bl	80081e0 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4910      	ldr	r1, [pc, #64]	; (8001768 <printRadioSettings+0x84c>)
 8001728:	4618      	mov	r0, r3
 800172a:	f008 fa93 	bl	8009c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdd4 	bl	80002e0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	230a      	movs	r3, #10
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <printRadioSettings+0x838>)
 8001744:	f006 fd4c 	bl	80081e0 <HAL_UART_Transmit>
}
 8001748:	bf00      	nop
 800174a:	3774      	adds	r7, #116	; 0x74
 800174c:	46bd      	mov	sp, r7
 800174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001750:	0800c3dc 	.word	0x0800c3dc
 8001754:	240002a4 	.word	0x240002a4
 8001758:	0800c428 	.word	0x0800c428
 800175c:	0800c440 	.word	0x0800c440
 8001760:	0800c458 	.word	0x0800c458
 8001764:	0800c474 	.word	0x0800c474
 8001768:	0800c048 	.word	0x0800c048
 800176c:	00000000 	.word	0x00000000

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b0a7      	sub	sp, #156	; 0x9c
 8001774:	af22      	add	r7, sp, #136	; 0x88
int main(void)
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	607b      	str	r3, [r7, #4]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	60bb      	str	r3, [r7, #8]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001782:	bf00      	nop
 8001784:	4b72      	ldr	r3, [pc, #456]	; (8001950 <main+0x1e0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <main+0x2a>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dcf4      	bgt.n	8001784 <main+0x14>
  if ( timeout < 0 )
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da01      	bge.n	80017a4 <main+0x34>
  {
  Error_Handler();
 80017a0:	f000 fc48 	bl	8002034 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a4:	f000 ffae 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a8:	f000 f8e6 	bl	8001978 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <main+0x1e0>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a67      	ldr	r2, [pc, #412]	; (8001950 <main+0x1e0>)
 80017b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <main+0x1e0>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f001 ffb6 	bl	800373c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80017d0:	2100      	movs	r1, #0
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 ffcc 	bl	8003770 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80017d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017dc:	60bb      	str	r3, [r7, #8]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80017de:	bf00      	nop
 80017e0:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <main+0x1e0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <main+0x86>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dcf4      	bgt.n	80017e0 <main+0x70>
if ( timeout < 0 )
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <main+0x90>
{
Error_Handler();
 80017fc:	f000 fc1a 	bl	8002034 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fb5e 	bl	8001ec0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001804:	f000 fb10 	bl	8001e28 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001808:	f000 fa32 	bl	8001c70 <MX_SPI5_Init>
  MX_TIM15_Init();
 800180c:	f000 fa86 	bl	8001d1c <MX_TIM15_Init>
  MX_FDCAN1_Init();
 8001810:	f000 f93a 	bl	8001a88 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001814:	f000 f9ec 	bl	8001bf0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001818:	2100      	movs	r1, #0
 800181a:	484e      	ldr	r0, [pc, #312]	; (8001954 <main+0x1e4>)
 800181c:	f005 fc5c 	bl	80070d8 <HAL_TIM_PWM_Start>





  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK) {
 8001820:	2100      	movs	r1, #0
 8001822:	484d      	ldr	r0, [pc, #308]	; (8001958 <main+0x1e8>)
 8001824:	f005 fc58 	bl	80070d8 <HAL_TIM_PWM_Start>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <main+0xc2>
	  Error_Handler();
 800182e:	f000 fc01 	bl	8002034 <Error_Handler>

	NRF24_startListening();

	*/

  NRF24_begin(GPIOC, nrf24_CSN_Pin, nrf24_CE_Pin, hspi5);
 8001832:	4c4a      	ldr	r4, [pc, #296]	; (800195c <main+0x1ec>)
 8001834:	4668      	mov	r0, sp
 8001836:	1d23      	adds	r3, r4, #4
 8001838:	2284      	movs	r2, #132	; 0x84
 800183a:	4619      	mov	r1, r3
 800183c:	f007 fdb0 	bl	80093a0 <memcpy>
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	4846      	ldr	r0, [pc, #280]	; (8001960 <main+0x1f0>)
 8001848:	f7ff f8c6 	bl	80009d8 <NRF24_begin>

  NRF24_openReadingPipe(1, RxpipeAddrs);
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <main+0x1f4>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff f9c6 	bl	8000be4 <NRF24_openReadingPipe>
  NRF24_setPALevel(RF24_PA_0dB);
 8001858:	2003      	movs	r0, #3
 800185a:	f7ff fa86 	bl	8000d6a <NRF24_setPALevel>
  NRF24_setChannel(52);
 800185e:	2034      	movs	r0, #52	; 0x34
 8001860:	f7ff fa29 	bl	8000cb6 <NRF24_setChannel>
  NRF24_setAutoAck(false);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fa6b 	bl	8000d40 <NRF24_setAutoAck>
  NRF24_setDataRate(RF24_2MBPS);
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fab6 	bl	8000ddc <NRF24_setDataRate>

  NRF24_startListening();
 8001870:	f7ff f992 	bl	8000b98 <NRF24_startListening>
  HAL_Delay(1000);
 8001874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001878:	f000 ffd6 	bl	8002828 <HAL_Delay>

		*/


		  // Backward
		  while(setpoint*100 < 101){
 800187c:	e01c      	b.n	80018b8 <main+0x148>
			  setpoint += 0.01f;
 800187e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001882:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001968 <main+0x1f8>
 8001886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188a:	edc7 7a03 	vstr	s15, [r7, #12]
			  TIM15->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 800188e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001892:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001896:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001948 <main+0x1d8>
 800189a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800189e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001948 <main+0x1d8>
 80018a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <main+0x1fc>)
 80018a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018ac:	ee17 2a90 	vmov	r2, s15
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	f000 ffb8 	bl	8002828 <HAL_Delay>
		  while(setpoint*100 < 101){
 80018b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001970 <main+0x200>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001974 <main+0x204>
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d4d5      	bmi.n	800187e <main+0x10e>
		  }
		  setpoint = 0.5f;
 80018d2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80018d6:	60fb      	str	r3, [r7, #12]
		  HAL_Delay(2000);
 80018d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018dc:	f000 ffa4 	bl	8002828 <HAL_Delay>
		  // Forward
		  while(setpoint*100 > -1){
 80018e0:	e01c      	b.n	800191c <main+0x1ac>
			  setpoint -= 0.01f;
 80018e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001968 <main+0x1f8>
 80018ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ee:	edc7 7a03 	vstr	s15, [r7, #12]
			  TIM15->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 80018f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fa:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001948 <main+0x1d8>
 80018fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001902:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001948 <main+0x1d8>
 8001906:	ee37 7b06 	vadd.f64	d7, d7, d6
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <main+0x1fc>)
 800190c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001910:	ee17 2a90 	vmov	r2, s15
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f000 ff86 	bl	8002828 <HAL_Delay>
		  while(setpoint*100 > -1){
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001970 <main+0x200>
 8001924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001928:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dcd5      	bgt.n	80018e2 <main+0x172>
		  }
		  setpoint = 0.5f;
 8001936:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800193a:	60fb      	str	r3, [r7, #12]
		  HAL_Delay(2000);
 800193c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001940:	f000 ff72 	bl	8002828 <HAL_Delay>
		  while(setpoint*100 < 101){
 8001944:	e7b8      	b.n	80018b8 <main+0x148>
 8001946:	bf00      	nop
 8001948:	66666667 	.word	0x66666667
 800194c:	40a8ffe6 	.word	0x40a8ffe6
 8001950:	58024400 	.word	0x58024400
 8001954:	240004f4 	.word	0x240004f4
 8001958:	240004a8 	.word	0x240004a8
 800195c:	24000420 	.word	0x24000420
 8001960:	58020800 	.word	0x58020800
 8001964:	24000008 	.word	0x24000008
 8001968:	3c23d70a 	.word	0x3c23d70a
 800196c:	40014000 	.word	0x40014000
 8001970:	42c80000 	.word	0x42c80000
 8001974:	42ca0000 	.word	0x42ca0000

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09c      	sub	sp, #112	; 0x70
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	224c      	movs	r2, #76	; 0x4c
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f007 fd18 	bl	80093bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2220      	movs	r2, #32
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f007 fd12 	bl	80093bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001998:	2004      	movs	r0, #4
 800199a:	f002 f825 	bl	80039e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <SystemClock_Config+0x104>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <SystemClock_Config+0x104>)
 80019a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <SystemClock_Config+0x104>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <SystemClock_Config+0x108>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <SystemClock_Config+0x108>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <SystemClock_Config+0x108>)
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019d0:	bf00      	nop
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <SystemClock_Config+0x104>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	d1f8      	bne.n	80019d2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <SystemClock_Config+0x10c>)
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f023 0303 	bic.w	r3, r3, #3
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <SystemClock_Config+0x10c>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80019f0:	2303      	movs	r3, #3
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019fe:	2340      	movs	r3, #64	; 0x40
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001a0e:	23f0      	movs	r3, #240	; 0xf0
 8001a10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001a16:	2318      	movs	r3, #24
 8001a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f834 	bl	8003a9c <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a3a:	f000 fafb 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	233f      	movs	r3, #63	; 0x3f
 8001a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a4e:	2340      	movs	r3, #64	; 0x40
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a52:	2340      	movs	r3, #64	; 0x40
 8001a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2104      	movs	r1, #4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fc47 	bl	80042f8 <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001a70:	f000 fae0 	bl	8002034 <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3770      	adds	r7, #112	; 0x70
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024800 	.word	0x58024800
 8001a80:	58000400 	.word	0x58000400
 8001a84:	58024400 	.word	0x58024400

08001a88 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a8e:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <MX_FDCAN1_Init+0x15c>)
 8001a92:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a94:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a9a:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001aa6:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001aba:	2208      	movs	r2, #8
 8001abc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001aca:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001afc:	2204      	movs	r2, #4
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b00:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b08:	2204      	movs	r2, #4
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b36:	482a      	ldr	r0, [pc, #168]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b38:	f000 ff8a 	bl	8002a50 <HAL_FDCAN_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001b42:	f000 fa77 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2202      	movs	r2, #2
 8001b72:	2102      	movs	r1, #2
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b76:	f001 f9bf 	bl	8002ef8 <HAL_FDCAN_ConfigGlobalFilter>
  FDCAN_REJECT_REMOTE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001b7a:	491b      	ldr	r1, [pc, #108]	; (8001be8 <MX_FDCAN1_Init+0x160>)
 8001b7c:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b7e:	f001 f945 	bl	8002e0c <HAL_FDCAN_ConfigFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_FDCAN1_Init+0x104>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 8001b88:	f000 fa54 	bl	8002034 <Error_Handler>
  }
  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001b8c:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b8e:	f001 f9e0 	bl	8002f52 <HAL_FDCAN_Start>
  }
  /* Start Error */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <MX_FDCAN1_Init+0x158>)
 8001b98:	f001 fa06 	bl	8002fa8 <HAL_FDCAN_ActivateNotification>
  }
  /* Notification Error */
	  /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001b9e:	f240 1211 	movw	r2, #273	; 0x111
 8001ba2:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bb2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001bb6:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bc4:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bcc:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <MX_FDCAN1_Init+0x164>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	24000334 	.word	0x24000334
 8001be4:	4000a000 	.word	0x4000a000
 8001be8:	240005d0 	.word	0x240005d0
 8001bec:	240005f0 	.word	0x240005f0

08001bf0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_I2C4_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <MX_I2C4_Init+0x7c>)
 8001bfe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c2c:	f001 fdb4 	bl	8003798 <HAL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001c36:	f000 f9fd 	bl	8002034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c3e:	f001 fe3b 	bl	80038b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f9f4 	bl	8002034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2C4_Init+0x74>)
 8001c50:	f001 fe7d 	bl	800394e <HAL_I2CEx_ConfigDigitalFilter>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f000 f9eb 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	240003d4 	.word	0x240003d4
 8001c68:	58001c00 	.word	0x58001c00
 8001c6c:	00404c74 	.word	0x00404c74

08001c70 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <MX_SPI5_Init+0xa8>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c80:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001c9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001ca4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001ca8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_SPI5_Init+0xa4>)
 8001d02:	f004 f9ed 	bl	80060e0 <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001d0c:	f000 f992 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24000420 	.word	0x24000420
 8001d18:	40015000 	.word	0x40015000

08001d1c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b096      	sub	sp, #88	; 0x58
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	222c      	movs	r2, #44	; 0x2c
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fb37 	bl	80093bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d50:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <MX_TIM15_Init+0x108>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 74;
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d56:	224a      	movs	r2, #74	; 0x4a
 8001d58:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d62:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d66:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001d7a:	4829      	ldr	r0, [pc, #164]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d7c:	f005 f955 	bl	800702a <HAL_TIM_PWM_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f000 f955 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	4619      	mov	r1, r3
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001d9a:	f006 f8a7 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f000 f946 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da8:	2360      	movs	r3, #96	; 0x60
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4814      	ldr	r0, [pc, #80]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001dce:	f005 fbb1 	bl	8007534 <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001dd8:	f000 f92c 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001e04:	f006 f900 	bl	8008008 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001e0e:	f000 f911 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <MX_TIM15_Init+0x104>)
 8001e14:	f000 faa6 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8001e18:	bf00      	nop
 8001e1a:	3758      	adds	r7, #88	; 0x58
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	240004a8 	.word	0x240004a8
 8001e24:	40014000 	.word	0x40014000

08001e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e2e:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <MX_USART3_UART_Init+0x94>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e70:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e72:	f006 f965 	bl	8008140 <HAL_UART_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e7c:	f000 f8da 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e84:	f007 f998 	bl	80091b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e8e:	f000 f8d1 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001e96:	f007 f9cd 	bl	8009234 <HAL_UARTEx_SetRxFifoThreshold>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f000 f8c8 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_USART3_UART_Init+0x90>)
 8001ea6:	f007 f94e 	bl	8009146 <HAL_UARTEx_DisableFifoMode>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001eb0:	f000 f8c0 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	24000540 	.word	0x24000540
 8001ebc:	40004800 	.word	0x40004800

08001ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <MX_GPIO_Init+0x164>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <MX_GPIO_Init+0x164>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <MX_GPIO_Init+0x164>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <MX_GPIO_Init+0x164>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	4a4a      	ldr	r2, [pc, #296]	; (8002024 <MX_GPIO_Init+0x164>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b40      	ldr	r3, [pc, #256]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	4a33      	ldr	r2, [pc, #204]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <MX_GPIO_Init+0x164>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2148      	movs	r1, #72	; 0x48
 8001f8e:	4826      	ldr	r0, [pc, #152]	; (8002028 <MX_GPIO_Init+0x168>)
 8001f90:	f001 fbba 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f244 0101 	movw	r1, #16385	; 0x4001
 8001f9a:	4824      	ldr	r0, [pc, #144]	; (800202c <MX_GPIO_Init+0x16c>)
 8001f9c:	f001 fbb4 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nrf24_CE_Pin|nrf24_CSN_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	21c0      	movs	r1, #192	; 0xc0
 8001fa4:	4822      	ldr	r0, [pc, #136]	; (8002030 <MX_GPIO_Init+0x170>)
 8001fa6:	f001 fbaf 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = LLED_Pin|RLED_Pin;
 8001faa:	2348      	movs	r3, #72	; 0x48
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4819      	ldr	r0, [pc, #100]	; (8002028 <MX_GPIO_Init+0x168>)
 8001fc2:	f001 f9f1 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4815      	ldr	r0, [pc, #84]	; (8002030 <MX_GPIO_Init+0x170>)
 8001fdc:	f001 f9e4 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001fe0:	f244 0301 	movw	r3, #16385	; 0x4001
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_GPIO_Init+0x16c>)
 8001ffa:	f001 f9d5 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf24_CE_Pin nrf24_CSN_Pin */
  GPIO_InitStruct.Pin = nrf24_CE_Pin|nrf24_CSN_Pin;
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <MX_GPIO_Init+0x170>)
 8002016:	f001 f9c7 	bl	80033a8 <HAL_GPIO_Init>

}
 800201a:	bf00      	nop
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58024400 	.word	0x58024400
 8002028:	58021000 	.word	0x58021000
 800202c:	58020400 	.word	0x58020400
 8002030:	58020800 	.word	0x58020800

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	e7fe      	b.n	800203c <Error_Handler+0x8>
	...

08002040 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002048:	1d39      	adds	r1, r7, #4
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	2201      	movs	r2, #1
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <__io_putchar+0x20>)
 8002052:	f006 f8c5 	bl	80081e0 <HAL_UART_Transmit>
  return ch;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000540 	.word	0x24000540

08002064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_MspInit+0x30>)
 800206c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002070:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_MspInit+0x30>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_MspInit+0x30>)
 800207c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58024400 	.word	0x58024400

08002098 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0b8      	sub	sp, #224	; 0xe0
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	22bc      	movs	r2, #188	; 0xbc
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f007 f97f 	bl	80093bc <memset>
  if(hfdcan->Instance==FDCAN1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_FDCAN_MspInit+0xc0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d142      	bne.n	800214e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fc99 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80020e4:	f7ff ffa6 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 80020ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 80020fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 800210e:	f043 0308 	orr.w	r3, r3, #8
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_FDCAN_MspInit+0xc4>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002124:	2303      	movs	r3, #3
 8002126:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800213c:	2309      	movs	r3, #9
 800213e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002142:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_FDCAN_MspInit+0xc8>)
 800214a:	f001 f92d 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	37e0      	adds	r7, #224	; 0xe0
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	4000a000 	.word	0x4000a000
 800215c:	58024400 	.word	0x58024400
 8002160:	58020c00 	.word	0x58020c00

08002164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0b8      	sub	sp, #224	; 0xe0
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	22bc      	movs	r2, #188	; 0xbc
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f007 f919 	bl	80093bc <memset>
  if(hi2c->Instance==I2C4)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <HAL_I2C_MspInit+0xe4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d154      	bne.n	800223e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002194:	2310      	movs	r3, #16
 8002196:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002198:	2304      	movs	r3, #4
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 800219c:	2378      	movs	r3, #120	; 0x78
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 80021a8:	230c      	movs	r3, #12
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80021ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 80021ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fc22 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 80021d2:	f7ff ff2f 	bl	8002034 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_I2C_MspInit+0xe8>)
 80021d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_I2C_MspInit+0xe8>)
 80021de:	f043 0320 	orr.w	r3, r3, #32
 80021e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_I2C_MspInit+0xe8>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fc:	2312      	movs	r3, #18
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800220e:	2304      	movs	r3, #4
 8002210:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002214:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002218:	4619      	mov	r1, r3
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <HAL_I2C_MspInit+0xec>)
 800221c:	f001 f8c4 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_I2C_MspInit+0xe8>)
 8002222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_I2C_MspInit+0xe8>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_I2C_MspInit+0xe8>)
 8002232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800223e:	bf00      	nop
 8002240:	37e0      	adds	r7, #224	; 0xe0
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58001c00 	.word	0x58001c00
 800224c:	58024400 	.word	0x58024400
 8002250:	58021400 	.word	0x58021400

08002254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0b8      	sub	sp, #224	; 0xe0
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	22bc      	movs	r2, #188	; 0xbc
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f007 f8a1 	bl	80093bc <memset>
  if(hspi->Instance==SPI5)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a25      	ldr	r2, [pc, #148]	; (8002314 <HAL_SPI_MspInit+0xc0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d143      	bne.n	800230c <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002288:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 800228a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800228e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fbbb 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80022a0:	f7ff fec8 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_SPI_MspInit+0xc4>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022e0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022fa:	2305      	movs	r3, #5
 80022fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002300:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002304:	4619      	mov	r1, r3
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <HAL_SPI_MspInit+0xc8>)
 8002308:	f001 f84e 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	37e0      	adds	r7, #224	; 0xe0
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40015000 	.word	0x40015000
 8002318:	58024400 	.word	0x58024400
 800231c:	58021400 	.word	0x58021400

08002320 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_TIM_PWM_MspInit+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_TIM_PWM_MspInit+0x40>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_TIM_PWM_MspInit+0x40>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_TIM_PWM_MspInit+0x40>)
 8002344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40014000 	.word	0x40014000
 8002360:	58024400 	.word	0x58024400

08002364 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_MspPostInit+0x68>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11e      	bne.n	80023c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_TIM_MspPostInit+0x6c>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023a4:	2320      	movs	r3, #32
 80023a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80023b4:	2304      	movs	r3, #4
 80023b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_TIM_MspPostInit+0x70>)
 80023c0:	f000 fff2 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40014000 	.word	0x40014000
 80023d0:	58024400 	.word	0x58024400
 80023d4:	58021000 	.word	0x58021000

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0b8      	sub	sp, #224	; 0xe0
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	22bc      	movs	r2, #188	; 0xbc
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f006 ffdf 	bl	80093bc <memset>
  if(huart->Instance==USART3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_UART_MspInit+0xc0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d142      	bne.n	800248e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fafa 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002422:	f7ff fe07 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_UART_MspInit+0xc4>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_UART_MspInit+0xc4>)
 800242e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_UART_MspInit+0xc4>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_UART_MspInit+0xc4>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	4a14      	ldr	r2, [pc, #80]	; (800249c <HAL_UART_MspInit+0xc4>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_UART_MspInit+0xc4>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002466:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800247c:	2307      	movs	r3, #7
 800247e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002482:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 800248a:	f000 ff8d 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	37e0      	adds	r7, #224	; 0xe0
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40004800 	.word	0x40004800
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020c00 	.word	0x58020c00

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <NMI_Handler+0x4>

080024aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler+0x4>

080024b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <BusFault_Handler+0x4>

080024bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <UsageFault_Handler+0x4>

080024c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b5b0      	push	{r4, r5, r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f000 f97a 	bl	80027e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  cntMilisec++;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Handler+0x20>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	1c54      	adds	r4, r2, #1
 80024fc:	f143 0500 	adc.w	r5, r3, #0
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <SysTick_Handler+0x20>)
 8002502:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bdb0      	pop	{r4, r5, r7, pc}
 800250a:	bf00      	nop
 800250c:	24000618 	.word	0x24000618

08002510 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <TIM15_IRQHandler+0x10>)
 8002516:	f004 feed 	bl	80072f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	240004a8 	.word	0x240004a8

08002524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_kill>:

int _kill(int pid, int sig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253e:	f006 ff05 	bl	800934c <__errno>
 8002542:	4603      	mov	r3, r0
 8002544:	2216      	movs	r2, #22
 8002546:	601a      	str	r2, [r3, #0]
	return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_exit>:

void _exit (int status)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffe7 	bl	8002534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002566:	e7fe      	b.n	8002566 <_exit+0x12>

08002568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e00a      	b.n	8002590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800257a:	f3af 8000 	nop.w
 800257e:	4601      	mov	r1, r0
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	b2ca      	uxtb	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	dbf0      	blt.n	800257a <_read+0x12>
	}

return len;
 8002598:	687b      	ldr	r3, [r7, #4]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e009      	b.n	80025c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd3f 	bl	8002040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbf1      	blt.n	80025b4 <_write+0x12>
	}
	return len;
 80025d0:	687b      	ldr	r3, [r7, #4]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_close>:

int _close(int file)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	return -1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002602:	605a      	str	r2, [r3, #4]
	return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_isatty>:

int _isatty(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <_sbrk+0x5c>)
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <_sbrk+0x60>)
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <_sbrk+0x64>)
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <_sbrk+0x68>)
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d207      	bcs.n	8002684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002674:	f006 fe6a 	bl	800934c <__errno>
 8002678:	4603      	mov	r3, r0
 800267a:	220c      	movs	r2, #12
 800267c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e009      	b.n	8002698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <_sbrk+0x64>)
 8002694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	24080000 	.word	0x24080000
 80026a4:	00000400 	.word	0x00000400
 80026a8:	24000620 	.word	0x24000620
 80026ac:	24000638 	.word	0x24000638

080026b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b4:	f7fd ffee 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	; (80026f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	; (80026fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f006 fe3b 	bl	8009358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7ff f845 	bl	8001770 <main>
  bx  lr
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026f0:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80026f4:	0800ca0c 	.word	0x0800ca0c
  ldr r2, =_sbss
 80026f8:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80026fc:	24000638 	.word	0x24000638

08002700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC3_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270a:	2003      	movs	r0, #3
 800270c:	f000 f96e 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002710:	f001 ffa8 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_Init+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4913      	ldr	r1, [pc, #76]	; (8002770 <HAL_Init+0x6c>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_Init+0x68>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_Init+0x6c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_Init+0x70>)
 8002746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_Init+0x74>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274e:	200f      	movs	r0, #15
 8002750:	f000 f814 	bl	800277c <HAL_InitTick>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e002      	b.n	8002764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800275e:	f7ff fc81 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	58024400 	.word	0x58024400
 8002770:	0800c5d8 	.word	0x0800c5d8
 8002774:	24000004 	.word	0x24000004
 8002778:	24000000 	.word	0x24000000

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_InitTick+0x60>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_InitTick+0x64>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_InitTick+0x60>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279e:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f945 	bl	8002a36 <HAL_SYSTICK_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00e      	b.n	80027d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	d80a      	bhi.n	80027d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027bc:	2200      	movs	r2, #0
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f000 f91d 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c8:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <HAL_InitTick+0x68>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	24000014 	.word	0x24000014
 80027e0:	24000000 	.word	0x24000000
 80027e4:	24000010 	.word	0x24000010

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	24000014 	.word	0x24000014
 800280c:	24000624 	.word	0x24000624

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	24000624 	.word	0x24000624

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff ffee 	bl	8002810 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffde 	bl	8002810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	24000014 	.word	0x24000014

08002870 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_GetREVID+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0c1b      	lsrs	r3, r3, #16
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	5c001000 	.word	0x5c001000

08002888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00
 80028cc:	05fa0000 	.word	0x05fa0000

080028d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_GetPriorityGrouping+0x18>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	f003 0307 	and.w	r3, r3, #7
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff47 	bl	8002888 <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff5e 	bl	80028d0 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff90 	bl	8002940 <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5f 	bl	80028ec <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffb2 	bl	80029a8 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b098      	sub	sp, #96	; 0x60
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002a58:	4a84      	ldr	r2, [pc, #528]	; (8002c6c <HAL_FDCAN_Init+0x21c>)
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4611      	mov	r1, r2
 8002a60:	224c      	movs	r2, #76	; 0x4c
 8002a62:	4618      	mov	r0, r3
 8002a64:	f006 fc9c 	bl	80093a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1c6      	b.n	8002e00 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7e      	ldr	r2, [pc, #504]	; (8002c70 <HAL_FDCAN_Init+0x220>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d106      	bne.n	8002a8a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fafa 	bl	8002098 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab4:	f7ff feac 	bl	8002810 <HAL_GetTick>
 8002ab8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aba:	e014      	b.n	8002ae6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002abc:	f7ff fea8 	bl	8002810 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b0a      	cmp	r3, #10
 8002ac8:	d90d      	bls.n	8002ae6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e18c      	b.n	8002e00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d0e3      	beq.n	8002abc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b04:	f7ff fe84 	bl	8002810 <HAL_GetTick>
 8002b08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b0a:	e014      	b.n	8002b36 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b0c:	f7ff fe80 	bl	8002810 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d90d      	bls.n	8002b36 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e164      	b.n	8002e00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0e3      	beq.n	8002b0c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0202 	orr.w	r2, r2, #2
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7c1b      	ldrb	r3, [r3, #16]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	619a      	str	r2, [r3, #24]
 8002b6c:	e007      	b.n	8002b7e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7c5b      	ldrb	r3, [r3, #17]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e007      	b.n	8002ba8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ba6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c9b      	ldrb	r3, [r3, #18]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bf6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0210 	bic.w	r2, r2, #16
 8002c06:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0204 	orr.w	r2, r2, #4
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e030      	b.n	8002c84 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02c      	beq.n	8002c84 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d020      	beq.n	8002c74 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c40:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0210 	orr.w	r2, r2, #16
 8002c50:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d114      	bne.n	8002c84 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0220 	orr.w	r2, r2, #32
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	e00b      	b.n	8002c84 <HAL_FDCAN_Init+0x234>
 8002c6c:	0800c58c 	.word	0x0800c58c
 8002c70:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c94:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb8:	d115      	bne.n	8002ce6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cc8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002cd2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002ce2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ce4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d011      	beq.n	8002d36 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d1a:	f023 0107 	bic.w	r1, r3, #7
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	443b      	add	r3, r7
 8002d28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d011      	beq.n	8002d62 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d46:	f023 0107 	bic.w	r1, r3, #7
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3360      	adds	r3, #96	; 0x60
 8002d52:	443b      	add	r3, r7
 8002d54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d72:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	443b      	add	r3, r7
 8002d80:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d84:	011a      	lsls	r2, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002da0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	3360      	adds	r3, #96	; 0x60
 8002dac:	443b      	add	r3, r7
 8002dae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_FDCAN_Init+0x3b8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d107      	bne.n	8002dd8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f022 0203 	bic.w	r2, r2, #3
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f953 	bl	800309c <FDCAN_CalcultateRamBlockAddresses>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002dfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3760      	adds	r7, #96	; 0x60
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	4000a000 	.word	0x4000a000

08002e0c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e1c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d002      	beq.n	8002e2a <HAL_FDCAN_ConfigFilter+0x1e>
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d157      	bne.n	8002eda <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d12b      	bne.n	8002e8a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b07      	cmp	r3, #7
 8002e38:	d10d      	bne.n	8002e56 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e46:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e4c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002e4e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e00e      	b.n	8002e74 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e62:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002e6a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e025      	b.n	8002ed6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	075a      	lsls	r2, r3, #29
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d103      	bne.n	8002ea8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e006      	b.n	8002eb6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	079a      	lsls	r2, r3, #30
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e008      	b.n	8002eec <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d110      	bne.n	8002f34 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f1a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002f20:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e008      	b.n	8002f46 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d111      	bne.n	8002f8a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e008      	b.n	8002f9c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002fba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d002      	beq.n	8002fc8 <HAL_FDCAN_ActivateNotification+0x20>
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d155      	bne.n	8003074 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fe6:	e014      	b.n	8003012 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d108      	bne.n	800300a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0202 	orr.w	r2, r2, #2
 8003006:	65da      	str	r2, [r3, #92]	; 0x5c
 8003008:	e003      	b.n	8003012 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2203      	movs	r2, #3
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	430a      	orrs	r2, r1
 800302c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	430a      	orrs	r2, r1
 800304a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_FDCAN_ActivateNotification+0xec>)
 8003058:	4013      	ands	r3, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	430b      	orrs	r3, r1
 8003060:	6553      	str	r3, [r2, #84]	; 0x54
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0f9b      	lsrs	r3, r3, #30
 800306a:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_FDCAN_ActivateNotification+0xf0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e008      	b.n	8003086 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	3fcfffff 	.word	0x3fcfffff
 8003098:	4000a800 	.word	0x4000a800

0800309c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80030b2:	4ba7      	ldr	r3, [pc, #668]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	0091      	lsls	r1, r2, #2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	430b      	orrs	r3, r1
 80030c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4413      	add	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030f2:	4b97      	ldr	r3, [pc, #604]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	0091      	lsls	r1, r2, #2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	430b      	orrs	r3, r1
 8003100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	041a      	lsls	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003134:	4b86      	ldr	r3, [pc, #536]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	0091      	lsls	r1, r2, #2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	430b      	orrs	r3, r1
 8003142:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800314e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	041a      	lsls	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800317c:	4b74      	ldr	r3, [pc, #464]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	0091      	lsls	r1, r2, #2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003196:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4413      	add	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80031c4:	4b62      	ldr	r3, [pc, #392]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	0091      	lsls	r1, r2, #2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4413      	add	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80031f0:	4b57      	ldr	r3, [pc, #348]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	0091      	lsls	r1, r2, #2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800320a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	041a      	lsls	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	4413      	add	r3, r2
 8003228:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	0091      	lsls	r1, r2, #2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	430b      	orrs	r3, r1
 8003240:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800324c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003268:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	061a      	lsls	r2, r3, #24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003282:	4413      	add	r3, r2
 8003284:	009a      	lsls	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	4a04      	ldr	r2, [pc, #16]	; (8003358 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d915      	bls.n	8003378 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800334c:	e006      	b.n	800335c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800334e:	bf00      	nop
 8003350:	ffff0003 	.word	0xffff0003
 8003354:	10002b00 	.word	0x10002b00
 8003358:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e010      	b.n	800339a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e005      	b.n	800338c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3304      	adds	r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d3f3      	bcc.n	8003380 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_GPIO_Init+0x234>)
 80033b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ba:	e194      	b.n	80036e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8186 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_GPIO_Init+0x44>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d130      	bne.n	800344e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003422:	2201      	movs	r2, #1
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0201 	and.w	r2, r3, #1
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b03      	cmp	r3, #3
 8003458:	d017      	beq.n	800348a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d123      	bne.n	80034de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0203 	and.w	r2, r3, #3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80e0 	beq.w	80036e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_GPIO_Init+0x238>)
 8003532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_GPIO_Init+0x23c>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_GPIO_Init+0x240>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d052      	beq.n	8003610 <HAL_GPIO_Init+0x268>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_GPIO_Init+0x244>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_GPIO_Init+0x248>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <HAL_GPIO_Init+0x22a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_GPIO_Init+0x24c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d025      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x250>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_GPIO_Init+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_GPIO_Init+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_GPIO_Init+0x25c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_GPIO_Init+0x260>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_GPIO_Init+0x264>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x20e>
 80035b2:	2309      	movs	r3, #9
 80035b4:	e02d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035b6:	230a      	movs	r3, #10
 80035b8:	e02b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e029      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035be:	2307      	movs	r3, #7
 80035c0:	e027      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e025      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e023      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e021      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e01f      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e01d      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01b      	b.n	8003612 <HAL_GPIO_Init+0x26a>
 80035da:	bf00      	nop
 80035dc:	58000080 	.word	0x58000080
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58000400 	.word	0x58000400
 80035e8:	58020000 	.word	0x58020000
 80035ec:	58020400 	.word	0x58020400
 80035f0:	58020800 	.word	0x58020800
 80035f4:	58020c00 	.word	0x58020c00
 80035f8:	58021000 	.word	0x58021000
 80035fc:	58021400 	.word	0x58021400
 8003600:	58021800 	.word	0x58021800
 8003604:	58021c00 	.word	0x58021c00
 8003608:	58022000 	.word	0x58022000
 800360c:	58022400 	.word	0x58022400
 8003610:	2300      	movs	r3, #0
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003622:	4938      	ldr	r1, [pc, #224]	; (8003704 <HAL_GPIO_Init+0x35c>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f ae63 	bne.w	80033bc <HAL_GPIO_Init+0x14>
  }
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	3724      	adds	r7, #36	; 0x24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	58000400 	.word	0x58000400

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003724:	e003      	b.n	800372e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_HSEM_FastTake+0x2c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3320      	adds	r3, #32
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <HAL_HSEM_FastTake+0x30>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	58026400 	.word	0x58026400
 800376c:	80000300 	.word	0x80000300

08003770 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800377a:	4906      	ldr	r1, [pc, #24]	; (8003794 <HAL_HSEM_Release+0x24>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	58026400 	.word	0x58026400

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07f      	b.n	80038aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fcd0 	bl	8002164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	e006      	b.n	8003820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800381e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d104      	bne.n	8003832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_I2C_Init+0x11c>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	02008000 	.word	0x02008000

080038b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d138      	bne.n	8003940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038d8:	2302      	movs	r3, #2
 80038da:	e032      	b.n	8003942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b20      	cmp	r3, #32
 8003962:	d139      	bne.n	80039d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800396e:	2302      	movs	r3, #2
 8003970:	e033      	b.n	80039da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2224      	movs	r2, #36	; 0x24
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d00a      	beq.n	8003a12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039fc:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e040      	b.n	8003a90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e03e      	b.n	8003a90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a1a:	491f      	ldr	r1, [pc, #124]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a22:	f7fe fef5 	bl	8002810 <HAL_GetTick>
 8003a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a28:	e009      	b.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a2a:	f7fe fef1 	bl	8002810 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a38:	d901      	bls.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e028      	b.n	8003a90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b1e      	cmp	r3, #30
 8003a50:	d008      	beq.n	8003a64 <HAL_PWREx_ConfigSupply+0x7c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b2e      	cmp	r3, #46	; 0x2e
 8003a56:	d005      	beq.n	8003a64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b1d      	cmp	r3, #29
 8003a5c:	d002      	beq.n	8003a64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b2d      	cmp	r3, #45	; 0x2d
 8003a62:	d114      	bne.n	8003a8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a64:	f7fe fed4 	bl	8002810 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a6a:	e009      	b.n	8003a80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a6c:	f7fe fed0 	bl	8002810 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7a:	d901      	bls.n	8003a80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	58024800 	.word	0x58024800

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f000 bc1d 	b.w	80042ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8087 	beq.w	8003bcc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003abe:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac8:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x48>
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b18      	cmp	r3, #24
 8003ad8:	d110      	bne.n	8003afc <HAL_RCC_OscConfig+0x60>
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d10b      	bne.n	8003afc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d06c      	beq.n	8003bca <HAL_RCC_OscConfig+0x12e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d168      	bne.n	8003bca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e3f6      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d106      	bne.n	8003b14 <HAL_RCC_OscConfig+0x78>
 8003b06:	4b87      	ldr	r3, [pc, #540]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a86      	ldr	r2, [pc, #536]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e02e      	b.n	8003b72 <HAL_RCC_OscConfig+0xd6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x9a>
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e01d      	b.n	8003b72 <HAL_RCC_OscConfig+0xd6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0xbe>
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a74      	ldr	r2, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0xd6>
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a71      	ldr	r2, [pc, #452]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fe49 	bl	8002810 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b82:	f7fe fe45 	bl	8002810 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	; 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e3aa      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b94:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0xe6>
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fe35 	bl	8002810 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003baa:	f7fe fe31 	bl	8002810 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b64      	cmp	r3, #100	; 0x64
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e396      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x10e>
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80cb 	beq.w	8003d70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bda:	4b52      	ldr	r3, [pc, #328]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be4:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_RCC_OscConfig+0x164>
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b18      	cmp	r3, #24
 8003bf4:	d156      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x208>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d151      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x17c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e368      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 0219 	bic.w	r2, r3, #25
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	493f      	ldr	r1, [pc, #252]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c2a:	f7fe fdf1 	bl	8002810 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe fded 	bl	8002810 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e352      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	f7fe fe0e 	bl	8002870 <HAL_GetREVID>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d817      	bhi.n	8003c8e <HAL_RCC_OscConfig+0x1f2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d108      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1dc>
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	e07b      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	4927      	ldr	r1, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	e070      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	4921      	ldr	r1, [pc, #132]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca2:	e065      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d048      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0219 	bic.w	r2, r3, #25
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	491a      	ldr	r1, [pc, #104]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fda7 	bl	8002810 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fda3 	bl	8002810 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e308      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	f7fe fdc4 	bl	8002870 <HAL_GetREVID>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d81a      	bhi.n	8003d28 <HAL_RCC_OscConfig+0x28c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x270>
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	6053      	str	r3, [r2, #4]
 8003d0a:	e031      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	4902      	ldr	r1, [pc, #8]	; (8003d24 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	e026      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	4b9a      	ldr	r3, [pc, #616]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	4997      	ldr	r1, [pc, #604]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	e018      	b.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b95      	ldr	r3, [pc, #596]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a94      	ldr	r2, [pc, #592]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fd61 	bl	8002810 <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe fd5d 	bl	8002810 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e2c2      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d64:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a9 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7e:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d88:	4b82      	ldr	r3, [pc, #520]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d007      	beq.n	8003da4 <HAL_RCC_OscConfig+0x308>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b18      	cmp	r3, #24
 8003d98:	d13a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x374>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d135      	bne.n	8003e10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003da4:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_OscConfig+0x320>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e296      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dbc:	f7fe fd58 	bl	8002870 <HAL_GetREVID>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d817      	bhi.n	8003dfa <HAL_RCC_OscConfig+0x35e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d108      	bne.n	8003de4 <HAL_RCC_OscConfig+0x348>
 8003dd2:	4b70      	ldr	r3, [pc, #448]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dda:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003de2:	e075      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003de4:	4b6b      	ldr	r3, [pc, #428]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	069b      	lsls	r3, r3, #26
 8003df2:	4968      	ldr	r1, [pc, #416]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003df8:	e06a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dfa:	4b66      	ldr	r3, [pc, #408]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	4962      	ldr	r1, [pc, #392]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e0e:	e05f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d042      	beq.n	8003e9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5d      	ldr	r2, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fe fcf4 	bl	8002810 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e2c:	f7fe fcf0 	bl	8002810 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e255      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e3e:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e4a:	f7fe fd11 	bl	8002870 <HAL_GetREVID>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d817      	bhi.n	8003e88 <HAL_RCC_OscConfig+0x3ec>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d108      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3d6>
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e68:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e6e:	6053      	str	r3, [r2, #4]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
 8003e72:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	069b      	lsls	r3, r3, #26
 8003e80:	4944      	ldr	r1, [pc, #272]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
 8003e86:	e023      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	493f      	ldr	r1, [pc, #252]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
 8003e9c:	e018      	b.n	8003ed0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fe fcb1 	bl	8002810 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fcad 	bl	8002810 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e212      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ec4:	4b33      	ldr	r3, [pc, #204]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d036      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d019      	beq.n	8003f18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fc8e 	bl	8002810 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fc8a 	bl	8002810 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1ef      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x45c>
 8003f16:	e018      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe fc74 	bl	8002810 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fc70 	bl	8002810 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1d5      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d039      	beq.n	8003fca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fc51 	bl	8002810 <HAL_GetTick>
 8003f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f72:	f7fe fc4d 	bl	8002810 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1b2      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_RCC_OscConfig+0x4f8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4d6>
 8003f90:	e01b      	b.n	8003fca <HAL_RCC_OscConfig+0x52e>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f98:	4b9b      	ldr	r3, [pc, #620]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a9a      	ldr	r2, [pc, #616]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fc34 	bl	8002810 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fac:	f7fe fc30 	bl	8002810 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e195      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fbe:	4b92      	ldr	r3, [pc, #584]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8081 	beq.w	80040da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fd8:	4b8c      	ldr	r3, [pc, #560]	; (800420c <HAL_RCC_OscConfig+0x770>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a8b      	ldr	r2, [pc, #556]	; (800420c <HAL_RCC_OscConfig+0x770>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe fc14 	bl	8002810 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fe fc10 	bl	8002810 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e175      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffe:	4b83      	ldr	r3, [pc, #524]	; (800420c <HAL_RCC_OscConfig+0x770>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d106      	bne.n	8004020 <HAL_RCC_OscConfig+0x584>
 8004012:	4b7d      	ldr	r3, [pc, #500]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a7c      	ldr	r2, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
 800401e:	e02d      	b.n	800407c <HAL_RCC_OscConfig+0x5e0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10c      	bne.n	8004042 <HAL_RCC_OscConfig+0x5a6>
 8004028:	4b77      	ldr	r3, [pc, #476]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a76      	ldr	r2, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	4b74      	ldr	r3, [pc, #464]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a73      	ldr	r2, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	e01c      	b.n	800407c <HAL_RCC_OscConfig+0x5e0>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b05      	cmp	r3, #5
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x5c8>
 800404a:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0x5e0>
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a67      	ldr	r2, [pc, #412]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a64      	ldr	r2, [pc, #400]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fe fbc4 	bl	8002810 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fe fbc0 	bl	8002810 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e123      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ee      	beq.n	800408c <HAL_RCC_OscConfig+0x5f0>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fe fbae 	bl	8002810 <HAL_GetTick>
 80040b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fe fbaa 	bl	8002810 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e10d      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ce:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ee      	bne.n	80040b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8102 	beq.w	80042e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ec:	2b18      	cmp	r3, #24
 80040ee:	f000 80bd 	beq.w	800426c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	f040 809e 	bne.w	8004238 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a41      	ldr	r2, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe fb82 	bl	8002810 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004110:	f7fe fb7e 	bl	8002810 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0e3      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004132:	4b37      	ldr	r3, [pc, #220]	; (8004210 <HAL_RCC_OscConfig+0x774>)
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	430a      	orrs	r2, r1
 8004142:	4931      	ldr	r1, [pc, #196]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	628b      	str	r3, [r1, #40]	; 0x28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	3b01      	subs	r3, #1
 800414e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	3b01      	subs	r3, #1
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	b29b      	uxth	r3, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	3b01      	subs	r3, #1
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004178:	4923      	ldr	r1, [pc, #140]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_OscConfig+0x778>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004196:	00d2      	lsls	r2, r2, #3
 8004198:	491b      	ldr	r1, [pc, #108]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	f023 020c 	bic.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4917      	ldr	r1, [pc, #92]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	f023 0202 	bic.w	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	4912      	ldr	r1, [pc, #72]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a07      	ldr	r2, [pc, #28]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_RCC_OscConfig+0x76c>)
 80041f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe fb07 	bl	8002810 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004204:	e011      	b.n	800422a <HAL_RCC_OscConfig+0x78e>
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	58024800 	.word	0x58024800
 8004210:	fffffc0c 	.word	0xfffffc0c
 8004214:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004218:	f7fe fafa 	bl	8002810 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e05f      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x77c>
 8004236:	e057      	b.n	80042e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fae4 	bl	8002810 <HAL_GetTick>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fae0 	bl	8002810 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e045      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800425e:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x7b0>
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_OscConfig+0x858>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b01      	cmp	r3, #1
 800427e:	d031      	beq.n	80042e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f003 0203 	and.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d12a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d122      	bne.n	80042e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d11a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d111      	bne.n	80042e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	; 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400

080042f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e19c      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b8a      	ldr	r3, [pc, #552]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b87      	ldr	r3, [pc, #540]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	4985      	ldr	r1, [pc, #532]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b83      	ldr	r3, [pc, #524]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e184      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	4b7b      	ldr	r3, [pc, #492]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004354:	429a      	cmp	r2, r3
 8004356:	d908      	bls.n	800436a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004358:	4b78      	ldr	r3, [pc, #480]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	4975      	ldr	r1, [pc, #468]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004366:	4313      	orrs	r3, r2
 8004368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	4b70      	ldr	r3, [pc, #448]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004382:	429a      	cmp	r2, r3
 8004384:	d908      	bls.n	8004398 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004386:	4b6d      	ldr	r3, [pc, #436]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	496a      	ldr	r1, [pc, #424]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004394:	4313      	orrs	r3, r2
 8004396:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d010      	beq.n	80043c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	4b64      	ldr	r3, [pc, #400]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d908      	bls.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	495e      	ldr	r1, [pc, #376]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043de:	429a      	cmp	r2, r3
 80043e0:	d908      	bls.n	80043f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043e2:	4b56      	ldr	r3, [pc, #344]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4953      	ldr	r1, [pc, #332]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4b4d      	ldr	r3, [pc, #308]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	429a      	cmp	r2, r3
 800440e:	d908      	bls.n	8004422 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f023 020f 	bic.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4947      	ldr	r1, [pc, #284]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800441e:	4313      	orrs	r3, r2
 8004420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d055      	beq.n	80044da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800442e:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4940      	ldr	r1, [pc, #256]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800443c:	4313      	orrs	r3, r2
 800443e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d107      	bne.n	8004458 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004448:	4b3c      	ldr	r3, [pc, #240]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d121      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0f6      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d115      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0ea      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004478:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0de      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004488:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d6      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004498:	4b28      	ldr	r3, [pc, #160]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f023 0207 	bic.w	r2, r3, #7
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4925      	ldr	r1, [pc, #148]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fe f9b1 	bl	8002810 <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b2:	f7fe f9ad 	bl	8002810 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e0be      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d1eb      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d010      	beq.n	8004508 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d208      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	490e      	ldr	r1, [pc, #56]	; (800453c <HAL_RCC_ClockConfig+0x244>)
 8004504:	4313      	orrs	r3, r2
 8004506:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d214      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 020f 	bic.w	r2, r3, #15
 800451e:	4906      	ldr	r1, [pc, #24]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCC_ClockConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e086      	b.n	8004646 <HAL_RCC_ClockConfig+0x34e>
 8004538:	52002000 	.word	0x52002000
 800453c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004558:	429a      	cmp	r2, r3
 800455a:	d208      	bcs.n	800456e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800455c:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4939      	ldr	r1, [pc, #228]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 800456a:	4313      	orrs	r3, r2
 800456c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	4b34      	ldr	r3, [pc, #208]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004586:	429a      	cmp	r2, r3
 8004588:	d208      	bcs.n	800459c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	492e      	ldr	r1, [pc, #184]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 8004598:	4313      	orrs	r3, r2
 800459a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d208      	bcs.n	80045ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4922      	ldr	r1, [pc, #136]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d208      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4917      	ldr	r1, [pc, #92]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045f8:	f000 f834 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	4912      	ldr	r1, [pc, #72]	; (8004654 <HAL_RCC_ClockConfig+0x35c>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004616:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_RCC_ClockConfig+0x358>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_RCC_ClockConfig+0x35c>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x360>)
 800462e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HAL_RCC_ClockConfig+0x364>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x368>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f89e 	bl	800277c <HAL_InitTick>
 8004640:	4603      	mov	r3, r0
 8004642:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	58024400 	.word	0x58024400
 8004654:	0800c5d8 	.word	0x0800c5d8
 8004658:	24000004 	.word	0x24000004
 800465c:	24000000 	.word	0x24000000
 8004660:	24000010 	.word	0x24000010

08004664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800466a:	4bb3      	ldr	r3, [pc, #716]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004672:	2b18      	cmp	r3, #24
 8004674:	f200 8155 	bhi.w	8004922 <HAL_RCC_GetSysClockFreq+0x2be>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <HAL_RCC_GetSysClockFreq+0x1c>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046e5 	.word	0x080046e5
 8004684:	08004923 	.word	0x08004923
 8004688:	08004923 	.word	0x08004923
 800468c:	08004923 	.word	0x08004923
 8004690:	08004923 	.word	0x08004923
 8004694:	08004923 	.word	0x08004923
 8004698:	08004923 	.word	0x08004923
 800469c:	08004923 	.word	0x08004923
 80046a0:	0800470b 	.word	0x0800470b
 80046a4:	08004923 	.word	0x08004923
 80046a8:	08004923 	.word	0x08004923
 80046ac:	08004923 	.word	0x08004923
 80046b0:	08004923 	.word	0x08004923
 80046b4:	08004923 	.word	0x08004923
 80046b8:	08004923 	.word	0x08004923
 80046bc:	08004923 	.word	0x08004923
 80046c0:	08004711 	.word	0x08004711
 80046c4:	08004923 	.word	0x08004923
 80046c8:	08004923 	.word	0x08004923
 80046cc:	08004923 	.word	0x08004923
 80046d0:	08004923 	.word	0x08004923
 80046d4:	08004923 	.word	0x08004923
 80046d8:	08004923 	.word	0x08004923
 80046dc:	08004923 	.word	0x08004923
 80046e0:	08004717 	.word	0x08004717
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e4:	4b94      	ldr	r3, [pc, #592]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f0:	4b91      	ldr	r3, [pc, #580]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	4a90      	ldr	r2, [pc, #576]	; (800493c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004702:	e111      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004704:	4b8d      	ldr	r3, [pc, #564]	; (800493c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004706:	61bb      	str	r3, [r7, #24]
    break;
 8004708:	e10e      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800470a:	4b8d      	ldr	r3, [pc, #564]	; (8004940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800470c:	61bb      	str	r3, [r7, #24]
    break;
 800470e:	e10b      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004710:	4b8c      	ldr	r3, [pc, #560]	; (8004944 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004712:	61bb      	str	r3, [r7, #24]
    break;
 8004714:	e108      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004716:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004720:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800472c:	4b82      	ldr	r3, [pc, #520]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004736:	4b80      	ldr	r3, [pc, #512]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	08db      	lsrs	r3, r3, #3
 800473c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80e1 	beq.w	800491c <HAL_RCC_GetSysClockFreq+0x2b8>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b02      	cmp	r3, #2
 800475e:	f000 8083 	beq.w	8004868 <HAL_RCC_GetSysClockFreq+0x204>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b02      	cmp	r3, #2
 8004766:	f200 80a1 	bhi.w	80048ac <HAL_RCC_GetSysClockFreq+0x248>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x114>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d056      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004776:	e099      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004778:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02d      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004784:	4b6c      	ldr	r3, [pc, #432]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	4a6b      	ldr	r2, [pc, #428]	; (800493c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ae:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047be:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047de:	e087      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800494c <HAL_RCC_GetSysClockFreq+0x2e8>
 80047ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	ed97 6a02 	vldr	s12, [r7, #8]
 8004806:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800480a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004822:	e065      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004950 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004846:	ed97 6a02 	vldr	s12, [r7, #8]
 800484a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800484e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004866:	e043      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004954 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488a:	ed97 6a02 	vldr	s12, [r7, #8]
 800488e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048aa:	e021      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004950 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	0a5b      	lsrs	r3, r3, #9
 80048f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fa:	3301      	adds	r3, #1
 80048fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004908:	edd7 6a07 	vldr	s13, [r7, #28]
 800490c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004914:	ee17 3a90 	vmov	r3, s15
 8004918:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800491a:	e005      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
    break;
 8004920:	e002      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004924:	61bb      	str	r3, [r7, #24]
    break;
 8004926:	bf00      	nop
  }

  return sysclockfreq;
 8004928:	69bb      	ldr	r3, [r7, #24]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
 800493c:	03d09000 	.word	0x03d09000
 8004940:	003d0900 	.word	0x003d0900
 8004944:	007a1200 	.word	0x007a1200
 8004948:	46000000 	.word	0x46000000
 800494c:	4c742400 	.word	0x4c742400
 8004950:	4a742400 	.word	0x4a742400
 8004954:	4af42400 	.word	0x4af42400

08004958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800495e:	f7ff fe81 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490f      	ldr	r1, [pc, #60]	; (80049ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	4a09      	ldr	r2, [pc, #36]	; (80049ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004986:	5cd3      	ldrb	r3, [r2, r3]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004994:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004996:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	58024400 	.word	0x58024400
 80049ac:	0800c5d8 	.word	0x0800c5d8
 80049b0:	24000004 	.word	0x24000004
 80049b4:	24000000 	.word	0x24000000

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049bc:	f7ff ffcc 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	0800c5d8 	.word	0x0800c5d8

080049e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049e8:	f7ff ffb6 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	0800c5d8 	.word	0x0800c5d8

08004a10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03f      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a34:	d02a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a3a:	d824      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a40:	d018      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a46:	d81e      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a50:	d007      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a52:	e018      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4aa2      	ldr	r2, [pc, #648]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a60:	e015      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 f9d5 	bl	8005e18 <RCCEx_PLL2_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a72:	e00c      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3324      	adds	r3, #36	; 0x24
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fa7e 	bl	8005f7c <RCCEx_PLL3_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a94:	4b93      	ldr	r3, [pc, #588]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	4990      	ldr	r1, [pc, #576]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8004aa6:	e001      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03d      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d826      	bhi.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004add 	.word	0x08004add
 8004acc:	08004aeb 	.word	0x08004aeb
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b15 	.word	0x08004b15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004adc:	4b81      	ldr	r3, [pc, #516]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	4a80      	ldr	r2, [pc, #512]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e015      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f991 	bl	8005e18 <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004afa:	e00c      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3324      	adds	r3, #36	; 0x24
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fa3a 	bl	8005f7c <RCCEx_PLL3_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e003      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b1c:	4b71      	ldr	r3, [pc, #452]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	f023 0207 	bic.w	r2, r3, #7
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	496e      	ldr	r1, [pc, #440]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b2e:	e001      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d042      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b48:	d02b      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d825      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b50:	2bc0      	cmp	r3, #192	; 0xc0
 8004b52:	d028      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b54:	2bc0      	cmp	r3, #192	; 0xc0
 8004b56:	d821      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d81d      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d007      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b68:	e018      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6a:	4b5e      	ldr	r3, [pc, #376]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a5d      	ldr	r2, [pc, #372]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b76:	e017      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 f94a 	bl	8005e18 <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b88:	e00e      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3324      	adds	r3, #36	; 0x24
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f9f3 	bl	8005f7c <RCCEx_PLL3_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bae:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	494a      	ldr	r1, [pc, #296]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	650b      	str	r3, [r1, #80]	; 0x50
 8004bc0:	e001      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d049      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bdc:	d030      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be2:	d82a      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004be4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004be8:	d02c      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004bea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bee:	d824      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf4:	d018      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfa:	d81e      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c04:	d007      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c06:	e018      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a35      	ldr	r2, [pc, #212]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c14:	e017      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f8fb 	bl	8005e18 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c26:	e00e      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f9a4 	bl	8005f7c <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c5a:	4922      	ldr	r1, [pc, #136]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c7c:	d030      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c82:	d82a      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c88:	d02e      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c8e:	d824      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c94:	d018      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9a:	d81e      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ca6:	e018      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e019      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f8ab 	bl	8005e18 <RCCEx_PLL2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cc6:	e010      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f954 	bl	8005f7c <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd8:	e007      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cde:	e004      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ce4:	58024400 	.word	0x58024400
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cf0:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfe:	4996      	ldr	r1, [pc, #600]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	658b      	str	r3, [r1, #88]	; 0x58
 8004d04:	e001      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d032      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b30      	cmp	r3, #48	; 0x30
 8004d1c:	d01c      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d1e:	2b30      	cmp	r3, #48	; 0x30
 8004d20:	d817      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d00c      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d813      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d10f      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d32:	4b89      	ldr	r3, [pc, #548]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a88      	ldr	r2, [pc, #544]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d3e:	e00e      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	2102      	movs	r1, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f866 	bl	8005e18 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d50:	e005      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d64:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d70:	4979      	ldr	r1, [pc, #484]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d76:	e001      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d047      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d90:	d030      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d96:	d82a      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d9c:	d02c      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da2:	d824      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da8:	d018      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dae:	d81e      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db8:	d007      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004dba:	e018      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dbc:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a65      	ldr	r2, [pc, #404]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dc8:	e017      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f821 	bl	8005e18 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dda:	e00e      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3324      	adds	r3, #36	; 0x24
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 f8ca 	bl	8005f7c <RCCEx_PLL3_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dec:	e005      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
      break;
 8004df2:	e002      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004df4:	bf00      	nop
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e00:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	4952      	ldr	r1, [pc, #328]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	650b      	str	r3, [r1, #80]	; 0x50
 8004e12:	e001      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d049      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e2c:	d02e      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e32:	d828      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e38:	d02a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e3e:	d822      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e44:	d026      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4a:	d81c      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e50:	d010      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d816      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01d      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d111      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 ffd5 	bl	8005e18 <RCCEx_PLL2_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e72:	e012      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3324      	adds	r3, #36	; 0x24
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 f87e 	bl	8005f7c <RCCEx_PLL3_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e84:	e009      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8a:	e006      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e8c:	bf00      	nop
 8004e8e:	e004      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	492a      	ldr	r1, [pc, #168]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04d      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ece:	d02e      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d02a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ee6:	d026      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eec:	d81c      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef8:	d816      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f02:	d111      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 ff84 	bl	8005e18 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 f82d 	bl	8005f7c <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f50:	4901      	ldr	r1, [pc, #4]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	658b      	str	r3, [r1, #88]	; 0x58
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02f      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f74:	d00e      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7a:	d814      	bhi.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f84:	d10f      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4baf      	ldr	r3, [pc, #700]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4aae      	ldr	r2, [pc, #696]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f92:	e00c      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 ff3c 	bl	8005e18 <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fa4:	e003      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb4:	4ba3      	ldr	r3, [pc, #652]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	49a0      	ldr	r1, [pc, #640]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d032      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d81b      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	08004ff9 	.word	0x08004ff9
 8004ff0:	08005007 	.word	0x08005007
 8004ff4:	0800501f 	.word	0x0800501f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff8:	4b92      	ldr	r3, [pc, #584]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a91      	ldr	r2, [pc, #580]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2102      	movs	r1, #2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 ff03 	bl	8005e18 <RCCEx_PLL2_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800501e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005026:	4b87      	ldr	r3, [pc, #540]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	4984      	ldr	r1, [pc, #528]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005034:	4313      	orrs	r3, r2
 8005036:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005038:	e001      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8086 	beq.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7d      	ldr	r2, [pc, #500]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005058:	f7fd fbda 	bl	8002810 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505e:	e009      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fd fbd6 	bl	8002810 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d902      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	75fb      	strb	r3, [r7, #23]
        break;
 8005072:	e005      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005074:	4b74      	ldr	r3, [pc, #464]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0ef      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d166      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005086:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005090:	4053      	eors	r3, r2
 8005092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005096:	2b00      	cmp	r3, #0
 8005098:	d013      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a4:	4b67      	ldr	r3, [pc, #412]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	4a66      	ldr	r2, [pc, #408]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b0:	4b64      	ldr	r3, [pc, #400]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a63      	ldr	r2, [pc, #396]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050bc:	4a61      	ldr	r2, [pc, #388]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050cc:	d115      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fd fb9f 	bl	8002810 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d4:	e00b      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fd fb9b 	bl	8002810 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d902      	bls.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	75fb      	strb	r3, [r7, #23]
            break;
 80050ec:	e005      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ee:	4b55      	ldr	r3, [pc, #340]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ed      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d126      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d10d      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005110:	4b4c      	ldr	r3, [pc, #304]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800511e:	0919      	lsrs	r1, r3, #4
 8005120:	4b4a      	ldr	r3, [pc, #296]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005122:	400b      	ands	r3, r1
 8005124:	4947      	ldr	r1, [pc, #284]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
 800512a:	e005      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800512c:	4b45      	ldr	r3, [pc, #276]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	4a44      	ldr	r2, [pc, #272]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005132:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005136:	6113      	str	r3, [r2, #16]
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800513a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	493f      	ldr	r1, [pc, #252]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005148:	4313      	orrs	r3, r2
 800514a:	670b      	str	r3, [r1, #112]	; 0x70
 800514c:	e004      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	75bb      	strb	r3, [r7, #22]
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8085 	beq.w	8005270 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516a:	2b28      	cmp	r3, #40	; 0x28
 800516c:	d866      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005251 	.word	0x08005251
 8005178:	0800523d 	.word	0x0800523d
 800517c:	0800523d 	.word	0x0800523d
 8005180:	0800523d 	.word	0x0800523d
 8005184:	0800523d 	.word	0x0800523d
 8005188:	0800523d 	.word	0x0800523d
 800518c:	0800523d 	.word	0x0800523d
 8005190:	0800523d 	.word	0x0800523d
 8005194:	08005219 	.word	0x08005219
 8005198:	0800523d 	.word	0x0800523d
 800519c:	0800523d 	.word	0x0800523d
 80051a0:	0800523d 	.word	0x0800523d
 80051a4:	0800523d 	.word	0x0800523d
 80051a8:	0800523d 	.word	0x0800523d
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	0800523d 	.word	0x0800523d
 80051b4:	0800522b 	.word	0x0800522b
 80051b8:	0800523d 	.word	0x0800523d
 80051bc:	0800523d 	.word	0x0800523d
 80051c0:	0800523d 	.word	0x0800523d
 80051c4:	0800523d 	.word	0x0800523d
 80051c8:	0800523d 	.word	0x0800523d
 80051cc:	0800523d 	.word	0x0800523d
 80051d0:	0800523d 	.word	0x0800523d
 80051d4:	08005251 	.word	0x08005251
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	0800523d 	.word	0x0800523d
 80051e0:	0800523d 	.word	0x0800523d
 80051e4:	0800523d 	.word	0x0800523d
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005251 	.word	0x08005251
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	0800523d 	.word	0x0800523d
 8005204:	0800523d 	.word	0x0800523d
 8005208:	0800523d 	.word	0x0800523d
 800520c:	0800523d 	.word	0x0800523d
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005251 	.word	0x08005251
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fdfa 	bl	8005e18 <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005228:	e013      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3324      	adds	r3, #36	; 0x24
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fea3 	bl	8005f7c <RCCEx_PLL3_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800523a:	e00a      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
      break;
 8005240:	e007      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005242:	bf00      	nop
 8005244:	58024400 	.word	0x58024400
 8005248:	58024800 	.word	0x58024800
 800524c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005258:	4b96      	ldr	r3, [pc, #600]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005264:	4993      	ldr	r1, [pc, #588]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	654b      	str	r3, [r1, #84]	; 0x54
 800526a:	e001      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d038      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	2b05      	cmp	r3, #5
 8005282:	d821      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052cf 	.word	0x080052cf
 8005290:	080052a5 	.word	0x080052a5
 8005294:	080052b7 	.word	0x080052b7
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	2101      	movs	r1, #1
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fdb4 	bl	8005e18 <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052b4:	e00c      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fe5d 	bl	8005f7c <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052c6:	e003      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
      break;
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80052ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052d6:	4b77      	ldr	r3, [pc, #476]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f023 0207 	bic.w	r2, r3, #7
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e2:	4974      	ldr	r1, [pc, #464]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	654b      	str	r3, [r1, #84]	; 0x54
 80052e8:	e001      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	2b05      	cmp	r3, #5
 8005302:	d821      	bhi.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800534f 	.word	0x0800534f
 8005310:	08005325 	.word	0x08005325
 8005314:	08005337 	.word	0x08005337
 8005318:	0800534f 	.word	0x0800534f
 800531c:	0800534f 	.word	0x0800534f
 8005320:	0800534f 	.word	0x0800534f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fd74 	bl	8005e18 <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005334:	e00c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fe1d 	bl	8005f7c <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	75fb      	strb	r3, [r7, #23]
      break;
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800534e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005356:	4b57      	ldr	r3, [pc, #348]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	4953      	ldr	r1, [pc, #332]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005366:	4313      	orrs	r3, r2
 8005368:	658b      	str	r3, [r1, #88]	; 0x58
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d04b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005386:	d02e      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800538c:	d828      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d02a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d822      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800539a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800539e:	d026      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80053a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053a4:	d81c      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d010      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b0:	d816      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80053b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ba:	d111      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fd28 	bl	8005e18 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053cc:	e012      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fdd1 	bl	8005f7c <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053e6:	bf00      	nop
 80053e8:	e004      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005408:	492a      	ldr	r1, [pc, #168]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	654b      	str	r3, [r1, #84]	; 0x54
 800540e:	e001      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d04d      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800542a:	d02e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800542c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005430:	d828      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d02a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543c:	d822      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005442:	d026      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005448:	d81c      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d010      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005454:	d816      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d111      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcd6 	bl	8005e18 <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005470:	e012      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3324      	adds	r3, #36	; 0x24
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd7f 	bl	8005f7c <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005482:	e009      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
      break;
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800548a:	bf00      	nop
 800548c:	e004      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ac:	4901      	ldr	r1, [pc, #4]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	658b      	str	r3, [r1, #88]	; 0x58
 80054b2:	e003      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80054b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04b      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054d2:	d02e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80054d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054d8:	d828      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054de:	d02a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e4:	d822      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054ea:	d026      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80054ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054f0:	d81c      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f6:	d010      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fc:	d816      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d111      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fc82 	bl	8005e18 <RCCEx_PLL2_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005518:	e012      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3324      	adds	r3, #36	; 0x24
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fd2b 	bl	8005f7c <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800552a:	e009      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e006      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005532:	bf00      	nop
 8005534:	e004      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800553e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005546:	4b9d      	ldr	r3, [pc, #628]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005554:	4999      	ldr	r1, [pc, #612]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005556:	4313      	orrs	r3, r2
 8005558:	658b      	str	r3, [r1, #88]	; 0x58
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d10a      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3324      	adds	r3, #36	; 0x24
 800557c:	2102      	movs	r1, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fcfc 	bl	8005f7c <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800558e:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559c:	4987      	ldr	r1, [pc, #540]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b8:	d10a      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3324      	adds	r3, #36	; 0x24
 80055be:	2102      	movs	r1, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fcdb 	bl	8005f7c <RCCEx_PLL3_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055d0:	4b7a      	ldr	r3, [pc, #488]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055de:	4977      	ldr	r1, [pc, #476]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d034      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fa:	d01d      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80055fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005600:	d817      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560a:	d009      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800560c:	e011      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fbff 	bl	8005e18 <RCCEx_PLL2_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800561e:	e00c      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3324      	adds	r3, #36	; 0x24
 8005624:	2102      	movs	r1, #2
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fca8 	bl	8005f7c <RCCEx_PLL3_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	75fb      	strb	r3, [r7, #23]
      break;
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005640:	4b5e      	ldr	r3, [pc, #376]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800564e:	495b      	ldr	r1, [pc, #364]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005650:	4313      	orrs	r3, r2
 8005652:	658b      	str	r3, [r1, #88]	; 0x58
 8005654:	e001      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d033      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005670:	d01c      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005676:	d816      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567c:	d003      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005682:	d007      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005684:	e00f      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005686:	4b4d      	ldr	r3, [pc, #308]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	4a4c      	ldr	r2, [pc, #304]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800568c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005692:	e00c      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fc6e 	bl	8005f7c <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056a4:	e003      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80056ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b4:	4b41      	ldr	r3, [pc, #260]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	493e      	ldr	r1, [pc, #248]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	654b      	str	r3, [r1, #84]	; 0x54
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d029      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d007      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80056e8:	e00f      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a33      	ldr	r2, [pc, #204]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056f6:	e00b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2102      	movs	r1, #2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fb8a 	bl	8005e18 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
      break;
 800570e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005716:	4b29      	ldr	r3, [pc, #164]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	4926      	ldr	r1, [pc, #152]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005724:	4313      	orrs	r3, r2
 8005726:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005728:	e001      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	2102      	movs	r1, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc1b 	bl	8005f7c <RCCEx_PLL3_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d033      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005764:	d017      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d811      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d013      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005776:	d80b      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d106      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800578e:	e007      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	e004      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005796:	bf00      	nop
 8005798:	e002      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800579e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b2:	4902      	ldr	r1, [pc, #8]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	654b      	str	r3, [r1, #84]	; 0x54
 80057b8:	e004      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	492e      	ldr	r1, [pc, #184]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057ee:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057fc:	4926      	ldr	r1, [pc, #152]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800580e:	4b22      	ldr	r3, [pc, #136]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581a:	491f      	ldr	r1, [pc, #124]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800581c:	4313      	orrs	r3, r2
 800581e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	4a19      	ldr	r2, [pc, #100]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005836:	6113      	str	r3, [r2, #16]
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005842:	4915      	ldr	r1, [pc, #84]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da08      	bge.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585c:	490e      	ldr	r1, [pc, #56]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800585e:	4313      	orrs	r3, r2
 8005860:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	4906      	ldr	r1, [pc, #24]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800587e:	4313      	orrs	r3, r2
 8005880:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005882:	7dbb      	ldrb	r3, [r7, #22]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400

0800589c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058a0:	f7ff f85a 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4904      	ldr	r1, [pc, #16]	; (80058c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	58024400 	.word	0x58024400
 80058c4:	0800c5d8 	.word	0x0800c5d8

080058c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058d0:	4ba1      	ldr	r3, [pc, #644]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058da:	4b9f      	ldr	r3, [pc, #636]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	0b1b      	lsrs	r3, r3, #12
 80058e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058e6:	4b9c      	ldr	r3, [pc, #624]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	08db      	lsrs	r3, r3, #3
 80058f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8111 	beq.w	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b02      	cmp	r3, #2
 800591a:	f000 8083 	beq.w	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b02      	cmp	r3, #2
 8005922:	f200 80a1 	bhi.w	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d056      	beq.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005932:	e099      	b.n	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02d      	beq.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005940:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	08db      	lsrs	r3, r3, #3
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	4a84      	ldr	r2, [pc, #528]	; (8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b7b      	ldr	r3, [pc, #492]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800599a:	e087      	b.n	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059de:	e065      	b.n	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a22:	e043      	b.n	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a66:	e021      	b.n	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	0a5b      	lsrs	r3, r3, #9
 8005ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad2:	ee17 2a90 	vmov	r2, s15
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae4:	ee07 3a90 	vmov	s15, r3
 8005ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b00:	ee17 2a90 	vmov	r2, s15
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	0e1b      	lsrs	r3, r3, #24
 8005b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2e:	ee17 2a90 	vmov	r2, s15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b36:	e008      	b.n	8005b4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	3724      	adds	r7, #36	; 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	03d09000 	.word	0x03d09000
 8005b60:	46000000 	.word	0x46000000
 8005b64:	4c742400 	.word	0x4c742400
 8005b68:	4a742400 	.word	0x4a742400
 8005b6c:	4af42400 	.word	0x4af42400

08005b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b78:	4ba1      	ldr	r3, [pc, #644]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b82:	4b9f      	ldr	r3, [pc, #636]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	0d1b      	lsrs	r3, r3, #20
 8005b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b8e:	4b9c      	ldr	r3, [pc, #624]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b9a:	4b99      	ldr	r3, [pc, #612]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8111 	beq.w	8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	f000 8083 	beq.w	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	f200 80a1 	bhi.w	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d056      	beq.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bda:	e099      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bdc:	4b88      	ldr	r3, [pc, #544]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02d      	beq.n	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005be8:	4b85      	ldr	r3, [pc, #532]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	4a84      	ldr	r2, [pc, #528]	; (8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b7b      	ldr	r3, [pc, #492]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c42:	e087      	b.n	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b6a      	ldr	r3, [pc, #424]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c86:	e065      	b.n	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b59      	ldr	r3, [pc, #356]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cca:	e043      	b.n	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b48      	ldr	r3, [pc, #288]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d0e:	e021      	b.n	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b37      	ldr	r3, [pc, #220]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	0a5b      	lsrs	r3, r3, #9
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7a:	ee17 2a90 	vmov	r2, s15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d82:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da8:	ee17 2a90 	vmov	r2, s15
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005db0:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	0e1b      	lsrs	r3, r3, #24
 8005db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dde:	e008      	b.n	8005df2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
}
 8005df2:	bf00      	nop
 8005df4:	3724      	adds	r7, #36	; 0x24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
 8005e04:	03d09000 	.word	0x03d09000
 8005e08:	46000000 	.word	0x46000000
 8005e0c:	4c742400 	.word	0x4c742400
 8005e10:	4a742400 	.word	0x4a742400
 8005e14:	4af42400 	.word	0x4af42400

08005e18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e26:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d101      	bne.n	8005e36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e099      	b.n	8005f6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e36:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a4e      	ldr	r2, [pc, #312]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e42:	f7fc fce5 	bl	8002810 <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e48:	e008      	b.n	8005e5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e4a:	f7fc fce1 	bl	8002810 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e086      	b.n	8005f6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e5c:	4b45      	ldr	r3, [pc, #276]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e68:	4b42      	ldr	r3, [pc, #264]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	493f      	ldr	r1, [pc, #252]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	025b      	lsls	r3, r3, #9
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	041b      	lsls	r3, r3, #16
 8005e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005eac:	4931      	ldr	r1, [pc, #196]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005eb2:	4b30      	ldr	r3, [pc, #192]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	492d      	ldr	r1, [pc, #180]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	f023 0220 	bic.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	4928      	ldr	r1, [pc, #160]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005edc:	f023 0310 	bic.w	r3, r3, #16
 8005ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <RCCEx_PLL2_Config+0x160>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	69d2      	ldr	r2, [r2, #28]
 8005eee:	00d2      	lsls	r2, r2, #3
 8005ef0:	4920      	ldr	r1, [pc, #128]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ef6:	4b1f      	ldr	r3, [pc, #124]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005efc:	f043 0310 	orr.w	r3, r3, #16
 8005f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f14:	e00f      	b.n	8005f36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f1c:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f28:	e005      	b.n	8005f36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f42:	f7fc fc65 	bl	8002810 <HAL_GetTick>
 8005f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f48:	e008      	b.n	8005f5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f4a:	f7fc fc61 	bl	8002810 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e006      	b.n	8005f6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <RCCEx_PLL2_Config+0x15c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	58024400 	.word	0x58024400
 8005f78:	ffff0007 	.word	0xffff0007

08005f7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f8a:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d101      	bne.n	8005f9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e099      	b.n	80060ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f9a:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a4e      	ldr	r2, [pc, #312]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa6:	f7fc fc33 	bl	8002810 <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fac:	e008      	b.n	8005fc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fae:	f7fc fc2f 	bl	8002810 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e086      	b.n	80060ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fc0:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f0      	bne.n	8005fae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fcc:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	051b      	lsls	r3, r3, #20
 8005fda:	493f      	ldr	r1, [pc, #252]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	628b      	str	r3, [r1, #40]	; 0x28
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	025b      	lsls	r3, r3, #9
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	3b01      	subs	r3, #1
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006010:	4931      	ldr	r1, [pc, #196]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006016:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	492d      	ldr	r1, [pc, #180]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006028:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4928      	ldr	r1, [pc, #160]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006036:	4313      	orrs	r3, r2
 8006038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <RCCEx_PLL3_Config+0x160>)
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	69d2      	ldr	r2, [r2, #28]
 8006052:	00d2      	lsls	r2, r2, #3
 8006054:	4920      	ldr	r1, [pc, #128]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800606c:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006078:	e00f      	b.n	800609a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d106      	bne.n	800608e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006080:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800608c:	e005      	b.n	800609a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	4a11      	ldr	r2, [pc, #68]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 8006094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0e      	ldr	r2, [pc, #56]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 80060a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a6:	f7fc fbb3 	bl	8002810 <HAL_GetTick>
 80060aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060ac:	e008      	b.n	80060c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060ae:	f7fc fbaf 	bl	8002810 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <RCCEx_PLL3_Config+0x15c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	ffff0007 	.word	0xffff0007

080060e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0f1      	b.n	80062d6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a78      	ldr	r2, [pc, #480]	; (80062e0 <HAL_SPI_Init+0x200>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <HAL_SPI_Init+0x42>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a77      	ldr	r2, [pc, #476]	; (80062e4 <HAL_SPI_Init+0x204>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00a      	beq.n	8006122 <HAL_SPI_Init+0x42>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a75      	ldr	r2, [pc, #468]	; (80062e8 <HAL_SPI_Init+0x208>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d005      	beq.n	8006122 <HAL_SPI_Init+0x42>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d901      	bls.n	8006122 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e0d9      	b.n	80062d6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 ff66 	bl	8006ff4 <SPI_GetPacketSize>
 8006128:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6c      	ldr	r2, [pc, #432]	; (80062e0 <HAL_SPI_Init+0x200>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00c      	beq.n	800614e <HAL_SPI_Init+0x6e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_SPI_Init+0x204>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <HAL_SPI_Init+0x6e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a69      	ldr	r2, [pc, #420]	; (80062e8 <HAL_SPI_Init+0x208>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d002      	beq.n	800614e <HAL_SPI_Init+0x6e>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b08      	cmp	r3, #8
 800614c:	d811      	bhi.n	8006172 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006152:	4a63      	ldr	r2, [pc, #396]	; (80062e0 <HAL_SPI_Init+0x200>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a61      	ldr	r2, [pc, #388]	; (80062e4 <HAL_SPI_Init+0x204>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_SPI_Init+0x8c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a60      	ldr	r2, [pc, #384]	; (80062e8 <HAL_SPI_Init+0x208>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d104      	bne.n	8006176 <HAL_SPI_Init+0x96>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b10      	cmp	r3, #16
 8006170:	d901      	bls.n	8006176 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e0af      	b.n	80062d6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc f862 	bl	8002254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80061b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061bc:	d119      	bne.n	80061f2 <HAL_SPI_Init+0x112>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c6:	d103      	bne.n	80061d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061e0:	d107      	bne.n	80061f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	ea42 0103 	orr.w	r1, r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	ea42 0103 	orr.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d113      	bne.n	8006292 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006290:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40013000 	.word	0x40013000
 80062e4:	40003800 	.word	0x40003800
 80062e8:	40003c00 	.word	0x40003c00

080062ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3320      	adds	r3, #32
 8006302:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_SPI_Transmit+0x2a>
 8006312:	2302      	movs	r3, #2
 8006314:	e1d7      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631e:	f7fc fa77 	bl	8002810 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d007      	beq.n	8006340 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006330:	2302      	movs	r3, #2
 8006332:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800633c:	7efb      	ldrb	r3, [r7, #27]
 800633e:	e1c2      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_Transmit+0x60>
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006358:	7efb      	ldrb	r3, [r7, #27]
 800635a:	e1b4      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2203      	movs	r2, #3
 8006360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80063ac:	d107      	bne.n	80063be <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b96      	ldr	r3, [pc, #600]	; (8006620 <HAL_SPI_Transmit+0x334>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	88f9      	ldrh	r1, [r7, #6]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	430b      	orrs	r3, r1
 80063d0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ea:	d107      	bne.n	80063fc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d947      	bls.n	8006494 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006404:	e03f      	b.n	8006486 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b02      	cmp	r3, #2
 8006412:	d114      	bne.n	800643e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800643c:	e023      	b.n	8006486 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800643e:	f7fc f9e7 	bl	8002810 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d803      	bhi.n	8006456 <HAL_SPI_Transmit+0x16a>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d102      	bne.n	800645c <HAL_SPI_Transmit+0x170>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fcfb 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e11f      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1b9      	bne.n	8006406 <HAL_SPI_Transmit+0x11a>
 8006492:	e0f2      	b.n	800667a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b07      	cmp	r3, #7
 800649a:	f240 80e7 	bls.w	800666c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800649e:	e05d      	b.n	800655c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d132      	bne.n	8006514 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d918      	bls.n	80064ec <HAL_SPI_Transmit+0x200>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d014      	beq.n	80064ec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b02      	subs	r3, #2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064ea:	e037      	b.n	800655c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	881a      	ldrh	r2, [r3, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006512:	e023      	b.n	800655c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006514:	f7fc f97c 	bl	8002810 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d803      	bhi.n	800652c <HAL_SPI_Transmit+0x240>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x246>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d114      	bne.n	800655c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fc90 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e0b4      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d19b      	bne.n	80064a0 <HAL_SPI_Transmit+0x1b4>
 8006568:	e087      	b.n	800667a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d155      	bne.n	8006624 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d918      	bls.n	80065b6 <HAL_SPI_Transmit+0x2ca>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d914      	bls.n	80065b6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b04      	subs	r3, #4
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065b4:	e05a      	b.n	800666c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d917      	bls.n	80065f2 <HAL_SPI_Transmit+0x306>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d013      	beq.n	80065f2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b02      	subs	r3, #2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065f0:	e03c      	b.n	800666c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3320      	adds	r3, #32
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800661c:	e026      	b.n	800666c <HAL_SPI_Transmit+0x380>
 800661e:	bf00      	nop
 8006620:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006624:	f7fc f8f4 	bl	8002810 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d803      	bhi.n	800663c <HAL_SPI_Transmit+0x350>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d102      	bne.n	8006642 <HAL_SPI_Transmit+0x356>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d114      	bne.n	800666c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fc08 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e02c      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	f47f af78 	bne.w	800656a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2108      	movs	r1, #8
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fc87 	bl	8006f98 <SPI_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fbd9 	bl	8006e58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80066c4:	7efb      	ldrb	r3, [r7, #27]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	; 0x28
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3330      	adds	r3, #48	; 0x30
 80066ea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f4:	d112      	bne.n	800671c <HAL_SPI_Receive+0x4c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2204      	movs	r2, #4
 8006702:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f978 	bl	8006a08 <HAL_SPI_TransmitReceive>
 8006718:	4603      	mov	r3, r0
 800671a:	e16f      	b.n	80069fc <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_SPI_Receive+0x5a>
 8006726:	2302      	movs	r3, #2
 8006728:	e168      	b.n	80069fc <HAL_SPI_Receive+0x32c>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006732:	f7fc f86d 	bl	8002810 <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	d007      	beq.n	8006754 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006744:	2302      	movs	r3, #2
 8006746:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006750:	7ffb      	ldrb	r3, [r7, #31]
 8006752:	e153      	b.n	80069fc <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_SPI_Receive+0x90>
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800676c:	7ffb      	ldrb	r3, [r7, #31]
 800676e:	e145      	b.n	80069fc <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2204      	movs	r2, #4
 8006774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80067c0:	d107      	bne.n	80067d2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	4b8a      	ldr	r3, [pc, #552]	; (8006a04 <HAL_SPI_Receive+0x334>)
 80067da:	4013      	ands	r3, r2
 80067dc:	88f9      	ldrh	r1, [r7, #6]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067fe:	d107      	bne.n	8006810 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800680e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d948      	bls.n	80068aa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006818:	e040      	b.n	800689c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695a      	ldr	r2, [r3, #20]
 8006820:	f248 0308 	movw	r3, #32776	; 0x8008
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006832:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006834:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006852:	e023      	b.n	800689c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006854:	f7fb ffdc 	bl	8002810 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d803      	bhi.n	800686c <HAL_SPI_Receive+0x19c>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d102      	bne.n	8006872 <HAL_SPI_Receive+0x1a2>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d114      	bne.n	800689c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 faf0 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e0af      	b.n	80069fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1b8      	bne.n	800681a <HAL_SPI_Receive+0x14a>
 80068a8:	e095      	b.n	80069d6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	f240 808b 	bls.w	80069ca <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80068b4:	e03f      	b.n	8006936 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d114      	bne.n	80068ee <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	8812      	ldrh	r2, [r2, #0]
 80068cc:	b292      	uxth	r2, r2
 80068ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80068ec:	e023      	b.n	8006936 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ee:	f7fb ff8f 	bl	8002810 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d803      	bhi.n	8006906 <HAL_SPI_Receive+0x236>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d102      	bne.n	800690c <HAL_SPI_Receive+0x23c>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d114      	bne.n	8006936 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 faa3 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e062      	b.n	80069fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1b9      	bne.n	80068b6 <HAL_SPI_Receive+0x1e6>
 8006942:	e048      	b.n	80069d6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d117      	bne.n	8006982 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006980:	e023      	b.n	80069ca <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006982:	f7fb ff45 	bl	8002810 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d803      	bhi.n	800699a <HAL_SPI_Receive+0x2ca>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Receive+0x2d0>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d114      	bne.n	80069ca <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 fa59 	bl	8006e58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e018      	b.n	80069fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1b6      	bne.n	8006944 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa3e 	bl	8006e58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80069fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	ffff0000 	.word	0xffff0000

08006a08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3320      	adds	r3, #32
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3330      	adds	r3, #48	; 0x30
 8006a2a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x32>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e209      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a42:	f7fb fee5 	bl	8002810 <HAL_GetTick>
 8006a46:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a5e:	7efb      	ldrb	r3, [r7, #27]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d014      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x86>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a6a:	d106      	bne.n	8006a7a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006a74:	7efb      	ldrb	r3, [r7, #27]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d009      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a8c:	e1df      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x98>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x98>
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ab2:	e1cc      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d003      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2205      	movs	r2, #5
 8006ac4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	887a      	ldrh	r2, [r7, #2]
 8006ada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	887a      	ldrh	r2, [r7, #2]
 8006ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	887a      	ldrh	r2, [r7, #2]
 8006af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	4b82      	ldr	r3, [pc, #520]	; (8006d18 <HAL_SPI_TransmitReceive+0x310>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	8879      	ldrh	r1, [r7, #2]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b34:	d107      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d970      	bls.n	8006c30 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b4e:	e068      	b.n	8006c22 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d11a      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x18c>
 8006b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b92:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695a      	ldr	r2, [r3, #20]
 8006b9a:	f248 0308 	movw	r3, #32776	; 0x8008
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01a      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x1d2>
 8006ba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bb4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bda:	f7fb fe19 	bl	8002810 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d803      	bhi.n	8006bf2 <HAL_SPI_TransmitReceive+0x1ea>
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d102      	bne.n	8006bf8 <HAL_SPI_TransmitReceive+0x1f0>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d114      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f92d 	bl	8006e58 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e115      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d193      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x148>
 8006c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d190      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x148>
 8006c2e:	e0e7      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b07      	cmp	r3, #7
 8006c36:	f240 80dd 	bls.w	8006df4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c3a:	e066      	b.n	8006d0a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d119      	bne.n	8006c7e <HAL_SPI_TransmitReceive+0x276>
 8006c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d016      	beq.n	8006c7e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c54:	881a      	ldrh	r2, [r3, #0]
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	1c9a      	adds	r2, r3, #2
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d11a      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x2ba>
 8006c8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	8812      	ldrh	r2, [r2, #0]
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc2:	f7fb fda5 	bl	8002810 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d803      	bhi.n	8006cda <HAL_SPI_TransmitReceive+0x2d2>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x2d8>
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d114      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f8b9 	bl	8006e58 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e0a1      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006d0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d195      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x234>
 8006d10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d192      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x234>
 8006d16:	e073      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x3f8>
 8006d18:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d11b      	bne.n	8006d62 <HAL_SPI_TransmitReceive+0x35a>
 8006d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d018      	beq.n	8006d62 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3320      	adds	r3, #32
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d60:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d11d      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x3a4>
 8006d70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01a      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006daa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dac:	f7fb fd30 	bl	8002810 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d803      	bhi.n	8006dc4 <HAL_SPI_TransmitReceive+0x3bc>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d102      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x3c2>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d114      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f844 	bl	8006e58 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e02c      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d190      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x314>
 8006dfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d18d      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2200      	movs	r2, #0
 8006e08:	2108      	movs	r1, #8
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f8c4 	bl	8006f98 <SPI_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f816 	bl	8006e58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e001      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3730      	adds	r7, #48	; 0x30
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0208 	orr.w	r2, r2, #8
 8006e76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0210 	orr.w	r2, r2, #16
 8006e86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6919      	ldr	r1, [r3, #16]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b3c      	ldr	r3, [pc, #240]	; (8006f94 <SPI_CloseTransfer+0x13c>)
 8006ea4:	400b      	ands	r3, r1
 8006ea6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006eb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d014      	beq.n	8006eee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00f      	beq.n	8006eee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0220 	orr.w	r2, r2, #32
 8006eec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d014      	beq.n	8006f24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00f      	beq.n	8006f24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f043 0204 	orr.w	r2, r3, #4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00f      	beq.n	8006f4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00f      	beq.n	8006f78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	f043 0208 	orr.w	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	fffffc90 	.word	0xfffffc90

08006f98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fa8:	e010      	b.n	8006fcc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fb fc31 	bl	8002810 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d803      	bhi.n	8006fc2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d102      	bne.n	8006fc8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e00f      	b.n	8006fec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d0df      	beq.n	8006faa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	3301      	adds	r3, #1
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	3307      	adds	r3, #7
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	fb02 f303 	mul.w	r3, r2, r3
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e049      	b.n	80070d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fb f965 	bl	8002320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2202      	movs	r2, #2
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f000 fba9 	bl	80077c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_TIM_PWM_Start+0x24>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	e03c      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d109      	bne.n	8007116 <HAL_TIM_PWM_Start+0x3e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e02f      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d109      	bne.n	8007130 <HAL_TIM_PWM_Start+0x58>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	e022      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b0c      	cmp	r3, #12
 8007134:	d109      	bne.n	800714a <HAL_TIM_PWM_Start+0x72>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b01      	cmp	r3, #1
 8007140:	bf14      	ite	ne
 8007142:	2301      	movne	r3, #1
 8007144:	2300      	moveq	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	e015      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b10      	cmp	r3, #16
 800714e:	d109      	bne.n	8007164 <HAL_TIM_PWM_Start+0x8c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e008      	b.n	8007176 <HAL_TIM_PWM_Start+0x9e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e0a1      	b.n	80072c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Start+0xb6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800718c:	e023      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b04      	cmp	r3, #4
 8007192:	d104      	bne.n	800719e <HAL_TIM_PWM_Start+0xc6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800719c:	e01b      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d104      	bne.n	80071ae <HAL_TIM_PWM_Start+0xd6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ac:	e013      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	d104      	bne.n	80071be <HAL_TIM_PWM_Start+0xe6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071bc:	e00b      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d104      	bne.n	80071ce <HAL_TIM_PWM_Start+0xf6>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071cc:	e003      	b.n	80071d6 <HAL_TIM_PWM_Start+0xfe>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fe5e 	bl	8007ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a38      	ldr	r2, [pc, #224]	; (80072cc <HAL_TIM_PWM_Start+0x1f4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a37      	ldr	r2, [pc, #220]	; (80072d0 <HAL_TIM_PWM_Start+0x1f8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00e      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a35      	ldr	r2, [pc, #212]	; (80072d4 <HAL_TIM_PWM_Start+0x1fc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d009      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <HAL_TIM_PWM_Start+0x200>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d004      	beq.n	8007216 <HAL_TIM_PWM_Start+0x13e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a32      	ldr	r2, [pc, #200]	; (80072dc <HAL_TIM_PWM_Start+0x204>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <HAL_TIM_PWM_Start+0x142>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_TIM_PWM_Start+0x144>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a25      	ldr	r2, [pc, #148]	; (80072cc <HAL_TIM_PWM_Start+0x1f4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d022      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d01d      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <HAL_TIM_PWM_Start+0x208>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d018      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <HAL_TIM_PWM_Start+0x20c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <HAL_TIM_PWM_Start+0x210>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00e      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <HAL_TIM_PWM_Start+0x1f8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1e      	ldr	r2, [pc, #120]	; (80072ec <HAL_TIM_PWM_Start+0x214>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIM_PWM_Start+0x1a8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <HAL_TIM_PWM_Start+0x1fc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d115      	bne.n	80072ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <HAL_TIM_PWM_Start+0x218>)
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b06      	cmp	r3, #6
 8007290:	d015      	beq.n	80072be <HAL_TIM_PWM_Start+0x1e6>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007298:	d011      	beq.n	80072be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	e008      	b.n	80072be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40001800 	.word	0x40001800
 80072f0:	00010007 	.word	0x00010007

080072f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b02      	cmp	r3, #2
 8007308:	d122      	bne.n	8007350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b02      	cmp	r3, #2
 8007316:	d11b      	bne.n	8007350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0202 	mvn.w	r2, #2
 8007320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa24 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa16 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa27 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d122      	bne.n	80073a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d11b      	bne.n	80073a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0204 	mvn.w	r2, #4
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9fa 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f9ec 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f9fd 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d122      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d11b      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0208 	mvn.w	r2, #8
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2204      	movs	r2, #4
 80073ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f9d0 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f9c2 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9d3 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	2b10      	cmp	r3, #16
 8007404:	d122      	bne.n	800744c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b10      	cmp	r3, #16
 8007412:	d11b      	bne.n	800744c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0210 	mvn.w	r2, #16
 800741c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2208      	movs	r2, #8
 8007422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9a6 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 8007438:	e005      	b.n	8007446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f998 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9a9 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d10e      	bne.n	8007478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b01      	cmp	r3, #1
 8007466:	d107      	bne.n	8007478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0201 	mvn.w	r2, #1
 8007470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f972 	bl	800775c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b80      	cmp	r3, #128	; 0x80
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	2b80      	cmp	r3, #128	; 0x80
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fe3a 	bl	8008118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b2:	d10e      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074be:	2b80      	cmp	r3, #128	; 0x80
 80074c0:	d107      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fe2d 	bl	800812c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d10e      	bne.n	80074fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d107      	bne.n	80074fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f957 	bl	80077ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b20      	cmp	r3, #32
 800750a:	d10e      	bne.n	800752a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b20      	cmp	r3, #32
 8007518:	d107      	bne.n	800752a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f06f 0220 	mvn.w	r2, #32
 8007522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fded 	bl	8008104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800754e:	2302      	movs	r3, #2
 8007550:	e0ff      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b14      	cmp	r3, #20
 800755e:	f200 80f0 	bhi.w	8007742 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	080075bd 	.word	0x080075bd
 800756c:	08007743 	.word	0x08007743
 8007570:	08007743 	.word	0x08007743
 8007574:	08007743 	.word	0x08007743
 8007578:	080075fd 	.word	0x080075fd
 800757c:	08007743 	.word	0x08007743
 8007580:	08007743 	.word	0x08007743
 8007584:	08007743 	.word	0x08007743
 8007588:	0800763f 	.word	0x0800763f
 800758c:	08007743 	.word	0x08007743
 8007590:	08007743 	.word	0x08007743
 8007594:	08007743 	.word	0x08007743
 8007598:	0800767f 	.word	0x0800767f
 800759c:	08007743 	.word	0x08007743
 80075a0:	08007743 	.word	0x08007743
 80075a4:	08007743 	.word	0x08007743
 80075a8:	080076c1 	.word	0x080076c1
 80075ac:	08007743 	.word	0x08007743
 80075b0:	08007743 	.word	0x08007743
 80075b4:	08007743 	.word	0x08007743
 80075b8:	08007701 	.word	0x08007701
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f996 	bl	80078f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0208 	orr.w	r2, r2, #8
 80075d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0204 	bic.w	r2, r2, #4
 80075e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6999      	ldr	r1, [r3, #24]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	619a      	str	r2, [r3, #24]
      break;
 80075fa:	e0a5      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa06 	bl	8007a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6999      	ldr	r1, [r3, #24]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	021a      	lsls	r2, r3, #8
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	619a      	str	r2, [r3, #24]
      break;
 800763c:	e084      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fa6f 	bl	8007b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0208 	orr.w	r2, r2, #8
 8007658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0204 	bic.w	r2, r2, #4
 8007668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	61da      	str	r2, [r3, #28]
      break;
 800767c:	e064      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fad7 	bl	8007c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69d9      	ldr	r1, [r3, #28]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	021a      	lsls	r2, r3, #8
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	61da      	str	r2, [r3, #28]
      break;
 80076be:	e043      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fb20 	bl	8007d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0208 	orr.w	r2, r2, #8
 80076da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0204 	bic.w	r2, r2, #4
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076fe:	e023      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fb64 	bl	8007dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007740:	e002      	b.n	8007748 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
      break;
 8007746:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop

0800775c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a40      	ldr	r2, [pc, #256]	; (80078d4 <TIM_Base_SetConfig+0x114>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <TIM_Base_SetConfig+0x40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d00f      	beq.n	8007800 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <TIM_Base_SetConfig+0x118>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00b      	beq.n	8007800 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a3c      	ldr	r2, [pc, #240]	; (80078dc <TIM_Base_SetConfig+0x11c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d007      	beq.n	8007800 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a3b      	ldr	r2, [pc, #236]	; (80078e0 <TIM_Base_SetConfig+0x120>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a3a      	ldr	r2, [pc, #232]	; (80078e4 <TIM_Base_SetConfig+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d108      	bne.n	8007812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2f      	ldr	r2, [pc, #188]	; (80078d4 <TIM_Base_SetConfig+0x114>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01f      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d01b      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <TIM_Base_SetConfig+0x118>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d017      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <TIM_Base_SetConfig+0x11c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <TIM_Base_SetConfig+0x120>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00f      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a29      	ldr	r2, [pc, #164]	; (80078e4 <TIM_Base_SetConfig+0x124>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00b      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <TIM_Base_SetConfig+0x128>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d007      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <TIM_Base_SetConfig+0x12c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d003      	beq.n	800785a <TIM_Base_SetConfig+0x9a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <TIM_Base_SetConfig+0x130>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d108      	bne.n	800786c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <TIM_Base_SetConfig+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00f      	beq.n	80078b8 <TIM_Base_SetConfig+0xf8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <TIM_Base_SetConfig+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00b      	beq.n	80078b8 <TIM_Base_SetConfig+0xf8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a11      	ldr	r2, [pc, #68]	; (80078e8 <TIM_Base_SetConfig+0x128>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_Base_SetConfig+0xf8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a10      	ldr	r2, [pc, #64]	; (80078ec <TIM_Base_SetConfig+0x12c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_Base_SetConfig+0xf8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a0f      	ldr	r2, [pc, #60]	; (80078f0 <TIM_Base_SetConfig+0x130>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d103      	bne.n	80078c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	615a      	str	r2, [r3, #20]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40000800 	.word	0x40000800
 80078e0:	40000c00 	.word	0x40000c00
 80078e4:	40010400 	.word	0x40010400
 80078e8:	40014000 	.word	0x40014000
 80078ec:	40014400 	.word	0x40014400
 80078f0:	40014800 	.word	0x40014800

080078f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0201 	bic.w	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4b37      	ldr	r3, [pc, #220]	; (80079fc <TIM_OC1_SetConfig+0x108>)
 8007920:	4013      	ands	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 0302 	bic.w	r3, r3, #2
 800793c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2d      	ldr	r2, [pc, #180]	; (8007a00 <TIM_OC1_SetConfig+0x10c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00f      	beq.n	8007970 <TIM_OC1_SetConfig+0x7c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <TIM_OC1_SetConfig+0x110>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_OC1_SetConfig+0x7c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <TIM_OC1_SetConfig+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_OC1_SetConfig+0x7c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <TIM_OC1_SetConfig+0x118>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_OC1_SetConfig+0x7c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <TIM_OC1_SetConfig+0x11c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10c      	bne.n	800798a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f023 0308 	bic.w	r3, r3, #8
 8007976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f023 0304 	bic.w	r3, r3, #4
 8007988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <TIM_OC1_SetConfig+0x10c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_OC1_SetConfig+0xbe>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <TIM_OC1_SetConfig+0x110>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_OC1_SetConfig+0xbe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1a      	ldr	r2, [pc, #104]	; (8007a08 <TIM_OC1_SetConfig+0x114>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_OC1_SetConfig+0xbe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <TIM_OC1_SetConfig+0x118>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC1_SetConfig+0xbe>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <TIM_OC1_SetConfig+0x11c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d111      	bne.n	80079d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	fffeff8f 	.word	0xfffeff8f
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800

08007a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0210 	bic.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <TIM_OC2_SetConfig+0xfc>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0320 	bic.w	r3, r3, #32
 8007a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a29      	ldr	r2, [pc, #164]	; (8007b14 <TIM_OC2_SetConfig+0x100>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_OC2_SetConfig+0x68>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a28      	ldr	r2, [pc, #160]	; (8007b18 <TIM_OC2_SetConfig+0x104>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10d      	bne.n	8007a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <TIM_OC2_SetConfig+0x100>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00f      	beq.n	8007ac0 <TIM_OC2_SetConfig+0xac>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <TIM_OC2_SetConfig+0x104>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <TIM_OC2_SetConfig+0xac>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <TIM_OC2_SetConfig+0x108>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <TIM_OC2_SetConfig+0xac>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <TIM_OC2_SetConfig+0x10c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_OC2_SetConfig+0xac>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <TIM_OC2_SetConfig+0x110>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d113      	bne.n	8007ae8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	feff8fff 	.word	0xfeff8fff
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800

08007b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <TIM_OC3_SetConfig+0xf8>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <TIM_OC3_SetConfig+0xfc>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d003      	beq.n	8007b8e <TIM_OC3_SetConfig+0x66>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <TIM_OC3_SetConfig+0x100>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d10d      	bne.n	8007baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <TIM_OC3_SetConfig+0xfc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00f      	beq.n	8007bd2 <TIM_OC3_SetConfig+0xaa>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <TIM_OC3_SetConfig+0x100>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <TIM_OC3_SetConfig+0xaa>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <TIM_OC3_SetConfig+0x104>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d007      	beq.n	8007bd2 <TIM_OC3_SetConfig+0xaa>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1a      	ldr	r2, [pc, #104]	; (8007c30 <TIM_OC3_SetConfig+0x108>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_OC3_SetConfig+0xaa>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a19      	ldr	r2, [pc, #100]	; (8007c34 <TIM_OC3_SetConfig+0x10c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d113      	bne.n	8007bfa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	fffeff8f 	.word	0xfffeff8f
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40010400 	.word	0x40010400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4b24      	ldr	r3, [pc, #144]	; (8007cf4 <TIM_OC4_SetConfig+0xbc>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	031b      	lsls	r3, r3, #12
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a19      	ldr	r2, [pc, #100]	; (8007cf8 <TIM_OC4_SetConfig+0xc0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00f      	beq.n	8007cb8 <TIM_OC4_SetConfig+0x80>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <TIM_OC4_SetConfig+0xc4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_OC4_SetConfig+0x80>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <TIM_OC4_SetConfig+0xc8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_OC4_SetConfig+0x80>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a16      	ldr	r2, [pc, #88]	; (8007d04 <TIM_OC4_SetConfig+0xcc>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC4_SetConfig+0x80>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <TIM_OC4_SetConfig+0xd0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d109      	bne.n	8007ccc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	019b      	lsls	r3, r3, #6
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	621a      	str	r2, [r3, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	feff8fff 	.word	0xfeff8fff
 8007cf8:	40010000 	.word	0x40010000
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <TIM_OC5_SetConfig+0xb0>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	; (8007dc0 <TIM_OC5_SetConfig+0xb4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00f      	beq.n	8007d82 <TIM_OC5_SetConfig+0x76>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <TIM_OC5_SetConfig+0xb8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00b      	beq.n	8007d82 <TIM_OC5_SetConfig+0x76>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <TIM_OC5_SetConfig+0xbc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d007      	beq.n	8007d82 <TIM_OC5_SetConfig+0x76>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC5_SetConfig+0xc0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC5_SetConfig+0x76>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <TIM_OC5_SetConfig+0xc4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d109      	bne.n	8007d96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	621a      	str	r2, [r3, #32]
}
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	fffeff8f 	.word	0xfffeff8f
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <TIM_OC6_SetConfig+0xb4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	051b      	lsls	r3, r3, #20
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <TIM_OC6_SetConfig+0xb8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00f      	beq.n	8007e4c <TIM_OC6_SetConfig+0x78>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <TIM_OC6_SetConfig+0xbc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00b      	beq.n	8007e4c <TIM_OC6_SetConfig+0x78>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <TIM_OC6_SetConfig+0xc0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d007      	beq.n	8007e4c <TIM_OC6_SetConfig+0x78>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <TIM_OC6_SetConfig+0xc4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_OC6_SetConfig+0x78>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <TIM_OC6_SetConfig+0xc8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d109      	bne.n	8007e60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	029b      	lsls	r3, r3, #10
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	feff8fff 	.word	0xfeff8fff
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40010400 	.word	0x40010400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a1a      	ldr	r2, [r3, #32]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e06d      	b.n	8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a30      	ldr	r2, [pc, #192]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a2f      	ldr	r2, [pc, #188]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d108      	bne.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d022      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d01d      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d018      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d10c      	bne.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40010400 	.word	0x40010400
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40001800 	.word	0x40001800
 8008004:	40014000 	.word	0x40014000

08008008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008020:	2302      	movs	r3, #2
 8008022:	e065      	b.n	80080f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a14      	ldr	r2, [pc, #80]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d115      	bne.n	80080de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	051b      	lsls	r3, r3, #20
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40010000 	.word	0x40010000
 8008100:	40010400 	.word	0x40010400

08008104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e042      	b.n	80081d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008158:	2b00      	cmp	r3, #0
 800815a:	d106      	bne.n	800816a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7fa f937 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2224      	movs	r2, #36	; 0x24
 800816e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0201 	bic.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8c2 	bl	800830c <UART_SetConfig>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e022      	b.n	80081d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fe1e 	bl	8008ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fea5 	bl	8008f20 <UART_CheckIdleState>
 80081d6:	4603      	mov	r3, r0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	f040 8083 	bne.w	8008302 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <HAL_UART_Transmit+0x28>
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e07b      	b.n	8008304 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_UART_Transmit+0x3a>
 8008216:	2302      	movs	r3, #2
 8008218:	e074      	b.n	8008304 <HAL_UART_Transmit+0x124>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2221      	movs	r2, #33	; 0x21
 800822e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008232:	f7fa faed 	bl	8002810 <HAL_GetTick>
 8008236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	88fa      	ldrh	r2, [r7, #6]
 800823c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	88fa      	ldrh	r2, [r7, #6]
 8008244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d108      	bne.n	8008264 <HAL_UART_Transmit+0x84>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e003      	b.n	800826c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008274:	e02c      	b.n	80082d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2200      	movs	r2, #0
 800827e:	2180      	movs	r1, #128	; 0x80
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fe98 	bl	8008fb6 <UART_WaitOnFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e039      	b.n	8008304 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	3302      	adds	r3, #2
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e007      	b.n	80082be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1cc      	bne.n	8008276 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	2140      	movs	r1, #64	; 0x40
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fe65 	bl	8008fb6 <UART_WaitOnFlagUntilTimeout>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e006      	b.n	8008304 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800830c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008310:	b092      	sub	sp, #72	; 0x48
 8008312:	af00      	add	r7, sp, #0
 8008314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	431a      	orrs	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	431a      	orrs	r2, r3
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	4313      	orrs	r3, r2
 8008332:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4bbe      	ldr	r3, [pc, #760]	; (8008634 <UART_SetConfig+0x328>)
 800833c:	4013      	ands	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008344:	430b      	orrs	r3, r1
 8008346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4ab3      	ldr	r2, [pc, #716]	; (8008638 <UART_SetConfig+0x32c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008374:	4313      	orrs	r3, r2
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	4baf      	ldr	r3, [pc, #700]	; (800863c <UART_SetConfig+0x330>)
 8008380:	4013      	ands	r3, r2
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008388:	430b      	orrs	r3, r1
 800838a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	f023 010f 	bic.w	r1, r3, #15
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4aa6      	ldr	r2, [pc, #664]	; (8008640 <UART_SetConfig+0x334>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d177      	bne.n	800849c <UART_SetConfig+0x190>
 80083ac:	4ba5      	ldr	r3, [pc, #660]	; (8008644 <UART_SetConfig+0x338>)
 80083ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b4:	2b28      	cmp	r3, #40	; 0x28
 80083b6:	d86d      	bhi.n	8008494 <UART_SetConfig+0x188>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0xb4>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	08008465 	.word	0x08008465
 80083c4:	08008495 	.word	0x08008495
 80083c8:	08008495 	.word	0x08008495
 80083cc:	08008495 	.word	0x08008495
 80083d0:	08008495 	.word	0x08008495
 80083d4:	08008495 	.word	0x08008495
 80083d8:	08008495 	.word	0x08008495
 80083dc:	08008495 	.word	0x08008495
 80083e0:	0800846d 	.word	0x0800846d
 80083e4:	08008495 	.word	0x08008495
 80083e8:	08008495 	.word	0x08008495
 80083ec:	08008495 	.word	0x08008495
 80083f0:	08008495 	.word	0x08008495
 80083f4:	08008495 	.word	0x08008495
 80083f8:	08008495 	.word	0x08008495
 80083fc:	08008495 	.word	0x08008495
 8008400:	08008475 	.word	0x08008475
 8008404:	08008495 	.word	0x08008495
 8008408:	08008495 	.word	0x08008495
 800840c:	08008495 	.word	0x08008495
 8008410:	08008495 	.word	0x08008495
 8008414:	08008495 	.word	0x08008495
 8008418:	08008495 	.word	0x08008495
 800841c:	08008495 	.word	0x08008495
 8008420:	0800847d 	.word	0x0800847d
 8008424:	08008495 	.word	0x08008495
 8008428:	08008495 	.word	0x08008495
 800842c:	08008495 	.word	0x08008495
 8008430:	08008495 	.word	0x08008495
 8008434:	08008495 	.word	0x08008495
 8008438:	08008495 	.word	0x08008495
 800843c:	08008495 	.word	0x08008495
 8008440:	08008485 	.word	0x08008485
 8008444:	08008495 	.word	0x08008495
 8008448:	08008495 	.word	0x08008495
 800844c:	08008495 	.word	0x08008495
 8008450:	08008495 	.word	0x08008495
 8008454:	08008495 	.word	0x08008495
 8008458:	08008495 	.word	0x08008495
 800845c:	08008495 	.word	0x08008495
 8008460:	0800848d 	.word	0x0800848d
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846a:	e222      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e21e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e21a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e216      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008484:	2320      	movs	r3, #32
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e212      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e20e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008494:	2380      	movs	r3, #128	; 0x80
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e20a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a69      	ldr	r2, [pc, #420]	; (8008648 <UART_SetConfig+0x33c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d130      	bne.n	8008508 <UART_SetConfig+0x1fc>
 80084a6:	4b67      	ldr	r3, [pc, #412]	; (8008644 <UART_SetConfig+0x338>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d826      	bhi.n	8008500 <UART_SetConfig+0x1f4>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <UART_SetConfig+0x1ac>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084d1 	.word	0x080084d1
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084e1 	.word	0x080084e1
 80084c4:	080084e9 	.word	0x080084e9
 80084c8:	080084f1 	.word	0x080084f1
 80084cc:	080084f9 	.word	0x080084f9
 80084d0:	2300      	movs	r3, #0
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e1ec      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e1e8      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e1e4      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e1e0      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80084f0:	2320      	movs	r3, #32
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e1dc      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e1d8      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e1d4      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a4f      	ldr	r2, [pc, #316]	; (800864c <UART_SetConfig+0x340>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d130      	bne.n	8008574 <UART_SetConfig+0x268>
 8008512:	4b4c      	ldr	r3, [pc, #304]	; (8008644 <UART_SetConfig+0x338>)
 8008514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b05      	cmp	r3, #5
 800851c:	d826      	bhi.n	800856c <UART_SetConfig+0x260>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0x218>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	0800853d 	.word	0x0800853d
 8008528:	08008545 	.word	0x08008545
 800852c:	0800854d 	.word	0x0800854d
 8008530:	08008555 	.word	0x08008555
 8008534:	0800855d 	.word	0x0800855d
 8008538:	08008565 	.word	0x08008565
 800853c:	2300      	movs	r3, #0
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e1b6      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008544:	2304      	movs	r3, #4
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e1b2      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800854c:	2308      	movs	r3, #8
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e1ae      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008554:	2310      	movs	r3, #16
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e1aa      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800855c:	2320      	movs	r3, #32
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008562:	e1a6      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008564:	2340      	movs	r3, #64	; 0x40
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856a:	e1a2      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e19e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a35      	ldr	r2, [pc, #212]	; (8008650 <UART_SetConfig+0x344>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d130      	bne.n	80085e0 <UART_SetConfig+0x2d4>
 800857e:	4b31      	ldr	r3, [pc, #196]	; (8008644 <UART_SetConfig+0x338>)
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b05      	cmp	r3, #5
 8008588:	d826      	bhi.n	80085d8 <UART_SetConfig+0x2cc>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x284>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085a9 	.word	0x080085a9
 8008594:	080085b1 	.word	0x080085b1
 8008598:	080085b9 	.word	0x080085b9
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c9 	.word	0x080085c9
 80085a4:	080085d1 	.word	0x080085d1
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e180      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085b0:	2304      	movs	r3, #4
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e17c      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085b8:	2308      	movs	r3, #8
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e178      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e174      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085c8:	2320      	movs	r3, #32
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e170      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e16c      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e168      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1b      	ldr	r2, [pc, #108]	; (8008654 <UART_SetConfig+0x348>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d142      	bne.n	8008670 <UART_SetConfig+0x364>
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <UART_SetConfig+0x338>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d838      	bhi.n	8008668 <UART_SetConfig+0x35c>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x2f0>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008615 	.word	0x08008615
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008625 	.word	0x08008625
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008659 	.word	0x08008659
 8008610:	08008661 	.word	0x08008661
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e14a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e146      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e142      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e13e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008634:	cfff69f3 	.word	0xcfff69f3
 8008638:	58000c00 	.word	0x58000c00
 800863c:	11fff4ff 	.word	0x11fff4ff
 8008640:	40011000 	.word	0x40011000
 8008644:	58024400 	.word	0x58024400
 8008648:	40004400 	.word	0x40004400
 800864c:	40004800 	.word	0x40004800
 8008650:	40004c00 	.word	0x40004c00
 8008654:	40005000 	.word	0x40005000
 8008658:	2320      	movs	r3, #32
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e128      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e124      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e120      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4acb      	ldr	r2, [pc, #812]	; (80089a4 <UART_SetConfig+0x698>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d176      	bne.n	8008768 <UART_SetConfig+0x45c>
 800867a:	4bcb      	ldr	r3, [pc, #812]	; (80089a8 <UART_SetConfig+0x69c>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008682:	2b28      	cmp	r3, #40	; 0x28
 8008684:	d86c      	bhi.n	8008760 <UART_SetConfig+0x454>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x380>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	08008731 	.word	0x08008731
 8008690:	08008761 	.word	0x08008761
 8008694:	08008761 	.word	0x08008761
 8008698:	08008761 	.word	0x08008761
 800869c:	08008761 	.word	0x08008761
 80086a0:	08008761 	.word	0x08008761
 80086a4:	08008761 	.word	0x08008761
 80086a8:	08008761 	.word	0x08008761
 80086ac:	08008739 	.word	0x08008739
 80086b0:	08008761 	.word	0x08008761
 80086b4:	08008761 	.word	0x08008761
 80086b8:	08008761 	.word	0x08008761
 80086bc:	08008761 	.word	0x08008761
 80086c0:	08008761 	.word	0x08008761
 80086c4:	08008761 	.word	0x08008761
 80086c8:	08008761 	.word	0x08008761
 80086cc:	08008741 	.word	0x08008741
 80086d0:	08008761 	.word	0x08008761
 80086d4:	08008761 	.word	0x08008761
 80086d8:	08008761 	.word	0x08008761
 80086dc:	08008761 	.word	0x08008761
 80086e0:	08008761 	.word	0x08008761
 80086e4:	08008761 	.word	0x08008761
 80086e8:	08008761 	.word	0x08008761
 80086ec:	08008749 	.word	0x08008749
 80086f0:	08008761 	.word	0x08008761
 80086f4:	08008761 	.word	0x08008761
 80086f8:	08008761 	.word	0x08008761
 80086fc:	08008761 	.word	0x08008761
 8008700:	08008761 	.word	0x08008761
 8008704:	08008761 	.word	0x08008761
 8008708:	08008761 	.word	0x08008761
 800870c:	08008751 	.word	0x08008751
 8008710:	08008761 	.word	0x08008761
 8008714:	08008761 	.word	0x08008761
 8008718:	08008761 	.word	0x08008761
 800871c:	08008761 	.word	0x08008761
 8008720:	08008761 	.word	0x08008761
 8008724:	08008761 	.word	0x08008761
 8008728:	08008761 	.word	0x08008761
 800872c:	08008759 	.word	0x08008759
 8008730:	2301      	movs	r3, #1
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e0bc      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e0b8      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e0b4      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e0b0      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008750:	2320      	movs	r3, #32
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e0ac      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e0a8      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e0a4      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a8f      	ldr	r2, [pc, #572]	; (80089ac <UART_SetConfig+0x6a0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d130      	bne.n	80087d4 <UART_SetConfig+0x4c8>
 8008772:	4b8d      	ldr	r3, [pc, #564]	; (80089a8 <UART_SetConfig+0x69c>)
 8008774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b05      	cmp	r3, #5
 800877c:	d826      	bhi.n	80087cc <UART_SetConfig+0x4c0>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <UART_SetConfig+0x478>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087a5 	.word	0x080087a5
 800878c:	080087ad 	.word	0x080087ad
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087bd 	.word	0x080087bd
 8008798:	080087c5 	.word	0x080087c5
 800879c:	2300      	movs	r3, #0
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e086      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e082      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e07e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e07a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087bc:	2320      	movs	r3, #32
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c2:	e076      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e072      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e06e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a75      	ldr	r2, [pc, #468]	; (80089b0 <UART_SetConfig+0x6a4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d130      	bne.n	8008840 <UART_SetConfig+0x534>
 80087de:	4b72      	ldr	r3, [pc, #456]	; (80089a8 <UART_SetConfig+0x69c>)
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d826      	bhi.n	8008838 <UART_SetConfig+0x52c>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x4e4>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008809 	.word	0x08008809
 80087f4:	08008811 	.word	0x08008811
 80087f8:	08008819 	.word	0x08008819
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008829 	.word	0x08008829
 8008804:	08008831 	.word	0x08008831
 8008808:	2300      	movs	r3, #0
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e050      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e04c      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e048      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e044      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008828:	2320      	movs	r3, #32
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e040      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008830:	2340      	movs	r3, #64	; 0x40
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e03c      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008838:	2380      	movs	r3, #128	; 0x80
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e038      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a5b      	ldr	r2, [pc, #364]	; (80089b4 <UART_SetConfig+0x6a8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d130      	bne.n	80088ac <UART_SetConfig+0x5a0>
 800884a:	4b57      	ldr	r3, [pc, #348]	; (80089a8 <UART_SetConfig+0x69c>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	2b05      	cmp	r3, #5
 8008854:	d826      	bhi.n	80088a4 <UART_SetConfig+0x598>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0x550>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008875 	.word	0x08008875
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008885 	.word	0x08008885
 8008868:	0800888d 	.word	0x0800888d
 800886c:	08008895 	.word	0x08008895
 8008870:	0800889d 	.word	0x0800889d
 8008874:	2302      	movs	r3, #2
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887a:	e01a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800887c:	2304      	movs	r3, #4
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e016      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008884:	2308      	movs	r3, #8
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e012      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800888c:	2310      	movs	r3, #16
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e00e      	b.n	80088b2 <UART_SetConfig+0x5a6>
 8008894:	2320      	movs	r3, #32
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e00a      	b.n	80088b2 <UART_SetConfig+0x5a6>
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e006      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e002      	b.n	80088b2 <UART_SetConfig+0x5a6>
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a3f      	ldr	r2, [pc, #252]	; (80089b4 <UART_SetConfig+0x6a8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	f040 80f8 	bne.w	8008aae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	dc46      	bgt.n	8008954 <UART_SetConfig+0x648>
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	f2c0 8082 	blt.w	80089d0 <UART_SetConfig+0x6c4>
 80088cc:	3b02      	subs	r3, #2
 80088ce:	2b1e      	cmp	r3, #30
 80088d0:	d87e      	bhi.n	80089d0 <UART_SetConfig+0x6c4>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x5cc>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	0800895b 	.word	0x0800895b
 80088dc:	080089d1 	.word	0x080089d1
 80088e0:	08008963 	.word	0x08008963
 80088e4:	080089d1 	.word	0x080089d1
 80088e8:	080089d1 	.word	0x080089d1
 80088ec:	080089d1 	.word	0x080089d1
 80088f0:	08008973 	.word	0x08008973
 80088f4:	080089d1 	.word	0x080089d1
 80088f8:	080089d1 	.word	0x080089d1
 80088fc:	080089d1 	.word	0x080089d1
 8008900:	080089d1 	.word	0x080089d1
 8008904:	080089d1 	.word	0x080089d1
 8008908:	080089d1 	.word	0x080089d1
 800890c:	080089d1 	.word	0x080089d1
 8008910:	08008983 	.word	0x08008983
 8008914:	080089d1 	.word	0x080089d1
 8008918:	080089d1 	.word	0x080089d1
 800891c:	080089d1 	.word	0x080089d1
 8008920:	080089d1 	.word	0x080089d1
 8008924:	080089d1 	.word	0x080089d1
 8008928:	080089d1 	.word	0x080089d1
 800892c:	080089d1 	.word	0x080089d1
 8008930:	080089d1 	.word	0x080089d1
 8008934:	080089d1 	.word	0x080089d1
 8008938:	080089d1 	.word	0x080089d1
 800893c:	080089d1 	.word	0x080089d1
 8008940:	080089d1 	.word	0x080089d1
 8008944:	080089d1 	.word	0x080089d1
 8008948:	080089d1 	.word	0x080089d1
 800894c:	080089d1 	.word	0x080089d1
 8008950:	080089c3 	.word	0x080089c3
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d037      	beq.n	80089c8 <UART_SetConfig+0x6bc>
 8008958:	e03a      	b.n	80089d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800895a:	f7fc ff9f 	bl	800589c <HAL_RCCEx_GetD3PCLK1Freq>
 800895e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008960:	e03c      	b.n	80089dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f7fc ffae 	bl	80058c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008970:	e034      	b.n	80089dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008972:	f107 0318 	add.w	r3, r7, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f7fd f8fa 	bl	8005b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008980:	e02c      	b.n	80089dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <UART_SetConfig+0x69c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d016      	beq.n	80089bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800898e:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <UART_SetConfig+0x69c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	08db      	lsrs	r3, r3, #3
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <UART_SetConfig+0x6ac>)
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089a0:	e01c      	b.n	80089dc <UART_SetConfig+0x6d0>
 80089a2:	bf00      	nop
 80089a4:	40011400 	.word	0x40011400
 80089a8:	58024400 	.word	0x58024400
 80089ac:	40007800 	.word	0x40007800
 80089b0:	40007c00 	.word	0x40007c00
 80089b4:	58000c00 	.word	0x58000c00
 80089b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80089bc:	4b9d      	ldr	r3, [pc, #628]	; (8008c34 <UART_SetConfig+0x928>)
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c0:	e00c      	b.n	80089dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089c2:	4b9d      	ldr	r3, [pc, #628]	; (8008c38 <UART_SetConfig+0x92c>)
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c6:	e009      	b.n	80089dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ce:	e005      	b.n	80089dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 81de 	beq.w	8008da0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	4a94      	ldr	r2, [pc, #592]	; (8008c3c <UART_SetConfig+0x930>)
 80089ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ee:	461a      	mov	r2, r3
 80089f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d305      	bcc.n	8008a14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d903      	bls.n	8008a1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a1a:	e1c1      	b.n	8008da0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2200      	movs	r2, #0
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	60fa      	str	r2, [r7, #12]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	4a84      	ldr	r2, [pc, #528]	; (8008c3c <UART_SetConfig+0x930>)
 8008a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2200      	movs	r2, #0
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a3e:	f7f7 fca7 	bl	8000390 <__aeabi_uldivmod>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	020b      	lsls	r3, r1, #8
 8008a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a58:	0202      	lsls	r2, r0, #8
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	6849      	ldr	r1, [r1, #4]
 8008a5e:	0849      	lsrs	r1, r1, #1
 8008a60:	2000      	movs	r0, #0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4605      	mov	r5, r0
 8008a66:	eb12 0804 	adds.w	r8, r2, r4
 8008a6a:	eb43 0905 	adc.w	r9, r3, r5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	469a      	mov	sl, r3
 8008a76:	4693      	mov	fp, r2
 8008a78:	4652      	mov	r2, sl
 8008a7a:	465b      	mov	r3, fp
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4649      	mov	r1, r9
 8008a80:	f7f7 fc86 	bl	8000390 <__aeabi_uldivmod>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4613      	mov	r3, r2
 8008a8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a92:	d308      	bcc.n	8008aa6 <UART_SetConfig+0x79a>
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a9a:	d204      	bcs.n	8008aa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	e17c      	b.n	8008da0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008aac:	e178      	b.n	8008da0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab6:	f040 80c5 	bne.w	8008c44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008aba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	dc48      	bgt.n	8008b54 <UART_SetConfig+0x848>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	db7b      	blt.n	8008bbe <UART_SetConfig+0x8b2>
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d879      	bhi.n	8008bbe <UART_SetConfig+0x8b2>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <UART_SetConfig+0x7c4>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008b5b 	.word	0x08008b5b
 8008ad4:	08008b63 	.word	0x08008b63
 8008ad8:	08008bbf 	.word	0x08008bbf
 8008adc:	08008bbf 	.word	0x08008bbf
 8008ae0:	08008b6b 	.word	0x08008b6b
 8008ae4:	08008bbf 	.word	0x08008bbf
 8008ae8:	08008bbf 	.word	0x08008bbf
 8008aec:	08008bbf 	.word	0x08008bbf
 8008af0:	08008b7b 	.word	0x08008b7b
 8008af4:	08008bbf 	.word	0x08008bbf
 8008af8:	08008bbf 	.word	0x08008bbf
 8008afc:	08008bbf 	.word	0x08008bbf
 8008b00:	08008bbf 	.word	0x08008bbf
 8008b04:	08008bbf 	.word	0x08008bbf
 8008b08:	08008bbf 	.word	0x08008bbf
 8008b0c:	08008bbf 	.word	0x08008bbf
 8008b10:	08008b8b 	.word	0x08008b8b
 8008b14:	08008bbf 	.word	0x08008bbf
 8008b18:	08008bbf 	.word	0x08008bbf
 8008b1c:	08008bbf 	.word	0x08008bbf
 8008b20:	08008bbf 	.word	0x08008bbf
 8008b24:	08008bbf 	.word	0x08008bbf
 8008b28:	08008bbf 	.word	0x08008bbf
 8008b2c:	08008bbf 	.word	0x08008bbf
 8008b30:	08008bbf 	.word	0x08008bbf
 8008b34:	08008bbf 	.word	0x08008bbf
 8008b38:	08008bbf 	.word	0x08008bbf
 8008b3c:	08008bbf 	.word	0x08008bbf
 8008b40:	08008bbf 	.word	0x08008bbf
 8008b44:	08008bbf 	.word	0x08008bbf
 8008b48:	08008bbf 	.word	0x08008bbf
 8008b4c:	08008bbf 	.word	0x08008bbf
 8008b50:	08008bb1 	.word	0x08008bb1
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d02e      	beq.n	8008bb6 <UART_SetConfig+0x8aa>
 8008b58:	e031      	b.n	8008bbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7fb ff2d 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b60:	e033      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b62:	f7fb ff3f 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 8008b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b68:	e02f      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fc feaa 	bl	80058c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	e027      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b7a:	f107 0318 	add.w	r3, r7, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fc fff6 	bl	8005b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b88:	e01f      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b8a:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <UART_SetConfig+0x934>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b96:	4b2a      	ldr	r3, [pc, #168]	; (8008c40 <UART_SetConfig+0x934>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	08db      	lsrs	r3, r3, #3
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	4a24      	ldr	r2, [pc, #144]	; (8008c34 <UART_SetConfig+0x928>)
 8008ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ba8:	e00f      	b.n	8008bca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008baa:	4b22      	ldr	r3, [pc, #136]	; (8008c34 <UART_SetConfig+0x928>)
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bae:	e00c      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bb0:	4b21      	ldr	r3, [pc, #132]	; (8008c38 <UART_SetConfig+0x92c>)
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb4:	e009      	b.n	8008bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bbc:	e005      	b.n	8008bca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80e7 	beq.w	8008da0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	4a19      	ldr	r2, [pc, #100]	; (8008c3c <UART_SetConfig+0x930>)
 8008bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be4:	005a      	lsls	r2, r3, #1
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	441a      	add	r2, r3
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d916      	bls.n	8008c2c <UART_SetConfig+0x920>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c04:	d212      	bcs.n	8008c2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f023 030f 	bic.w	r3, r3, #15
 8008c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008c28:	60da      	str	r2, [r3, #12]
 8008c2a:	e0b9      	b.n	8008da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c32:	e0b5      	b.n	8008da0 <UART_SetConfig+0xa94>
 8008c34:	03d09000 	.word	0x03d09000
 8008c38:	003d0900 	.word	0x003d0900
 8008c3c:	0800c5f8 	.word	0x0800c5f8
 8008c40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	dc49      	bgt.n	8008ce0 <UART_SetConfig+0x9d4>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	db7c      	blt.n	8008d4a <UART_SetConfig+0xa3e>
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d87a      	bhi.n	8008d4a <UART_SetConfig+0xa3e>
 8008c54:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0x950>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008ce7 	.word	0x08008ce7
 8008c60:	08008cef 	.word	0x08008cef
 8008c64:	08008d4b 	.word	0x08008d4b
 8008c68:	08008d4b 	.word	0x08008d4b
 8008c6c:	08008cf7 	.word	0x08008cf7
 8008c70:	08008d4b 	.word	0x08008d4b
 8008c74:	08008d4b 	.word	0x08008d4b
 8008c78:	08008d4b 	.word	0x08008d4b
 8008c7c:	08008d07 	.word	0x08008d07
 8008c80:	08008d4b 	.word	0x08008d4b
 8008c84:	08008d4b 	.word	0x08008d4b
 8008c88:	08008d4b 	.word	0x08008d4b
 8008c8c:	08008d4b 	.word	0x08008d4b
 8008c90:	08008d4b 	.word	0x08008d4b
 8008c94:	08008d4b 	.word	0x08008d4b
 8008c98:	08008d4b 	.word	0x08008d4b
 8008c9c:	08008d17 	.word	0x08008d17
 8008ca0:	08008d4b 	.word	0x08008d4b
 8008ca4:	08008d4b 	.word	0x08008d4b
 8008ca8:	08008d4b 	.word	0x08008d4b
 8008cac:	08008d4b 	.word	0x08008d4b
 8008cb0:	08008d4b 	.word	0x08008d4b
 8008cb4:	08008d4b 	.word	0x08008d4b
 8008cb8:	08008d4b 	.word	0x08008d4b
 8008cbc:	08008d4b 	.word	0x08008d4b
 8008cc0:	08008d4b 	.word	0x08008d4b
 8008cc4:	08008d4b 	.word	0x08008d4b
 8008cc8:	08008d4b 	.word	0x08008d4b
 8008ccc:	08008d4b 	.word	0x08008d4b
 8008cd0:	08008d4b 	.word	0x08008d4b
 8008cd4:	08008d4b 	.word	0x08008d4b
 8008cd8:	08008d4b 	.word	0x08008d4b
 8008cdc:	08008d3d 	.word	0x08008d3d
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d02e      	beq.n	8008d42 <UART_SetConfig+0xa36>
 8008ce4:	e031      	b.n	8008d4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ce6:	f7fb fe67 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8008cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cec:	e033      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cee:	f7fb fe79 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 8008cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cf4:	e02f      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fc fde4 	bl	80058c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d04:	e027      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d06:	f107 0318 	add.w	r3, r7, #24
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fc ff30 	bl	8005b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d14:	e01f      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d16:	4b2d      	ldr	r3, [pc, #180]	; (8008dcc <UART_SetConfig+0xac0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d22:	4b2a      	ldr	r3, [pc, #168]	; (8008dcc <UART_SetConfig+0xac0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	08db      	lsrs	r3, r3, #3
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	4a28      	ldr	r2, [pc, #160]	; (8008dd0 <UART_SetConfig+0xac4>)
 8008d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d34:	e00f      	b.n	8008d56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <UART_SetConfig+0xac4>)
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d3a:	e00c      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d3c:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <UART_SetConfig+0xac8>)
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d40:	e009      	b.n	8008d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d48:	e005      	b.n	8008d56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d54:	bf00      	nop
    }

    if (pclk != 0U)
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d021      	beq.n	8008da0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <UART_SetConfig+0xacc>)
 8008d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	441a      	add	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	d909      	bls.n	8008d9a <UART_SetConfig+0xa8e>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8c:	d205      	bcs.n	8008d9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	e002      	b.n	8008da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2200      	movs	r2, #0
 8008db4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008dbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3748      	adds	r7, #72	; 0x48
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	0800c5f8 	.word	0x0800c5f8

08008ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eda:	d10a      	bne.n	8008ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f30:	f7f9 fc6e 	bl	8002810 <HAL_GetTick>
 8008f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d10e      	bne.n	8008f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f82f 	bl	8008fb6 <UART_WaitOnFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e025      	b.n	8008fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d10e      	bne.n	8008f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f819 	bl	8008fb6 <UART_WaitOnFlagUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e00f      	b.n	8008fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b09c      	sub	sp, #112	; 0x70
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	603b      	str	r3, [r7, #0]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc6:	e0a9      	b.n	800911c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	f000 80a5 	beq.w	800911c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd2:	f7f9 fc1d 	bl	8002810 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d140      	bne.n	800906a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009008:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800900c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e6      	bne.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	663b      	str	r3, [r7, #96]	; 0x60
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800903a:	64ba      	str	r2, [r7, #72]	; 0x48
 800903c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e5      	bne.n	800901a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2220      	movs	r2, #32
 8009052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e069      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d051      	beq.n	800911c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009086:	d149      	bne.n	800911c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009090:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
 80090b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e6      	bne.n	8009092 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3308      	adds	r3, #8
 80090ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	613b      	str	r3, [r7, #16]
   return(result);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	66bb      	str	r3, [r7, #104]	; 0x68
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090e4:	623a      	str	r2, [r7, #32]
 80090e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	69f9      	ldr	r1, [r7, #28]
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e010      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69da      	ldr	r2, [r3, #28]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4013      	ands	r3, r2
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	429a      	cmp	r2, r3
 800912a:	bf0c      	ite	eq
 800912c:	2301      	moveq	r3, #1
 800912e:	2300      	movne	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	461a      	mov	r2, r3
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	429a      	cmp	r2, r3
 8009138:	f43f af46 	beq.w	8008fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3770      	adds	r7, #112	; 0x70
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_UARTEx_DisableFifoMode+0x16>
 8009158:	2302      	movs	r3, #2
 800915a:	e027      	b.n	80091ac <HAL_UARTEx_DisableFifoMode+0x66>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2224      	movs	r2, #36	; 0x24
 8009168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0201 	bic.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800918a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e02d      	b.n	800922c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2224      	movs	r2, #36	; 0x24
 80091dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0201 	bic.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f84f 	bl	80092b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009248:	2302      	movs	r3, #2
 800924a:	e02d      	b.n	80092a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2224      	movs	r2, #36	; 0x24
 8009258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0201 	bic.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f811 	bl	80092b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d108      	bne.n	80092d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092d0:	e031      	b.n	8009336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092d2:	2310      	movs	r3, #16
 80092d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d6:	2310      	movs	r3, #16
 80092d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	0e5b      	lsrs	r3, r3, #25
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0307 	and.w	r3, r3, #7
 80092e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	0f5b      	lsrs	r3, r3, #29
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	7b3a      	ldrb	r2, [r7, #12]
 80092fe:	4911      	ldr	r1, [pc, #68]	; (8009344 <UARTEx_SetNbDataToProcess+0x94>)
 8009300:	5c8a      	ldrb	r2, [r1, r2]
 8009302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009306:	7b3a      	ldrb	r2, [r7, #12]
 8009308:	490f      	ldr	r1, [pc, #60]	; (8009348 <UARTEx_SetNbDataToProcess+0x98>)
 800930a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800930c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	7b7a      	ldrb	r2, [r7, #13]
 800931c:	4909      	ldr	r1, [pc, #36]	; (8009344 <UARTEx_SetNbDataToProcess+0x94>)
 800931e:	5c8a      	ldrb	r2, [r1, r2]
 8009320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009324:	7b7a      	ldrb	r2, [r7, #13]
 8009326:	4908      	ldr	r1, [pc, #32]	; (8009348 <UARTEx_SetNbDataToProcess+0x98>)
 8009328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800932a:	fb93 f3f2 	sdiv	r3, r3, r2
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	0800c610 	.word	0x0800c610
 8009348:	0800c618 	.word	0x0800c618

0800934c <__errno>:
 800934c:	4b01      	ldr	r3, [pc, #4]	; (8009354 <__errno+0x8>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	24000018 	.word	0x24000018

08009358 <__libc_init_array>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	4d0d      	ldr	r5, [pc, #52]	; (8009390 <__libc_init_array+0x38>)
 800935c:	4c0d      	ldr	r4, [pc, #52]	; (8009394 <__libc_init_array+0x3c>)
 800935e:	1b64      	subs	r4, r4, r5
 8009360:	10a4      	asrs	r4, r4, #2
 8009362:	2600      	movs	r6, #0
 8009364:	42a6      	cmp	r6, r4
 8009366:	d109      	bne.n	800937c <__libc_init_array+0x24>
 8009368:	4d0b      	ldr	r5, [pc, #44]	; (8009398 <__libc_init_array+0x40>)
 800936a:	4c0c      	ldr	r4, [pc, #48]	; (800939c <__libc_init_array+0x44>)
 800936c:	f002 fe60 	bl	800c030 <_init>
 8009370:	1b64      	subs	r4, r4, r5
 8009372:	10a4      	asrs	r4, r4, #2
 8009374:	2600      	movs	r6, #0
 8009376:	42a6      	cmp	r6, r4
 8009378:	d105      	bne.n	8009386 <__libc_init_array+0x2e>
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009380:	4798      	blx	r3
 8009382:	3601      	adds	r6, #1
 8009384:	e7ee      	b.n	8009364 <__libc_init_array+0xc>
 8009386:	f855 3b04 	ldr.w	r3, [r5], #4
 800938a:	4798      	blx	r3
 800938c:	3601      	adds	r6, #1
 800938e:	e7f2      	b.n	8009376 <__libc_init_array+0x1e>
 8009390:	0800ca04 	.word	0x0800ca04
 8009394:	0800ca04 	.word	0x0800ca04
 8009398:	0800ca04 	.word	0x0800ca04
 800939c:	0800ca08 	.word	0x0800ca08

080093a0 <memcpy>:
 80093a0:	440a      	add	r2, r1
 80093a2:	4291      	cmp	r1, r2
 80093a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093a8:	d100      	bne.n	80093ac <memcpy+0xc>
 80093aa:	4770      	bx	lr
 80093ac:	b510      	push	{r4, lr}
 80093ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093b6:	4291      	cmp	r1, r2
 80093b8:	d1f9      	bne.n	80093ae <memcpy+0xe>
 80093ba:	bd10      	pop	{r4, pc}

080093bc <memset>:
 80093bc:	4402      	add	r2, r0
 80093be:	4603      	mov	r3, r0
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <__cvt>:
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	ed2d 8b02 	vpush	{d8}
 80093d2:	eeb0 8b40 	vmov.f64	d8, d0
 80093d6:	b085      	sub	sp, #20
 80093d8:	4617      	mov	r7, r2
 80093da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80093dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80093de:	ee18 2a90 	vmov	r2, s17
 80093e2:	f025 0520 	bic.w	r5, r5, #32
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	bfb6      	itet	lt
 80093ea:	222d      	movlt	r2, #45	; 0x2d
 80093ec:	2200      	movge	r2, #0
 80093ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80093f2:	2d46      	cmp	r5, #70	; 0x46
 80093f4:	460c      	mov	r4, r1
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	d004      	beq.n	8009404 <__cvt+0x38>
 80093fa:	2d45      	cmp	r5, #69	; 0x45
 80093fc:	d100      	bne.n	8009400 <__cvt+0x34>
 80093fe:	3401      	adds	r4, #1
 8009400:	2102      	movs	r1, #2
 8009402:	e000      	b.n	8009406 <__cvt+0x3a>
 8009404:	2103      	movs	r1, #3
 8009406:	ab03      	add	r3, sp, #12
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	ab02      	add	r3, sp, #8
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4622      	mov	r2, r4
 8009410:	4633      	mov	r3, r6
 8009412:	eeb0 0b48 	vmov.f64	d0, d8
 8009416:	f000 fccb 	bl	8009db0 <_dtoa_r>
 800941a:	2d47      	cmp	r5, #71	; 0x47
 800941c:	d101      	bne.n	8009422 <__cvt+0x56>
 800941e:	07fb      	lsls	r3, r7, #31
 8009420:	d51a      	bpl.n	8009458 <__cvt+0x8c>
 8009422:	2d46      	cmp	r5, #70	; 0x46
 8009424:	eb00 0204 	add.w	r2, r0, r4
 8009428:	d10c      	bne.n	8009444 <__cvt+0x78>
 800942a:	7803      	ldrb	r3, [r0, #0]
 800942c:	2b30      	cmp	r3, #48	; 0x30
 800942e:	d107      	bne.n	8009440 <__cvt+0x74>
 8009430:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	bf1c      	itt	ne
 800943a:	f1c4 0401 	rsbne	r4, r4, #1
 800943e:	6034      	strne	r4, [r6, #0]
 8009440:	6833      	ldr	r3, [r6, #0]
 8009442:	441a      	add	r2, r3
 8009444:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944c:	bf08      	it	eq
 800944e:	9203      	streq	r2, [sp, #12]
 8009450:	2130      	movs	r1, #48	; 0x30
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	4293      	cmp	r3, r2
 8009456:	d307      	bcc.n	8009468 <__cvt+0x9c>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800945c:	1a1b      	subs	r3, r3, r0
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	b005      	add	sp, #20
 8009462:	ecbd 8b02 	vpop	{d8}
 8009466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009468:	1c5c      	adds	r4, r3, #1
 800946a:	9403      	str	r4, [sp, #12]
 800946c:	7019      	strb	r1, [r3, #0]
 800946e:	e7f0      	b.n	8009452 <__cvt+0x86>

08009470 <__exponent>:
 8009470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009472:	4603      	mov	r3, r0
 8009474:	2900      	cmp	r1, #0
 8009476:	bfb8      	it	lt
 8009478:	4249      	neglt	r1, r1
 800947a:	f803 2b02 	strb.w	r2, [r3], #2
 800947e:	bfb4      	ite	lt
 8009480:	222d      	movlt	r2, #45	; 0x2d
 8009482:	222b      	movge	r2, #43	; 0x2b
 8009484:	2909      	cmp	r1, #9
 8009486:	7042      	strb	r2, [r0, #1]
 8009488:	dd2a      	ble.n	80094e0 <__exponent+0x70>
 800948a:	f10d 0407 	add.w	r4, sp, #7
 800948e:	46a4      	mov	ip, r4
 8009490:	270a      	movs	r7, #10
 8009492:	46a6      	mov	lr, r4
 8009494:	460a      	mov	r2, r1
 8009496:	fb91 f6f7 	sdiv	r6, r1, r7
 800949a:	fb07 1516 	mls	r5, r7, r6, r1
 800949e:	3530      	adds	r5, #48	; 0x30
 80094a0:	2a63      	cmp	r2, #99	; 0x63
 80094a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80094a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094aa:	4631      	mov	r1, r6
 80094ac:	dcf1      	bgt.n	8009492 <__exponent+0x22>
 80094ae:	3130      	adds	r1, #48	; 0x30
 80094b0:	f1ae 0502 	sub.w	r5, lr, #2
 80094b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094b8:	1c44      	adds	r4, r0, #1
 80094ba:	4629      	mov	r1, r5
 80094bc:	4561      	cmp	r1, ip
 80094be:	d30a      	bcc.n	80094d6 <__exponent+0x66>
 80094c0:	f10d 0209 	add.w	r2, sp, #9
 80094c4:	eba2 020e 	sub.w	r2, r2, lr
 80094c8:	4565      	cmp	r5, ip
 80094ca:	bf88      	it	hi
 80094cc:	2200      	movhi	r2, #0
 80094ce:	4413      	add	r3, r2
 80094d0:	1a18      	subs	r0, r3, r0
 80094d2:	b003      	add	sp, #12
 80094d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094de:	e7ed      	b.n	80094bc <__exponent+0x4c>
 80094e0:	2330      	movs	r3, #48	; 0x30
 80094e2:	3130      	adds	r1, #48	; 0x30
 80094e4:	7083      	strb	r3, [r0, #2]
 80094e6:	70c1      	strb	r1, [r0, #3]
 80094e8:	1d03      	adds	r3, r0, #4
 80094ea:	e7f1      	b.n	80094d0 <__exponent+0x60>
 80094ec:	0000      	movs	r0, r0
	...

080094f0 <_printf_float>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	b08b      	sub	sp, #44	; 0x2c
 80094f6:	460c      	mov	r4, r1
 80094f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80094fc:	4616      	mov	r6, r2
 80094fe:	461f      	mov	r7, r3
 8009500:	4605      	mov	r5, r0
 8009502:	f001 fab9 	bl	800aa78 <_localeconv_r>
 8009506:	f8d0 b000 	ldr.w	fp, [r0]
 800950a:	4658      	mov	r0, fp
 800950c:	f7f6 fee8 	bl	80002e0 <strlen>
 8009510:	2300      	movs	r3, #0
 8009512:	9308      	str	r3, [sp, #32]
 8009514:	f8d8 3000 	ldr.w	r3, [r8]
 8009518:	f894 9018 	ldrb.w	r9, [r4, #24]
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	3307      	adds	r3, #7
 8009520:	f023 0307 	bic.w	r3, r3, #7
 8009524:	f103 0108 	add.w	r1, r3, #8
 8009528:	f8c8 1000 	str.w	r1, [r8]
 800952c:	4682      	mov	sl, r0
 800952e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009532:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009536:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009798 <_printf_float+0x2a8>
 800953a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800953e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009542:	eeb4 6b47 	vcmp.f64	d6, d7
 8009546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954a:	dd24      	ble.n	8009596 <_printf_float+0xa6>
 800954c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009554:	d502      	bpl.n	800955c <_printf_float+0x6c>
 8009556:	232d      	movs	r3, #45	; 0x2d
 8009558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800955c:	4b90      	ldr	r3, [pc, #576]	; (80097a0 <_printf_float+0x2b0>)
 800955e:	4891      	ldr	r0, [pc, #580]	; (80097a4 <_printf_float+0x2b4>)
 8009560:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009564:	bf94      	ite	ls
 8009566:	4698      	movls	r8, r3
 8009568:	4680      	movhi	r8, r0
 800956a:	2303      	movs	r3, #3
 800956c:	6123      	str	r3, [r4, #16]
 800956e:	f022 0204 	bic.w	r2, r2, #4
 8009572:	2300      	movs	r3, #0
 8009574:	6022      	str	r2, [r4, #0]
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	9700      	str	r7, [sp, #0]
 800957a:	4633      	mov	r3, r6
 800957c:	aa09      	add	r2, sp, #36	; 0x24
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f9d3 	bl	800992c <_printf_common>
 8009586:	3001      	adds	r0, #1
 8009588:	f040 808a 	bne.w	80096a0 <_printf_float+0x1b0>
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	b00b      	add	sp, #44	; 0x2c
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	eeb4 0b40 	vcmp.f64	d0, d0
 800959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959e:	d709      	bvc.n	80095b4 <_printf_float+0xc4>
 80095a0:	ee10 3a90 	vmov	r3, s1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfbc      	itt	lt
 80095a8:	232d      	movlt	r3, #45	; 0x2d
 80095aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095ae:	487e      	ldr	r0, [pc, #504]	; (80097a8 <_printf_float+0x2b8>)
 80095b0:	4b7e      	ldr	r3, [pc, #504]	; (80097ac <_printf_float+0x2bc>)
 80095b2:	e7d5      	b.n	8009560 <_printf_float+0x70>
 80095b4:	6863      	ldr	r3, [r4, #4]
 80095b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80095ba:	9104      	str	r1, [sp, #16]
 80095bc:	1c59      	adds	r1, r3, #1
 80095be:	d13c      	bne.n	800963a <_printf_float+0x14a>
 80095c0:	2306      	movs	r3, #6
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	2300      	movs	r3, #0
 80095c6:	9303      	str	r3, [sp, #12]
 80095c8:	ab08      	add	r3, sp, #32
 80095ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80095ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095d2:	ab07      	add	r3, sp, #28
 80095d4:	6861      	ldr	r1, [r4, #4]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	f10d 031b 	add.w	r3, sp, #27
 80095de:	4628      	mov	r0, r5
 80095e0:	f7ff fef4 	bl	80093cc <__cvt>
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	9907      	ldr	r1, [sp, #28]
 80095e8:	2b47      	cmp	r3, #71	; 0x47
 80095ea:	4680      	mov	r8, r0
 80095ec:	d108      	bne.n	8009600 <_printf_float+0x110>
 80095ee:	1cc8      	adds	r0, r1, #3
 80095f0:	db02      	blt.n	80095f8 <_printf_float+0x108>
 80095f2:	6863      	ldr	r3, [r4, #4]
 80095f4:	4299      	cmp	r1, r3
 80095f6:	dd41      	ble.n	800967c <_printf_float+0x18c>
 80095f8:	f1a9 0902 	sub.w	r9, r9, #2
 80095fc:	fa5f f989 	uxtb.w	r9, r9
 8009600:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009604:	d820      	bhi.n	8009648 <_printf_float+0x158>
 8009606:	3901      	subs	r1, #1
 8009608:	464a      	mov	r2, r9
 800960a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800960e:	9107      	str	r1, [sp, #28]
 8009610:	f7ff ff2e 	bl	8009470 <__exponent>
 8009614:	9a08      	ldr	r2, [sp, #32]
 8009616:	9004      	str	r0, [sp, #16]
 8009618:	1813      	adds	r3, r2, r0
 800961a:	2a01      	cmp	r2, #1
 800961c:	6123      	str	r3, [r4, #16]
 800961e:	dc02      	bgt.n	8009626 <_printf_float+0x136>
 8009620:	6822      	ldr	r2, [r4, #0]
 8009622:	07d2      	lsls	r2, r2, #31
 8009624:	d501      	bpl.n	800962a <_printf_float+0x13a>
 8009626:	3301      	adds	r3, #1
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0a2      	beq.n	8009578 <_printf_float+0x88>
 8009632:	232d      	movs	r3, #45	; 0x2d
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009638:	e79e      	b.n	8009578 <_printf_float+0x88>
 800963a:	9904      	ldr	r1, [sp, #16]
 800963c:	2947      	cmp	r1, #71	; 0x47
 800963e:	d1c1      	bne.n	80095c4 <_printf_float+0xd4>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1bf      	bne.n	80095c4 <_printf_float+0xd4>
 8009644:	2301      	movs	r3, #1
 8009646:	e7bc      	b.n	80095c2 <_printf_float+0xd2>
 8009648:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800964c:	d118      	bne.n	8009680 <_printf_float+0x190>
 800964e:	2900      	cmp	r1, #0
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	dd0b      	ble.n	800966c <_printf_float+0x17c>
 8009654:	6121      	str	r1, [r4, #16]
 8009656:	b913      	cbnz	r3, 800965e <_printf_float+0x16e>
 8009658:	6822      	ldr	r2, [r4, #0]
 800965a:	07d0      	lsls	r0, r2, #31
 800965c:	d502      	bpl.n	8009664 <_printf_float+0x174>
 800965e:	3301      	adds	r3, #1
 8009660:	440b      	add	r3, r1
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	2300      	movs	r3, #0
 8009666:	65a1      	str	r1, [r4, #88]	; 0x58
 8009668:	9304      	str	r3, [sp, #16]
 800966a:	e7de      	b.n	800962a <_printf_float+0x13a>
 800966c:	b913      	cbnz	r3, 8009674 <_printf_float+0x184>
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	07d2      	lsls	r2, r2, #31
 8009672:	d501      	bpl.n	8009678 <_printf_float+0x188>
 8009674:	3302      	adds	r3, #2
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x172>
 8009678:	2301      	movs	r3, #1
 800967a:	e7f2      	b.n	8009662 <_printf_float+0x172>
 800967c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	4299      	cmp	r1, r3
 8009684:	db05      	blt.n	8009692 <_printf_float+0x1a2>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	6121      	str	r1, [r4, #16]
 800968a:	07d8      	lsls	r0, r3, #31
 800968c:	d5ea      	bpl.n	8009664 <_printf_float+0x174>
 800968e:	1c4b      	adds	r3, r1, #1
 8009690:	e7e7      	b.n	8009662 <_printf_float+0x172>
 8009692:	2900      	cmp	r1, #0
 8009694:	bfd4      	ite	le
 8009696:	f1c1 0202 	rsble	r2, r1, #2
 800969a:	2201      	movgt	r2, #1
 800969c:	4413      	add	r3, r2
 800969e:	e7e0      	b.n	8009662 <_printf_float+0x172>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	055a      	lsls	r2, r3, #21
 80096a4:	d407      	bmi.n	80096b6 <_printf_float+0x1c6>
 80096a6:	6923      	ldr	r3, [r4, #16]
 80096a8:	4642      	mov	r2, r8
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	d12a      	bne.n	800970a <_printf_float+0x21a>
 80096b4:	e76a      	b.n	800958c <_printf_float+0x9c>
 80096b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80096ba:	f240 80e2 	bls.w	8009882 <_printf_float+0x392>
 80096be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80096c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ca:	d133      	bne.n	8009734 <_printf_float+0x244>
 80096cc:	4a38      	ldr	r2, [pc, #224]	; (80097b0 <_printf_float+0x2c0>)
 80096ce:	2301      	movs	r3, #1
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	f43f af58 	beq.w	800958c <_printf_float+0x9c>
 80096dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	db02      	blt.n	80096ea <_printf_float+0x1fa>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07d8      	lsls	r0, r3, #31
 80096e8:	d50f      	bpl.n	800970a <_printf_float+0x21a>
 80096ea:	4653      	mov	r3, sl
 80096ec:	465a      	mov	r2, fp
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f af49 	beq.w	800958c <_printf_float+0x9c>
 80096fa:	f04f 0800 	mov.w	r8, #0
 80096fe:	f104 091a 	add.w	r9, r4, #26
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	3b01      	subs	r3, #1
 8009706:	4543      	cmp	r3, r8
 8009708:	dc09      	bgt.n	800971e <_printf_float+0x22e>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	079b      	lsls	r3, r3, #30
 800970e:	f100 8108 	bmi.w	8009922 <_printf_float+0x432>
 8009712:	68e0      	ldr	r0, [r4, #12]
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	4298      	cmp	r0, r3
 8009718:	bfb8      	it	lt
 800971a:	4618      	movlt	r0, r3
 800971c:	e738      	b.n	8009590 <_printf_float+0xa0>
 800971e:	2301      	movs	r3, #1
 8009720:	464a      	mov	r2, r9
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	f43f af2f 	beq.w	800958c <_printf_float+0x9c>
 800972e:	f108 0801 	add.w	r8, r8, #1
 8009732:	e7e6      	b.n	8009702 <_printf_float+0x212>
 8009734:	9b07      	ldr	r3, [sp, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	dc3c      	bgt.n	80097b4 <_printf_float+0x2c4>
 800973a:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <_printf_float+0x2c0>)
 800973c:	2301      	movs	r3, #1
 800973e:	4631      	mov	r1, r6
 8009740:	4628      	mov	r0, r5
 8009742:	47b8      	blx	r7
 8009744:	3001      	adds	r0, #1
 8009746:	f43f af21 	beq.w	800958c <_printf_float+0x9c>
 800974a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800974e:	4313      	orrs	r3, r2
 8009750:	d102      	bne.n	8009758 <_printf_float+0x268>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	07d9      	lsls	r1, r3, #31
 8009756:	d5d8      	bpl.n	800970a <_printf_float+0x21a>
 8009758:	4653      	mov	r3, sl
 800975a:	465a      	mov	r2, fp
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	f43f af12 	beq.w	800958c <_printf_float+0x9c>
 8009768:	f04f 0900 	mov.w	r9, #0
 800976c:	f104 0a1a 	add.w	sl, r4, #26
 8009770:	9b07      	ldr	r3, [sp, #28]
 8009772:	425b      	negs	r3, r3
 8009774:	454b      	cmp	r3, r9
 8009776:	dc01      	bgt.n	800977c <_printf_float+0x28c>
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	e795      	b.n	80096a8 <_printf_float+0x1b8>
 800977c:	2301      	movs	r3, #1
 800977e:	4652      	mov	r2, sl
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af00 	beq.w	800958c <_printf_float+0x9c>
 800978c:	f109 0901 	add.w	r9, r9, #1
 8009790:	e7ee      	b.n	8009770 <_printf_float+0x280>
 8009792:	bf00      	nop
 8009794:	f3af 8000 	nop.w
 8009798:	ffffffff 	.word	0xffffffff
 800979c:	7fefffff 	.word	0x7fefffff
 80097a0:	0800c624 	.word	0x0800c624
 80097a4:	0800c628 	.word	0x0800c628
 80097a8:	0800c630 	.word	0x0800c630
 80097ac:	0800c62c 	.word	0x0800c62c
 80097b0:	0800c634 	.word	0x0800c634
 80097b4:	9a08      	ldr	r2, [sp, #32]
 80097b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097b8:	429a      	cmp	r2, r3
 80097ba:	bfa8      	it	ge
 80097bc:	461a      	movge	r2, r3
 80097be:	2a00      	cmp	r2, #0
 80097c0:	4691      	mov	r9, r2
 80097c2:	dc38      	bgt.n	8009836 <_printf_float+0x346>
 80097c4:	2300      	movs	r3, #0
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097cc:	f104 021a 	add.w	r2, r4, #26
 80097d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	eba3 0309 	sub.w	r3, r3, r9
 80097da:	428b      	cmp	r3, r1
 80097dc:	dc33      	bgt.n	8009846 <_printf_float+0x356>
 80097de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	db3c      	blt.n	8009860 <_printf_float+0x370>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	07da      	lsls	r2, r3, #31
 80097ea:	d439      	bmi.n	8009860 <_printf_float+0x370>
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	9a04      	ldr	r2, [sp, #16]
 80097f0:	9907      	ldr	r1, [sp, #28]
 80097f2:	1a9a      	subs	r2, r3, r2
 80097f4:	eba3 0901 	sub.w	r9, r3, r1
 80097f8:	4591      	cmp	r9, r2
 80097fa:	bfa8      	it	ge
 80097fc:	4691      	movge	r9, r2
 80097fe:	f1b9 0f00 	cmp.w	r9, #0
 8009802:	dc35      	bgt.n	8009870 <_printf_float+0x380>
 8009804:	f04f 0800 	mov.w	r8, #0
 8009808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800980c:	f104 0a1a 	add.w	sl, r4, #26
 8009810:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	eba3 0309 	sub.w	r3, r3, r9
 800981a:	4543      	cmp	r3, r8
 800981c:	f77f af75 	ble.w	800970a <_printf_float+0x21a>
 8009820:	2301      	movs	r3, #1
 8009822:	4652      	mov	r2, sl
 8009824:	4631      	mov	r1, r6
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	f43f aeae 	beq.w	800958c <_printf_float+0x9c>
 8009830:	f108 0801 	add.w	r8, r8, #1
 8009834:	e7ec      	b.n	8009810 <_printf_float+0x320>
 8009836:	4613      	mov	r3, r2
 8009838:	4631      	mov	r1, r6
 800983a:	4642      	mov	r2, r8
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	d1bf      	bne.n	80097c4 <_printf_float+0x2d4>
 8009844:	e6a2      	b.n	800958c <_printf_float+0x9c>
 8009846:	2301      	movs	r3, #1
 8009848:	4631      	mov	r1, r6
 800984a:	4628      	mov	r0, r5
 800984c:	9204      	str	r2, [sp, #16]
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f ae9b 	beq.w	800958c <_printf_float+0x9c>
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	9a04      	ldr	r2, [sp, #16]
 800985a:	3301      	adds	r3, #1
 800985c:	9305      	str	r3, [sp, #20]
 800985e:	e7b7      	b.n	80097d0 <_printf_float+0x2e0>
 8009860:	4653      	mov	r3, sl
 8009862:	465a      	mov	r2, fp
 8009864:	4631      	mov	r1, r6
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	d1be      	bne.n	80097ec <_printf_float+0x2fc>
 800986e:	e68d      	b.n	800958c <_printf_float+0x9c>
 8009870:	9a04      	ldr	r2, [sp, #16]
 8009872:	464b      	mov	r3, r9
 8009874:	4442      	add	r2, r8
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	47b8      	blx	r7
 800987c:	3001      	adds	r0, #1
 800987e:	d1c1      	bne.n	8009804 <_printf_float+0x314>
 8009880:	e684      	b.n	800958c <_printf_float+0x9c>
 8009882:	9a08      	ldr	r2, [sp, #32]
 8009884:	2a01      	cmp	r2, #1
 8009886:	dc01      	bgt.n	800988c <_printf_float+0x39c>
 8009888:	07db      	lsls	r3, r3, #31
 800988a:	d537      	bpl.n	80098fc <_printf_float+0x40c>
 800988c:	2301      	movs	r3, #1
 800988e:	4642      	mov	r2, r8
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f ae78 	beq.w	800958c <_printf_float+0x9c>
 800989c:	4653      	mov	r3, sl
 800989e:	465a      	mov	r2, fp
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f ae70 	beq.w	800958c <_printf_float+0x9c>
 80098ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80098b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b8:	d01b      	beq.n	80098f2 <_printf_float+0x402>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	f108 0201 	add.w	r2, r8, #1
 80098c0:	3b01      	subs	r3, #1
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	d10e      	bne.n	80098ea <_printf_float+0x3fa>
 80098cc:	e65e      	b.n	800958c <_printf_float+0x9c>
 80098ce:	2301      	movs	r3, #1
 80098d0:	464a      	mov	r2, r9
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	f43f ae57 	beq.w	800958c <_printf_float+0x9c>
 80098de:	f108 0801 	add.w	r8, r8, #1
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	4543      	cmp	r3, r8
 80098e8:	dcf1      	bgt.n	80098ce <_printf_float+0x3de>
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098f0:	e6db      	b.n	80096aa <_printf_float+0x1ba>
 80098f2:	f04f 0800 	mov.w	r8, #0
 80098f6:	f104 091a 	add.w	r9, r4, #26
 80098fa:	e7f2      	b.n	80098e2 <_printf_float+0x3f2>
 80098fc:	2301      	movs	r3, #1
 80098fe:	4642      	mov	r2, r8
 8009900:	e7df      	b.n	80098c2 <_printf_float+0x3d2>
 8009902:	2301      	movs	r3, #1
 8009904:	464a      	mov	r2, r9
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	47b8      	blx	r7
 800990c:	3001      	adds	r0, #1
 800990e:	f43f ae3d 	beq.w	800958c <_printf_float+0x9c>
 8009912:	f108 0801 	add.w	r8, r8, #1
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800991a:	1a5b      	subs	r3, r3, r1
 800991c:	4543      	cmp	r3, r8
 800991e:	dcf0      	bgt.n	8009902 <_printf_float+0x412>
 8009920:	e6f7      	b.n	8009712 <_printf_float+0x222>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	f104 0919 	add.w	r9, r4, #25
 800992a:	e7f4      	b.n	8009916 <_printf_float+0x426>

0800992c <_printf_common>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	4616      	mov	r6, r2
 8009932:	4699      	mov	r9, r3
 8009934:	688a      	ldr	r2, [r1, #8]
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800993c:	4293      	cmp	r3, r2
 800993e:	bfb8      	it	lt
 8009940:	4613      	movlt	r3, r2
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009948:	4607      	mov	r7, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b10a      	cbz	r2, 8009952 <_printf_common+0x26>
 800994e:	3301      	adds	r3, #1
 8009950:	6033      	str	r3, [r6, #0]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	0699      	lsls	r1, r3, #26
 8009956:	bf42      	ittt	mi
 8009958:	6833      	ldrmi	r3, [r6, #0]
 800995a:	3302      	addmi	r3, #2
 800995c:	6033      	strmi	r3, [r6, #0]
 800995e:	6825      	ldr	r5, [r4, #0]
 8009960:	f015 0506 	ands.w	r5, r5, #6
 8009964:	d106      	bne.n	8009974 <_printf_common+0x48>
 8009966:	f104 0a19 	add.w	sl, r4, #25
 800996a:	68e3      	ldr	r3, [r4, #12]
 800996c:	6832      	ldr	r2, [r6, #0]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	42ab      	cmp	r3, r5
 8009972:	dc26      	bgt.n	80099c2 <_printf_common+0x96>
 8009974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009978:	1e13      	subs	r3, r2, #0
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	bf18      	it	ne
 800997e:	2301      	movne	r3, #1
 8009980:	0692      	lsls	r2, r2, #26
 8009982:	d42b      	bmi.n	80099dc <_printf_common+0xb0>
 8009984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d01e      	beq.n	80099d0 <_printf_common+0xa4>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	68e5      	ldr	r5, [r4, #12]
 8009996:	6832      	ldr	r2, [r6, #0]
 8009998:	f003 0306 	and.w	r3, r3, #6
 800999c:	2b04      	cmp	r3, #4
 800999e:	bf08      	it	eq
 80099a0:	1aad      	subeq	r5, r5, r2
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	6922      	ldr	r2, [r4, #16]
 80099a6:	bf0c      	ite	eq
 80099a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099ac:	2500      	movne	r5, #0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bfc4      	itt	gt
 80099b2:	1a9b      	subgt	r3, r3, r2
 80099b4:	18ed      	addgt	r5, r5, r3
 80099b6:	2600      	movs	r6, #0
 80099b8:	341a      	adds	r4, #26
 80099ba:	42b5      	cmp	r5, r6
 80099bc:	d11a      	bne.n	80099f4 <_printf_common+0xc8>
 80099be:	2000      	movs	r0, #0
 80099c0:	e008      	b.n	80099d4 <_printf_common+0xa8>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4652      	mov	r2, sl
 80099c6:	4649      	mov	r1, r9
 80099c8:	4638      	mov	r0, r7
 80099ca:	47c0      	blx	r8
 80099cc:	3001      	adds	r0, #1
 80099ce:	d103      	bne.n	80099d8 <_printf_common+0xac>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d8:	3501      	adds	r5, #1
 80099da:	e7c6      	b.n	800996a <_printf_common+0x3e>
 80099dc:	18e1      	adds	r1, r4, r3
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	2030      	movs	r0, #48	; 0x30
 80099e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099e6:	4422      	add	r2, r4
 80099e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099f0:	3302      	adds	r3, #2
 80099f2:	e7c7      	b.n	8009984 <_printf_common+0x58>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4622      	mov	r2, r4
 80099f8:	4649      	mov	r1, r9
 80099fa:	4638      	mov	r0, r7
 80099fc:	47c0      	blx	r8
 80099fe:	3001      	adds	r0, #1
 8009a00:	d0e6      	beq.n	80099d0 <_printf_common+0xa4>
 8009a02:	3601      	adds	r6, #1
 8009a04:	e7d9      	b.n	80099ba <_printf_common+0x8e>
	...

08009a08 <_printf_i>:
 8009a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	7e0f      	ldrb	r7, [r1, #24]
 8009a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a10:	2f78      	cmp	r7, #120	; 0x78
 8009a12:	4691      	mov	r9, r2
 8009a14:	4680      	mov	r8, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	469a      	mov	sl, r3
 8009a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a1e:	d807      	bhi.n	8009a30 <_printf_i+0x28>
 8009a20:	2f62      	cmp	r7, #98	; 0x62
 8009a22:	d80a      	bhi.n	8009a3a <_printf_i+0x32>
 8009a24:	2f00      	cmp	r7, #0
 8009a26:	f000 80d8 	beq.w	8009bda <_printf_i+0x1d2>
 8009a2a:	2f58      	cmp	r7, #88	; 0x58
 8009a2c:	f000 80a3 	beq.w	8009b76 <_printf_i+0x16e>
 8009a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a38:	e03a      	b.n	8009ab0 <_printf_i+0xa8>
 8009a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a3e:	2b15      	cmp	r3, #21
 8009a40:	d8f6      	bhi.n	8009a30 <_printf_i+0x28>
 8009a42:	a101      	add	r1, pc, #4	; (adr r1, 8009a48 <_printf_i+0x40>)
 8009a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009ab5 	.word	0x08009ab5
 8009a50:	08009a31 	.word	0x08009a31
 8009a54:	08009a31 	.word	0x08009a31
 8009a58:	08009a31 	.word	0x08009a31
 8009a5c:	08009a31 	.word	0x08009a31
 8009a60:	08009ab5 	.word	0x08009ab5
 8009a64:	08009a31 	.word	0x08009a31
 8009a68:	08009a31 	.word	0x08009a31
 8009a6c:	08009a31 	.word	0x08009a31
 8009a70:	08009a31 	.word	0x08009a31
 8009a74:	08009bc1 	.word	0x08009bc1
 8009a78:	08009ae5 	.word	0x08009ae5
 8009a7c:	08009ba3 	.word	0x08009ba3
 8009a80:	08009a31 	.word	0x08009a31
 8009a84:	08009a31 	.word	0x08009a31
 8009a88:	08009be3 	.word	0x08009be3
 8009a8c:	08009a31 	.word	0x08009a31
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a31 	.word	0x08009a31
 8009a98:	08009a31 	.word	0x08009a31
 8009a9c:	08009bab 	.word	0x08009bab
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	602a      	str	r2, [r5, #0]
 8009aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0a3      	b.n	8009bfc <_printf_i+0x1f4>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	6829      	ldr	r1, [r5, #0]
 8009ab8:	0606      	lsls	r6, r0, #24
 8009aba:	f101 0304 	add.w	r3, r1, #4
 8009abe:	d50a      	bpl.n	8009ad6 <_printf_i+0xce>
 8009ac0:	680e      	ldr	r6, [r1, #0]
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	2e00      	cmp	r6, #0
 8009ac6:	da03      	bge.n	8009ad0 <_printf_i+0xc8>
 8009ac8:	232d      	movs	r3, #45	; 0x2d
 8009aca:	4276      	negs	r6, r6
 8009acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad0:	485e      	ldr	r0, [pc, #376]	; (8009c4c <_printf_i+0x244>)
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	e019      	b.n	8009b0a <_printf_i+0x102>
 8009ad6:	680e      	ldr	r6, [r1, #0]
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ade:	bf18      	it	ne
 8009ae0:	b236      	sxthne	r6, r6
 8009ae2:	e7ef      	b.n	8009ac4 <_printf_i+0xbc>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	6029      	str	r1, [r5, #0]
 8009aec:	0601      	lsls	r1, r0, #24
 8009aee:	d501      	bpl.n	8009af4 <_printf_i+0xec>
 8009af0:	681e      	ldr	r6, [r3, #0]
 8009af2:	e002      	b.n	8009afa <_printf_i+0xf2>
 8009af4:	0646      	lsls	r6, r0, #25
 8009af6:	d5fb      	bpl.n	8009af0 <_printf_i+0xe8>
 8009af8:	881e      	ldrh	r6, [r3, #0]
 8009afa:	4854      	ldr	r0, [pc, #336]	; (8009c4c <_printf_i+0x244>)
 8009afc:	2f6f      	cmp	r7, #111	; 0x6f
 8009afe:	bf0c      	ite	eq
 8009b00:	2308      	moveq	r3, #8
 8009b02:	230a      	movne	r3, #10
 8009b04:	2100      	movs	r1, #0
 8009b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b0a:	6865      	ldr	r5, [r4, #4]
 8009b0c:	60a5      	str	r5, [r4, #8]
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	bfa2      	ittt	ge
 8009b12:	6821      	ldrge	r1, [r4, #0]
 8009b14:	f021 0104 	bicge.w	r1, r1, #4
 8009b18:	6021      	strge	r1, [r4, #0]
 8009b1a:	b90e      	cbnz	r6, 8009b20 <_printf_i+0x118>
 8009b1c:	2d00      	cmp	r5, #0
 8009b1e:	d04d      	beq.n	8009bbc <_printf_i+0x1b4>
 8009b20:	4615      	mov	r5, r2
 8009b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b26:	fb03 6711 	mls	r7, r3, r1, r6
 8009b2a:	5dc7      	ldrb	r7, [r0, r7]
 8009b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b30:	4637      	mov	r7, r6
 8009b32:	42bb      	cmp	r3, r7
 8009b34:	460e      	mov	r6, r1
 8009b36:	d9f4      	bls.n	8009b22 <_printf_i+0x11a>
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d10b      	bne.n	8009b54 <_printf_i+0x14c>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	07de      	lsls	r6, r3, #31
 8009b40:	d508      	bpl.n	8009b54 <_printf_i+0x14c>
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	4299      	cmp	r1, r3
 8009b48:	bfde      	ittt	le
 8009b4a:	2330      	movle	r3, #48	; 0x30
 8009b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b54:	1b52      	subs	r2, r2, r5
 8009b56:	6122      	str	r2, [r4, #16]
 8009b58:	f8cd a000 	str.w	sl, [sp]
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	aa03      	add	r2, sp, #12
 8009b60:	4621      	mov	r1, r4
 8009b62:	4640      	mov	r0, r8
 8009b64:	f7ff fee2 	bl	800992c <_printf_common>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d14c      	bne.n	8009c06 <_printf_i+0x1fe>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	b004      	add	sp, #16
 8009b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b76:	4835      	ldr	r0, [pc, #212]	; (8009c4c <_printf_i+0x244>)
 8009b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b7c:	6829      	ldr	r1, [r5, #0]
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b84:	6029      	str	r1, [r5, #0]
 8009b86:	061d      	lsls	r5, r3, #24
 8009b88:	d514      	bpl.n	8009bb4 <_printf_i+0x1ac>
 8009b8a:	07df      	lsls	r7, r3, #31
 8009b8c:	bf44      	itt	mi
 8009b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b92:	6023      	strmi	r3, [r4, #0]
 8009b94:	b91e      	cbnz	r6, 8009b9e <_printf_i+0x196>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	f023 0320 	bic.w	r3, r3, #32
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	e7b0      	b.n	8009b04 <_printf_i+0xfc>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	f043 0320 	orr.w	r3, r3, #32
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	2378      	movs	r3, #120	; 0x78
 8009bac:	4828      	ldr	r0, [pc, #160]	; (8009c50 <_printf_i+0x248>)
 8009bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bb2:	e7e3      	b.n	8009b7c <_printf_i+0x174>
 8009bb4:	0659      	lsls	r1, r3, #25
 8009bb6:	bf48      	it	mi
 8009bb8:	b2b6      	uxthmi	r6, r6
 8009bba:	e7e6      	b.n	8009b8a <_printf_i+0x182>
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	e7bb      	b.n	8009b38 <_printf_i+0x130>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	6826      	ldr	r6, [r4, #0]
 8009bc4:	6961      	ldr	r1, [r4, #20]
 8009bc6:	1d18      	adds	r0, r3, #4
 8009bc8:	6028      	str	r0, [r5, #0]
 8009bca:	0635      	lsls	r5, r6, #24
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	d501      	bpl.n	8009bd4 <_printf_i+0x1cc>
 8009bd0:	6019      	str	r1, [r3, #0]
 8009bd2:	e002      	b.n	8009bda <_printf_i+0x1d2>
 8009bd4:	0670      	lsls	r0, r6, #25
 8009bd6:	d5fb      	bpl.n	8009bd0 <_printf_i+0x1c8>
 8009bd8:	8019      	strh	r1, [r3, #0]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	4615      	mov	r5, r2
 8009be0:	e7ba      	b.n	8009b58 <_printf_i+0x150>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	1d1a      	adds	r2, r3, #4
 8009be6:	602a      	str	r2, [r5, #0]
 8009be8:	681d      	ldr	r5, [r3, #0]
 8009bea:	6862      	ldr	r2, [r4, #4]
 8009bec:	2100      	movs	r1, #0
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 fb7e 	bl	80002f0 <memchr>
 8009bf4:	b108      	cbz	r0, 8009bfa <_printf_i+0x1f2>
 8009bf6:	1b40      	subs	r0, r0, r5
 8009bf8:	6060      	str	r0, [r4, #4]
 8009bfa:	6863      	ldr	r3, [r4, #4]
 8009bfc:	6123      	str	r3, [r4, #16]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c04:	e7a8      	b.n	8009b58 <_printf_i+0x150>
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47d0      	blx	sl
 8009c10:	3001      	adds	r0, #1
 8009c12:	d0ab      	beq.n	8009b6c <_printf_i+0x164>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	079b      	lsls	r3, r3, #30
 8009c18:	d413      	bmi.n	8009c42 <_printf_i+0x23a>
 8009c1a:	68e0      	ldr	r0, [r4, #12]
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	bfb8      	it	lt
 8009c22:	4618      	movlt	r0, r3
 8009c24:	e7a4      	b.n	8009b70 <_printf_i+0x168>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4632      	mov	r2, r6
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	47d0      	blx	sl
 8009c30:	3001      	adds	r0, #1
 8009c32:	d09b      	beq.n	8009b6c <_printf_i+0x164>
 8009c34:	3501      	adds	r5, #1
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	9903      	ldr	r1, [sp, #12]
 8009c3a:	1a5b      	subs	r3, r3, r1
 8009c3c:	42ab      	cmp	r3, r5
 8009c3e:	dcf2      	bgt.n	8009c26 <_printf_i+0x21e>
 8009c40:	e7eb      	b.n	8009c1a <_printf_i+0x212>
 8009c42:	2500      	movs	r5, #0
 8009c44:	f104 0619 	add.w	r6, r4, #25
 8009c48:	e7f5      	b.n	8009c36 <_printf_i+0x22e>
 8009c4a:	bf00      	nop
 8009c4c:	0800c636 	.word	0x0800c636
 8009c50:	0800c647 	.word	0x0800c647

08009c54 <siprintf>:
 8009c54:	b40e      	push	{r1, r2, r3}
 8009c56:	b500      	push	{lr}
 8009c58:	b09c      	sub	sp, #112	; 0x70
 8009c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c5c:	9002      	str	r0, [sp, #8]
 8009c5e:	9006      	str	r0, [sp, #24]
 8009c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c64:	4809      	ldr	r0, [pc, #36]	; (8009c8c <siprintf+0x38>)
 8009c66:	9107      	str	r1, [sp, #28]
 8009c68:	9104      	str	r1, [sp, #16]
 8009c6a:	4909      	ldr	r1, [pc, #36]	; (8009c90 <siprintf+0x3c>)
 8009c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c70:	9105      	str	r1, [sp, #20]
 8009c72:	6800      	ldr	r0, [r0, #0]
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	a902      	add	r1, sp, #8
 8009c78:	f001 fbe4 	bl	800b444 <_svfiprintf_r>
 8009c7c:	9b02      	ldr	r3, [sp, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	b01c      	add	sp, #112	; 0x70
 8009c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c88:	b003      	add	sp, #12
 8009c8a:	4770      	bx	lr
 8009c8c:	24000018 	.word	0x24000018
 8009c90:	ffff0208 	.word	0xffff0208

08009c94 <quorem>:
 8009c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	6903      	ldr	r3, [r0, #16]
 8009c9a:	690c      	ldr	r4, [r1, #16]
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	f2c0 8081 	blt.w	8009da6 <quorem+0x112>
 8009ca4:	3c01      	subs	r4, #1
 8009ca6:	f101 0814 	add.w	r8, r1, #20
 8009caa:	f100 0514 	add.w	r5, r0, #20
 8009cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ccc:	d331      	bcc.n	8009d32 <quorem+0x9e>
 8009cce:	f04f 0e00 	mov.w	lr, #0
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	46ac      	mov	ip, r5
 8009cd6:	46f2      	mov	sl, lr
 8009cd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009cdc:	b293      	uxth	r3, r2
 8009cde:	fb06 e303 	mla	r3, r6, r3, lr
 8009ce2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cec:	f8dc a000 	ldr.w	sl, [ip]
 8009cf0:	0c12      	lsrs	r2, r2, #16
 8009cf2:	fa13 f38a 	uxtah	r3, r3, sl
 8009cf6:	fb06 e202 	mla	r2, r6, r2, lr
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	9b00      	ldr	r3, [sp, #0]
 8009cfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d02:	b292      	uxth	r2, r2
 8009d04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d10:	4581      	cmp	r9, r0
 8009d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d16:	f84c 3b04 	str.w	r3, [ip], #4
 8009d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d1e:	d2db      	bcs.n	8009cd8 <quorem+0x44>
 8009d20:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d24:	b92b      	cbnz	r3, 8009d32 <quorem+0x9e>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	3b04      	subs	r3, #4
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	d32e      	bcc.n	8009d8e <quorem+0xfa>
 8009d30:	613c      	str	r4, [r7, #16]
 8009d32:	4638      	mov	r0, r7
 8009d34:	f001 f932 	bl	800af9c <__mcmp>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	db24      	blt.n	8009d86 <quorem+0xf2>
 8009d3c:	3601      	adds	r6, #1
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f04f 0c00 	mov.w	ip, #0
 8009d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d48:	f8d0 e000 	ldr.w	lr, [r0]
 8009d4c:	b293      	uxth	r3, r2
 8009d4e:	ebac 0303 	sub.w	r3, ip, r3
 8009d52:	0c12      	lsrs	r2, r2, #16
 8009d54:	fa13 f38e 	uxtah	r3, r3, lr
 8009d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d66:	45c1      	cmp	r9, r8
 8009d68:	f840 3b04 	str.w	r3, [r0], #4
 8009d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d70:	d2e8      	bcs.n	8009d44 <quorem+0xb0>
 8009d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7a:	b922      	cbnz	r2, 8009d86 <quorem+0xf2>
 8009d7c:	3b04      	subs	r3, #4
 8009d7e:	429d      	cmp	r5, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	d30a      	bcc.n	8009d9a <quorem+0x106>
 8009d84:	613c      	str	r4, [r7, #16]
 8009d86:	4630      	mov	r0, r6
 8009d88:	b003      	add	sp, #12
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	3b04      	subs	r3, #4
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	d1cc      	bne.n	8009d30 <quorem+0x9c>
 8009d96:	3c01      	subs	r4, #1
 8009d98:	e7c7      	b.n	8009d2a <quorem+0x96>
 8009d9a:	6812      	ldr	r2, [r2, #0]
 8009d9c:	3b04      	subs	r3, #4
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	d1f0      	bne.n	8009d84 <quorem+0xf0>
 8009da2:	3c01      	subs	r4, #1
 8009da4:	e7eb      	b.n	8009d7e <quorem+0xea>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e7ee      	b.n	8009d88 <quorem+0xf4>
 8009daa:	0000      	movs	r0, r0
 8009dac:	0000      	movs	r0, r0
	...

08009db0 <_dtoa_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	ed2d 8b02 	vpush	{d8}
 8009db8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009dba:	b091      	sub	sp, #68	; 0x44
 8009dbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009dc0:	ec59 8b10 	vmov	r8, r9, d0
 8009dc4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009dc6:	9106      	str	r1, [sp, #24]
 8009dc8:	4606      	mov	r6, r0
 8009dca:	9208      	str	r2, [sp, #32]
 8009dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8009dce:	b975      	cbnz	r5, 8009dee <_dtoa_r+0x3e>
 8009dd0:	2010      	movs	r0, #16
 8009dd2:	f000 fe59 	bl	800aa88 <malloc>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6270      	str	r0, [r6, #36]	; 0x24
 8009dda:	b920      	cbnz	r0, 8009de6 <_dtoa_r+0x36>
 8009ddc:	4baa      	ldr	r3, [pc, #680]	; (800a088 <_dtoa_r+0x2d8>)
 8009dde:	21ea      	movs	r1, #234	; 0xea
 8009de0:	48aa      	ldr	r0, [pc, #680]	; (800a08c <_dtoa_r+0x2dc>)
 8009de2:	f001 feaf 	bl	800bb44 <__assert_func>
 8009de6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dea:	6005      	str	r5, [r0, #0]
 8009dec:	60c5      	str	r5, [r0, #12]
 8009dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009df0:	6819      	ldr	r1, [r3, #0]
 8009df2:	b151      	cbz	r1, 8009e0a <_dtoa_r+0x5a>
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	604a      	str	r2, [r1, #4]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	4093      	lsls	r3, r2
 8009dfc:	608b      	str	r3, [r1, #8]
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f000 fe8a 	bl	800ab18 <_Bfree>
 8009e04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	f1b9 0300 	subs.w	r3, r9, #0
 8009e0e:	bfbb      	ittet	lt
 8009e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	9303      	strlt	r3, [sp, #12]
 8009e16:	2300      	movge	r3, #0
 8009e18:	2201      	movlt	r2, #1
 8009e1a:	bfac      	ite	ge
 8009e1c:	6023      	strge	r3, [r4, #0]
 8009e1e:	6022      	strlt	r2, [r4, #0]
 8009e20:	4b9b      	ldr	r3, [pc, #620]	; (800a090 <_dtoa_r+0x2e0>)
 8009e22:	9c03      	ldr	r4, [sp, #12]
 8009e24:	43a3      	bics	r3, r4
 8009e26:	d11c      	bne.n	8009e62 <_dtoa_r+0xb2>
 8009e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009e34:	ea53 0308 	orrs.w	r3, r3, r8
 8009e38:	f000 84fd 	beq.w	800a836 <_dtoa_r+0xa86>
 8009e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e3e:	b963      	cbnz	r3, 8009e5a <_dtoa_r+0xaa>
 8009e40:	4b94      	ldr	r3, [pc, #592]	; (800a094 <_dtoa_r+0x2e4>)
 8009e42:	e01f      	b.n	8009e84 <_dtoa_r+0xd4>
 8009e44:	4b94      	ldr	r3, [pc, #592]	; (800a098 <_dtoa_r+0x2e8>)
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	3308      	adds	r3, #8
 8009e4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	9801      	ldr	r0, [sp, #4]
 8009e50:	b011      	add	sp, #68	; 0x44
 8009e52:	ecbd 8b02 	vpop	{d8}
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	4b8e      	ldr	r3, [pc, #568]	; (800a094 <_dtoa_r+0x2e4>)
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	3303      	adds	r3, #3
 8009e60:	e7f3      	b.n	8009e4a <_dtoa_r+0x9a>
 8009e62:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009e66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6e:	d10b      	bne.n	8009e88 <_dtoa_r+0xd8>
 8009e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e72:	2301      	movs	r3, #1
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 84d9 	beq.w	800a830 <_dtoa_r+0xa80>
 8009e7e:	4887      	ldr	r0, [pc, #540]	; (800a09c <_dtoa_r+0x2ec>)
 8009e80:	6018      	str	r0, [r3, #0]
 8009e82:	1e43      	subs	r3, r0, #1
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	e7e2      	b.n	8009e4e <_dtoa_r+0x9e>
 8009e88:	a90f      	add	r1, sp, #60	; 0x3c
 8009e8a:	aa0e      	add	r2, sp, #56	; 0x38
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	eeb0 0b48 	vmov.f64	d0, d8
 8009e92:	f001 f929 	bl	800b0e8 <__d2b>
 8009e96:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d046      	beq.n	8009f30 <_dtoa_r+0x180>
 8009ea2:	ee18 4a90 	vmov	r4, s17
 8009ea6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009eaa:	ec53 2b18 	vmov	r2, r3, d8
 8009eae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009eb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009eb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009eba:	2400      	movs	r4, #0
 8009ebc:	ec43 2b16 	vmov	d6, r2, r3
 8009ec0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009ec4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a070 <_dtoa_r+0x2c0>
 8009ec8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ecc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a078 <_dtoa_r+0x2c8>
 8009ed0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009ed4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a080 <_dtoa_r+0x2d0>
 8009ed8:	ee07 1a90 	vmov	s15, r1
 8009edc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009ee0:	eeb0 7b46 	vmov.f64	d7, d6
 8009ee4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009ee8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009eec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef4:	ee16 ba90 	vmov	fp, s13
 8009ef8:	940a      	str	r4, [sp, #40]	; 0x28
 8009efa:	d508      	bpl.n	8009f0e <_dtoa_r+0x15e>
 8009efc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009f00:	eeb4 6b47 	vcmp.f64	d6, d7
 8009f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f08:	bf18      	it	ne
 8009f0a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009f0e:	f1bb 0f16 	cmp.w	fp, #22
 8009f12:	d82f      	bhi.n	8009f74 <_dtoa_r+0x1c4>
 8009f14:	4b62      	ldr	r3, [pc, #392]	; (800a0a0 <_dtoa_r+0x2f0>)
 8009f16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f1a:	ed93 7b00 	vldr	d7, [r3]
 8009f1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f26:	d501      	bpl.n	8009f2c <_dtoa_r+0x17c>
 8009f28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	e022      	b.n	8009f76 <_dtoa_r+0x1c6>
 8009f30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f32:	4401      	add	r1, r0
 8009f34:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009f38:	2b20      	cmp	r3, #32
 8009f3a:	bfc1      	itttt	gt
 8009f3c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f40:	fa04 f303 	lslgt.w	r3, r4, r3
 8009f44:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009f48:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009f4c:	bfd6      	itet	le
 8009f4e:	f1c3 0320 	rsble	r3, r3, #32
 8009f52:	ea43 0808 	orrgt.w	r8, r3, r8
 8009f56:	fa08 f803 	lslle.w	r8, r8, r3
 8009f5a:	ee07 8a90 	vmov	s15, r8
 8009f5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009f62:	3901      	subs	r1, #1
 8009f64:	ee17 4a90 	vmov	r4, s15
 8009f68:	ec53 2b17 	vmov	r2, r3, d7
 8009f6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009f70:	2401      	movs	r4, #1
 8009f72:	e7a3      	b.n	8009ebc <_dtoa_r+0x10c>
 8009f74:	2301      	movs	r3, #1
 8009f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f78:	1a43      	subs	r3, r0, r1
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	bf45      	ittet	mi
 8009f7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f82:	9304      	strmi	r3, [sp, #16]
 8009f84:	2300      	movpl	r3, #0
 8009f86:	2300      	movmi	r3, #0
 8009f88:	9205      	str	r2, [sp, #20]
 8009f8a:	bf54      	ite	pl
 8009f8c:	9304      	strpl	r3, [sp, #16]
 8009f8e:	9305      	strmi	r3, [sp, #20]
 8009f90:	f1bb 0f00 	cmp.w	fp, #0
 8009f94:	db18      	blt.n	8009fc8 <_dtoa_r+0x218>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009f9c:	445b      	add	r3, fp
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9a06      	ldr	r2, [sp, #24]
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d849      	bhi.n	800a03c <_dtoa_r+0x28c>
 8009fa8:	2a05      	cmp	r2, #5
 8009faa:	bfc4      	itt	gt
 8009fac:	3a04      	subgt	r2, #4
 8009fae:	9206      	strgt	r2, [sp, #24]
 8009fb0:	9a06      	ldr	r2, [sp, #24]
 8009fb2:	f1a2 0202 	sub.w	r2, r2, #2
 8009fb6:	bfcc      	ite	gt
 8009fb8:	2400      	movgt	r4, #0
 8009fba:	2401      	movle	r4, #1
 8009fbc:	2a03      	cmp	r2, #3
 8009fbe:	d848      	bhi.n	800a052 <_dtoa_r+0x2a2>
 8009fc0:	e8df f002 	tbb	[pc, r2]
 8009fc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	eba3 030b 	sub.w	r3, r3, fp
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd4:	f1cb 0300 	rsb	r3, fp, #0
 8009fd8:	e7e3      	b.n	8009fa2 <_dtoa_r+0x1f2>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	9207      	str	r2, [sp, #28]
 8009fde:	9a08      	ldr	r2, [sp, #32]
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	dc39      	bgt.n	800a058 <_dtoa_r+0x2a8>
 8009fe4:	f04f 0a01 	mov.w	sl, #1
 8009fe8:	46d1      	mov	r9, sl
 8009fea:	4652      	mov	r2, sl
 8009fec:	f8cd a020 	str.w	sl, [sp, #32]
 8009ff0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6079      	str	r1, [r7, #4]
 8009ff6:	2004      	movs	r0, #4
 8009ff8:	f100 0c14 	add.w	ip, r0, #20
 8009ffc:	4594      	cmp	ip, r2
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	d92f      	bls.n	800a062 <_dtoa_r+0x2b2>
 800a002:	4630      	mov	r0, r6
 800a004:	930d      	str	r3, [sp, #52]	; 0x34
 800a006:	f000 fd47 	bl	800aa98 <_Balloc>
 800a00a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a00c:	9001      	str	r0, [sp, #4]
 800a00e:	4602      	mov	r2, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d149      	bne.n	800a0a8 <_dtoa_r+0x2f8>
 800a014:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <_dtoa_r+0x2f4>)
 800a016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a01a:	e6e1      	b.n	8009de0 <_dtoa_r+0x30>
 800a01c:	2201      	movs	r2, #1
 800a01e:	e7dd      	b.n	8009fdc <_dtoa_r+0x22c>
 800a020:	2200      	movs	r2, #0
 800a022:	9207      	str	r2, [sp, #28]
 800a024:	9a08      	ldr	r2, [sp, #32]
 800a026:	eb0b 0a02 	add.w	sl, fp, r2
 800a02a:	f10a 0901 	add.w	r9, sl, #1
 800a02e:	464a      	mov	r2, r9
 800a030:	2a01      	cmp	r2, #1
 800a032:	bfb8      	it	lt
 800a034:	2201      	movlt	r2, #1
 800a036:	e7db      	b.n	8009ff0 <_dtoa_r+0x240>
 800a038:	2201      	movs	r2, #1
 800a03a:	e7f2      	b.n	800a022 <_dtoa_r+0x272>
 800a03c:	2401      	movs	r4, #1
 800a03e:	2200      	movs	r2, #0
 800a040:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a044:	f04f 3aff 	mov.w	sl, #4294967295
 800a048:	2100      	movs	r1, #0
 800a04a:	46d1      	mov	r9, sl
 800a04c:	2212      	movs	r2, #18
 800a04e:	9108      	str	r1, [sp, #32]
 800a050:	e7ce      	b.n	8009ff0 <_dtoa_r+0x240>
 800a052:	2201      	movs	r2, #1
 800a054:	9207      	str	r2, [sp, #28]
 800a056:	e7f5      	b.n	800a044 <_dtoa_r+0x294>
 800a058:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a05c:	46d1      	mov	r9, sl
 800a05e:	4652      	mov	r2, sl
 800a060:	e7c6      	b.n	8009ff0 <_dtoa_r+0x240>
 800a062:	3101      	adds	r1, #1
 800a064:	6079      	str	r1, [r7, #4]
 800a066:	0040      	lsls	r0, r0, #1
 800a068:	e7c6      	b.n	8009ff8 <_dtoa_r+0x248>
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	636f4361 	.word	0x636f4361
 800a074:	3fd287a7 	.word	0x3fd287a7
 800a078:	8b60c8b3 	.word	0x8b60c8b3
 800a07c:	3fc68a28 	.word	0x3fc68a28
 800a080:	509f79fb 	.word	0x509f79fb
 800a084:	3fd34413 	.word	0x3fd34413
 800a088:	0800c665 	.word	0x0800c665
 800a08c:	0800c67c 	.word	0x0800c67c
 800a090:	7ff00000 	.word	0x7ff00000
 800a094:	0800c661 	.word	0x0800c661
 800a098:	0800c658 	.word	0x0800c658
 800a09c:	0800c635 	.word	0x0800c635
 800a0a0:	0800c7d0 	.word	0x0800c7d0
 800a0a4:	0800c6d7 	.word	0x0800c6d7
 800a0a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a0aa:	9901      	ldr	r1, [sp, #4]
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	f1b9 0f0e 	cmp.w	r9, #14
 800a0b2:	d86c      	bhi.n	800a18e <_dtoa_r+0x3de>
 800a0b4:	2c00      	cmp	r4, #0
 800a0b6:	d06a      	beq.n	800a18e <_dtoa_r+0x3de>
 800a0b8:	f1bb 0f00 	cmp.w	fp, #0
 800a0bc:	f340 80a0 	ble.w	800a200 <_dtoa_r+0x450>
 800a0c0:	49c1      	ldr	r1, [pc, #772]	; (800a3c8 <_dtoa_r+0x618>)
 800a0c2:	f00b 020f 	and.w	r2, fp, #15
 800a0c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a0ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a0ce:	ed92 7b00 	vldr	d7, [r2]
 800a0d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a0d6:	f000 8087 	beq.w	800a1e8 <_dtoa_r+0x438>
 800a0da:	4abc      	ldr	r2, [pc, #752]	; (800a3cc <_dtoa_r+0x61c>)
 800a0dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800a0e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a0e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a0e8:	f001 010f 	and.w	r1, r1, #15
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	48b7      	ldr	r0, [pc, #732]	; (800a3cc <_dtoa_r+0x61c>)
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	d17b      	bne.n	800a1ec <_dtoa_r+0x43c>
 800a0f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a0fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a102:	2900      	cmp	r1, #0
 800a104:	f000 80a2 	beq.w	800a24c <_dtoa_r+0x49c>
 800a108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a10c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a110:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a118:	f140 8098 	bpl.w	800a24c <_dtoa_r+0x49c>
 800a11c:	f1b9 0f00 	cmp.w	r9, #0
 800a120:	f000 8094 	beq.w	800a24c <_dtoa_r+0x49c>
 800a124:	f1ba 0f00 	cmp.w	sl, #0
 800a128:	dd2f      	ble.n	800a18a <_dtoa_r+0x3da>
 800a12a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a12e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a132:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a136:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a13a:	3201      	adds	r2, #1
 800a13c:	4650      	mov	r0, sl
 800a13e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a142:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a146:	ee07 2a90 	vmov	s15, r2
 800a14a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a14e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a152:	ee15 4a90 	vmov	r4, s11
 800a156:	ec52 1b15 	vmov	r1, r2, d5
 800a15a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a15e:	2800      	cmp	r0, #0
 800a160:	d177      	bne.n	800a252 <_dtoa_r+0x4a2>
 800a162:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a166:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a16a:	ec42 1b17 	vmov	d7, r1, r2
 800a16e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	f300 8263 	bgt.w	800a640 <_dtoa_r+0x890>
 800a17a:	eeb1 7b47 	vneg.f64	d7, d7
 800a17e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a186:	f100 8258 	bmi.w	800a63a <_dtoa_r+0x88a>
 800a18a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a190:	2a00      	cmp	r2, #0
 800a192:	f2c0 811d 	blt.w	800a3d0 <_dtoa_r+0x620>
 800a196:	f1bb 0f0e 	cmp.w	fp, #14
 800a19a:	f300 8119 	bgt.w	800a3d0 <_dtoa_r+0x620>
 800a19e:	4b8a      	ldr	r3, [pc, #552]	; (800a3c8 <_dtoa_r+0x618>)
 800a1a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1a4:	ed93 6b00 	vldr	d6, [r3]
 800a1a8:	9b08      	ldr	r3, [sp, #32]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f280 80b7 	bge.w	800a31e <_dtoa_r+0x56e>
 800a1b0:	f1b9 0f00 	cmp.w	r9, #0
 800a1b4:	f300 80b3 	bgt.w	800a31e <_dtoa_r+0x56e>
 800a1b8:	f040 823f 	bne.w	800a63a <_dtoa_r+0x88a>
 800a1bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a1c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a1c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d0:	464c      	mov	r4, r9
 800a1d2:	464f      	mov	r7, r9
 800a1d4:	f280 8215 	bge.w	800a602 <_dtoa_r+0x852>
 800a1d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1dc:	2331      	movs	r3, #49	; 0x31
 800a1de:	f808 3b01 	strb.w	r3, [r8], #1
 800a1e2:	f10b 0b01 	add.w	fp, fp, #1
 800a1e6:	e211      	b.n	800a60c <_dtoa_r+0x85c>
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	e780      	b.n	800a0ee <_dtoa_r+0x33e>
 800a1ec:	07cc      	lsls	r4, r1, #31
 800a1ee:	d504      	bpl.n	800a1fa <_dtoa_r+0x44a>
 800a1f0:	ed90 6b00 	vldr	d6, [r0]
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1fa:	1049      	asrs	r1, r1, #1
 800a1fc:	3008      	adds	r0, #8
 800a1fe:	e777      	b.n	800a0f0 <_dtoa_r+0x340>
 800a200:	d022      	beq.n	800a248 <_dtoa_r+0x498>
 800a202:	f1cb 0100 	rsb	r1, fp, #0
 800a206:	4a70      	ldr	r2, [pc, #448]	; (800a3c8 <_dtoa_r+0x618>)
 800a208:	f001 000f 	and.w	r0, r1, #15
 800a20c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a210:	ed92 7b00 	vldr	d7, [r2]
 800a214:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a21c:	486b      	ldr	r0, [pc, #428]	; (800a3cc <_dtoa_r+0x61c>)
 800a21e:	1109      	asrs	r1, r1, #4
 800a220:	2400      	movs	r4, #0
 800a222:	2202      	movs	r2, #2
 800a224:	b929      	cbnz	r1, 800a232 <_dtoa_r+0x482>
 800a226:	2c00      	cmp	r4, #0
 800a228:	f43f af6a 	beq.w	800a100 <_dtoa_r+0x350>
 800a22c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a230:	e766      	b.n	800a100 <_dtoa_r+0x350>
 800a232:	07cf      	lsls	r7, r1, #31
 800a234:	d505      	bpl.n	800a242 <_dtoa_r+0x492>
 800a236:	ed90 6b00 	vldr	d6, [r0]
 800a23a:	3201      	adds	r2, #1
 800a23c:	2401      	movs	r4, #1
 800a23e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a242:	1049      	asrs	r1, r1, #1
 800a244:	3008      	adds	r0, #8
 800a246:	e7ed      	b.n	800a224 <_dtoa_r+0x474>
 800a248:	2202      	movs	r2, #2
 800a24a:	e759      	b.n	800a100 <_dtoa_r+0x350>
 800a24c:	465f      	mov	r7, fp
 800a24e:	4648      	mov	r0, r9
 800a250:	e775      	b.n	800a13e <_dtoa_r+0x38e>
 800a252:	ec42 1b17 	vmov	d7, r1, r2
 800a256:	4a5c      	ldr	r2, [pc, #368]	; (800a3c8 <_dtoa_r+0x618>)
 800a258:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a25c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a260:	9a01      	ldr	r2, [sp, #4]
 800a262:	1814      	adds	r4, r2, r0
 800a264:	9a07      	ldr	r2, [sp, #28]
 800a266:	b352      	cbz	r2, 800a2be <_dtoa_r+0x50e>
 800a268:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a26c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a270:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a274:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a278:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a27c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a280:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a284:	ee14 2a90 	vmov	r2, s9
 800a288:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a28c:	3230      	adds	r2, #48	; 0x30
 800a28e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a292:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29a:	f808 2b01 	strb.w	r2, [r8], #1
 800a29e:	d439      	bmi.n	800a314 <_dtoa_r+0x564>
 800a2a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a2a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ac:	d472      	bmi.n	800a394 <_dtoa_r+0x5e4>
 800a2ae:	45a0      	cmp	r8, r4
 800a2b0:	f43f af6b 	beq.w	800a18a <_dtoa_r+0x3da>
 800a2b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a2b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2bc:	e7e0      	b.n	800a280 <_dtoa_r+0x4d0>
 800a2be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a2cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a2d0:	ee14 2a90 	vmov	r2, s9
 800a2d4:	3230      	adds	r2, #48	; 0x30
 800a2d6:	f808 2b01 	strb.w	r2, [r8], #1
 800a2da:	45a0      	cmp	r8, r4
 800a2dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a2e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a2e4:	d118      	bne.n	800a318 <_dtoa_r+0x568>
 800a2e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a2ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a2ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f6:	dc4d      	bgt.n	800a394 <_dtoa_r+0x5e4>
 800a2f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a304:	f57f af41 	bpl.w	800a18a <_dtoa_r+0x3da>
 800a308:	4688      	mov	r8, r1
 800a30a:	3901      	subs	r1, #1
 800a30c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a310:	2b30      	cmp	r3, #48	; 0x30
 800a312:	d0f9      	beq.n	800a308 <_dtoa_r+0x558>
 800a314:	46bb      	mov	fp, r7
 800a316:	e02a      	b.n	800a36e <_dtoa_r+0x5be>
 800a318:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a31c:	e7d6      	b.n	800a2cc <_dtoa_r+0x51c>
 800a31e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a322:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a326:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a32a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a32e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a332:	ee15 3a10 	vmov	r3, s10
 800a336:	3330      	adds	r3, #48	; 0x30
 800a338:	f808 3b01 	strb.w	r3, [r8], #1
 800a33c:	9b01      	ldr	r3, [sp, #4]
 800a33e:	eba8 0303 	sub.w	r3, r8, r3
 800a342:	4599      	cmp	r9, r3
 800a344:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a348:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a34c:	d133      	bne.n	800a3b6 <_dtoa_r+0x606>
 800a34e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a352:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	dc1a      	bgt.n	800a392 <_dtoa_r+0x5e2>
 800a35c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a364:	d103      	bne.n	800a36e <_dtoa_r+0x5be>
 800a366:	ee15 3a10 	vmov	r3, s10
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	d411      	bmi.n	800a392 <_dtoa_r+0x5e2>
 800a36e:	4629      	mov	r1, r5
 800a370:	4630      	mov	r0, r6
 800a372:	f000 fbd1 	bl	800ab18 <_Bfree>
 800a376:	2300      	movs	r3, #0
 800a378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a37a:	f888 3000 	strb.w	r3, [r8]
 800a37e:	f10b 0301 	add.w	r3, fp, #1
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a386:	2b00      	cmp	r3, #0
 800a388:	f43f ad61 	beq.w	8009e4e <_dtoa_r+0x9e>
 800a38c:	f8c3 8000 	str.w	r8, [r3]
 800a390:	e55d      	b.n	8009e4e <_dtoa_r+0x9e>
 800a392:	465f      	mov	r7, fp
 800a394:	4643      	mov	r3, r8
 800a396:	4698      	mov	r8, r3
 800a398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a39c:	2a39      	cmp	r2, #57	; 0x39
 800a39e:	d106      	bne.n	800a3ae <_dtoa_r+0x5fe>
 800a3a0:	9a01      	ldr	r2, [sp, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d1f7      	bne.n	800a396 <_dtoa_r+0x5e6>
 800a3a6:	9901      	ldr	r1, [sp, #4]
 800a3a8:	2230      	movs	r2, #48	; 0x30
 800a3aa:	3701      	adds	r7, #1
 800a3ac:	700a      	strb	r2, [r1, #0]
 800a3ae:	781a      	ldrb	r2, [r3, #0]
 800a3b0:	3201      	adds	r2, #1
 800a3b2:	701a      	strb	r2, [r3, #0]
 800a3b4:	e7ae      	b.n	800a314 <_dtoa_r+0x564>
 800a3b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c2:	d1b2      	bne.n	800a32a <_dtoa_r+0x57a>
 800a3c4:	e7d3      	b.n	800a36e <_dtoa_r+0x5be>
 800a3c6:	bf00      	nop
 800a3c8:	0800c7d0 	.word	0x0800c7d0
 800a3cc:	0800c7a8 	.word	0x0800c7a8
 800a3d0:	9907      	ldr	r1, [sp, #28]
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	f000 80d0 	beq.w	800a578 <_dtoa_r+0x7c8>
 800a3d8:	9906      	ldr	r1, [sp, #24]
 800a3da:	2901      	cmp	r1, #1
 800a3dc:	f300 80b4 	bgt.w	800a548 <_dtoa_r+0x798>
 800a3e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	f000 80ac 	beq.w	800a540 <_dtoa_r+0x790>
 800a3e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a3f0:	461c      	mov	r4, r3
 800a3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9b05      	ldr	r3, [sp, #20]
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4413      	add	r3, r2
 800a400:	4630      	mov	r0, r6
 800a402:	9305      	str	r3, [sp, #20]
 800a404:	f000 fc40 	bl	800ac88 <__i2b>
 800a408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a40a:	4607      	mov	r7, r0
 800a40c:	f1b8 0f00 	cmp.w	r8, #0
 800a410:	dd0d      	ble.n	800a42e <_dtoa_r+0x67e>
 800a412:	9a05      	ldr	r2, [sp, #20]
 800a414:	2a00      	cmp	r2, #0
 800a416:	dd0a      	ble.n	800a42e <_dtoa_r+0x67e>
 800a418:	4542      	cmp	r2, r8
 800a41a:	9904      	ldr	r1, [sp, #16]
 800a41c:	bfa8      	it	ge
 800a41e:	4642      	movge	r2, r8
 800a420:	1a89      	subs	r1, r1, r2
 800a422:	9104      	str	r1, [sp, #16]
 800a424:	9905      	ldr	r1, [sp, #20]
 800a426:	eba8 0802 	sub.w	r8, r8, r2
 800a42a:	1a8a      	subs	r2, r1, r2
 800a42c:	9205      	str	r2, [sp, #20]
 800a42e:	b303      	cbz	r3, 800a472 <_dtoa_r+0x6c2>
 800a430:	9a07      	ldr	r2, [sp, #28]
 800a432:	2a00      	cmp	r2, #0
 800a434:	f000 80a5 	beq.w	800a582 <_dtoa_r+0x7d2>
 800a438:	2c00      	cmp	r4, #0
 800a43a:	dd13      	ble.n	800a464 <_dtoa_r+0x6b4>
 800a43c:	4639      	mov	r1, r7
 800a43e:	4622      	mov	r2, r4
 800a440:	4630      	mov	r0, r6
 800a442:	930d      	str	r3, [sp, #52]	; 0x34
 800a444:	f000 fce0 	bl	800ae08 <__pow5mult>
 800a448:	462a      	mov	r2, r5
 800a44a:	4601      	mov	r1, r0
 800a44c:	4607      	mov	r7, r0
 800a44e:	4630      	mov	r0, r6
 800a450:	f000 fc30 	bl	800acb4 <__multiply>
 800a454:	4629      	mov	r1, r5
 800a456:	900a      	str	r0, [sp, #40]	; 0x28
 800a458:	4630      	mov	r0, r6
 800a45a:	f000 fb5d 	bl	800ab18 <_Bfree>
 800a45e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a462:	4615      	mov	r5, r2
 800a464:	1b1a      	subs	r2, r3, r4
 800a466:	d004      	beq.n	800a472 <_dtoa_r+0x6c2>
 800a468:	4629      	mov	r1, r5
 800a46a:	4630      	mov	r0, r6
 800a46c:	f000 fccc 	bl	800ae08 <__pow5mult>
 800a470:	4605      	mov	r5, r0
 800a472:	2101      	movs	r1, #1
 800a474:	4630      	mov	r0, r6
 800a476:	f000 fc07 	bl	800ac88 <__i2b>
 800a47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	f340 8081 	ble.w	800a586 <_dtoa_r+0x7d6>
 800a484:	461a      	mov	r2, r3
 800a486:	4601      	mov	r1, r0
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 fcbd 	bl	800ae08 <__pow5mult>
 800a48e:	9b06      	ldr	r3, [sp, #24]
 800a490:	2b01      	cmp	r3, #1
 800a492:	4604      	mov	r4, r0
 800a494:	dd7a      	ble.n	800a58c <_dtoa_r+0x7dc>
 800a496:	2300      	movs	r3, #0
 800a498:	930a      	str	r3, [sp, #40]	; 0x28
 800a49a:	6922      	ldr	r2, [r4, #16]
 800a49c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a4a0:	6910      	ldr	r0, [r2, #16]
 800a4a2:	f000 fba1 	bl	800abe8 <__hi0bits>
 800a4a6:	f1c0 0020 	rsb	r0, r0, #32
 800a4aa:	9b05      	ldr	r3, [sp, #20]
 800a4ac:	4418      	add	r0, r3
 800a4ae:	f010 001f 	ands.w	r0, r0, #31
 800a4b2:	f000 808c 	beq.w	800a5ce <_dtoa_r+0x81e>
 800a4b6:	f1c0 0220 	rsb	r2, r0, #32
 800a4ba:	2a04      	cmp	r2, #4
 800a4bc:	f340 8085 	ble.w	800a5ca <_dtoa_r+0x81a>
 800a4c0:	f1c0 001c 	rsb	r0, r0, #28
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	4403      	add	r3, r0
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	9b05      	ldr	r3, [sp, #20]
 800a4cc:	4403      	add	r3, r0
 800a4ce:	4480      	add	r8, r0
 800a4d0:	9305      	str	r3, [sp, #20]
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dd05      	ble.n	800a4e4 <_dtoa_r+0x734>
 800a4d8:	4629      	mov	r1, r5
 800a4da:	461a      	mov	r2, r3
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f000 fced 	bl	800aebc <__lshift>
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	9b05      	ldr	r3, [sp, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dd05      	ble.n	800a4f6 <_dtoa_r+0x746>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f000 fce4 	bl	800aebc <__lshift>
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d06a      	beq.n	800a5d2 <_dtoa_r+0x822>
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4628      	mov	r0, r5
 800a500:	f000 fd4c 	bl	800af9c <__mcmp>
 800a504:	2800      	cmp	r0, #0
 800a506:	da64      	bge.n	800a5d2 <_dtoa_r+0x822>
 800a508:	2300      	movs	r3, #0
 800a50a:	4629      	mov	r1, r5
 800a50c:	220a      	movs	r2, #10
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 fb24 	bl	800ab5c <__multadd>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a51a:	4605      	mov	r5, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8191 	beq.w	800a844 <_dtoa_r+0xa94>
 800a522:	4639      	mov	r1, r7
 800a524:	2300      	movs	r3, #0
 800a526:	220a      	movs	r2, #10
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 fb17 	bl	800ab5c <__multadd>
 800a52e:	f1ba 0f00 	cmp.w	sl, #0
 800a532:	4607      	mov	r7, r0
 800a534:	f300 808d 	bgt.w	800a652 <_dtoa_r+0x8a2>
 800a538:	9b06      	ldr	r3, [sp, #24]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	dc50      	bgt.n	800a5e0 <_dtoa_r+0x830>
 800a53e:	e088      	b.n	800a652 <_dtoa_r+0x8a2>
 800a540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a542:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a546:	e751      	b.n	800a3ec <_dtoa_r+0x63c>
 800a548:	f109 34ff 	add.w	r4, r9, #4294967295
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	bfbf      	itttt	lt
 800a550:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a552:	1ae3      	sublt	r3, r4, r3
 800a554:	18d2      	addlt	r2, r2, r3
 800a556:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a558:	bfb6      	itet	lt
 800a55a:	4623      	movlt	r3, r4
 800a55c:	1b1c      	subge	r4, r3, r4
 800a55e:	2400      	movlt	r4, #0
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	bfb5      	itete	lt
 800a566:	9a04      	ldrlt	r2, [sp, #16]
 800a568:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a56c:	eba2 0809 	sublt.w	r8, r2, r9
 800a570:	464a      	movge	r2, r9
 800a572:	bfb8      	it	lt
 800a574:	2200      	movlt	r2, #0
 800a576:	e73c      	b.n	800a3f2 <_dtoa_r+0x642>
 800a578:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a57c:	9f07      	ldr	r7, [sp, #28]
 800a57e:	461c      	mov	r4, r3
 800a580:	e744      	b.n	800a40c <_dtoa_r+0x65c>
 800a582:	461a      	mov	r2, r3
 800a584:	e770      	b.n	800a468 <_dtoa_r+0x6b8>
 800a586:	9b06      	ldr	r3, [sp, #24]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	dc18      	bgt.n	800a5be <_dtoa_r+0x80e>
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	b9b3      	cbnz	r3, 800a5be <_dtoa_r+0x80e>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a596:	b9a2      	cbnz	r2, 800a5c2 <_dtoa_r+0x812>
 800a598:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a59c:	0d12      	lsrs	r2, r2, #20
 800a59e:	0512      	lsls	r2, r2, #20
 800a5a0:	b18a      	cbz	r2, 800a5c6 <_dtoa_r+0x816>
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	9b05      	ldr	r3, [sp, #20]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	9305      	str	r3, [sp, #20]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f47f af70 	bne.w	800a49a <_dtoa_r+0x6ea>
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e775      	b.n	800a4aa <_dtoa_r+0x6fa>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e7f6      	b.n	800a5b0 <_dtoa_r+0x800>
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	e7f4      	b.n	800a5b0 <_dtoa_r+0x800>
 800a5c6:	920a      	str	r2, [sp, #40]	; 0x28
 800a5c8:	e7f3      	b.n	800a5b2 <_dtoa_r+0x802>
 800a5ca:	d082      	beq.n	800a4d2 <_dtoa_r+0x722>
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	301c      	adds	r0, #28
 800a5d0:	e778      	b.n	800a4c4 <_dtoa_r+0x714>
 800a5d2:	f1b9 0f00 	cmp.w	r9, #0
 800a5d6:	dc37      	bgt.n	800a648 <_dtoa_r+0x898>
 800a5d8:	9b06      	ldr	r3, [sp, #24]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	dd34      	ble.n	800a648 <_dtoa_r+0x898>
 800a5de:	46ca      	mov	sl, r9
 800a5e0:	f1ba 0f00 	cmp.w	sl, #0
 800a5e4:	d10d      	bne.n	800a602 <_dtoa_r+0x852>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4653      	mov	r3, sl
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 fab5 	bl	800ab5c <__multadd>
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fcd0 	bl	800af9c <__mcmp>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f73f adeb 	bgt.w	800a1d8 <_dtoa_r+0x428>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a608:	ea6f 0b03 	mvn.w	fp, r3
 800a60c:	f04f 0900 	mov.w	r9, #0
 800a610:	4621      	mov	r1, r4
 800a612:	4630      	mov	r0, r6
 800a614:	f000 fa80 	bl	800ab18 <_Bfree>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f43f aea8 	beq.w	800a36e <_dtoa_r+0x5be>
 800a61e:	f1b9 0f00 	cmp.w	r9, #0
 800a622:	d005      	beq.n	800a630 <_dtoa_r+0x880>
 800a624:	45b9      	cmp	r9, r7
 800a626:	d003      	beq.n	800a630 <_dtoa_r+0x880>
 800a628:	4649      	mov	r1, r9
 800a62a:	4630      	mov	r0, r6
 800a62c:	f000 fa74 	bl	800ab18 <_Bfree>
 800a630:	4639      	mov	r1, r7
 800a632:	4630      	mov	r0, r6
 800a634:	f000 fa70 	bl	800ab18 <_Bfree>
 800a638:	e699      	b.n	800a36e <_dtoa_r+0x5be>
 800a63a:	2400      	movs	r4, #0
 800a63c:	4627      	mov	r7, r4
 800a63e:	e7e0      	b.n	800a602 <_dtoa_r+0x852>
 800a640:	46bb      	mov	fp, r7
 800a642:	4604      	mov	r4, r0
 800a644:	4607      	mov	r7, r0
 800a646:	e5c7      	b.n	800a1d8 <_dtoa_r+0x428>
 800a648:	9b07      	ldr	r3, [sp, #28]
 800a64a:	46ca      	mov	sl, r9
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8100 	beq.w	800a852 <_dtoa_r+0xaa2>
 800a652:	f1b8 0f00 	cmp.w	r8, #0
 800a656:	dd05      	ble.n	800a664 <_dtoa_r+0x8b4>
 800a658:	4639      	mov	r1, r7
 800a65a:	4642      	mov	r2, r8
 800a65c:	4630      	mov	r0, r6
 800a65e:	f000 fc2d 	bl	800aebc <__lshift>
 800a662:	4607      	mov	r7, r0
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d05d      	beq.n	800a726 <_dtoa_r+0x976>
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4630      	mov	r0, r6
 800a66e:	f000 fa13 	bl	800aa98 <_Balloc>
 800a672:	4680      	mov	r8, r0
 800a674:	b928      	cbnz	r0, 800a682 <_dtoa_r+0x8d2>
 800a676:	4b82      	ldr	r3, [pc, #520]	; (800a880 <_dtoa_r+0xad0>)
 800a678:	4602      	mov	r2, r0
 800a67a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a67e:	f7ff bbaf 	b.w	8009de0 <_dtoa_r+0x30>
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	3202      	adds	r2, #2
 800a686:	0092      	lsls	r2, r2, #2
 800a688:	f107 010c 	add.w	r1, r7, #12
 800a68c:	300c      	adds	r0, #12
 800a68e:	f7fe fe87 	bl	80093a0 <memcpy>
 800a692:	2201      	movs	r2, #1
 800a694:	4641      	mov	r1, r8
 800a696:	4630      	mov	r0, r6
 800a698:	f000 fc10 	bl	800aebc <__lshift>
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	4453      	add	r3, sl
 800a6a6:	9308      	str	r3, [sp, #32]
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	46b9      	mov	r9, r7
 800a6b0:	9307      	str	r3, [sp, #28]
 800a6b2:	4607      	mov	r7, r0
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	9302      	str	r3, [sp, #8]
 800a6be:	f7ff fae9 	bl	8009c94 <quorem>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	3330      	adds	r3, #48	; 0x30
 800a6c6:	9005      	str	r0, [sp, #20]
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ce:	f000 fc65 	bl	800af9c <__mcmp>
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 fc7b 	bl	800afd4 <__mdiff>
 800a6de:	68c2      	ldr	r2, [r0, #12]
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	bb0a      	cbnz	r2, 800a72a <_dtoa_r+0x97a>
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f000 fc57 	bl	800af9c <__mcmp>
 800a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a6fa:	f000 fa0d 	bl	800ab18 <_Bfree>
 800a6fe:	9b06      	ldr	r3, [sp, #24]
 800a700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a702:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a706:	ea43 0102 	orr.w	r1, r3, r2
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	430b      	orrs	r3, r1
 800a70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a710:	d10d      	bne.n	800a72e <_dtoa_r+0x97e>
 800a712:	2b39      	cmp	r3, #57	; 0x39
 800a714:	d029      	beq.n	800a76a <_dtoa_r+0x9ba>
 800a716:	f1ba 0f00 	cmp.w	sl, #0
 800a71a:	dd01      	ble.n	800a720 <_dtoa_r+0x970>
 800a71c:	9b05      	ldr	r3, [sp, #20]
 800a71e:	3331      	adds	r3, #49	; 0x31
 800a720:	9a02      	ldr	r2, [sp, #8]
 800a722:	7013      	strb	r3, [r2, #0]
 800a724:	e774      	b.n	800a610 <_dtoa_r+0x860>
 800a726:	4638      	mov	r0, r7
 800a728:	e7b8      	b.n	800a69c <_dtoa_r+0x8ec>
 800a72a:	2201      	movs	r2, #1
 800a72c:	e7e1      	b.n	800a6f2 <_dtoa_r+0x942>
 800a72e:	f1ba 0f00 	cmp.w	sl, #0
 800a732:	db06      	blt.n	800a742 <_dtoa_r+0x992>
 800a734:	9906      	ldr	r1, [sp, #24]
 800a736:	ea41 0a0a 	orr.w	sl, r1, sl
 800a73a:	9907      	ldr	r1, [sp, #28]
 800a73c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a740:	d120      	bne.n	800a784 <_dtoa_r+0x9d4>
 800a742:	2a00      	cmp	r2, #0
 800a744:	ddec      	ble.n	800a720 <_dtoa_r+0x970>
 800a746:	4629      	mov	r1, r5
 800a748:	2201      	movs	r2, #1
 800a74a:	4630      	mov	r0, r6
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	f000 fbb5 	bl	800aebc <__lshift>
 800a752:	4621      	mov	r1, r4
 800a754:	4605      	mov	r5, r0
 800a756:	f000 fc21 	bl	800af9c <__mcmp>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	9b04      	ldr	r3, [sp, #16]
 800a75e:	dc02      	bgt.n	800a766 <_dtoa_r+0x9b6>
 800a760:	d1de      	bne.n	800a720 <_dtoa_r+0x970>
 800a762:	07da      	lsls	r2, r3, #31
 800a764:	d5dc      	bpl.n	800a720 <_dtoa_r+0x970>
 800a766:	2b39      	cmp	r3, #57	; 0x39
 800a768:	d1d8      	bne.n	800a71c <_dtoa_r+0x96c>
 800a76a:	9a02      	ldr	r2, [sp, #8]
 800a76c:	2339      	movs	r3, #57	; 0x39
 800a76e:	7013      	strb	r3, [r2, #0]
 800a770:	4643      	mov	r3, r8
 800a772:	4698      	mov	r8, r3
 800a774:	3b01      	subs	r3, #1
 800a776:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a77a:	2a39      	cmp	r2, #57	; 0x39
 800a77c:	d051      	beq.n	800a822 <_dtoa_r+0xa72>
 800a77e:	3201      	adds	r2, #1
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	e745      	b.n	800a610 <_dtoa_r+0x860>
 800a784:	2a00      	cmp	r2, #0
 800a786:	dd03      	ble.n	800a790 <_dtoa_r+0x9e0>
 800a788:	2b39      	cmp	r3, #57	; 0x39
 800a78a:	d0ee      	beq.n	800a76a <_dtoa_r+0x9ba>
 800a78c:	3301      	adds	r3, #1
 800a78e:	e7c7      	b.n	800a720 <_dtoa_r+0x970>
 800a790:	9a04      	ldr	r2, [sp, #16]
 800a792:	9908      	ldr	r1, [sp, #32]
 800a794:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a798:	428a      	cmp	r2, r1
 800a79a:	d02b      	beq.n	800a7f4 <_dtoa_r+0xa44>
 800a79c:	4629      	mov	r1, r5
 800a79e:	2300      	movs	r3, #0
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f000 f9da 	bl	800ab5c <__multadd>
 800a7a8:	45b9      	cmp	r9, r7
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	f04f 0300 	mov.w	r3, #0
 800a7b0:	f04f 020a 	mov.w	r2, #10
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	d107      	bne.n	800a7ca <_dtoa_r+0xa1a>
 800a7ba:	f000 f9cf 	bl	800ab5c <__multadd>
 800a7be:	4681      	mov	r9, r0
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	e774      	b.n	800a6b4 <_dtoa_r+0x904>
 800a7ca:	f000 f9c7 	bl	800ab5c <__multadd>
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4681      	mov	r9, r0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f000 f9c0 	bl	800ab5c <__multadd>
 800a7dc:	4607      	mov	r7, r0
 800a7de:	e7f0      	b.n	800a7c2 <_dtoa_r+0xa12>
 800a7e0:	f1ba 0f00 	cmp.w	sl, #0
 800a7e4:	9a01      	ldr	r2, [sp, #4]
 800a7e6:	bfcc      	ite	gt
 800a7e8:	46d0      	movgt	r8, sl
 800a7ea:	f04f 0801 	movle.w	r8, #1
 800a7ee:	4490      	add	r8, r2
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	9302      	str	r3, [sp, #8]
 800a7fc:	f000 fb5e 	bl	800aebc <__lshift>
 800a800:	4621      	mov	r1, r4
 800a802:	4605      	mov	r5, r0
 800a804:	f000 fbca 	bl	800af9c <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	dcb1      	bgt.n	800a770 <_dtoa_r+0x9c0>
 800a80c:	d102      	bne.n	800a814 <_dtoa_r+0xa64>
 800a80e:	9b02      	ldr	r3, [sp, #8]
 800a810:	07db      	lsls	r3, r3, #31
 800a812:	d4ad      	bmi.n	800a770 <_dtoa_r+0x9c0>
 800a814:	4643      	mov	r3, r8
 800a816:	4698      	mov	r8, r3
 800a818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a81c:	2a30      	cmp	r2, #48	; 0x30
 800a81e:	d0fa      	beq.n	800a816 <_dtoa_r+0xa66>
 800a820:	e6f6      	b.n	800a610 <_dtoa_r+0x860>
 800a822:	9a01      	ldr	r2, [sp, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d1a4      	bne.n	800a772 <_dtoa_r+0x9c2>
 800a828:	f10b 0b01 	add.w	fp, fp, #1
 800a82c:	2331      	movs	r3, #49	; 0x31
 800a82e:	e778      	b.n	800a722 <_dtoa_r+0x972>
 800a830:	4b14      	ldr	r3, [pc, #80]	; (800a884 <_dtoa_r+0xad4>)
 800a832:	f7ff bb27 	b.w	8009e84 <_dtoa_r+0xd4>
 800a836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f47f ab03 	bne.w	8009e44 <_dtoa_r+0x94>
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <_dtoa_r+0xad8>)
 800a840:	f7ff bb20 	b.w	8009e84 <_dtoa_r+0xd4>
 800a844:	f1ba 0f00 	cmp.w	sl, #0
 800a848:	dc03      	bgt.n	800a852 <_dtoa_r+0xaa2>
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	f73f aec7 	bgt.w	800a5e0 <_dtoa_r+0x830>
 800a852:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a856:	4621      	mov	r1, r4
 800a858:	4628      	mov	r0, r5
 800a85a:	f7ff fa1b 	bl	8009c94 <quorem>
 800a85e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a862:	f808 3b01 	strb.w	r3, [r8], #1
 800a866:	9a01      	ldr	r2, [sp, #4]
 800a868:	eba8 0202 	sub.w	r2, r8, r2
 800a86c:	4592      	cmp	sl, r2
 800a86e:	ddb7      	ble.n	800a7e0 <_dtoa_r+0xa30>
 800a870:	4629      	mov	r1, r5
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	4630      	mov	r0, r6
 800a878:	f000 f970 	bl	800ab5c <__multadd>
 800a87c:	4605      	mov	r5, r0
 800a87e:	e7ea      	b.n	800a856 <_dtoa_r+0xaa6>
 800a880:	0800c6d7 	.word	0x0800c6d7
 800a884:	0800c634 	.word	0x0800c634
 800a888:	0800c658 	.word	0x0800c658

0800a88c <std>:
 800a88c:	2300      	movs	r3, #0
 800a88e:	b510      	push	{r4, lr}
 800a890:	4604      	mov	r4, r0
 800a892:	e9c0 3300 	strd	r3, r3, [r0]
 800a896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a89a:	6083      	str	r3, [r0, #8]
 800a89c:	8181      	strh	r1, [r0, #12]
 800a89e:	6643      	str	r3, [r0, #100]	; 0x64
 800a8a0:	81c2      	strh	r2, [r0, #14]
 800a8a2:	6183      	str	r3, [r0, #24]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	2208      	movs	r2, #8
 800a8a8:	305c      	adds	r0, #92	; 0x5c
 800a8aa:	f7fe fd87 	bl	80093bc <memset>
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <std+0x38>)
 800a8b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8b2:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <std+0x3c>)
 800a8b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <std+0x40>)
 800a8b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ba:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <std+0x44>)
 800a8bc:	6224      	str	r4, [r4, #32]
 800a8be:	6323      	str	r3, [r4, #48]	; 0x30
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800b919 	.word	0x0800b919
 800a8c8:	0800b93b 	.word	0x0800b93b
 800a8cc:	0800b973 	.word	0x0800b973
 800a8d0:	0800b997 	.word	0x0800b997

0800a8d4 <_cleanup_r>:
 800a8d4:	4901      	ldr	r1, [pc, #4]	; (800a8dc <_cleanup_r+0x8>)
 800a8d6:	f000 b8af 	b.w	800aa38 <_fwalk_reent>
 800a8da:	bf00      	nop
 800a8dc:	0800bcad 	.word	0x0800bcad

0800a8e0 <__sfmoreglue>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	2268      	movs	r2, #104	; 0x68
 800a8e4:	1e4d      	subs	r5, r1, #1
 800a8e6:	4355      	muls	r5, r2
 800a8e8:	460e      	mov	r6, r1
 800a8ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8ee:	f000 fcd9 	bl	800b2a4 <_malloc_r>
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	b140      	cbz	r0, 800a908 <__sfmoreglue+0x28>
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a8fc:	300c      	adds	r0, #12
 800a8fe:	60a0      	str	r0, [r4, #8]
 800a900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a904:	f7fe fd5a 	bl	80093bc <memset>
 800a908:	4620      	mov	r0, r4
 800a90a:	bd70      	pop	{r4, r5, r6, pc}

0800a90c <__sfp_lock_acquire>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__sfp_lock_acquire+0x8>)
 800a90e:	f000 b8b8 	b.w	800aa82 <__retarget_lock_acquire_recursive>
 800a912:	bf00      	nop
 800a914:	24000629 	.word	0x24000629

0800a918 <__sfp_lock_release>:
 800a918:	4801      	ldr	r0, [pc, #4]	; (800a920 <__sfp_lock_release+0x8>)
 800a91a:	f000 b8b3 	b.w	800aa84 <__retarget_lock_release_recursive>
 800a91e:	bf00      	nop
 800a920:	24000629 	.word	0x24000629

0800a924 <__sinit_lock_acquire>:
 800a924:	4801      	ldr	r0, [pc, #4]	; (800a92c <__sinit_lock_acquire+0x8>)
 800a926:	f000 b8ac 	b.w	800aa82 <__retarget_lock_acquire_recursive>
 800a92a:	bf00      	nop
 800a92c:	2400062a 	.word	0x2400062a

0800a930 <__sinit_lock_release>:
 800a930:	4801      	ldr	r0, [pc, #4]	; (800a938 <__sinit_lock_release+0x8>)
 800a932:	f000 b8a7 	b.w	800aa84 <__retarget_lock_release_recursive>
 800a936:	bf00      	nop
 800a938:	2400062a 	.word	0x2400062a

0800a93c <__sinit>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	f7ff fff0 	bl	800a924 <__sinit_lock_acquire>
 800a944:	69a3      	ldr	r3, [r4, #24]
 800a946:	b11b      	cbz	r3, 800a950 <__sinit+0x14>
 800a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94c:	f7ff bff0 	b.w	800a930 <__sinit_lock_release>
 800a950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a954:	6523      	str	r3, [r4, #80]	; 0x50
 800a956:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <__sinit+0x68>)
 800a958:	4a13      	ldr	r2, [pc, #76]	; (800a9a8 <__sinit+0x6c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a95e:	42a3      	cmp	r3, r4
 800a960:	bf04      	itt	eq
 800a962:	2301      	moveq	r3, #1
 800a964:	61a3      	streq	r3, [r4, #24]
 800a966:	4620      	mov	r0, r4
 800a968:	f000 f820 	bl	800a9ac <__sfp>
 800a96c:	6060      	str	r0, [r4, #4]
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f81c 	bl	800a9ac <__sfp>
 800a974:	60a0      	str	r0, [r4, #8]
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f818 	bl	800a9ac <__sfp>
 800a97c:	2200      	movs	r2, #0
 800a97e:	60e0      	str	r0, [r4, #12]
 800a980:	2104      	movs	r1, #4
 800a982:	6860      	ldr	r0, [r4, #4]
 800a984:	f7ff ff82 	bl	800a88c <std>
 800a988:	68a0      	ldr	r0, [r4, #8]
 800a98a:	2201      	movs	r2, #1
 800a98c:	2109      	movs	r1, #9
 800a98e:	f7ff ff7d 	bl	800a88c <std>
 800a992:	68e0      	ldr	r0, [r4, #12]
 800a994:	2202      	movs	r2, #2
 800a996:	2112      	movs	r1, #18
 800a998:	f7ff ff78 	bl	800a88c <std>
 800a99c:	2301      	movs	r3, #1
 800a99e:	61a3      	str	r3, [r4, #24]
 800a9a0:	e7d2      	b.n	800a948 <__sinit+0xc>
 800a9a2:	bf00      	nop
 800a9a4:	0800c620 	.word	0x0800c620
 800a9a8:	0800a8d5 	.word	0x0800a8d5

0800a9ac <__sfp>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	f7ff ffac 	bl	800a90c <__sfp_lock_acquire>
 800a9b4:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <__sfp+0x84>)
 800a9b6:	681e      	ldr	r6, [r3, #0]
 800a9b8:	69b3      	ldr	r3, [r6, #24]
 800a9ba:	b913      	cbnz	r3, 800a9c2 <__sfp+0x16>
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff ffbd 	bl	800a93c <__sinit>
 800a9c2:	3648      	adds	r6, #72	; 0x48
 800a9c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	d503      	bpl.n	800a9d4 <__sfp+0x28>
 800a9cc:	6833      	ldr	r3, [r6, #0]
 800a9ce:	b30b      	cbz	r3, 800aa14 <__sfp+0x68>
 800a9d0:	6836      	ldr	r6, [r6, #0]
 800a9d2:	e7f7      	b.n	800a9c4 <__sfp+0x18>
 800a9d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9d8:	b9d5      	cbnz	r5, 800aa10 <__sfp+0x64>
 800a9da:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <__sfp+0x88>)
 800a9dc:	60e3      	str	r3, [r4, #12]
 800a9de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a9e4:	f000 f84c 	bl	800aa80 <__retarget_lock_init_recursive>
 800a9e8:	f7ff ff96 	bl	800a918 <__sfp_lock_release>
 800a9ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9f4:	6025      	str	r5, [r4, #0]
 800a9f6:	61a5      	str	r5, [r4, #24]
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa00:	f7fe fcdc 	bl	80093bc <memset>
 800aa04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa10:	3468      	adds	r4, #104	; 0x68
 800aa12:	e7d9      	b.n	800a9c8 <__sfp+0x1c>
 800aa14:	2104      	movs	r1, #4
 800aa16:	4638      	mov	r0, r7
 800aa18:	f7ff ff62 	bl	800a8e0 <__sfmoreglue>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	6030      	str	r0, [r6, #0]
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d1d5      	bne.n	800a9d0 <__sfp+0x24>
 800aa24:	f7ff ff78 	bl	800a918 <__sfp_lock_release>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	e7ee      	b.n	800aa0c <__sfp+0x60>
 800aa2e:	bf00      	nop
 800aa30:	0800c620 	.word	0x0800c620
 800aa34:	ffff0001 	.word	0xffff0001

0800aa38 <_fwalk_reent>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	4688      	mov	r8, r1
 800aa40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa44:	2700      	movs	r7, #0
 800aa46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa4a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa4e:	d505      	bpl.n	800aa5c <_fwalk_reent+0x24>
 800aa50:	6824      	ldr	r4, [r4, #0]
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	d1f7      	bne.n	800aa46 <_fwalk_reent+0xe>
 800aa56:	4638      	mov	r0, r7
 800aa58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5c:	89ab      	ldrh	r3, [r5, #12]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d907      	bls.n	800aa72 <_fwalk_reent+0x3a>
 800aa62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa66:	3301      	adds	r3, #1
 800aa68:	d003      	beq.n	800aa72 <_fwalk_reent+0x3a>
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	47c0      	blx	r8
 800aa70:	4307      	orrs	r7, r0
 800aa72:	3568      	adds	r5, #104	; 0x68
 800aa74:	e7e9      	b.n	800aa4a <_fwalk_reent+0x12>
	...

0800aa78 <_localeconv_r>:
 800aa78:	4800      	ldr	r0, [pc, #0]	; (800aa7c <_localeconv_r+0x4>)
 800aa7a:	4770      	bx	lr
 800aa7c:	2400016c 	.word	0x2400016c

0800aa80 <__retarget_lock_init_recursive>:
 800aa80:	4770      	bx	lr

0800aa82 <__retarget_lock_acquire_recursive>:
 800aa82:	4770      	bx	lr

0800aa84 <__retarget_lock_release_recursive>:
 800aa84:	4770      	bx	lr
	...

0800aa88 <malloc>:
 800aa88:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <malloc+0xc>)
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	f000 bc09 	b.w	800b2a4 <_malloc_r>
 800aa92:	bf00      	nop
 800aa94:	24000018 	.word	0x24000018

0800aa98 <_Balloc>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	b976      	cbnz	r6, 800aac0 <_Balloc+0x28>
 800aaa2:	2010      	movs	r0, #16
 800aaa4:	f7ff fff0 	bl	800aa88 <malloc>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6260      	str	r0, [r4, #36]	; 0x24
 800aaac:	b920      	cbnz	r0, 800aab8 <_Balloc+0x20>
 800aaae:	4b18      	ldr	r3, [pc, #96]	; (800ab10 <_Balloc+0x78>)
 800aab0:	4818      	ldr	r0, [pc, #96]	; (800ab14 <_Balloc+0x7c>)
 800aab2:	2166      	movs	r1, #102	; 0x66
 800aab4:	f001 f846 	bl	800bb44 <__assert_func>
 800aab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aabc:	6006      	str	r6, [r0, #0]
 800aabe:	60c6      	str	r6, [r0, #12]
 800aac0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aac2:	68f3      	ldr	r3, [r6, #12]
 800aac4:	b183      	cbz	r3, 800aae8 <_Balloc+0x50>
 800aac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aace:	b9b8      	cbnz	r0, 800ab00 <_Balloc+0x68>
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f605 	lsl.w	r6, r1, r5
 800aad6:	1d72      	adds	r2, r6, #5
 800aad8:	0092      	lsls	r2, r2, #2
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fb60 	bl	800b1a0 <_calloc_r>
 800aae0:	b160      	cbz	r0, 800aafc <_Balloc+0x64>
 800aae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aae6:	e00e      	b.n	800ab06 <_Balloc+0x6e>
 800aae8:	2221      	movs	r2, #33	; 0x21
 800aaea:	2104      	movs	r1, #4
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 fb57 	bl	800b1a0 <_calloc_r>
 800aaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaf4:	60f0      	str	r0, [r6, #12]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e4      	bne.n	800aac6 <_Balloc+0x2e>
 800aafc:	2000      	movs	r0, #0
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	6802      	ldr	r2, [r0, #0]
 800ab02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab06:	2300      	movs	r3, #0
 800ab08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab0c:	e7f7      	b.n	800aafe <_Balloc+0x66>
 800ab0e:	bf00      	nop
 800ab10:	0800c665 	.word	0x0800c665
 800ab14:	0800c748 	.word	0x0800c748

0800ab18 <_Bfree>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	b976      	cbnz	r6, 800ab40 <_Bfree+0x28>
 800ab22:	2010      	movs	r0, #16
 800ab24:	f7ff ffb0 	bl	800aa88 <malloc>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab2c:	b920      	cbnz	r0, 800ab38 <_Bfree+0x20>
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <_Bfree+0x3c>)
 800ab30:	4809      	ldr	r0, [pc, #36]	; (800ab58 <_Bfree+0x40>)
 800ab32:	218a      	movs	r1, #138	; 0x8a
 800ab34:	f001 f806 	bl	800bb44 <__assert_func>
 800ab38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab3c:	6006      	str	r6, [r0, #0]
 800ab3e:	60c6      	str	r6, [r0, #12]
 800ab40:	b13c      	cbz	r4, 800ab52 <_Bfree+0x3a>
 800ab42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab44:	6862      	ldr	r2, [r4, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab4c:	6021      	str	r1, [r4, #0]
 800ab4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	0800c665 	.word	0x0800c665
 800ab58:	0800c748 	.word	0x0800c748

0800ab5c <__multadd>:
 800ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab60:	690d      	ldr	r5, [r1, #16]
 800ab62:	4607      	mov	r7, r0
 800ab64:	460c      	mov	r4, r1
 800ab66:	461e      	mov	r6, r3
 800ab68:	f101 0c14 	add.w	ip, r1, #20
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab72:	b299      	uxth	r1, r3
 800ab74:	fb02 6101 	mla	r1, r2, r1, r6
 800ab78:	0c1e      	lsrs	r6, r3, #16
 800ab7a:	0c0b      	lsrs	r3, r1, #16
 800ab7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab80:	b289      	uxth	r1, r1
 800ab82:	3001      	adds	r0, #1
 800ab84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab88:	4285      	cmp	r5, r0
 800ab8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab92:	dcec      	bgt.n	800ab6e <__multadd+0x12>
 800ab94:	b30e      	cbz	r6, 800abda <__multadd+0x7e>
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	42ab      	cmp	r3, r5
 800ab9a:	dc19      	bgt.n	800abd0 <__multadd+0x74>
 800ab9c:	6861      	ldr	r1, [r4, #4]
 800ab9e:	4638      	mov	r0, r7
 800aba0:	3101      	adds	r1, #1
 800aba2:	f7ff ff79 	bl	800aa98 <_Balloc>
 800aba6:	4680      	mov	r8, r0
 800aba8:	b928      	cbnz	r0, 800abb6 <__multadd+0x5a>
 800abaa:	4602      	mov	r2, r0
 800abac:	4b0c      	ldr	r3, [pc, #48]	; (800abe0 <__multadd+0x84>)
 800abae:	480d      	ldr	r0, [pc, #52]	; (800abe4 <__multadd+0x88>)
 800abb0:	21b5      	movs	r1, #181	; 0xb5
 800abb2:	f000 ffc7 	bl	800bb44 <__assert_func>
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	3202      	adds	r2, #2
 800abba:	f104 010c 	add.w	r1, r4, #12
 800abbe:	0092      	lsls	r2, r2, #2
 800abc0:	300c      	adds	r0, #12
 800abc2:	f7fe fbed 	bl	80093a0 <memcpy>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ffa5 	bl	800ab18 <_Bfree>
 800abce:	4644      	mov	r4, r8
 800abd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abd4:	3501      	adds	r5, #1
 800abd6:	615e      	str	r6, [r3, #20]
 800abd8:	6125      	str	r5, [r4, #16]
 800abda:	4620      	mov	r0, r4
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	0800c6d7 	.word	0x0800c6d7
 800abe4:	0800c748 	.word	0x0800c748

0800abe8 <__hi0bits>:
 800abe8:	0c03      	lsrs	r3, r0, #16
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	b9d3      	cbnz	r3, 800ac24 <__hi0bits+0x3c>
 800abee:	0400      	lsls	r0, r0, #16
 800abf0:	2310      	movs	r3, #16
 800abf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abf6:	bf04      	itt	eq
 800abf8:	0200      	lsleq	r0, r0, #8
 800abfa:	3308      	addeq	r3, #8
 800abfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac00:	bf04      	itt	eq
 800ac02:	0100      	lsleq	r0, r0, #4
 800ac04:	3304      	addeq	r3, #4
 800ac06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac0a:	bf04      	itt	eq
 800ac0c:	0080      	lsleq	r0, r0, #2
 800ac0e:	3302      	addeq	r3, #2
 800ac10:	2800      	cmp	r0, #0
 800ac12:	db05      	blt.n	800ac20 <__hi0bits+0x38>
 800ac14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac18:	f103 0301 	add.w	r3, r3, #1
 800ac1c:	bf08      	it	eq
 800ac1e:	2320      	moveq	r3, #32
 800ac20:	4618      	mov	r0, r3
 800ac22:	4770      	bx	lr
 800ac24:	2300      	movs	r3, #0
 800ac26:	e7e4      	b.n	800abf2 <__hi0bits+0xa>

0800ac28 <__lo0bits>:
 800ac28:	6803      	ldr	r3, [r0, #0]
 800ac2a:	f013 0207 	ands.w	r2, r3, #7
 800ac2e:	4601      	mov	r1, r0
 800ac30:	d00b      	beq.n	800ac4a <__lo0bits+0x22>
 800ac32:	07da      	lsls	r2, r3, #31
 800ac34:	d423      	bmi.n	800ac7e <__lo0bits+0x56>
 800ac36:	0798      	lsls	r0, r3, #30
 800ac38:	bf49      	itett	mi
 800ac3a:	085b      	lsrmi	r3, r3, #1
 800ac3c:	089b      	lsrpl	r3, r3, #2
 800ac3e:	2001      	movmi	r0, #1
 800ac40:	600b      	strmi	r3, [r1, #0]
 800ac42:	bf5c      	itt	pl
 800ac44:	600b      	strpl	r3, [r1, #0]
 800ac46:	2002      	movpl	r0, #2
 800ac48:	4770      	bx	lr
 800ac4a:	b298      	uxth	r0, r3
 800ac4c:	b9a8      	cbnz	r0, 800ac7a <__lo0bits+0x52>
 800ac4e:	0c1b      	lsrs	r3, r3, #16
 800ac50:	2010      	movs	r0, #16
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	b90a      	cbnz	r2, 800ac5a <__lo0bits+0x32>
 800ac56:	3008      	adds	r0, #8
 800ac58:	0a1b      	lsrs	r3, r3, #8
 800ac5a:	071a      	lsls	r2, r3, #28
 800ac5c:	bf04      	itt	eq
 800ac5e:	091b      	lsreq	r3, r3, #4
 800ac60:	3004      	addeq	r0, #4
 800ac62:	079a      	lsls	r2, r3, #30
 800ac64:	bf04      	itt	eq
 800ac66:	089b      	lsreq	r3, r3, #2
 800ac68:	3002      	addeq	r0, #2
 800ac6a:	07da      	lsls	r2, r3, #31
 800ac6c:	d403      	bmi.n	800ac76 <__lo0bits+0x4e>
 800ac6e:	085b      	lsrs	r3, r3, #1
 800ac70:	f100 0001 	add.w	r0, r0, #1
 800ac74:	d005      	beq.n	800ac82 <__lo0bits+0x5a>
 800ac76:	600b      	str	r3, [r1, #0]
 800ac78:	4770      	bx	lr
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	e7e9      	b.n	800ac52 <__lo0bits+0x2a>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	4770      	bx	lr
 800ac82:	2020      	movs	r0, #32
 800ac84:	4770      	bx	lr
	...

0800ac88 <__i2b>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	f7ff ff03 	bl	800aa98 <_Balloc>
 800ac92:	4602      	mov	r2, r0
 800ac94:	b928      	cbnz	r0, 800aca2 <__i2b+0x1a>
 800ac96:	4b05      	ldr	r3, [pc, #20]	; (800acac <__i2b+0x24>)
 800ac98:	4805      	ldr	r0, [pc, #20]	; (800acb0 <__i2b+0x28>)
 800ac9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac9e:	f000 ff51 	bl	800bb44 <__assert_func>
 800aca2:	2301      	movs	r3, #1
 800aca4:	6144      	str	r4, [r0, #20]
 800aca6:	6103      	str	r3, [r0, #16]
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	bf00      	nop
 800acac:	0800c6d7 	.word	0x0800c6d7
 800acb0:	0800c748 	.word	0x0800c748

0800acb4 <__multiply>:
 800acb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	4691      	mov	r9, r2
 800acba:	690a      	ldr	r2, [r1, #16]
 800acbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bfb8      	it	lt
 800acc4:	460b      	movlt	r3, r1
 800acc6:	460c      	mov	r4, r1
 800acc8:	bfbc      	itt	lt
 800acca:	464c      	movlt	r4, r9
 800accc:	4699      	movlt	r9, r3
 800acce:	6927      	ldr	r7, [r4, #16]
 800acd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acd4:	68a3      	ldr	r3, [r4, #8]
 800acd6:	6861      	ldr	r1, [r4, #4]
 800acd8:	eb07 060a 	add.w	r6, r7, sl
 800acdc:	42b3      	cmp	r3, r6
 800acde:	b085      	sub	sp, #20
 800ace0:	bfb8      	it	lt
 800ace2:	3101      	addlt	r1, #1
 800ace4:	f7ff fed8 	bl	800aa98 <_Balloc>
 800ace8:	b930      	cbnz	r0, 800acf8 <__multiply+0x44>
 800acea:	4602      	mov	r2, r0
 800acec:	4b44      	ldr	r3, [pc, #272]	; (800ae00 <__multiply+0x14c>)
 800acee:	4845      	ldr	r0, [pc, #276]	; (800ae04 <__multiply+0x150>)
 800acf0:	f240 115d 	movw	r1, #349	; 0x15d
 800acf4:	f000 ff26 	bl	800bb44 <__assert_func>
 800acf8:	f100 0514 	add.w	r5, r0, #20
 800acfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad00:	462b      	mov	r3, r5
 800ad02:	2200      	movs	r2, #0
 800ad04:	4543      	cmp	r3, r8
 800ad06:	d321      	bcc.n	800ad4c <__multiply+0x98>
 800ad08:	f104 0314 	add.w	r3, r4, #20
 800ad0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad10:	f109 0314 	add.w	r3, r9, #20
 800ad14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad18:	9202      	str	r2, [sp, #8]
 800ad1a:	1b3a      	subs	r2, r7, r4
 800ad1c:	3a15      	subs	r2, #21
 800ad1e:	f022 0203 	bic.w	r2, r2, #3
 800ad22:	3204      	adds	r2, #4
 800ad24:	f104 0115 	add.w	r1, r4, #21
 800ad28:	428f      	cmp	r7, r1
 800ad2a:	bf38      	it	cc
 800ad2c:	2204      	movcc	r2, #4
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	9a02      	ldr	r2, [sp, #8]
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d80c      	bhi.n	800ad52 <__multiply+0x9e>
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	dd03      	ble.n	800ad44 <__multiply+0x90>
 800ad3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d05a      	beq.n	800adfa <__multiply+0x146>
 800ad44:	6106      	str	r6, [r0, #16]
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	f843 2b04 	str.w	r2, [r3], #4
 800ad50:	e7d8      	b.n	800ad04 <__multiply+0x50>
 800ad52:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad56:	f1ba 0f00 	cmp.w	sl, #0
 800ad5a:	d024      	beq.n	800ada6 <__multiply+0xf2>
 800ad5c:	f104 0e14 	add.w	lr, r4, #20
 800ad60:	46a9      	mov	r9, r5
 800ad62:	f04f 0c00 	mov.w	ip, #0
 800ad66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad6a:	f8d9 1000 	ldr.w	r1, [r9]
 800ad6e:	fa1f fb82 	uxth.w	fp, r2
 800ad72:	b289      	uxth	r1, r1
 800ad74:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad80:	4461      	add	r1, ip
 800ad82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad86:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad8e:	b289      	uxth	r1, r1
 800ad90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad94:	4577      	cmp	r7, lr
 800ad96:	f849 1b04 	str.w	r1, [r9], #4
 800ad9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad9e:	d8e2      	bhi.n	800ad66 <__multiply+0xb2>
 800ada0:	9a01      	ldr	r2, [sp, #4]
 800ada2:	f845 c002 	str.w	ip, [r5, r2]
 800ada6:	9a03      	ldr	r2, [sp, #12]
 800ada8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adac:	3304      	adds	r3, #4
 800adae:	f1b9 0f00 	cmp.w	r9, #0
 800adb2:	d020      	beq.n	800adf6 <__multiply+0x142>
 800adb4:	6829      	ldr	r1, [r5, #0]
 800adb6:	f104 0c14 	add.w	ip, r4, #20
 800adba:	46ae      	mov	lr, r5
 800adbc:	f04f 0a00 	mov.w	sl, #0
 800adc0:	f8bc b000 	ldrh.w	fp, [ip]
 800adc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adc8:	fb09 220b 	mla	r2, r9, fp, r2
 800adcc:	4492      	add	sl, r2
 800adce:	b289      	uxth	r1, r1
 800add0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800add4:	f84e 1b04 	str.w	r1, [lr], #4
 800add8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800addc:	f8be 1000 	ldrh.w	r1, [lr]
 800ade0:	0c12      	lsrs	r2, r2, #16
 800ade2:	fb09 1102 	mla	r1, r9, r2, r1
 800ade6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800adea:	4567      	cmp	r7, ip
 800adec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adf0:	d8e6      	bhi.n	800adc0 <__multiply+0x10c>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	50a9      	str	r1, [r5, r2]
 800adf6:	3504      	adds	r5, #4
 800adf8:	e79a      	b.n	800ad30 <__multiply+0x7c>
 800adfa:	3e01      	subs	r6, #1
 800adfc:	e79c      	b.n	800ad38 <__multiply+0x84>
 800adfe:	bf00      	nop
 800ae00:	0800c6d7 	.word	0x0800c6d7
 800ae04:	0800c748 	.word	0x0800c748

0800ae08 <__pow5mult>:
 800ae08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae0c:	4615      	mov	r5, r2
 800ae0e:	f012 0203 	ands.w	r2, r2, #3
 800ae12:	4606      	mov	r6, r0
 800ae14:	460f      	mov	r7, r1
 800ae16:	d007      	beq.n	800ae28 <__pow5mult+0x20>
 800ae18:	4c25      	ldr	r4, [pc, #148]	; (800aeb0 <__pow5mult+0xa8>)
 800ae1a:	3a01      	subs	r2, #1
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae22:	f7ff fe9b 	bl	800ab5c <__multadd>
 800ae26:	4607      	mov	r7, r0
 800ae28:	10ad      	asrs	r5, r5, #2
 800ae2a:	d03d      	beq.n	800aea8 <__pow5mult+0xa0>
 800ae2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae2e:	b97c      	cbnz	r4, 800ae50 <__pow5mult+0x48>
 800ae30:	2010      	movs	r0, #16
 800ae32:	f7ff fe29 	bl	800aa88 <malloc>
 800ae36:	4602      	mov	r2, r0
 800ae38:	6270      	str	r0, [r6, #36]	; 0x24
 800ae3a:	b928      	cbnz	r0, 800ae48 <__pow5mult+0x40>
 800ae3c:	4b1d      	ldr	r3, [pc, #116]	; (800aeb4 <__pow5mult+0xac>)
 800ae3e:	481e      	ldr	r0, [pc, #120]	; (800aeb8 <__pow5mult+0xb0>)
 800ae40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae44:	f000 fe7e 	bl	800bb44 <__assert_func>
 800ae48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae4c:	6004      	str	r4, [r0, #0]
 800ae4e:	60c4      	str	r4, [r0, #12]
 800ae50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae58:	b94c      	cbnz	r4, 800ae6e <__pow5mult+0x66>
 800ae5a:	f240 2171 	movw	r1, #625	; 0x271
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ff12 	bl	800ac88 <__i2b>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	6003      	str	r3, [r0, #0]
 800ae6e:	f04f 0900 	mov.w	r9, #0
 800ae72:	07eb      	lsls	r3, r5, #31
 800ae74:	d50a      	bpl.n	800ae8c <__pow5mult+0x84>
 800ae76:	4639      	mov	r1, r7
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff ff1a 	bl	800acb4 <__multiply>
 800ae80:	4639      	mov	r1, r7
 800ae82:	4680      	mov	r8, r0
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7ff fe47 	bl	800ab18 <_Bfree>
 800ae8a:	4647      	mov	r7, r8
 800ae8c:	106d      	asrs	r5, r5, #1
 800ae8e:	d00b      	beq.n	800aea8 <__pow5mult+0xa0>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	b938      	cbnz	r0, 800aea4 <__pow5mult+0x9c>
 800ae94:	4622      	mov	r2, r4
 800ae96:	4621      	mov	r1, r4
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff ff0b 	bl	800acb4 <__multiply>
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	f8c0 9000 	str.w	r9, [r0]
 800aea4:	4604      	mov	r4, r0
 800aea6:	e7e4      	b.n	800ae72 <__pow5mult+0x6a>
 800aea8:	4638      	mov	r0, r7
 800aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeae:	bf00      	nop
 800aeb0:	0800c898 	.word	0x0800c898
 800aeb4:	0800c665 	.word	0x0800c665
 800aeb8:	0800c748 	.word	0x0800c748

0800aebc <__lshift>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	460c      	mov	r4, r1
 800aec2:	6849      	ldr	r1, [r1, #4]
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	4607      	mov	r7, r0
 800aece:	4691      	mov	r9, r2
 800aed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aed4:	f108 0601 	add.w	r6, r8, #1
 800aed8:	42b3      	cmp	r3, r6
 800aeda:	db0b      	blt.n	800aef4 <__lshift+0x38>
 800aedc:	4638      	mov	r0, r7
 800aede:	f7ff fddb 	bl	800aa98 <_Balloc>
 800aee2:	4605      	mov	r5, r0
 800aee4:	b948      	cbnz	r0, 800aefa <__lshift+0x3e>
 800aee6:	4602      	mov	r2, r0
 800aee8:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <__lshift+0xd8>)
 800aeea:	482b      	ldr	r0, [pc, #172]	; (800af98 <__lshift+0xdc>)
 800aeec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aef0:	f000 fe28 	bl	800bb44 <__assert_func>
 800aef4:	3101      	adds	r1, #1
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	e7ee      	b.n	800aed8 <__lshift+0x1c>
 800aefa:	2300      	movs	r3, #0
 800aefc:	f100 0114 	add.w	r1, r0, #20
 800af00:	f100 0210 	add.w	r2, r0, #16
 800af04:	4618      	mov	r0, r3
 800af06:	4553      	cmp	r3, sl
 800af08:	db37      	blt.n	800af7a <__lshift+0xbe>
 800af0a:	6920      	ldr	r0, [r4, #16]
 800af0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af10:	f104 0314 	add.w	r3, r4, #20
 800af14:	f019 091f 	ands.w	r9, r9, #31
 800af18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af20:	d02f      	beq.n	800af82 <__lshift+0xc6>
 800af22:	f1c9 0e20 	rsb	lr, r9, #32
 800af26:	468a      	mov	sl, r1
 800af28:	f04f 0c00 	mov.w	ip, #0
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	fa02 f209 	lsl.w	r2, r2, r9
 800af32:	ea42 020c 	orr.w	r2, r2, ip
 800af36:	f84a 2b04 	str.w	r2, [sl], #4
 800af3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3e:	4298      	cmp	r0, r3
 800af40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af44:	d8f2      	bhi.n	800af2c <__lshift+0x70>
 800af46:	1b03      	subs	r3, r0, r4
 800af48:	3b15      	subs	r3, #21
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	3304      	adds	r3, #4
 800af50:	f104 0215 	add.w	r2, r4, #21
 800af54:	4290      	cmp	r0, r2
 800af56:	bf38      	it	cc
 800af58:	2304      	movcc	r3, #4
 800af5a:	f841 c003 	str.w	ip, [r1, r3]
 800af5e:	f1bc 0f00 	cmp.w	ip, #0
 800af62:	d001      	beq.n	800af68 <__lshift+0xac>
 800af64:	f108 0602 	add.w	r6, r8, #2
 800af68:	3e01      	subs	r6, #1
 800af6a:	4638      	mov	r0, r7
 800af6c:	612e      	str	r6, [r5, #16]
 800af6e:	4621      	mov	r1, r4
 800af70:	f7ff fdd2 	bl	800ab18 <_Bfree>
 800af74:	4628      	mov	r0, r5
 800af76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af7e:	3301      	adds	r3, #1
 800af80:	e7c1      	b.n	800af06 <__lshift+0x4a>
 800af82:	3904      	subs	r1, #4
 800af84:	f853 2b04 	ldr.w	r2, [r3], #4
 800af88:	f841 2f04 	str.w	r2, [r1, #4]!
 800af8c:	4298      	cmp	r0, r3
 800af8e:	d8f9      	bhi.n	800af84 <__lshift+0xc8>
 800af90:	e7ea      	b.n	800af68 <__lshift+0xac>
 800af92:	bf00      	nop
 800af94:	0800c6d7 	.word	0x0800c6d7
 800af98:	0800c748 	.word	0x0800c748

0800af9c <__mcmp>:
 800af9c:	b530      	push	{r4, r5, lr}
 800af9e:	6902      	ldr	r2, [r0, #16]
 800afa0:	690c      	ldr	r4, [r1, #16]
 800afa2:	1b12      	subs	r2, r2, r4
 800afa4:	d10e      	bne.n	800afc4 <__mcmp+0x28>
 800afa6:	f100 0314 	add.w	r3, r0, #20
 800afaa:	3114      	adds	r1, #20
 800afac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afbc:	42a5      	cmp	r5, r4
 800afbe:	d003      	beq.n	800afc8 <__mcmp+0x2c>
 800afc0:	d305      	bcc.n	800afce <__mcmp+0x32>
 800afc2:	2201      	movs	r2, #1
 800afc4:	4610      	mov	r0, r2
 800afc6:	bd30      	pop	{r4, r5, pc}
 800afc8:	4283      	cmp	r3, r0
 800afca:	d3f3      	bcc.n	800afb4 <__mcmp+0x18>
 800afcc:	e7fa      	b.n	800afc4 <__mcmp+0x28>
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	e7f7      	b.n	800afc4 <__mcmp+0x28>

0800afd4 <__mdiff>:
 800afd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	460c      	mov	r4, r1
 800afda:	4606      	mov	r6, r0
 800afdc:	4611      	mov	r1, r2
 800afde:	4620      	mov	r0, r4
 800afe0:	4690      	mov	r8, r2
 800afe2:	f7ff ffdb 	bl	800af9c <__mcmp>
 800afe6:	1e05      	subs	r5, r0, #0
 800afe8:	d110      	bne.n	800b00c <__mdiff+0x38>
 800afea:	4629      	mov	r1, r5
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff fd53 	bl	800aa98 <_Balloc>
 800aff2:	b930      	cbnz	r0, 800b002 <__mdiff+0x2e>
 800aff4:	4b3a      	ldr	r3, [pc, #232]	; (800b0e0 <__mdiff+0x10c>)
 800aff6:	4602      	mov	r2, r0
 800aff8:	f240 2132 	movw	r1, #562	; 0x232
 800affc:	4839      	ldr	r0, [pc, #228]	; (800b0e4 <__mdiff+0x110>)
 800affe:	f000 fda1 	bl	800bb44 <__assert_func>
 800b002:	2301      	movs	r3, #1
 800b004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	bfa4      	itt	ge
 800b00e:	4643      	movge	r3, r8
 800b010:	46a0      	movge	r8, r4
 800b012:	4630      	mov	r0, r6
 800b014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b018:	bfa6      	itte	ge
 800b01a:	461c      	movge	r4, r3
 800b01c:	2500      	movge	r5, #0
 800b01e:	2501      	movlt	r5, #1
 800b020:	f7ff fd3a 	bl	800aa98 <_Balloc>
 800b024:	b920      	cbnz	r0, 800b030 <__mdiff+0x5c>
 800b026:	4b2e      	ldr	r3, [pc, #184]	; (800b0e0 <__mdiff+0x10c>)
 800b028:	4602      	mov	r2, r0
 800b02a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b02e:	e7e5      	b.n	800affc <__mdiff+0x28>
 800b030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b034:	6926      	ldr	r6, [r4, #16]
 800b036:	60c5      	str	r5, [r0, #12]
 800b038:	f104 0914 	add.w	r9, r4, #20
 800b03c:	f108 0514 	add.w	r5, r8, #20
 800b040:	f100 0e14 	add.w	lr, r0, #20
 800b044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b04c:	f108 0210 	add.w	r2, r8, #16
 800b050:	46f2      	mov	sl, lr
 800b052:	2100      	movs	r1, #0
 800b054:	f859 3b04 	ldr.w	r3, [r9], #4
 800b058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b05c:	fa1f f883 	uxth.w	r8, r3
 800b060:	fa11 f18b 	uxtah	r1, r1, fp
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	eba1 0808 	sub.w	r8, r1, r8
 800b06a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b06e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b072:	fa1f f888 	uxth.w	r8, r8
 800b076:	1419      	asrs	r1, r3, #16
 800b078:	454e      	cmp	r6, r9
 800b07a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b07e:	f84a 3b04 	str.w	r3, [sl], #4
 800b082:	d8e7      	bhi.n	800b054 <__mdiff+0x80>
 800b084:	1b33      	subs	r3, r6, r4
 800b086:	3b15      	subs	r3, #21
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	3304      	adds	r3, #4
 800b08e:	3415      	adds	r4, #21
 800b090:	42a6      	cmp	r6, r4
 800b092:	bf38      	it	cc
 800b094:	2304      	movcc	r3, #4
 800b096:	441d      	add	r5, r3
 800b098:	4473      	add	r3, lr
 800b09a:	469e      	mov	lr, r3
 800b09c:	462e      	mov	r6, r5
 800b09e:	4566      	cmp	r6, ip
 800b0a0:	d30e      	bcc.n	800b0c0 <__mdiff+0xec>
 800b0a2:	f10c 0203 	add.w	r2, ip, #3
 800b0a6:	1b52      	subs	r2, r2, r5
 800b0a8:	f022 0203 	bic.w	r2, r2, #3
 800b0ac:	3d03      	subs	r5, #3
 800b0ae:	45ac      	cmp	ip, r5
 800b0b0:	bf38      	it	cc
 800b0b2:	2200      	movcc	r2, #0
 800b0b4:	441a      	add	r2, r3
 800b0b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0ba:	b17b      	cbz	r3, 800b0dc <__mdiff+0x108>
 800b0bc:	6107      	str	r7, [r0, #16]
 800b0be:	e7a3      	b.n	800b008 <__mdiff+0x34>
 800b0c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0c4:	fa11 f288 	uxtah	r2, r1, r8
 800b0c8:	1414      	asrs	r4, r2, #16
 800b0ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0ce:	b292      	uxth	r2, r2
 800b0d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0d4:	f84e 2b04 	str.w	r2, [lr], #4
 800b0d8:	1421      	asrs	r1, r4, #16
 800b0da:	e7e0      	b.n	800b09e <__mdiff+0xca>
 800b0dc:	3f01      	subs	r7, #1
 800b0de:	e7ea      	b.n	800b0b6 <__mdiff+0xe2>
 800b0e0:	0800c6d7 	.word	0x0800c6d7
 800b0e4:	0800c748 	.word	0x0800c748

0800b0e8 <__d2b>:
 800b0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	4689      	mov	r9, r1
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	ec57 6b10 	vmov	r6, r7, d0
 800b0f4:	4690      	mov	r8, r2
 800b0f6:	f7ff fccf 	bl	800aa98 <_Balloc>
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	b930      	cbnz	r0, 800b10c <__d2b+0x24>
 800b0fe:	4602      	mov	r2, r0
 800b100:	4b25      	ldr	r3, [pc, #148]	; (800b198 <__d2b+0xb0>)
 800b102:	4826      	ldr	r0, [pc, #152]	; (800b19c <__d2b+0xb4>)
 800b104:	f240 310a 	movw	r1, #778	; 0x30a
 800b108:	f000 fd1c 	bl	800bb44 <__assert_func>
 800b10c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b114:	bb35      	cbnz	r5, 800b164 <__d2b+0x7c>
 800b116:	2e00      	cmp	r6, #0
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	d028      	beq.n	800b16e <__d2b+0x86>
 800b11c:	4668      	mov	r0, sp
 800b11e:	9600      	str	r6, [sp, #0]
 800b120:	f7ff fd82 	bl	800ac28 <__lo0bits>
 800b124:	9900      	ldr	r1, [sp, #0]
 800b126:	b300      	cbz	r0, 800b16a <__d2b+0x82>
 800b128:	9a01      	ldr	r2, [sp, #4]
 800b12a:	f1c0 0320 	rsb	r3, r0, #32
 800b12e:	fa02 f303 	lsl.w	r3, r2, r3
 800b132:	430b      	orrs	r3, r1
 800b134:	40c2      	lsrs	r2, r0
 800b136:	6163      	str	r3, [r4, #20]
 800b138:	9201      	str	r2, [sp, #4]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	61a3      	str	r3, [r4, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bf14      	ite	ne
 800b142:	2202      	movne	r2, #2
 800b144:	2201      	moveq	r2, #1
 800b146:	6122      	str	r2, [r4, #16]
 800b148:	b1d5      	cbz	r5, 800b180 <__d2b+0x98>
 800b14a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b14e:	4405      	add	r5, r0
 800b150:	f8c9 5000 	str.w	r5, [r9]
 800b154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b158:	f8c8 0000 	str.w	r0, [r8]
 800b15c:	4620      	mov	r0, r4
 800b15e:	b003      	add	sp, #12
 800b160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b168:	e7d5      	b.n	800b116 <__d2b+0x2e>
 800b16a:	6161      	str	r1, [r4, #20]
 800b16c:	e7e5      	b.n	800b13a <__d2b+0x52>
 800b16e:	a801      	add	r0, sp, #4
 800b170:	f7ff fd5a 	bl	800ac28 <__lo0bits>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	6163      	str	r3, [r4, #20]
 800b178:	2201      	movs	r2, #1
 800b17a:	6122      	str	r2, [r4, #16]
 800b17c:	3020      	adds	r0, #32
 800b17e:	e7e3      	b.n	800b148 <__d2b+0x60>
 800b180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b188:	f8c9 0000 	str.w	r0, [r9]
 800b18c:	6918      	ldr	r0, [r3, #16]
 800b18e:	f7ff fd2b 	bl	800abe8 <__hi0bits>
 800b192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b196:	e7df      	b.n	800b158 <__d2b+0x70>
 800b198:	0800c6d7 	.word	0x0800c6d7
 800b19c:	0800c748 	.word	0x0800c748

0800b1a0 <_calloc_r>:
 800b1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a2:	fba1 2402 	umull	r2, r4, r1, r2
 800b1a6:	b94c      	cbnz	r4, 800b1bc <_calloc_r+0x1c>
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	9201      	str	r2, [sp, #4]
 800b1ac:	f000 f87a 	bl	800b2a4 <_malloc_r>
 800b1b0:	9a01      	ldr	r2, [sp, #4]
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	b930      	cbnz	r0, 800b1c4 <_calloc_r+0x24>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	b003      	add	sp, #12
 800b1ba:	bd30      	pop	{r4, r5, pc}
 800b1bc:	220c      	movs	r2, #12
 800b1be:	6002      	str	r2, [r0, #0]
 800b1c0:	2500      	movs	r5, #0
 800b1c2:	e7f8      	b.n	800b1b6 <_calloc_r+0x16>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	f7fe f8f9 	bl	80093bc <memset>
 800b1ca:	e7f4      	b.n	800b1b6 <_calloc_r+0x16>

0800b1cc <_free_r>:
 800b1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d044      	beq.n	800b25c <_free_r+0x90>
 800b1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d6:	9001      	str	r0, [sp, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f1a1 0404 	sub.w	r4, r1, #4
 800b1de:	bfb8      	it	lt
 800b1e0:	18e4      	addlt	r4, r4, r3
 800b1e2:	f000 fe55 	bl	800be90 <__malloc_lock>
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <_free_r+0x94>)
 800b1e8:	9801      	ldr	r0, [sp, #4]
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	b933      	cbnz	r3, 800b1fc <_free_r+0x30>
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	6014      	str	r4, [r2, #0]
 800b1f2:	b003      	add	sp, #12
 800b1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f8:	f000 be50 	b.w	800be9c <__malloc_unlock>
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d908      	bls.n	800b212 <_free_r+0x46>
 800b200:	6825      	ldr	r5, [r4, #0]
 800b202:	1961      	adds	r1, r4, r5
 800b204:	428b      	cmp	r3, r1
 800b206:	bf01      	itttt	eq
 800b208:	6819      	ldreq	r1, [r3, #0]
 800b20a:	685b      	ldreq	r3, [r3, #4]
 800b20c:	1949      	addeq	r1, r1, r5
 800b20e:	6021      	streq	r1, [r4, #0]
 800b210:	e7ed      	b.n	800b1ee <_free_r+0x22>
 800b212:	461a      	mov	r2, r3
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b10b      	cbz	r3, 800b21c <_free_r+0x50>
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d9fa      	bls.n	800b212 <_free_r+0x46>
 800b21c:	6811      	ldr	r1, [r2, #0]
 800b21e:	1855      	adds	r5, r2, r1
 800b220:	42a5      	cmp	r5, r4
 800b222:	d10b      	bne.n	800b23c <_free_r+0x70>
 800b224:	6824      	ldr	r4, [r4, #0]
 800b226:	4421      	add	r1, r4
 800b228:	1854      	adds	r4, r2, r1
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	6011      	str	r1, [r2, #0]
 800b22e:	d1e0      	bne.n	800b1f2 <_free_r+0x26>
 800b230:	681c      	ldr	r4, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	6053      	str	r3, [r2, #4]
 800b236:	4421      	add	r1, r4
 800b238:	6011      	str	r1, [r2, #0]
 800b23a:	e7da      	b.n	800b1f2 <_free_r+0x26>
 800b23c:	d902      	bls.n	800b244 <_free_r+0x78>
 800b23e:	230c      	movs	r3, #12
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	e7d6      	b.n	800b1f2 <_free_r+0x26>
 800b244:	6825      	ldr	r5, [r4, #0]
 800b246:	1961      	adds	r1, r4, r5
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf04      	itt	eq
 800b24c:	6819      	ldreq	r1, [r3, #0]
 800b24e:	685b      	ldreq	r3, [r3, #4]
 800b250:	6063      	str	r3, [r4, #4]
 800b252:	bf04      	itt	eq
 800b254:	1949      	addeq	r1, r1, r5
 800b256:	6021      	streq	r1, [r4, #0]
 800b258:	6054      	str	r4, [r2, #4]
 800b25a:	e7ca      	b.n	800b1f2 <_free_r+0x26>
 800b25c:	b003      	add	sp, #12
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	2400062c 	.word	0x2400062c

0800b264 <sbrk_aligned>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4e0e      	ldr	r6, [pc, #56]	; (800b2a0 <sbrk_aligned+0x3c>)
 800b268:	460c      	mov	r4, r1
 800b26a:	6831      	ldr	r1, [r6, #0]
 800b26c:	4605      	mov	r5, r0
 800b26e:	b911      	cbnz	r1, 800b276 <sbrk_aligned+0x12>
 800b270:	f000 fb42 	bl	800b8f8 <_sbrk_r>
 800b274:	6030      	str	r0, [r6, #0]
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f000 fb3d 	bl	800b8f8 <_sbrk_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d00a      	beq.n	800b298 <sbrk_aligned+0x34>
 800b282:	1cc4      	adds	r4, r0, #3
 800b284:	f024 0403 	bic.w	r4, r4, #3
 800b288:	42a0      	cmp	r0, r4
 800b28a:	d007      	beq.n	800b29c <sbrk_aligned+0x38>
 800b28c:	1a21      	subs	r1, r4, r0
 800b28e:	4628      	mov	r0, r5
 800b290:	f000 fb32 	bl	800b8f8 <_sbrk_r>
 800b294:	3001      	adds	r0, #1
 800b296:	d101      	bne.n	800b29c <sbrk_aligned+0x38>
 800b298:	f04f 34ff 	mov.w	r4, #4294967295
 800b29c:	4620      	mov	r0, r4
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	24000630 	.word	0x24000630

0800b2a4 <_malloc_r>:
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	1ccd      	adds	r5, r1, #3
 800b2aa:	f025 0503 	bic.w	r5, r5, #3
 800b2ae:	3508      	adds	r5, #8
 800b2b0:	2d0c      	cmp	r5, #12
 800b2b2:	bf38      	it	cc
 800b2b4:	250c      	movcc	r5, #12
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	db01      	blt.n	800b2c0 <_malloc_r+0x1c>
 800b2bc:	42a9      	cmp	r1, r5
 800b2be:	d905      	bls.n	800b2cc <_malloc_r+0x28>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	2600      	movs	r6, #0
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	4e2e      	ldr	r6, [pc, #184]	; (800b388 <_malloc_r+0xe4>)
 800b2ce:	f000 fddf 	bl	800be90 <__malloc_lock>
 800b2d2:	6833      	ldr	r3, [r6, #0]
 800b2d4:	461c      	mov	r4, r3
 800b2d6:	bb34      	cbnz	r4, 800b326 <_malloc_r+0x82>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f7ff ffc2 	bl	800b264 <sbrk_aligned>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	d14d      	bne.n	800b382 <_malloc_r+0xde>
 800b2e6:	6834      	ldr	r4, [r6, #0]
 800b2e8:	4626      	mov	r6, r4
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	d140      	bne.n	800b370 <_malloc_r+0xcc>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	eb04 0803 	add.w	r8, r4, r3
 800b2f8:	f000 fafe 	bl	800b8f8 <_sbrk_r>
 800b2fc:	4580      	cmp	r8, r0
 800b2fe:	d13a      	bne.n	800b376 <_malloc_r+0xd2>
 800b300:	6821      	ldr	r1, [r4, #0]
 800b302:	3503      	adds	r5, #3
 800b304:	1a6d      	subs	r5, r5, r1
 800b306:	f025 0503 	bic.w	r5, r5, #3
 800b30a:	3508      	adds	r5, #8
 800b30c:	2d0c      	cmp	r5, #12
 800b30e:	bf38      	it	cc
 800b310:	250c      	movcc	r5, #12
 800b312:	4629      	mov	r1, r5
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff ffa5 	bl	800b264 <sbrk_aligned>
 800b31a:	3001      	adds	r0, #1
 800b31c:	d02b      	beq.n	800b376 <_malloc_r+0xd2>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	442b      	add	r3, r5
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	e00e      	b.n	800b344 <_malloc_r+0xa0>
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	1b52      	subs	r2, r2, r5
 800b32a:	d41e      	bmi.n	800b36a <_malloc_r+0xc6>
 800b32c:	2a0b      	cmp	r2, #11
 800b32e:	d916      	bls.n	800b35e <_malloc_r+0xba>
 800b330:	1961      	adds	r1, r4, r5
 800b332:	42a3      	cmp	r3, r4
 800b334:	6025      	str	r5, [r4, #0]
 800b336:	bf18      	it	ne
 800b338:	6059      	strne	r1, [r3, #4]
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	bf08      	it	eq
 800b33e:	6031      	streq	r1, [r6, #0]
 800b340:	5162      	str	r2, [r4, r5]
 800b342:	604b      	str	r3, [r1, #4]
 800b344:	4638      	mov	r0, r7
 800b346:	f104 060b 	add.w	r6, r4, #11
 800b34a:	f000 fda7 	bl	800be9c <__malloc_unlock>
 800b34e:	f026 0607 	bic.w	r6, r6, #7
 800b352:	1d23      	adds	r3, r4, #4
 800b354:	1af2      	subs	r2, r6, r3
 800b356:	d0b6      	beq.n	800b2c6 <_malloc_r+0x22>
 800b358:	1b9b      	subs	r3, r3, r6
 800b35a:	50a3      	str	r3, [r4, r2]
 800b35c:	e7b3      	b.n	800b2c6 <_malloc_r+0x22>
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	42a3      	cmp	r3, r4
 800b362:	bf0c      	ite	eq
 800b364:	6032      	streq	r2, [r6, #0]
 800b366:	605a      	strne	r2, [r3, #4]
 800b368:	e7ec      	b.n	800b344 <_malloc_r+0xa0>
 800b36a:	4623      	mov	r3, r4
 800b36c:	6864      	ldr	r4, [r4, #4]
 800b36e:	e7b2      	b.n	800b2d6 <_malloc_r+0x32>
 800b370:	4634      	mov	r4, r6
 800b372:	6876      	ldr	r6, [r6, #4]
 800b374:	e7b9      	b.n	800b2ea <_malloc_r+0x46>
 800b376:	230c      	movs	r3, #12
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f000 fd8e 	bl	800be9c <__malloc_unlock>
 800b380:	e7a1      	b.n	800b2c6 <_malloc_r+0x22>
 800b382:	6025      	str	r5, [r4, #0]
 800b384:	e7de      	b.n	800b344 <_malloc_r+0xa0>
 800b386:	bf00      	nop
 800b388:	2400062c 	.word	0x2400062c

0800b38c <__ssputs_r>:
 800b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	688e      	ldr	r6, [r1, #8]
 800b392:	429e      	cmp	r6, r3
 800b394:	4682      	mov	sl, r0
 800b396:	460c      	mov	r4, r1
 800b398:	4690      	mov	r8, r2
 800b39a:	461f      	mov	r7, r3
 800b39c:	d838      	bhi.n	800b410 <__ssputs_r+0x84>
 800b39e:	898a      	ldrh	r2, [r1, #12]
 800b3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a4:	d032      	beq.n	800b40c <__ssputs_r+0x80>
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	6909      	ldr	r1, [r1, #16]
 800b3aa:	eba5 0901 	sub.w	r9, r5, r1
 800b3ae:	6965      	ldr	r5, [r4, #20]
 800b3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	444b      	add	r3, r9
 800b3bc:	106d      	asrs	r5, r5, #1
 800b3be:	429d      	cmp	r5, r3
 800b3c0:	bf38      	it	cc
 800b3c2:	461d      	movcc	r5, r3
 800b3c4:	0553      	lsls	r3, r2, #21
 800b3c6:	d531      	bpl.n	800b42c <__ssputs_r+0xa0>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7ff ff6b 	bl	800b2a4 <_malloc_r>
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	b950      	cbnz	r0, 800b3e8 <__ssputs_r+0x5c>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	f8ca 3000 	str.w	r3, [sl]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e8:	6921      	ldr	r1, [r4, #16]
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	f7fd ffd8 	bl	80093a0 <memcpy>
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fa:	81a3      	strh	r3, [r4, #12]
 800b3fc:	6126      	str	r6, [r4, #16]
 800b3fe:	6165      	str	r5, [r4, #20]
 800b400:	444e      	add	r6, r9
 800b402:	eba5 0509 	sub.w	r5, r5, r9
 800b406:	6026      	str	r6, [r4, #0]
 800b408:	60a5      	str	r5, [r4, #8]
 800b40a:	463e      	mov	r6, r7
 800b40c:	42be      	cmp	r6, r7
 800b40e:	d900      	bls.n	800b412 <__ssputs_r+0x86>
 800b410:	463e      	mov	r6, r7
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	4632      	mov	r2, r6
 800b416:	4641      	mov	r1, r8
 800b418:	f000 fd20 	bl	800be5c <memmove>
 800b41c:	68a3      	ldr	r3, [r4, #8]
 800b41e:	1b9b      	subs	r3, r3, r6
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	4433      	add	r3, r6
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	2000      	movs	r0, #0
 800b42a:	e7db      	b.n	800b3e4 <__ssputs_r+0x58>
 800b42c:	462a      	mov	r2, r5
 800b42e:	f000 fd3b 	bl	800bea8 <_realloc_r>
 800b432:	4606      	mov	r6, r0
 800b434:	2800      	cmp	r0, #0
 800b436:	d1e1      	bne.n	800b3fc <__ssputs_r+0x70>
 800b438:	6921      	ldr	r1, [r4, #16]
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7ff fec6 	bl	800b1cc <_free_r>
 800b440:	e7c7      	b.n	800b3d2 <__ssputs_r+0x46>
	...

0800b444 <_svfiprintf_r>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	4698      	mov	r8, r3
 800b44a:	898b      	ldrh	r3, [r1, #12]
 800b44c:	061b      	lsls	r3, r3, #24
 800b44e:	b09d      	sub	sp, #116	; 0x74
 800b450:	4607      	mov	r7, r0
 800b452:	460d      	mov	r5, r1
 800b454:	4614      	mov	r4, r2
 800b456:	d50e      	bpl.n	800b476 <_svfiprintf_r+0x32>
 800b458:	690b      	ldr	r3, [r1, #16]
 800b45a:	b963      	cbnz	r3, 800b476 <_svfiprintf_r+0x32>
 800b45c:	2140      	movs	r1, #64	; 0x40
 800b45e:	f7ff ff21 	bl	800b2a4 <_malloc_r>
 800b462:	6028      	str	r0, [r5, #0]
 800b464:	6128      	str	r0, [r5, #16]
 800b466:	b920      	cbnz	r0, 800b472 <_svfiprintf_r+0x2e>
 800b468:	230c      	movs	r3, #12
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e0d1      	b.n	800b616 <_svfiprintf_r+0x1d2>
 800b472:	2340      	movs	r3, #64	; 0x40
 800b474:	616b      	str	r3, [r5, #20]
 800b476:	2300      	movs	r3, #0
 800b478:	9309      	str	r3, [sp, #36]	; 0x24
 800b47a:	2320      	movs	r3, #32
 800b47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b480:	f8cd 800c 	str.w	r8, [sp, #12]
 800b484:	2330      	movs	r3, #48	; 0x30
 800b486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b630 <_svfiprintf_r+0x1ec>
 800b48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48e:	f04f 0901 	mov.w	r9, #1
 800b492:	4623      	mov	r3, r4
 800b494:	469a      	mov	sl, r3
 800b496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b49a:	b10a      	cbz	r2, 800b4a0 <_svfiprintf_r+0x5c>
 800b49c:	2a25      	cmp	r2, #37	; 0x25
 800b49e:	d1f9      	bne.n	800b494 <_svfiprintf_r+0x50>
 800b4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a4:	d00b      	beq.n	800b4be <_svfiprintf_r+0x7a>
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff ff6d 	bl	800b38c <__ssputs_r>
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	f000 80aa 	beq.w	800b60c <_svfiprintf_r+0x1c8>
 800b4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ba:	445a      	add	r2, fp
 800b4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4be:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80a2 	beq.w	800b60c <_svfiprintf_r+0x1c8>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d2:	f10a 0a01 	add.w	sl, sl, #1
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	9307      	str	r3, [sp, #28]
 800b4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4de:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e0:	4654      	mov	r4, sl
 800b4e2:	2205      	movs	r2, #5
 800b4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e8:	4851      	ldr	r0, [pc, #324]	; (800b630 <_svfiprintf_r+0x1ec>)
 800b4ea:	f7f4 ff01 	bl	80002f0 <memchr>
 800b4ee:	9a04      	ldr	r2, [sp, #16]
 800b4f0:	b9d8      	cbnz	r0, 800b52a <_svfiprintf_r+0xe6>
 800b4f2:	06d0      	lsls	r0, r2, #27
 800b4f4:	bf44      	itt	mi
 800b4f6:	2320      	movmi	r3, #32
 800b4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fc:	0711      	lsls	r1, r2, #28
 800b4fe:	bf44      	itt	mi
 800b500:	232b      	movmi	r3, #43	; 0x2b
 800b502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b506:	f89a 3000 	ldrb.w	r3, [sl]
 800b50a:	2b2a      	cmp	r3, #42	; 0x2a
 800b50c:	d015      	beq.n	800b53a <_svfiprintf_r+0xf6>
 800b50e:	9a07      	ldr	r2, [sp, #28]
 800b510:	4654      	mov	r4, sl
 800b512:	2000      	movs	r0, #0
 800b514:	f04f 0c0a 	mov.w	ip, #10
 800b518:	4621      	mov	r1, r4
 800b51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51e:	3b30      	subs	r3, #48	; 0x30
 800b520:	2b09      	cmp	r3, #9
 800b522:	d94e      	bls.n	800b5c2 <_svfiprintf_r+0x17e>
 800b524:	b1b0      	cbz	r0, 800b554 <_svfiprintf_r+0x110>
 800b526:	9207      	str	r2, [sp, #28]
 800b528:	e014      	b.n	800b554 <_svfiprintf_r+0x110>
 800b52a:	eba0 0308 	sub.w	r3, r0, r8
 800b52e:	fa09 f303 	lsl.w	r3, r9, r3
 800b532:	4313      	orrs	r3, r2
 800b534:	9304      	str	r3, [sp, #16]
 800b536:	46a2      	mov	sl, r4
 800b538:	e7d2      	b.n	800b4e0 <_svfiprintf_r+0x9c>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	1d19      	adds	r1, r3, #4
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	9103      	str	r1, [sp, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	bfbb      	ittet	lt
 800b546:	425b      	neglt	r3, r3
 800b548:	f042 0202 	orrlt.w	r2, r2, #2
 800b54c:	9307      	strge	r3, [sp, #28]
 800b54e:	9307      	strlt	r3, [sp, #28]
 800b550:	bfb8      	it	lt
 800b552:	9204      	strlt	r2, [sp, #16]
 800b554:	7823      	ldrb	r3, [r4, #0]
 800b556:	2b2e      	cmp	r3, #46	; 0x2e
 800b558:	d10c      	bne.n	800b574 <_svfiprintf_r+0x130>
 800b55a:	7863      	ldrb	r3, [r4, #1]
 800b55c:	2b2a      	cmp	r3, #42	; 0x2a
 800b55e:	d135      	bne.n	800b5cc <_svfiprintf_r+0x188>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	1d1a      	adds	r2, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	9203      	str	r2, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfb8      	it	lt
 800b56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b570:	3402      	adds	r4, #2
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b640 <_svfiprintf_r+0x1fc>
 800b578:	7821      	ldrb	r1, [r4, #0]
 800b57a:	2203      	movs	r2, #3
 800b57c:	4650      	mov	r0, sl
 800b57e:	f7f4 feb7 	bl	80002f0 <memchr>
 800b582:	b140      	cbz	r0, 800b596 <_svfiprintf_r+0x152>
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	eba0 000a 	sub.w	r0, r0, sl
 800b58a:	fa03 f000 	lsl.w	r0, r3, r0
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	4303      	orrs	r3, r0
 800b592:	3401      	adds	r4, #1
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59a:	4826      	ldr	r0, [pc, #152]	; (800b634 <_svfiprintf_r+0x1f0>)
 800b59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a0:	2206      	movs	r2, #6
 800b5a2:	f7f4 fea5 	bl	80002f0 <memchr>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d038      	beq.n	800b61c <_svfiprintf_r+0x1d8>
 800b5aa:	4b23      	ldr	r3, [pc, #140]	; (800b638 <_svfiprintf_r+0x1f4>)
 800b5ac:	bb1b      	cbnz	r3, 800b5f6 <_svfiprintf_r+0x1b2>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	f023 0307 	bic.w	r3, r3, #7
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	9303      	str	r3, [sp, #12]
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	4433      	add	r3, r6
 800b5be:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c0:	e767      	b.n	800b492 <_svfiprintf_r+0x4e>
 800b5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	e7a5      	b.n	800b518 <_svfiprintf_r+0xd4>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	3401      	adds	r4, #1
 800b5d0:	9305      	str	r3, [sp, #20]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	f04f 0c0a 	mov.w	ip, #10
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5de:	3a30      	subs	r2, #48	; 0x30
 800b5e0:	2a09      	cmp	r2, #9
 800b5e2:	d903      	bls.n	800b5ec <_svfiprintf_r+0x1a8>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0c5      	beq.n	800b574 <_svfiprintf_r+0x130>
 800b5e8:	9105      	str	r1, [sp, #20]
 800b5ea:	e7c3      	b.n	800b574 <_svfiprintf_r+0x130>
 800b5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7f0      	b.n	800b5d8 <_svfiprintf_r+0x194>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <_svfiprintf_r+0x1f8>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4638      	mov	r0, r7
 800b602:	f7fd ff75 	bl	80094f0 <_printf_float>
 800b606:	1c42      	adds	r2, r0, #1
 800b608:	4606      	mov	r6, r0
 800b60a:	d1d6      	bne.n	800b5ba <_svfiprintf_r+0x176>
 800b60c:	89ab      	ldrh	r3, [r5, #12]
 800b60e:	065b      	lsls	r3, r3, #25
 800b610:	f53f af2c 	bmi.w	800b46c <_svfiprintf_r+0x28>
 800b614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b616:	b01d      	add	sp, #116	; 0x74
 800b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	462a      	mov	r2, r5
 800b622:	4b06      	ldr	r3, [pc, #24]	; (800b63c <_svfiprintf_r+0x1f8>)
 800b624:	a904      	add	r1, sp, #16
 800b626:	4638      	mov	r0, r7
 800b628:	f7fe f9ee 	bl	8009a08 <_printf_i>
 800b62c:	e7eb      	b.n	800b606 <_svfiprintf_r+0x1c2>
 800b62e:	bf00      	nop
 800b630:	0800c8a4 	.word	0x0800c8a4
 800b634:	0800c8ae 	.word	0x0800c8ae
 800b638:	080094f1 	.word	0x080094f1
 800b63c:	0800b38d 	.word	0x0800b38d
 800b640:	0800c8aa 	.word	0x0800c8aa

0800b644 <__sfputc_r>:
 800b644:	6893      	ldr	r3, [r2, #8]
 800b646:	3b01      	subs	r3, #1
 800b648:	2b00      	cmp	r3, #0
 800b64a:	b410      	push	{r4}
 800b64c:	6093      	str	r3, [r2, #8]
 800b64e:	da08      	bge.n	800b662 <__sfputc_r+0x1e>
 800b650:	6994      	ldr	r4, [r2, #24]
 800b652:	42a3      	cmp	r3, r4
 800b654:	db01      	blt.n	800b65a <__sfputc_r+0x16>
 800b656:	290a      	cmp	r1, #10
 800b658:	d103      	bne.n	800b662 <__sfputc_r+0x1e>
 800b65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b65e:	f000 b99f 	b.w	800b9a0 <__swbuf_r>
 800b662:	6813      	ldr	r3, [r2, #0]
 800b664:	1c58      	adds	r0, r3, #1
 800b666:	6010      	str	r0, [r2, #0]
 800b668:	7019      	strb	r1, [r3, #0]
 800b66a:	4608      	mov	r0, r1
 800b66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <__sfputs_r>:
 800b672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	4614      	mov	r4, r2
 800b67a:	18d5      	adds	r5, r2, r3
 800b67c:	42ac      	cmp	r4, r5
 800b67e:	d101      	bne.n	800b684 <__sfputs_r+0x12>
 800b680:	2000      	movs	r0, #0
 800b682:	e007      	b.n	800b694 <__sfputs_r+0x22>
 800b684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b688:	463a      	mov	r2, r7
 800b68a:	4630      	mov	r0, r6
 800b68c:	f7ff ffda 	bl	800b644 <__sfputc_r>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d1f3      	bne.n	800b67c <__sfputs_r+0xa>
 800b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b698 <_vfiprintf_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	460d      	mov	r5, r1
 800b69e:	b09d      	sub	sp, #116	; 0x74
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	4698      	mov	r8, r3
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	b118      	cbz	r0, 800b6b0 <_vfiprintf_r+0x18>
 800b6a8:	6983      	ldr	r3, [r0, #24]
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <_vfiprintf_r+0x18>
 800b6ac:	f7ff f946 	bl	800a93c <__sinit>
 800b6b0:	4b89      	ldr	r3, [pc, #548]	; (800b8d8 <_vfiprintf_r+0x240>)
 800b6b2:	429d      	cmp	r5, r3
 800b6b4:	d11b      	bne.n	800b6ee <_vfiprintf_r+0x56>
 800b6b6:	6875      	ldr	r5, [r6, #4]
 800b6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ba:	07d9      	lsls	r1, r3, #31
 800b6bc:	d405      	bmi.n	800b6ca <_vfiprintf_r+0x32>
 800b6be:	89ab      	ldrh	r3, [r5, #12]
 800b6c0:	059a      	lsls	r2, r3, #22
 800b6c2:	d402      	bmi.n	800b6ca <_vfiprintf_r+0x32>
 800b6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6c6:	f7ff f9dc 	bl	800aa82 <__retarget_lock_acquire_recursive>
 800b6ca:	89ab      	ldrh	r3, [r5, #12]
 800b6cc:	071b      	lsls	r3, r3, #28
 800b6ce:	d501      	bpl.n	800b6d4 <_vfiprintf_r+0x3c>
 800b6d0:	692b      	ldr	r3, [r5, #16]
 800b6d2:	b9eb      	cbnz	r3, 800b710 <_vfiprintf_r+0x78>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 f9c6 	bl	800ba68 <__swsetup_r>
 800b6dc:	b1c0      	cbz	r0, 800b710 <_vfiprintf_r+0x78>
 800b6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6e0:	07dc      	lsls	r4, r3, #31
 800b6e2:	d50e      	bpl.n	800b702 <_vfiprintf_r+0x6a>
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	b01d      	add	sp, #116	; 0x74
 800b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ee:	4b7b      	ldr	r3, [pc, #492]	; (800b8dc <_vfiprintf_r+0x244>)
 800b6f0:	429d      	cmp	r5, r3
 800b6f2:	d101      	bne.n	800b6f8 <_vfiprintf_r+0x60>
 800b6f4:	68b5      	ldr	r5, [r6, #8]
 800b6f6:	e7df      	b.n	800b6b8 <_vfiprintf_r+0x20>
 800b6f8:	4b79      	ldr	r3, [pc, #484]	; (800b8e0 <_vfiprintf_r+0x248>)
 800b6fa:	429d      	cmp	r5, r3
 800b6fc:	bf08      	it	eq
 800b6fe:	68f5      	ldreq	r5, [r6, #12]
 800b700:	e7da      	b.n	800b6b8 <_vfiprintf_r+0x20>
 800b702:	89ab      	ldrh	r3, [r5, #12]
 800b704:	0598      	lsls	r0, r3, #22
 800b706:	d4ed      	bmi.n	800b6e4 <_vfiprintf_r+0x4c>
 800b708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70a:	f7ff f9bb 	bl	800aa84 <__retarget_lock_release_recursive>
 800b70e:	e7e9      	b.n	800b6e4 <_vfiprintf_r+0x4c>
 800b710:	2300      	movs	r3, #0
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
 800b714:	2320      	movs	r3, #32
 800b716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b71e:	2330      	movs	r3, #48	; 0x30
 800b720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8e4 <_vfiprintf_r+0x24c>
 800b724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b728:	f04f 0901 	mov.w	r9, #1
 800b72c:	4623      	mov	r3, r4
 800b72e:	469a      	mov	sl, r3
 800b730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b734:	b10a      	cbz	r2, 800b73a <_vfiprintf_r+0xa2>
 800b736:	2a25      	cmp	r2, #37	; 0x25
 800b738:	d1f9      	bne.n	800b72e <_vfiprintf_r+0x96>
 800b73a:	ebba 0b04 	subs.w	fp, sl, r4
 800b73e:	d00b      	beq.n	800b758 <_vfiprintf_r+0xc0>
 800b740:	465b      	mov	r3, fp
 800b742:	4622      	mov	r2, r4
 800b744:	4629      	mov	r1, r5
 800b746:	4630      	mov	r0, r6
 800b748:	f7ff ff93 	bl	800b672 <__sfputs_r>
 800b74c:	3001      	adds	r0, #1
 800b74e:	f000 80aa 	beq.w	800b8a6 <_vfiprintf_r+0x20e>
 800b752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b754:	445a      	add	r2, fp
 800b756:	9209      	str	r2, [sp, #36]	; 0x24
 800b758:	f89a 3000 	ldrb.w	r3, [sl]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 80a2 	beq.w	800b8a6 <_vfiprintf_r+0x20e>
 800b762:	2300      	movs	r3, #0
 800b764:	f04f 32ff 	mov.w	r2, #4294967295
 800b768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b76c:	f10a 0a01 	add.w	sl, sl, #1
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	9307      	str	r3, [sp, #28]
 800b774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b778:	931a      	str	r3, [sp, #104]	; 0x68
 800b77a:	4654      	mov	r4, sl
 800b77c:	2205      	movs	r2, #5
 800b77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b782:	4858      	ldr	r0, [pc, #352]	; (800b8e4 <_vfiprintf_r+0x24c>)
 800b784:	f7f4 fdb4 	bl	80002f0 <memchr>
 800b788:	9a04      	ldr	r2, [sp, #16]
 800b78a:	b9d8      	cbnz	r0, 800b7c4 <_vfiprintf_r+0x12c>
 800b78c:	06d1      	lsls	r1, r2, #27
 800b78e:	bf44      	itt	mi
 800b790:	2320      	movmi	r3, #32
 800b792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b796:	0713      	lsls	r3, r2, #28
 800b798:	bf44      	itt	mi
 800b79a:	232b      	movmi	r3, #43	; 0x2b
 800b79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a6:	d015      	beq.n	800b7d4 <_vfiprintf_r+0x13c>
 800b7a8:	9a07      	ldr	r2, [sp, #28]
 800b7aa:	4654      	mov	r4, sl
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	f04f 0c0a 	mov.w	ip, #10
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b8:	3b30      	subs	r3, #48	; 0x30
 800b7ba:	2b09      	cmp	r3, #9
 800b7bc:	d94e      	bls.n	800b85c <_vfiprintf_r+0x1c4>
 800b7be:	b1b0      	cbz	r0, 800b7ee <_vfiprintf_r+0x156>
 800b7c0:	9207      	str	r2, [sp, #28]
 800b7c2:	e014      	b.n	800b7ee <_vfiprintf_r+0x156>
 800b7c4:	eba0 0308 	sub.w	r3, r0, r8
 800b7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	9304      	str	r3, [sp, #16]
 800b7d0:	46a2      	mov	sl, r4
 800b7d2:	e7d2      	b.n	800b77a <_vfiprintf_r+0xe2>
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	1d19      	adds	r1, r3, #4
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	9103      	str	r1, [sp, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfbb      	ittet	lt
 800b7e0:	425b      	neglt	r3, r3
 800b7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e6:	9307      	strge	r3, [sp, #28]
 800b7e8:	9307      	strlt	r3, [sp, #28]
 800b7ea:	bfb8      	it	lt
 800b7ec:	9204      	strlt	r2, [sp, #16]
 800b7ee:	7823      	ldrb	r3, [r4, #0]
 800b7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7f2:	d10c      	bne.n	800b80e <_vfiprintf_r+0x176>
 800b7f4:	7863      	ldrb	r3, [r4, #1]
 800b7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f8:	d135      	bne.n	800b866 <_vfiprintf_r+0x1ce>
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	1d1a      	adds	r2, r3, #4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	9203      	str	r2, [sp, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	bfb8      	it	lt
 800b806:	f04f 33ff 	movlt.w	r3, #4294967295
 800b80a:	3402      	adds	r4, #2
 800b80c:	9305      	str	r3, [sp, #20]
 800b80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8f4 <_vfiprintf_r+0x25c>
 800b812:	7821      	ldrb	r1, [r4, #0]
 800b814:	2203      	movs	r2, #3
 800b816:	4650      	mov	r0, sl
 800b818:	f7f4 fd6a 	bl	80002f0 <memchr>
 800b81c:	b140      	cbz	r0, 800b830 <_vfiprintf_r+0x198>
 800b81e:	2340      	movs	r3, #64	; 0x40
 800b820:	eba0 000a 	sub.w	r0, r0, sl
 800b824:	fa03 f000 	lsl.w	r0, r3, r0
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	4303      	orrs	r3, r0
 800b82c:	3401      	adds	r4, #1
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b834:	482c      	ldr	r0, [pc, #176]	; (800b8e8 <_vfiprintf_r+0x250>)
 800b836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b83a:	2206      	movs	r2, #6
 800b83c:	f7f4 fd58 	bl	80002f0 <memchr>
 800b840:	2800      	cmp	r0, #0
 800b842:	d03f      	beq.n	800b8c4 <_vfiprintf_r+0x22c>
 800b844:	4b29      	ldr	r3, [pc, #164]	; (800b8ec <_vfiprintf_r+0x254>)
 800b846:	bb1b      	cbnz	r3, 800b890 <_vfiprintf_r+0x1f8>
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	3307      	adds	r3, #7
 800b84c:	f023 0307 	bic.w	r3, r3, #7
 800b850:	3308      	adds	r3, #8
 800b852:	9303      	str	r3, [sp, #12]
 800b854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b856:	443b      	add	r3, r7
 800b858:	9309      	str	r3, [sp, #36]	; 0x24
 800b85a:	e767      	b.n	800b72c <_vfiprintf_r+0x94>
 800b85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b860:	460c      	mov	r4, r1
 800b862:	2001      	movs	r0, #1
 800b864:	e7a5      	b.n	800b7b2 <_vfiprintf_r+0x11a>
 800b866:	2300      	movs	r3, #0
 800b868:	3401      	adds	r4, #1
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	4619      	mov	r1, r3
 800b86e:	f04f 0c0a 	mov.w	ip, #10
 800b872:	4620      	mov	r0, r4
 800b874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b878:	3a30      	subs	r2, #48	; 0x30
 800b87a:	2a09      	cmp	r2, #9
 800b87c:	d903      	bls.n	800b886 <_vfiprintf_r+0x1ee>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0c5      	beq.n	800b80e <_vfiprintf_r+0x176>
 800b882:	9105      	str	r1, [sp, #20]
 800b884:	e7c3      	b.n	800b80e <_vfiprintf_r+0x176>
 800b886:	fb0c 2101 	mla	r1, ip, r1, r2
 800b88a:	4604      	mov	r4, r0
 800b88c:	2301      	movs	r3, #1
 800b88e:	e7f0      	b.n	800b872 <_vfiprintf_r+0x1da>
 800b890:	ab03      	add	r3, sp, #12
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	462a      	mov	r2, r5
 800b896:	4b16      	ldr	r3, [pc, #88]	; (800b8f0 <_vfiprintf_r+0x258>)
 800b898:	a904      	add	r1, sp, #16
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7fd fe28 	bl	80094f0 <_printf_float>
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	1c78      	adds	r0, r7, #1
 800b8a4:	d1d6      	bne.n	800b854 <_vfiprintf_r+0x1bc>
 800b8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a8:	07d9      	lsls	r1, r3, #31
 800b8aa:	d405      	bmi.n	800b8b8 <_vfiprintf_r+0x220>
 800b8ac:	89ab      	ldrh	r3, [r5, #12]
 800b8ae:	059a      	lsls	r2, r3, #22
 800b8b0:	d402      	bmi.n	800b8b8 <_vfiprintf_r+0x220>
 800b8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b4:	f7ff f8e6 	bl	800aa84 <__retarget_lock_release_recursive>
 800b8b8:	89ab      	ldrh	r3, [r5, #12]
 800b8ba:	065b      	lsls	r3, r3, #25
 800b8bc:	f53f af12 	bmi.w	800b6e4 <_vfiprintf_r+0x4c>
 800b8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8c2:	e711      	b.n	800b6e8 <_vfiprintf_r+0x50>
 800b8c4:	ab03      	add	r3, sp, #12
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <_vfiprintf_r+0x258>)
 800b8cc:	a904      	add	r1, sp, #16
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7fe f89a 	bl	8009a08 <_printf_i>
 800b8d4:	e7e4      	b.n	800b8a0 <_vfiprintf_r+0x208>
 800b8d6:	bf00      	nop
 800b8d8:	0800c708 	.word	0x0800c708
 800b8dc:	0800c728 	.word	0x0800c728
 800b8e0:	0800c6e8 	.word	0x0800c6e8
 800b8e4:	0800c8a4 	.word	0x0800c8a4
 800b8e8:	0800c8ae 	.word	0x0800c8ae
 800b8ec:	080094f1 	.word	0x080094f1
 800b8f0:	0800b673 	.word	0x0800b673
 800b8f4:	0800c8aa 	.word	0x0800c8aa

0800b8f8 <_sbrk_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d06      	ldr	r5, [pc, #24]	; (800b914 <_sbrk_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4604      	mov	r4, r0
 800b900:	4608      	mov	r0, r1
 800b902:	602b      	str	r3, [r5, #0]
 800b904:	f7f6 fe9e 	bl	8002644 <_sbrk>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_sbrk_r+0x1a>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_sbrk_r+0x1a>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	24000634 	.word	0x24000634

0800b918 <__sread>:
 800b918:	b510      	push	{r4, lr}
 800b91a:	460c      	mov	r4, r1
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	f000 faf2 	bl	800bf08 <_read_r>
 800b924:	2800      	cmp	r0, #0
 800b926:	bfab      	itete	ge
 800b928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b92a:	89a3      	ldrhlt	r3, [r4, #12]
 800b92c:	181b      	addge	r3, r3, r0
 800b92e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b932:	bfac      	ite	ge
 800b934:	6563      	strge	r3, [r4, #84]	; 0x54
 800b936:	81a3      	strhlt	r3, [r4, #12]
 800b938:	bd10      	pop	{r4, pc}

0800b93a <__swrite>:
 800b93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93e:	461f      	mov	r7, r3
 800b940:	898b      	ldrh	r3, [r1, #12]
 800b942:	05db      	lsls	r3, r3, #23
 800b944:	4605      	mov	r5, r0
 800b946:	460c      	mov	r4, r1
 800b948:	4616      	mov	r6, r2
 800b94a:	d505      	bpl.n	800b958 <__swrite+0x1e>
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	2302      	movs	r3, #2
 800b952:	2200      	movs	r2, #0
 800b954:	f000 f9f8 	bl	800bd48 <_lseek_r>
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b95e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	4628      	mov	r0, r5
 800b96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	f000 b869 	b.w	800ba44 <_write_r>

0800b972 <__sseek>:
 800b972:	b510      	push	{r4, lr}
 800b974:	460c      	mov	r4, r1
 800b976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97a:	f000 f9e5 	bl	800bd48 <_lseek_r>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	bf15      	itete	ne
 800b984:	6560      	strne	r0, [r4, #84]	; 0x54
 800b986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b98a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b98e:	81a3      	strheq	r3, [r4, #12]
 800b990:	bf18      	it	ne
 800b992:	81a3      	strhne	r3, [r4, #12]
 800b994:	bd10      	pop	{r4, pc}

0800b996 <__sclose>:
 800b996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99a:	f000 b8f1 	b.w	800bb80 <_close_r>
	...

0800b9a0 <__swbuf_r>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	460e      	mov	r6, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	b118      	cbz	r0, 800b9b2 <__swbuf_r+0x12>
 800b9aa:	6983      	ldr	r3, [r0, #24]
 800b9ac:	b90b      	cbnz	r3, 800b9b2 <__swbuf_r+0x12>
 800b9ae:	f7fe ffc5 	bl	800a93c <__sinit>
 800b9b2:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <__swbuf_r+0x98>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d12b      	bne.n	800ba10 <__swbuf_r+0x70>
 800b9b8:	686c      	ldr	r4, [r5, #4]
 800b9ba:	69a3      	ldr	r3, [r4, #24]
 800b9bc:	60a3      	str	r3, [r4, #8]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	071a      	lsls	r2, r3, #28
 800b9c2:	d52f      	bpl.n	800ba24 <__swbuf_r+0x84>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	b36b      	cbz	r3, 800ba24 <__swbuf_r+0x84>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	1ac0      	subs	r0, r0, r3
 800b9ce:	6963      	ldr	r3, [r4, #20]
 800b9d0:	b2f6      	uxtb	r6, r6
 800b9d2:	4283      	cmp	r3, r0
 800b9d4:	4637      	mov	r7, r6
 800b9d6:	dc04      	bgt.n	800b9e2 <__swbuf_r+0x42>
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f966 	bl	800bcac <_fflush_r>
 800b9e0:	bb30      	cbnz	r0, 800ba30 <__swbuf_r+0x90>
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	60a3      	str	r3, [r4, #8]
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	6022      	str	r2, [r4, #0]
 800b9ee:	701e      	strb	r6, [r3, #0]
 800b9f0:	6963      	ldr	r3, [r4, #20]
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	d004      	beq.n	800ba02 <__swbuf_r+0x62>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	07db      	lsls	r3, r3, #31
 800b9fc:	d506      	bpl.n	800ba0c <__swbuf_r+0x6c>
 800b9fe:	2e0a      	cmp	r6, #10
 800ba00:	d104      	bne.n	800ba0c <__swbuf_r+0x6c>
 800ba02:	4621      	mov	r1, r4
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 f951 	bl	800bcac <_fflush_r>
 800ba0a:	b988      	cbnz	r0, 800ba30 <__swbuf_r+0x90>
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <__swbuf_r+0x9c>)
 800ba12:	429c      	cmp	r4, r3
 800ba14:	d101      	bne.n	800ba1a <__swbuf_r+0x7a>
 800ba16:	68ac      	ldr	r4, [r5, #8]
 800ba18:	e7cf      	b.n	800b9ba <__swbuf_r+0x1a>
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <__swbuf_r+0xa0>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	bf08      	it	eq
 800ba20:	68ec      	ldreq	r4, [r5, #12]
 800ba22:	e7ca      	b.n	800b9ba <__swbuf_r+0x1a>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 f81e 	bl	800ba68 <__swsetup_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d0cb      	beq.n	800b9c8 <__swbuf_r+0x28>
 800ba30:	f04f 37ff 	mov.w	r7, #4294967295
 800ba34:	e7ea      	b.n	800ba0c <__swbuf_r+0x6c>
 800ba36:	bf00      	nop
 800ba38:	0800c708 	.word	0x0800c708
 800ba3c:	0800c728 	.word	0x0800c728
 800ba40:	0800c6e8 	.word	0x0800c6e8

0800ba44 <_write_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	; (800ba64 <_write_r+0x20>)
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	602a      	str	r2, [r5, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	f7f6 fda5 	bl	80025a2 <_write>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_write_r+0x1e>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_write_r+0x1e>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	24000634 	.word	0x24000634

0800ba68 <__swsetup_r>:
 800ba68:	4b32      	ldr	r3, [pc, #200]	; (800bb34 <__swsetup_r+0xcc>)
 800ba6a:	b570      	push	{r4, r5, r6, lr}
 800ba6c:	681d      	ldr	r5, [r3, #0]
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460c      	mov	r4, r1
 800ba72:	b125      	cbz	r5, 800ba7e <__swsetup_r+0x16>
 800ba74:	69ab      	ldr	r3, [r5, #24]
 800ba76:	b913      	cbnz	r3, 800ba7e <__swsetup_r+0x16>
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7fe ff5f 	bl	800a93c <__sinit>
 800ba7e:	4b2e      	ldr	r3, [pc, #184]	; (800bb38 <__swsetup_r+0xd0>)
 800ba80:	429c      	cmp	r4, r3
 800ba82:	d10f      	bne.n	800baa4 <__swsetup_r+0x3c>
 800ba84:	686c      	ldr	r4, [r5, #4]
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba8c:	0719      	lsls	r1, r3, #28
 800ba8e:	d42c      	bmi.n	800baea <__swsetup_r+0x82>
 800ba90:	06dd      	lsls	r5, r3, #27
 800ba92:	d411      	bmi.n	800bab8 <__swsetup_r+0x50>
 800ba94:	2309      	movs	r3, #9
 800ba96:	6033      	str	r3, [r6, #0]
 800ba98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295
 800baa2:	e03e      	b.n	800bb22 <__swsetup_r+0xba>
 800baa4:	4b25      	ldr	r3, [pc, #148]	; (800bb3c <__swsetup_r+0xd4>)
 800baa6:	429c      	cmp	r4, r3
 800baa8:	d101      	bne.n	800baae <__swsetup_r+0x46>
 800baaa:	68ac      	ldr	r4, [r5, #8]
 800baac:	e7eb      	b.n	800ba86 <__swsetup_r+0x1e>
 800baae:	4b24      	ldr	r3, [pc, #144]	; (800bb40 <__swsetup_r+0xd8>)
 800bab0:	429c      	cmp	r4, r3
 800bab2:	bf08      	it	eq
 800bab4:	68ec      	ldreq	r4, [r5, #12]
 800bab6:	e7e6      	b.n	800ba86 <__swsetup_r+0x1e>
 800bab8:	0758      	lsls	r0, r3, #29
 800baba:	d512      	bpl.n	800bae2 <__swsetup_r+0x7a>
 800babc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800babe:	b141      	cbz	r1, 800bad2 <__swsetup_r+0x6a>
 800bac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bac4:	4299      	cmp	r1, r3
 800bac6:	d002      	beq.n	800bace <__swsetup_r+0x66>
 800bac8:	4630      	mov	r0, r6
 800baca:	f7ff fb7f 	bl	800b1cc <_free_r>
 800bace:	2300      	movs	r3, #0
 800bad0:	6363      	str	r3, [r4, #52]	; 0x34
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	2300      	movs	r3, #0
 800badc:	6063      	str	r3, [r4, #4]
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f043 0308 	orr.w	r3, r3, #8
 800bae8:	81a3      	strh	r3, [r4, #12]
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	b94b      	cbnz	r3, 800bb02 <__swsetup_r+0x9a>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800baf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf8:	d003      	beq.n	800bb02 <__swsetup_r+0x9a>
 800bafa:	4621      	mov	r1, r4
 800bafc:	4630      	mov	r0, r6
 800bafe:	f000 f95b 	bl	800bdb8 <__smakebuf_r>
 800bb02:	89a0      	ldrh	r0, [r4, #12]
 800bb04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb08:	f010 0301 	ands.w	r3, r0, #1
 800bb0c:	d00a      	beq.n	800bb24 <__swsetup_r+0xbc>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60a3      	str	r3, [r4, #8]
 800bb12:	6963      	ldr	r3, [r4, #20]
 800bb14:	425b      	negs	r3, r3
 800bb16:	61a3      	str	r3, [r4, #24]
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	b943      	cbnz	r3, 800bb2e <__swsetup_r+0xc6>
 800bb1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb20:	d1ba      	bne.n	800ba98 <__swsetup_r+0x30>
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	0781      	lsls	r1, r0, #30
 800bb26:	bf58      	it	pl
 800bb28:	6963      	ldrpl	r3, [r4, #20]
 800bb2a:	60a3      	str	r3, [r4, #8]
 800bb2c:	e7f4      	b.n	800bb18 <__swsetup_r+0xb0>
 800bb2e:	2000      	movs	r0, #0
 800bb30:	e7f7      	b.n	800bb22 <__swsetup_r+0xba>
 800bb32:	bf00      	nop
 800bb34:	24000018 	.word	0x24000018
 800bb38:	0800c708 	.word	0x0800c708
 800bb3c:	0800c728 	.word	0x0800c728
 800bb40:	0800c6e8 	.word	0x0800c6e8

0800bb44 <__assert_func>:
 800bb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb46:	4614      	mov	r4, r2
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <__assert_func+0x2c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4605      	mov	r5, r0
 800bb50:	68d8      	ldr	r0, [r3, #12]
 800bb52:	b14c      	cbz	r4, 800bb68 <__assert_func+0x24>
 800bb54:	4b07      	ldr	r3, [pc, #28]	; (800bb74 <__assert_func+0x30>)
 800bb56:	9100      	str	r1, [sp, #0]
 800bb58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb5c:	4906      	ldr	r1, [pc, #24]	; (800bb78 <__assert_func+0x34>)
 800bb5e:	462b      	mov	r3, r5
 800bb60:	f000 f8e0 	bl	800bd24 <fiprintf>
 800bb64:	f000 f9ef 	bl	800bf46 <abort>
 800bb68:	4b04      	ldr	r3, [pc, #16]	; (800bb7c <__assert_func+0x38>)
 800bb6a:	461c      	mov	r4, r3
 800bb6c:	e7f3      	b.n	800bb56 <__assert_func+0x12>
 800bb6e:	bf00      	nop
 800bb70:	24000018 	.word	0x24000018
 800bb74:	0800c8b5 	.word	0x0800c8b5
 800bb78:	0800c8c2 	.word	0x0800c8c2
 800bb7c:	0800c8f0 	.word	0x0800c8f0

0800bb80 <_close_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d06      	ldr	r5, [pc, #24]	; (800bb9c <_close_r+0x1c>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	602b      	str	r3, [r5, #0]
 800bb8c:	f7f6 fd25 	bl	80025da <_close>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_close_r+0x1a>
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_close_r+0x1a>
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	24000634 	.word	0x24000634

0800bba0 <__sflush_r>:
 800bba0:	898a      	ldrh	r2, [r1, #12]
 800bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	4605      	mov	r5, r0
 800bba8:	0710      	lsls	r0, r2, #28
 800bbaa:	460c      	mov	r4, r1
 800bbac:	d458      	bmi.n	800bc60 <__sflush_r+0xc0>
 800bbae:	684b      	ldr	r3, [r1, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dc05      	bgt.n	800bbc0 <__sflush_r+0x20>
 800bbb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dc02      	bgt.n	800bbc0 <__sflush_r+0x20>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbc2:	2e00      	cmp	r6, #0
 800bbc4:	d0f9      	beq.n	800bbba <__sflush_r+0x1a>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbcc:	682f      	ldr	r7, [r5, #0]
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	d032      	beq.n	800bc38 <__sflush_r+0x98>
 800bbd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	075a      	lsls	r2, r3, #29
 800bbd8:	d505      	bpl.n	800bbe6 <__sflush_r+0x46>
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbe0:	b10b      	cbz	r3, 800bbe6 <__sflush_r+0x46>
 800bbe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe4:	1ac0      	subs	r0, r0, r3
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4602      	mov	r2, r0
 800bbea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbec:	6a21      	ldr	r1, [r4, #32]
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b0      	blx	r6
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	d106      	bne.n	800bc06 <__sflush_r+0x66>
 800bbf8:	6829      	ldr	r1, [r5, #0]
 800bbfa:	291d      	cmp	r1, #29
 800bbfc:	d82c      	bhi.n	800bc58 <__sflush_r+0xb8>
 800bbfe:	4a2a      	ldr	r2, [pc, #168]	; (800bca8 <__sflush_r+0x108>)
 800bc00:	40ca      	lsrs	r2, r1
 800bc02:	07d6      	lsls	r6, r2, #31
 800bc04:	d528      	bpl.n	800bc58 <__sflush_r+0xb8>
 800bc06:	2200      	movs	r2, #0
 800bc08:	6062      	str	r2, [r4, #4]
 800bc0a:	04d9      	lsls	r1, r3, #19
 800bc0c:	6922      	ldr	r2, [r4, #16]
 800bc0e:	6022      	str	r2, [r4, #0]
 800bc10:	d504      	bpl.n	800bc1c <__sflush_r+0x7c>
 800bc12:	1c42      	adds	r2, r0, #1
 800bc14:	d101      	bne.n	800bc1a <__sflush_r+0x7a>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b903      	cbnz	r3, 800bc1c <__sflush_r+0x7c>
 800bc1a:	6560      	str	r0, [r4, #84]	; 0x54
 800bc1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1e:	602f      	str	r7, [r5, #0]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d0ca      	beq.n	800bbba <__sflush_r+0x1a>
 800bc24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d002      	beq.n	800bc32 <__sflush_r+0x92>
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f7ff facd 	bl	800b1cc <_free_r>
 800bc32:	2000      	movs	r0, #0
 800bc34:	6360      	str	r0, [r4, #52]	; 0x34
 800bc36:	e7c1      	b.n	800bbbc <__sflush_r+0x1c>
 800bc38:	6a21      	ldr	r1, [r4, #32]
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	47b0      	blx	r6
 800bc40:	1c41      	adds	r1, r0, #1
 800bc42:	d1c7      	bne.n	800bbd4 <__sflush_r+0x34>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d0c4      	beq.n	800bbd4 <__sflush_r+0x34>
 800bc4a:	2b1d      	cmp	r3, #29
 800bc4c:	d001      	beq.n	800bc52 <__sflush_r+0xb2>
 800bc4e:	2b16      	cmp	r3, #22
 800bc50:	d101      	bne.n	800bc56 <__sflush_r+0xb6>
 800bc52:	602f      	str	r7, [r5, #0]
 800bc54:	e7b1      	b.n	800bbba <__sflush_r+0x1a>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	e7ad      	b.n	800bbbc <__sflush_r+0x1c>
 800bc60:	690f      	ldr	r7, [r1, #16]
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d0a9      	beq.n	800bbba <__sflush_r+0x1a>
 800bc66:	0793      	lsls	r3, r2, #30
 800bc68:	680e      	ldr	r6, [r1, #0]
 800bc6a:	bf08      	it	eq
 800bc6c:	694b      	ldreq	r3, [r1, #20]
 800bc6e:	600f      	str	r7, [r1, #0]
 800bc70:	bf18      	it	ne
 800bc72:	2300      	movne	r3, #0
 800bc74:	eba6 0807 	sub.w	r8, r6, r7
 800bc78:	608b      	str	r3, [r1, #8]
 800bc7a:	f1b8 0f00 	cmp.w	r8, #0
 800bc7e:	dd9c      	ble.n	800bbba <__sflush_r+0x1a>
 800bc80:	6a21      	ldr	r1, [r4, #32]
 800bc82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc84:	4643      	mov	r3, r8
 800bc86:	463a      	mov	r2, r7
 800bc88:	4628      	mov	r0, r5
 800bc8a:	47b0      	blx	r6
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	dc06      	bgt.n	800bc9e <__sflush_r+0xfe>
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9c:	e78e      	b.n	800bbbc <__sflush_r+0x1c>
 800bc9e:	4407      	add	r7, r0
 800bca0:	eba8 0800 	sub.w	r8, r8, r0
 800bca4:	e7e9      	b.n	800bc7a <__sflush_r+0xda>
 800bca6:	bf00      	nop
 800bca8:	20400001 	.word	0x20400001

0800bcac <_fflush_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	690b      	ldr	r3, [r1, #16]
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	b913      	cbnz	r3, 800bcbc <_fflush_r+0x10>
 800bcb6:	2500      	movs	r5, #0
 800bcb8:	4628      	mov	r0, r5
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	b118      	cbz	r0, 800bcc6 <_fflush_r+0x1a>
 800bcbe:	6983      	ldr	r3, [r0, #24]
 800bcc0:	b90b      	cbnz	r3, 800bcc6 <_fflush_r+0x1a>
 800bcc2:	f7fe fe3b 	bl	800a93c <__sinit>
 800bcc6:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <_fflush_r+0x6c>)
 800bcc8:	429c      	cmp	r4, r3
 800bcca:	d11b      	bne.n	800bd04 <_fflush_r+0x58>
 800bccc:	686c      	ldr	r4, [r5, #4]
 800bcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0ef      	beq.n	800bcb6 <_fflush_r+0xa>
 800bcd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd8:	07d0      	lsls	r0, r2, #31
 800bcda:	d404      	bmi.n	800bce6 <_fflush_r+0x3a>
 800bcdc:	0599      	lsls	r1, r3, #22
 800bcde:	d402      	bmi.n	800bce6 <_fflush_r+0x3a>
 800bce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bce2:	f7fe fece 	bl	800aa82 <__retarget_lock_acquire_recursive>
 800bce6:	4628      	mov	r0, r5
 800bce8:	4621      	mov	r1, r4
 800bcea:	f7ff ff59 	bl	800bba0 <__sflush_r>
 800bcee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf0:	07da      	lsls	r2, r3, #31
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	d4e0      	bmi.n	800bcb8 <_fflush_r+0xc>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	059b      	lsls	r3, r3, #22
 800bcfa:	d4dd      	bmi.n	800bcb8 <_fflush_r+0xc>
 800bcfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfe:	f7fe fec1 	bl	800aa84 <__retarget_lock_release_recursive>
 800bd02:	e7d9      	b.n	800bcb8 <_fflush_r+0xc>
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <_fflush_r+0x70>)
 800bd06:	429c      	cmp	r4, r3
 800bd08:	d101      	bne.n	800bd0e <_fflush_r+0x62>
 800bd0a:	68ac      	ldr	r4, [r5, #8]
 800bd0c:	e7df      	b.n	800bcce <_fflush_r+0x22>
 800bd0e:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <_fflush_r+0x74>)
 800bd10:	429c      	cmp	r4, r3
 800bd12:	bf08      	it	eq
 800bd14:	68ec      	ldreq	r4, [r5, #12]
 800bd16:	e7da      	b.n	800bcce <_fflush_r+0x22>
 800bd18:	0800c708 	.word	0x0800c708
 800bd1c:	0800c728 	.word	0x0800c728
 800bd20:	0800c6e8 	.word	0x0800c6e8

0800bd24 <fiprintf>:
 800bd24:	b40e      	push	{r1, r2, r3}
 800bd26:	b503      	push	{r0, r1, lr}
 800bd28:	4601      	mov	r1, r0
 800bd2a:	ab03      	add	r3, sp, #12
 800bd2c:	4805      	ldr	r0, [pc, #20]	; (800bd44 <fiprintf+0x20>)
 800bd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd32:	6800      	ldr	r0, [r0, #0]
 800bd34:	9301      	str	r3, [sp, #4]
 800bd36:	f7ff fcaf 	bl	800b698 <_vfiprintf_r>
 800bd3a:	b002      	add	sp, #8
 800bd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd40:	b003      	add	sp, #12
 800bd42:	4770      	bx	lr
 800bd44:	24000018 	.word	0x24000018

0800bd48 <_lseek_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_lseek_r+0x20>)
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	4611      	mov	r1, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7f6 fc66 	bl	8002628 <_lseek>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_lseek_r+0x1e>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_lseek_r+0x1e>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	24000634 	.word	0x24000634

0800bd6c <__swhatbuf_r>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	460e      	mov	r6, r1
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	2900      	cmp	r1, #0
 800bd76:	b096      	sub	sp, #88	; 0x58
 800bd78:	4614      	mov	r4, r2
 800bd7a:	461d      	mov	r5, r3
 800bd7c:	da08      	bge.n	800bd90 <__swhatbuf_r+0x24>
 800bd7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	602a      	str	r2, [r5, #0]
 800bd86:	061a      	lsls	r2, r3, #24
 800bd88:	d410      	bmi.n	800bdac <__swhatbuf_r+0x40>
 800bd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd8e:	e00e      	b.n	800bdae <__swhatbuf_r+0x42>
 800bd90:	466a      	mov	r2, sp
 800bd92:	f000 f8df 	bl	800bf54 <_fstat_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	dbf1      	blt.n	800bd7e <__swhatbuf_r+0x12>
 800bd9a:	9a01      	ldr	r2, [sp, #4]
 800bd9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bda0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bda4:	425a      	negs	r2, r3
 800bda6:	415a      	adcs	r2, r3
 800bda8:	602a      	str	r2, [r5, #0]
 800bdaa:	e7ee      	b.n	800bd8a <__swhatbuf_r+0x1e>
 800bdac:	2340      	movs	r3, #64	; 0x40
 800bdae:	2000      	movs	r0, #0
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	b016      	add	sp, #88	; 0x58
 800bdb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdb8 <__smakebuf_r>:
 800bdb8:	898b      	ldrh	r3, [r1, #12]
 800bdba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdbc:	079d      	lsls	r5, r3, #30
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	d507      	bpl.n	800bdd4 <__smakebuf_r+0x1c>
 800bdc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	6123      	str	r3, [r4, #16]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	6163      	str	r3, [r4, #20]
 800bdd0:	b002      	add	sp, #8
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	ab01      	add	r3, sp, #4
 800bdd6:	466a      	mov	r2, sp
 800bdd8:	f7ff ffc8 	bl	800bd6c <__swhatbuf_r>
 800bddc:	9900      	ldr	r1, [sp, #0]
 800bdde:	4605      	mov	r5, r0
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff fa5f 	bl	800b2a4 <_malloc_r>
 800bde6:	b948      	cbnz	r0, 800bdfc <__smakebuf_r+0x44>
 800bde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d4ef      	bmi.n	800bdd0 <__smakebuf_r+0x18>
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	f043 0302 	orr.w	r3, r3, #2
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	e7e3      	b.n	800bdc4 <__smakebuf_r+0xc>
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <__smakebuf_r+0x7c>)
 800bdfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	6020      	str	r0, [r4, #0]
 800be04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	9b00      	ldr	r3, [sp, #0]
 800be0c:	6163      	str	r3, [r4, #20]
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	6120      	str	r0, [r4, #16]
 800be12:	b15b      	cbz	r3, 800be2c <__smakebuf_r+0x74>
 800be14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be18:	4630      	mov	r0, r6
 800be1a:	f000 f8ad 	bl	800bf78 <_isatty_r>
 800be1e:	b128      	cbz	r0, 800be2c <__smakebuf_r+0x74>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f023 0303 	bic.w	r3, r3, #3
 800be26:	f043 0301 	orr.w	r3, r3, #1
 800be2a:	81a3      	strh	r3, [r4, #12]
 800be2c:	89a0      	ldrh	r0, [r4, #12]
 800be2e:	4305      	orrs	r5, r0
 800be30:	81a5      	strh	r5, [r4, #12]
 800be32:	e7cd      	b.n	800bdd0 <__smakebuf_r+0x18>
 800be34:	0800a8d5 	.word	0x0800a8d5

0800be38 <__ascii_mbtowc>:
 800be38:	b082      	sub	sp, #8
 800be3a:	b901      	cbnz	r1, 800be3e <__ascii_mbtowc+0x6>
 800be3c:	a901      	add	r1, sp, #4
 800be3e:	b142      	cbz	r2, 800be52 <__ascii_mbtowc+0x1a>
 800be40:	b14b      	cbz	r3, 800be56 <__ascii_mbtowc+0x1e>
 800be42:	7813      	ldrb	r3, [r2, #0]
 800be44:	600b      	str	r3, [r1, #0]
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	1e10      	subs	r0, r2, #0
 800be4a:	bf18      	it	ne
 800be4c:	2001      	movne	r0, #1
 800be4e:	b002      	add	sp, #8
 800be50:	4770      	bx	lr
 800be52:	4610      	mov	r0, r2
 800be54:	e7fb      	b.n	800be4e <__ascii_mbtowc+0x16>
 800be56:	f06f 0001 	mvn.w	r0, #1
 800be5a:	e7f8      	b.n	800be4e <__ascii_mbtowc+0x16>

0800be5c <memmove>:
 800be5c:	4288      	cmp	r0, r1
 800be5e:	b510      	push	{r4, lr}
 800be60:	eb01 0402 	add.w	r4, r1, r2
 800be64:	d902      	bls.n	800be6c <memmove+0x10>
 800be66:	4284      	cmp	r4, r0
 800be68:	4623      	mov	r3, r4
 800be6a:	d807      	bhi.n	800be7c <memmove+0x20>
 800be6c:	1e43      	subs	r3, r0, #1
 800be6e:	42a1      	cmp	r1, r4
 800be70:	d008      	beq.n	800be84 <memmove+0x28>
 800be72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be7a:	e7f8      	b.n	800be6e <memmove+0x12>
 800be7c:	4402      	add	r2, r0
 800be7e:	4601      	mov	r1, r0
 800be80:	428a      	cmp	r2, r1
 800be82:	d100      	bne.n	800be86 <memmove+0x2a>
 800be84:	bd10      	pop	{r4, pc}
 800be86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be8e:	e7f7      	b.n	800be80 <memmove+0x24>

0800be90 <__malloc_lock>:
 800be90:	4801      	ldr	r0, [pc, #4]	; (800be98 <__malloc_lock+0x8>)
 800be92:	f7fe bdf6 	b.w	800aa82 <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	24000628 	.word	0x24000628

0800be9c <__malloc_unlock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__malloc_unlock+0x8>)
 800be9e:	f7fe bdf1 	b.w	800aa84 <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	24000628 	.word	0x24000628

0800bea8 <_realloc_r>:
 800bea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beac:	4680      	mov	r8, r0
 800beae:	4614      	mov	r4, r2
 800beb0:	460e      	mov	r6, r1
 800beb2:	b921      	cbnz	r1, 800bebe <_realloc_r+0x16>
 800beb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb8:	4611      	mov	r1, r2
 800beba:	f7ff b9f3 	b.w	800b2a4 <_malloc_r>
 800bebe:	b92a      	cbnz	r2, 800becc <_realloc_r+0x24>
 800bec0:	f7ff f984 	bl	800b1cc <_free_r>
 800bec4:	4625      	mov	r5, r4
 800bec6:	4628      	mov	r0, r5
 800bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800becc:	f000 f864 	bl	800bf98 <_malloc_usable_size_r>
 800bed0:	4284      	cmp	r4, r0
 800bed2:	4607      	mov	r7, r0
 800bed4:	d802      	bhi.n	800bedc <_realloc_r+0x34>
 800bed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800beda:	d812      	bhi.n	800bf02 <_realloc_r+0x5a>
 800bedc:	4621      	mov	r1, r4
 800bede:	4640      	mov	r0, r8
 800bee0:	f7ff f9e0 	bl	800b2a4 <_malloc_r>
 800bee4:	4605      	mov	r5, r0
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d0ed      	beq.n	800bec6 <_realloc_r+0x1e>
 800beea:	42bc      	cmp	r4, r7
 800beec:	4622      	mov	r2, r4
 800beee:	4631      	mov	r1, r6
 800bef0:	bf28      	it	cs
 800bef2:	463a      	movcs	r2, r7
 800bef4:	f7fd fa54 	bl	80093a0 <memcpy>
 800bef8:	4631      	mov	r1, r6
 800befa:	4640      	mov	r0, r8
 800befc:	f7ff f966 	bl	800b1cc <_free_r>
 800bf00:	e7e1      	b.n	800bec6 <_realloc_r+0x1e>
 800bf02:	4635      	mov	r5, r6
 800bf04:	e7df      	b.n	800bec6 <_realloc_r+0x1e>
	...

0800bf08 <_read_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d07      	ldr	r5, [pc, #28]	; (800bf28 <_read_r+0x20>)
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	4608      	mov	r0, r1
 800bf10:	4611      	mov	r1, r2
 800bf12:	2200      	movs	r2, #0
 800bf14:	602a      	str	r2, [r5, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	f7f6 fb26 	bl	8002568 <_read>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_read_r+0x1e>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_read_r+0x1e>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	24000634 	.word	0x24000634

0800bf2c <__ascii_wctomb>:
 800bf2c:	b149      	cbz	r1, 800bf42 <__ascii_wctomb+0x16>
 800bf2e:	2aff      	cmp	r2, #255	; 0xff
 800bf30:	bf85      	ittet	hi
 800bf32:	238a      	movhi	r3, #138	; 0x8a
 800bf34:	6003      	strhi	r3, [r0, #0]
 800bf36:	700a      	strbls	r2, [r1, #0]
 800bf38:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf3c:	bf98      	it	ls
 800bf3e:	2001      	movls	r0, #1
 800bf40:	4770      	bx	lr
 800bf42:	4608      	mov	r0, r1
 800bf44:	4770      	bx	lr

0800bf46 <abort>:
 800bf46:	b508      	push	{r3, lr}
 800bf48:	2006      	movs	r0, #6
 800bf4a:	f000 f855 	bl	800bff8 <raise>
 800bf4e:	2001      	movs	r0, #1
 800bf50:	f7f6 fb00 	bl	8002554 <_exit>

0800bf54 <_fstat_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	; (800bf74 <_fstat_r+0x20>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f7f6 fb46 	bl	80025f2 <_fstat>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d102      	bne.n	800bf70 <_fstat_r+0x1c>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b103      	cbz	r3, 800bf70 <_fstat_r+0x1c>
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	bf00      	nop
 800bf74:	24000634 	.word	0x24000634

0800bf78 <_isatty_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	; (800bf94 <_isatty_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f6 fb45 	bl	8002612 <_isatty>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_isatty_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_isatty_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	24000634 	.word	0x24000634

0800bf98 <_malloc_usable_size_r>:
 800bf98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9c:	1f18      	subs	r0, r3, #4
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	bfbc      	itt	lt
 800bfa2:	580b      	ldrlt	r3, [r1, r0]
 800bfa4:	18c0      	addlt	r0, r0, r3
 800bfa6:	4770      	bx	lr

0800bfa8 <_raise_r>:
 800bfa8:	291f      	cmp	r1, #31
 800bfaa:	b538      	push	{r3, r4, r5, lr}
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	d904      	bls.n	800bfbc <_raise_r+0x14>
 800bfb2:	2316      	movs	r3, #22
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfbe:	b112      	cbz	r2, 800bfc6 <_raise_r+0x1e>
 800bfc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc4:	b94b      	cbnz	r3, 800bfda <_raise_r+0x32>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f830 	bl	800c02c <_getpid_r>
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd6:	f000 b817 	b.w	800c008 <_kill_r>
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d00a      	beq.n	800bff4 <_raise_r+0x4c>
 800bfde:	1c59      	adds	r1, r3, #1
 800bfe0:	d103      	bne.n	800bfea <_raise_r+0x42>
 800bfe2:	2316      	movs	r3, #22
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7e7      	b.n	800bfba <_raise_r+0x12>
 800bfea:	2400      	movs	r4, #0
 800bfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bff0:	4628      	mov	r0, r5
 800bff2:	4798      	blx	r3
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7e0      	b.n	800bfba <_raise_r+0x12>

0800bff8 <raise>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <raise+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f7ff bfd3 	b.w	800bfa8 <_raise_r>
 800c002:	bf00      	nop
 800c004:	24000018 	.word	0x24000018

0800c008 <_kill_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_kill_r+0x20>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	4611      	mov	r1, r2
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f7f6 fa8d 	bl	8002534 <_kill>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d102      	bne.n	800c024 <_kill_r+0x1c>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	b103      	cbz	r3, 800c024 <_kill_r+0x1c>
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop
 800c028:	24000634 	.word	0x24000634

0800c02c <_getpid_r>:
 800c02c:	f7f6 ba7a 	b.w	8002524 <_getpid>

0800c030 <_init>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr

0800c03c <_fini>:
 800c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03e:	bf00      	nop
 800c040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c042:	bc08      	pop	{r3}
 800c044:	469e      	mov	lr, r3
 800c046:	4770      	bx	lr
