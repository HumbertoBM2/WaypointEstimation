
tractorrabioso_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  0800bd80  0800bd80  0001bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c73c  0800c73c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c73c  0800c73c  0001c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c744  0800c744  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c748  0800c748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800c74c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  240001e8  0800c934  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400062c  0800c934  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216e5  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003354  00000000  00000000  000418fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00044c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e2b6  00000000  00000000  00048178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020da4  00000000  00000000  0008642e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019906d  00000000  00000000  000a71d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024023f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000867c  00000000  00000000  00240290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd68 	.word	0x0800bd68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800bd68 	.word	0x0800bd68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff67 	bl	80036f0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ff5e 	bl	80036f0 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000214 	.word	0x24000214
 8000840:	24000218 	.word	0x24000218

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 ff47 	bl	80036f0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 ff3e 	bl	80036f0 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000214 	.word	0x24000214
 8000880:	2400021a 	.word	0x2400021a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fd14 	bl	80062d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 fefe 	bl	80066b8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400021c 	.word	0x2400021c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 fce9 	bl	80062d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 fed4 	bl	80066b8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400021c 	.word	0x2400021c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fcbf 	bl	80062d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400021c 	.word	0x2400021c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fc9f 	bl	80062d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fc98 	bl	80062d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400021c 	.word	0x2400021c

080009b8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80009bc:	21ff      	movs	r1, #255	; 0xff
 80009be:	20e1      	movs	r0, #225	; 0xe1
 80009c0:	f7ff ffb0 	bl	8000924 <NRF24_write_register>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80009cc:	21ff      	movs	r1, #255	; 0xff
 80009ce:	20e2      	movs	r0, #226	; 0xe2
 80009d0:	f7ff ffa8 	bl	8000924 <NRF24_write_register>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80009d8:	b082      	sub	sp, #8
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <NRF24_begin+0x1b0>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2288      	movs	r2, #136	; 0x88
 80009f6:	4619      	mov	r1, r3
 80009f8:	f008 fb56 	bl	80090a8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80009fc:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <NRF24_begin+0x1b4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a02:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <NRF24_begin+0x1b8>)
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a08:	4a62      	ldr	r2, [pc, #392]	; (8000b94 <NRF24_begin+0x1bc>)
 8000a0a:	883b      	ldrh	r3, [r7, #0]
 8000a0c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef8 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff15 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f001 fef8 	bl	8002810 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a20:	2108      	movs	r1, #8
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff7e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000a28:	213f      	movs	r1, #63	; 0x3f
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff7a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000a30:	2103      	movs	r1, #3
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff76 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff ff72 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000a40:	2103      	movs	r1, #3
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff ff6e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000a48:	2102      	movs	r1, #2
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f7ff ff6a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000a50:	210f      	movs	r1, #15
 8000a52:	2006      	movs	r0, #6
 8000a54:	f7ff ff66 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000a58:	210e      	movs	r1, #14
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff ff62 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff ff5e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f7ff ff5a 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a70:	23e7      	movs	r3, #231	; 0xe7
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	23e7      	movs	r3, #231	; 0xe7
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	23e7      	movs	r3, #231	; 0xe7
 8000a7a:	72bb      	strb	r3, [r7, #10]
 8000a7c:	23e7      	movs	r3, #231	; 0xe7
 8000a7e:	727b      	strb	r3, [r7, #9]
 8000a80:	23e7      	movs	r3, #231	; 0xe7
 8000a82:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	f7ff ff6b 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000a92:	23c2      	movs	r3, #194	; 0xc2
 8000a94:	733b      	strb	r3, [r7, #12]
 8000a96:	23c2      	movs	r3, #194	; 0xc2
 8000a98:	72fb      	strb	r3, [r7, #11]
 8000a9a:	23c2      	movs	r3, #194	; 0xc2
 8000a9c:	72bb      	strb	r3, [r7, #10]
 8000a9e:	23c2      	movs	r3, #194	; 0xc2
 8000aa0:	727b      	strb	r3, [r7, #9]
 8000aa2:	23c2      	movs	r3, #194	; 0xc2
 8000aa4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2205      	movs	r2, #5
 8000aac:	4619      	mov	r1, r3
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f7ff ff5a 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000ab4:	21c3      	movs	r1, #195	; 0xc3
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000abc:	21c4      	movs	r1, #196	; 0xc4
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000ac4:	21c5      	movs	r1, #197	; 0xc5
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000acc:	21c6      	movs	r1, #198	; 0xc6
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ad4:	23e7      	movs	r3, #231	; 0xe7
 8000ad6:	733b      	strb	r3, [r7, #12]
 8000ad8:	23e7      	movs	r3, #231	; 0xe7
 8000ada:	72fb      	strb	r3, [r7, #11]
 8000adc:	23e7      	movs	r3, #231	; 0xe7
 8000ade:	72bb      	strb	r3, [r7, #10]
 8000ae0:	23e7      	movs	r3, #231	; 0xe7
 8000ae2:	727b      	strb	r3, [r7, #9]
 8000ae4:	23e7      	movs	r3, #231	; 0xe7
 8000ae6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2205      	movs	r2, #5
 8000aee:	4619      	mov	r1, r3
 8000af0:	2010      	movs	r0, #16
 8000af2:	f7ff ff39 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2011      	movs	r0, #17
 8000afa:	f7ff ff13 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2012      	movs	r0, #18
 8000b02:	f7ff ff0f 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2013      	movs	r0, #19
 8000b0a:	f7ff ff0b 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2014      	movs	r0, #20
 8000b12:	f7ff ff07 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2015      	movs	r0, #21
 8000b1a:	f7ff ff03 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2016      	movs	r0, #22
 8000b22:	f7ff feff 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000b26:	f000 f9df 	bl	8000ee8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f7ff fef9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	201d      	movs	r0, #29
 8000b36:	f7ff fef5 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000b3a:	f000 f9ef 	bl	8000f1c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000b3e:	210f      	movs	r1, #15
 8000b40:	200f      	movs	r0, #15
 8000b42:	f000 f89d 	bl	8000c80 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f90f 	bl	8000d6a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f945 	bl	8000ddc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f988 	bl	8000e68 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000b58:	f000 f8da 	bl	8000d10 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f000 f8bf 	bl	8000ce0 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000b62:	f000 f9b8 	bl	8000ed6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f000 f8a5 	bl	8000cb6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000b6c:	f7ff ff24 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b70:	f7ff ff2a 	bl	80009c8 <NRF24_flush_rx>

	NRF24_powerDown();
 8000b74:	f000 f9a0 	bl	8000eb8 <NRF24_powerDown>

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2400021c 	.word	0x2400021c
 8000b8c:	24000214 	.word	0x24000214
 8000b90:	24000218 	.word	0x24000218
 8000b94:	2400021a 	.word	0x2400021a

08000b98 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fe71 	bl	8000884 <NRF24_read_register>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f043 0303 	orr.w	r3, r3, #3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff feb9 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <NRF24_startListening+0x48>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NRF24_startListening+0x48>)
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f7ff fed1 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000bc6:	f7ff fef7 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bca:	f7ff fefd 	bl	80009c8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fe38 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000bd4:	2096      	movs	r0, #150	; 0x96
 8000bd6:	f7ff fdf3 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000208 	.word	0x24000208

08000be4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4601      	mov	r1, r0
 8000bec:	e9c7 2300 	strd	r2, r3, [r7]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bfe:	491c      	ldr	r1, [pc, #112]	; (8000c70 <NRF24_openReadingPipe+0x8c>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d82d      	bhi.n	8000c66 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d808      	bhi.n	8000c22 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	4639      	mov	r1, r7
 8000c18:	2205      	movs	r2, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fea4 	bl	8000968 <NRF24_write_registerN>
 8000c20:	e007      	b.n	8000c32 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <NRF24_openReadingPipe+0x94>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <NRF24_openReadingPipe+0x98>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe70 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fe1d 	bl	8000884 <NRF24_read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fe5f 	bl	8000924 <NRF24_write_register>
	}

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000208 	.word	0x24000208
 8000c74:	0800c32c 	.word	0x0800c32c
 8000c78:	0800c334 	.word	0x0800c334
 8000c7c:	24000210 	.word	0x24000210

08000c80 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff fe3b 	bl	8000924 <NRF24_write_register>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000cc0:	237f      	movs	r3, #127	; 0x7f
 8000cc2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	bf28      	it	cs
 8000ccc:	4613      	movcs	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f7ff fe26 	bl	8000924 <NRF24_write_register>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000cea:	2320      	movs	r3, #32
 8000cec:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bf28      	it	cs
 8000cf6:	4613      	movcs	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <NRF24_setPayloadSize+0x2c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	24000210 	.word	0x24000210

08000d10 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d14:	201d      	movs	r0, #29
 8000d16:	f7ff fdb5 	bl	8000884 <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f023 0304 	bic.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	201d      	movs	r0, #29
 8000d26:	f7ff fdfd 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <NRF24_disableDynamicPayloads+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24000211 	.word	0x24000211

08000d40 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d50:	213f      	movs	r1, #63	; 0x3f
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fde6 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d58:	e003      	b.n	8000d62 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fde1 	bl	8000924 <NRF24_write_register>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff fd85 	bl	8000884 <NRF24_read_register>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0306 	bic.w	r3, r3, #6
 8000d84:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d104      	bne.n	8000d96 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f043 0306 	orr.w	r3, r3, #6
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e019      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d104      	bne.n	8000da6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e011      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d104      	bne.n	8000db6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e009      	b.n	8000dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d103      	bne.n	8000dca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f043 0306 	orr.w	r3, r3, #6
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f7ff fda8 	bl	8000924 <NRF24_write_register>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dea:	2006      	movs	r0, #6
 8000dec:	f7ff fd4a 	bl	8000884 <NRF24_read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e00:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d107      	bne.n	8000e18 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	73bb      	strb	r3, [r7, #14]
 8000e16:	e00d      	b.n	8000e34 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e002      	b.n	8000e34 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	4619      	mov	r1, r3
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff fd73 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff fd20 	bl	8000884 <NRF24_read_register>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e002      	b.n	8000e5a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <NRF24_setDataRate+0x88>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000212 	.word	0x24000212

08000e68 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fd06 	bl	8000884 <NRF24_read_register>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f023 030c 	bic.w	r3, r3, #12
 8000e7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e007      	b.n	8000ea6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fce1 	bl	8000884 <NRF24_read_register>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fd29 	bl	8000924 <NRF24_write_register>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eda:	2170      	movs	r1, #112	; 0x70
 8000edc:	2007      	movs	r0, #7
 8000ede:	f7ff fd21 	bl	8000924 <NRF24_write_register>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fc88 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ef4:	2350      	movs	r3, #80	; 0x50
 8000ef6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ef8:	2373      	movs	r3, #115	; 0x73
 8000efa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	2202      	movs	r2, #2
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <NRF24_ACTIVATE_cmd+0x30>)
 8000f04:	f005 f9e6 	bl	80062d4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc7b 	bl	8000804 <NRF24_csn>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2400021c 	.word	0x2400021c

08000f1c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	b0a1      	sub	sp, #132	; 0x84
 8000f20:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	49c3      	ldr	r1, [pc, #780]	; (8001234 <printRadioSettings+0x318>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 fd2f 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f9d4 	bl	80002e0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	230a      	movs	r3, #10
 8000f42:	48bd      	ldr	r0, [pc, #756]	; (8001238 <printRadioSettings+0x31c>)
 8000f44:	f006 ffd0 	bl	8007ee8 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fc9b 	bl	8000884 <NRF24_read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <printRadioSettings+0x5e>
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	49b2      	ldr	r1, [pc, #712]	; (800123c <printRadioSettings+0x320>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f008 fd0a 	bl	800998c <siprintf>
 8000f78:	e00c      	b.n	8000f94 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	49b0      	ldr	r1, [pc, #704]	; (8001240 <printRadioSettings+0x324>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fd03 	bl	800998c <siprintf>
 8000f86:	e005      	b.n	8000f94 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	49ad      	ldr	r1, [pc, #692]	; (8001244 <printRadioSettings+0x328>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f008 fcfc 	bl	800998c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f9a1 	bl	80002e0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f107 0108 	add.w	r1, r7, #8
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	48a3      	ldr	r0, [pc, #652]	; (8001238 <printRadioSettings+0x31c>)
 8000faa:	f006 ff9d 	bl	8007ee8 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fc68 	bl	8000884 <NRF24_read_register>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fbe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bfcc      	ite	gt
 8000fc6:	2301      	movgt	r3, #1
 8000fc8:	2300      	movle	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fd2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bfcc      	ite	gt
 8000fda:	2301      	movgt	r3, #1
 8000fdc:	2300      	movle	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfcc      	ite	gt
 8000fee:	2301      	movgt	r3, #1
 8000ff0:	2300      	movle	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ffa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfcc      	ite	gt
 8001002:	2301      	movgt	r3, #1
 8001004:	2300      	movle	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800100a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800100e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001012:	2b00      	cmp	r3, #0
 8001014:	bfcc      	ite	gt
 8001016:	2301      	movgt	r3, #1
 8001018:	2300      	movle	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800101e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001022:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfcc      	ite	gt
 800102a:	2301      	movgt	r3, #1
 800102c:	2300      	movle	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f107 0008 	add.w	r0, r7, #8
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	9402      	str	r4, [sp, #8]
 8001038:	9101      	str	r1, [sp, #4]
 800103a:	9200      	str	r2, [sp, #0]
 800103c:	4633      	mov	r3, r6
 800103e:	462a      	mov	r2, r5
 8001040:	4981      	ldr	r1, [pc, #516]	; (8001248 <printRadioSettings+0x32c>)
 8001042:	f008 fca3 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f948 	bl	80002e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	4877      	ldr	r0, [pc, #476]	; (8001238 <printRadioSettings+0x31c>)
 800105c:	f006 ff44 	bl	8007ee8 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fc0f 	bl	8000884 <NRF24_read_register>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800106c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001070:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfcc      	ite	gt
 8001078:	2301      	movgt	r3, #1
 800107a:	2300      	movle	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001084:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001088:	2b00      	cmp	r3, #0
 800108a:	bfcc      	ite	gt
 800108c:	2301      	movgt	r3, #1
 800108e:	2300      	movle	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001098:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfcc      	ite	gt
 80010a0:	2301      	movgt	r3, #1
 80010a2:	2300      	movle	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bfcc      	ite	gt
 80010b4:	2301      	movgt	r3, #1
 80010b6:	2300      	movle	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfcc      	ite	gt
 80010c8:	2301      	movgt	r3, #1
 80010ca:	2300      	movle	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f107 0008 	add.w	r0, r7, #8
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	9402      	str	r4, [sp, #8]
 80010ea:	9101      	str	r1, [sp, #4]
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4633      	mov	r3, r6
 80010f0:	462a      	mov	r2, r5
 80010f2:	4956      	ldr	r1, [pc, #344]	; (800124c <printRadioSettings+0x330>)
 80010f4:	f008 fc4a 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8ef 	bl	80002e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	230a      	movs	r3, #10
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <printRadioSettings+0x31c>)
 800110e:	f006 feeb 	bl	8007ee8 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fbb6 	bl	8000884 <NRF24_read_register>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001126:	3302      	adds	r3, #2
 8001128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800112c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4946      	ldr	r1, [pc, #280]	; (8001250 <printRadioSettings+0x334>)
 8001136:	4618      	mov	r0, r3
 8001138:	f008 fc28 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f8cd 	bl	80002e0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	230a      	movs	r3, #10
 8001150:	4839      	ldr	r0, [pc, #228]	; (8001238 <printRadioSettings+0x31c>)
 8001152:	f006 fec9 	bl	8007ee8 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff fb94 	bl	8000884 <NRF24_read_register>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4939      	ldr	r1, [pc, #228]	; (8001254 <printRadioSettings+0x338>)
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fc0b 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f8b0 	bl	80002e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0108 	add.w	r1, r7, #8
 8001188:	230a      	movs	r3, #10
 800118a:	482b      	ldr	r0, [pc, #172]	; (8001238 <printRadioSettings+0x31c>)
 800118c:	f006 feac 	bl	8007ee8 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001190:	2006      	movs	r0, #6
 8001192:	f7ff fb77 	bl	8000884 <NRF24_read_register>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800119c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <printRadioSettings+0x29a>
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <printRadioSettings+0x33c>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f008 fbec 	bl	800998c <siprintf>
 80011b4:	e005      	b.n	80011c2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4928      	ldr	r1, [pc, #160]	; (800125c <printRadioSettings+0x340>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f008 fbe5 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f88a 	bl	80002e0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 0108 	add.w	r1, r7, #8
 80011d4:	230a      	movs	r3, #10
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <printRadioSettings+0x31c>)
 80011d8:	f006 fe86 	bl	8007ee8 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80011dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f003 0306 	and.w	r3, r3, #6
 80011e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	085b      	lsrs	r3, r3, #1
 80011ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80011f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <printRadioSettings+0x2ec>
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4918      	ldr	r1, [pc, #96]	; (8001260 <printRadioSettings+0x344>)
 8001200:	4618      	mov	r0, r3
 8001202:	f008 fbc3 	bl	800998c <siprintf>
 8001206:	e03b      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001208:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <printRadioSettings+0x302>
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <printRadioSettings+0x348>)
 8001216:	4618      	mov	r0, r3
 8001218:	f008 fbb8 	bl	800998c <siprintf>
 800121c:	e030      	b.n	8001280 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	2b02      	cmp	r3, #2
 8001224:	d122      	bne.n	800126c <printRadioSettings+0x350>
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	490f      	ldr	r1, [pc, #60]	; (8001268 <printRadioSettings+0x34c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fbad 	bl	800998c <siprintf>
 8001232:	e025      	b.n	8001280 <printRadioSettings+0x364>
 8001234:	0800bd80 	.word	0x0800bd80
 8001238:	240002a4 	.word	0x240002a4
 800123c:	0800bdb4 	.word	0x0800bdb4
 8001240:	0800bdd0 	.word	0x0800bdd0
 8001244:	0800bdec 	.word	0x0800bdec
 8001248:	0800be00 	.word	0x0800be00
 800124c:	0800be44 	.word	0x0800be44
 8001250:	0800be90 	.word	0x0800be90
 8001254:	0800beac 	.word	0x0800beac
 8001258:	0800bec0 	.word	0x0800bec0
 800125c:	0800bed8 	.word	0x0800bed8
 8001260:	0800bef0 	.word	0x0800bef0
 8001264:	0800bf04 	.word	0x0800bf04
 8001268:	0800bf18 	.word	0x0800bf18
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	2b03      	cmp	r3, #3
 8001272:	d105      	bne.n	8001280 <printRadioSettings+0x364>
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	49d7      	ldr	r1, [pc, #860]	; (80015d8 <printRadioSettings+0x6bc>)
 800127a:	4618      	mov	r0, r3
 800127c:	f008 fb86 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f82b 	bl	80002e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f107 0108 	add.w	r1, r7, #8
 8001292:	230a      	movs	r3, #10
 8001294:	48d1      	ldr	r0, [pc, #836]	; (80015dc <printRadioSettings+0x6c0>)
 8001296:	f006 fe27 	bl	8007ee8 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800129a:	463b      	mov	r3, r7
 800129c:	2205      	movs	r2, #5
 800129e:	4619      	mov	r1, r3
 80012a0:	200a      	movs	r0, #10
 80012a2:	f7ff fb17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	461c      	mov	r4, r3
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	461d      	mov	r5, r3
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	787a      	ldrb	r2, [r7, #1]
 80012b2:	7839      	ldrb	r1, [r7, #0]
 80012b4:	f107 0008 	add.w	r0, r7, #8
 80012b8:	9102      	str	r1, [sp, #8]
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	462b      	mov	r3, r5
 80012c0:	4622      	mov	r2, r4
 80012c2:	49c7      	ldr	r1, [pc, #796]	; (80015e0 <printRadioSettings+0x6c4>)
 80012c4:	f008 fb62 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f807 	bl	80002e0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f107 0108 	add.w	r1, r7, #8
 80012da:	230a      	movs	r3, #10
 80012dc:	48bf      	ldr	r0, [pc, #764]	; (80015dc <printRadioSettings+0x6c0>)
 80012de:	f006 fe03 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80012e2:	463b      	mov	r3, r7
 80012e4:	2205      	movs	r2, #5
 80012e6:	4619      	mov	r1, r3
 80012e8:	200b      	movs	r0, #11
 80012ea:	f7ff faf3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012ee:	793b      	ldrb	r3, [r7, #4]
 80012f0:	461c      	mov	r4, r3
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	461d      	mov	r5, r3
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	787a      	ldrb	r2, [r7, #1]
 80012fa:	7839      	ldrb	r1, [r7, #0]
 80012fc:	f107 0008 	add.w	r0, r7, #8
 8001300:	9102      	str	r1, [sp, #8]
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	462b      	mov	r3, r5
 8001308:	4622      	mov	r2, r4
 800130a:	49b6      	ldr	r1, [pc, #728]	; (80015e4 <printRadioSettings+0x6c8>)
 800130c:	f008 fb3e 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffe3 	bl	80002e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	230a      	movs	r3, #10
 8001324:	48ad      	ldr	r0, [pc, #692]	; (80015dc <printRadioSettings+0x6c0>)
 8001326:	f006 fddf 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800132a:	463b      	mov	r3, r7
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	200c      	movs	r0, #12
 8001332:	f7ff facf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001336:	783b      	ldrb	r3, [r7, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	49aa      	ldr	r1, [pc, #680]	; (80015e8 <printRadioSettings+0x6cc>)
 8001340:	4618      	mov	r0, r3
 8001342:	f008 fb23 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffc8 	bl	80002e0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	230a      	movs	r3, #10
 800135a:	48a0      	ldr	r0, [pc, #640]	; (80015dc <printRadioSettings+0x6c0>)
 800135c:	f006 fdc4 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001360:	463b      	mov	r3, r7
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	200d      	movs	r0, #13
 8001368:	f7ff fab4 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800136c:	783b      	ldrb	r3, [r7, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	499d      	ldr	r1, [pc, #628]	; (80015ec <printRadioSettings+0x6d0>)
 8001376:	4618      	mov	r0, r3
 8001378:	f008 fb08 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ffad 	bl	80002e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	230a      	movs	r3, #10
 8001390:	4892      	ldr	r0, [pc, #584]	; (80015dc <printRadioSettings+0x6c0>)
 8001392:	f006 fda9 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001396:	463b      	mov	r3, r7
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	200e      	movs	r0, #14
 800139e:	f7ff fa99 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013a2:	783b      	ldrb	r3, [r7, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4991      	ldr	r1, [pc, #580]	; (80015f0 <printRadioSettings+0x6d4>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 faed 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff92 	bl	80002e0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	230a      	movs	r3, #10
 80013c6:	4885      	ldr	r0, [pc, #532]	; (80015dc <printRadioSettings+0x6c0>)
 80013c8:	f006 fd8e 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80013cc:	463b      	mov	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	200f      	movs	r0, #15
 80013d4:	f7ff fa7e 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4984      	ldr	r1, [pc, #528]	; (80015f4 <printRadioSettings+0x6d8>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fad2 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe ff77 	bl	80002e0 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	230a      	movs	r3, #10
 80013fc:	4877      	ldr	r0, [pc, #476]	; (80015dc <printRadioSettings+0x6c0>)
 80013fe:	f006 fd73 	bl	8007ee8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001402:	463b      	mov	r3, r7
 8001404:	2205      	movs	r2, #5
 8001406:	4619      	mov	r1, r3
 8001408:	2010      	movs	r0, #16
 800140a:	f7ff fa63 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	461c      	mov	r4, r3
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	461d      	mov	r5, r3
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	787a      	ldrb	r2, [r7, #1]
 800141a:	7839      	ldrb	r1, [r7, #0]
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	9102      	str	r1, [sp, #8]
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	462b      	mov	r3, r5
 8001428:	4622      	mov	r2, r4
 800142a:	4973      	ldr	r1, [pc, #460]	; (80015f8 <printRadioSettings+0x6dc>)
 800142c:	f008 faae 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff53 	bl	80002e0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0108 	add.w	r1, r7, #8
 8001442:	230a      	movs	r3, #10
 8001444:	4865      	ldr	r0, [pc, #404]	; (80015dc <printRadioSettings+0x6c0>)
 8001446:	f006 fd4f 	bl	8007ee8 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800144a:	2011      	movs	r0, #17
 800144c:	f7ff fa1a 	bl	8000884 <NRF24_read_register>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4966      	ldr	r1, [pc, #408]	; (80015fc <printRadioSettings+0x6e0>)
 8001464:	4618      	mov	r0, r3
 8001466:	f008 fa91 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff36 	bl	80002e0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	f107 0108 	add.w	r1, r7, #8
 800147c:	230a      	movs	r3, #10
 800147e:	4857      	ldr	r0, [pc, #348]	; (80015dc <printRadioSettings+0x6c0>)
 8001480:	f006 fd32 	bl	8007ee8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001484:	2012      	movs	r0, #18
 8001486:	f7ff f9fd 	bl	8000884 <NRF24_read_register>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001490:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4958      	ldr	r1, [pc, #352]	; (8001600 <printRadioSettings+0x6e4>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 fa74 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ff19 	bl	80002e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f107 0108 	add.w	r1, r7, #8
 80014b6:	230a      	movs	r3, #10
 80014b8:	4848      	ldr	r0, [pc, #288]	; (80015dc <printRadioSettings+0x6c0>)
 80014ba:	f006 fd15 	bl	8007ee8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80014be:	2013      	movs	r0, #19
 80014c0:	f7ff f9e0 	bl	8000884 <NRF24_read_register>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	494b      	ldr	r1, [pc, #300]	; (8001604 <printRadioSettings+0x6e8>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fa57 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fefc 	bl	80002e0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f107 0108 	add.w	r1, r7, #8
 80014f0:	230a      	movs	r3, #10
 80014f2:	483a      	ldr	r0, [pc, #232]	; (80015dc <printRadioSettings+0x6c0>)
 80014f4:	f006 fcf8 	bl	8007ee8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80014f8:	2014      	movs	r0, #20
 80014fa:	f7ff f9c3 	bl	8000884 <NRF24_read_register>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001504:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	493d      	ldr	r1, [pc, #244]	; (8001608 <printRadioSettings+0x6ec>)
 8001512:	4618      	mov	r0, r3
 8001514:	f008 fa3a 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fedf 	bl	80002e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	f107 0108 	add.w	r1, r7, #8
 800152a:	230a      	movs	r3, #10
 800152c:	482b      	ldr	r0, [pc, #172]	; (80015dc <printRadioSettings+0x6c0>)
 800152e:	f006 fcdb 	bl	8007ee8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001532:	2015      	movs	r0, #21
 8001534:	f7ff f9a6 	bl	8000884 <NRF24_read_register>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800153e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4930      	ldr	r1, [pc, #192]	; (800160c <printRadioSettings+0x6f0>)
 800154c:	4618      	mov	r0, r3
 800154e:	f008 fa1d 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fec2 	bl	80002e0 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	f107 0108 	add.w	r1, r7, #8
 8001564:	230a      	movs	r3, #10
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <printRadioSettings+0x6c0>)
 8001568:	f006 fcbe 	bl	8007ee8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800156c:	2016      	movs	r0, #22
 800156e:	f7ff f989 	bl	8000884 <NRF24_read_register>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001578:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4922      	ldr	r1, [pc, #136]	; (8001610 <printRadioSettings+0x6f4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f008 fa00 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fea5 	bl	80002e0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	f107 0108 	add.w	r1, r7, #8
 800159e:	230a      	movs	r3, #10
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <printRadioSettings+0x6c0>)
 80015a2:	f006 fca1 	bl	8007ee8 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015a6:	201c      	movs	r0, #28
 80015a8:	f7ff f96c 	bl	8000884 <NRF24_read_register>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfcc      	ite	gt
 80015be:	2301      	movgt	r3, #1
 80015c0:	2300      	movle	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bfcc      	ite	gt
 80015d2:	2301      	movgt	r3, #1
 80015d4:	2300      	movle	r3, #0
 80015d6:	e01d      	b.n	8001614 <printRadioSettings+0x6f8>
 80015d8:	0800bf2c 	.word	0x0800bf2c
 80015dc:	240002a4 	.word	0x240002a4
 80015e0:	0800bf40 	.word	0x0800bf40
 80015e4:	0800bf70 	.word	0x0800bf70
 80015e8:	0800bfa0 	.word	0x0800bfa0
 80015ec:	0800bfc8 	.word	0x0800bfc8
 80015f0:	0800bff0 	.word	0x0800bff0
 80015f4:	0800c018 	.word	0x0800c018
 80015f8:	0800c040 	.word	0x0800c040
 80015fc:	0800c06c 	.word	0x0800c06c
 8001600:	0800c088 	.word	0x0800c088
 8001604:	0800c0a4 	.word	0x0800c0a4
 8001608:	0800c0c0 	.word	0x0800c0c0
 800160c:	0800c0dc 	.word	0x0800c0dc
 8001610:	0800c0f8 	.word	0x0800c0f8
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfcc      	ite	gt
 8001624:	2301      	movgt	r3, #1
 8001626:	2300      	movle	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001630:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfcc      	ite	gt
 8001638:	2301      	movgt	r3, #1
 800163a:	2300      	movle	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001644:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001648:	2b00      	cmp	r3, #0
 800164a:	bfcc      	ite	gt
 800164c:	2301      	movgt	r3, #1
 800164e:	2300      	movle	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001658:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800165c:	2b00      	cmp	r3, #0
 800165e:	bfcc      	ite	gt
 8001660:	2301      	movgt	r3, #1
 8001662:	2300      	movle	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f107 0008 	add.w	r0, r7, #8
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	9402      	str	r4, [sp, #8]
 800166e:	9101      	str	r1, [sp, #4]
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	4633      	mov	r3, r6
 8001674:	462a      	mov	r2, r5
 8001676:	4936      	ldr	r1, [pc, #216]	; (8001750 <printRadioSettings+0x834>)
 8001678:	f008 f988 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fe2d 	bl	80002e0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 0108 	add.w	r1, r7, #8
 800168e:	230a      	movs	r3, #10
 8001690:	4830      	ldr	r0, [pc, #192]	; (8001754 <printRadioSettings+0x838>)
 8001692:	f006 fc29 	bl	8007ee8 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001696:	201d      	movs	r0, #29
 8001698:	f7ff f8f4 	bl	8000884 <NRF24_read_register>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <printRadioSettings+0x7a0>
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4929      	ldr	r1, [pc, #164]	; (8001758 <printRadioSettings+0x83c>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f008 f969 	bl	800998c <siprintf>
 80016ba:	e005      	b.n	80016c8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4926      	ldr	r1, [pc, #152]	; (800175c <printRadioSettings+0x840>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f008 f962 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe07 	bl	80002e0 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	230a      	movs	r3, #10
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <printRadioSettings+0x838>)
 80016de:	f006 fc03 	bl	8007ee8 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80016e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <printRadioSettings+0x7e0>
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <printRadioSettings+0x844>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f008 f949 	bl	800998c <siprintf>
 80016fa:	e005      	b.n	8001708 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4918      	ldr	r1, [pc, #96]	; (8001764 <printRadioSettings+0x848>)
 8001702:	4618      	mov	r0, r3
 8001704:	f008 f942 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fde7 	bl	80002e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	230a      	movs	r3, #10
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <printRadioSettings+0x838>)
 800171e:	f006 fbe3 	bl	8007ee8 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4910      	ldr	r1, [pc, #64]	; (8001768 <printRadioSettings+0x84c>)
 8001728:	4618      	mov	r0, r3
 800172a:	f008 f92f 	bl	800998c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fdd4 	bl	80002e0 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	230a      	movs	r3, #10
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <printRadioSettings+0x838>)
 8001744:	f006 fbd0 	bl	8007ee8 <HAL_UART_Transmit>
}
 8001748:	bf00      	nop
 800174a:	3774      	adds	r7, #116	; 0x74
 800174c:	46bd      	mov	sp, r7
 800174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001750:	0800c114 	.word	0x0800c114
 8001754:	240002a4 	.word	0x240002a4
 8001758:	0800c160 	.word	0x0800c160
 800175c:	0800c178 	.word	0x0800c178
 8001760:	0800c190 	.word	0x0800c190
 8001764:	0800c1ac 	.word	0x0800c1ac
 8001768:	0800bd80 	.word	0x0800bd80
 800176c:	00000000 	.word	0x00000000

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b0a7      	sub	sp, #156	; 0x9c
 8001774:	af22      	add	r7, sp, #136	; 0x88
int main(void)
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	607b      	str	r3, [r7, #4]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	60bb      	str	r3, [r7, #8]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001782:	bf00      	nop
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <main+0x1f0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <main+0x2a>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dcf4      	bgt.n	8001784 <main+0x14>
  if ( timeout < 0 )
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da01      	bge.n	80017a4 <main+0x34>
  {
  Error_Handler();
 80017a0:	f000 fc52 	bl	8002048 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a4:	f000 ffa2 	bl	80026ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a8:	f000 f8f0 	bl	800198c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80017ac:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <main+0x1f0>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <main+0x1f0>)
 80017b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <main+0x1f0>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f001 ffaa 	bl	8003724 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80017d0:	2100      	movs	r1, #0
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 ffc0 	bl	8003758 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80017d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017dc:	60bb      	str	r3, [r7, #8]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80017de:	bf00      	nop
 80017e0:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <main+0x1f0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <main+0x86>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dcf4      	bgt.n	80017e0 <main+0x70>
if ( timeout < 0 )
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <main+0x90>
{
Error_Handler();
 80017fc:	f000 fc24 	bl	8002048 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fb68 	bl	8001ed4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001804:	f000 fb1a 	bl	8001e3c <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001808:	f000 fa3c 	bl	8001c84 <MX_SPI5_Init>
  MX_TIM15_Init();
 800180c:	f000 fa90 	bl	8001d30 <MX_TIM15_Init>
  MX_FDCAN1_Init();
 8001810:	f000 f944 	bl	8001a9c <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001814:	f000 f9f6 	bl	8001c04 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001818:	2100      	movs	r1, #0
 800181a:	4852      	ldr	r0, [pc, #328]	; (8001964 <main+0x1f4>)
 800181c:	f005 fc50 	bl	80070c0 <HAL_TIM_PWM_Start>


  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK) {
 8001820:	2100      	movs	r1, #0
 8001822:	4851      	ldr	r0, [pc, #324]	; (8001968 <main+0x1f8>)
 8001824:	f005 fc4c 	bl	80070c0 <HAL_TIM_PWM_Start>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <main+0xc2>
	  Error_Handler();
 800182e:	f000 fc0b 	bl	8002048 <Error_Handler>

	NRF24_startListening();

	*/

  NRF24_begin(GPIOC, nrf24_CSN_Pin, nrf24_CE_Pin, hspi5);
 8001832:	4c4e      	ldr	r4, [pc, #312]	; (800196c <main+0x1fc>)
 8001834:	4668      	mov	r0, sp
 8001836:	1d23      	adds	r3, r4, #4
 8001838:	2284      	movs	r2, #132	; 0x84
 800183a:	4619      	mov	r1, r3
 800183c:	f007 fc34 	bl	80090a8 <memcpy>
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	484a      	ldr	r0, [pc, #296]	; (8001970 <main+0x200>)
 8001848:	f7ff f8c6 	bl	80009d8 <NRF24_begin>

  NRF24_openReadingPipe(1, RxpipeAddrs);
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <main+0x204>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff f9c6 	bl	8000be4 <NRF24_openReadingPipe>
  NRF24_setPALevel(RF24_PA_0dB);
 8001858:	2003      	movs	r0, #3
 800185a:	f7ff fa86 	bl	8000d6a <NRF24_setPALevel>
  NRF24_setChannel(52);
 800185e:	2034      	movs	r0, #52	; 0x34
 8001860:	f7ff fa29 	bl	8000cb6 <NRF24_setChannel>
  NRF24_setAutoAck(false);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fa6b 	bl	8000d40 <NRF24_setAutoAck>
  NRF24_setDataRate(RF24_2MBPS);
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff fab6 	bl	8000ddc <NRF24_setDataRate>

  NRF24_startListening();
 8001870:	f7ff f992 	bl	8000b98 <NRF24_startListening>
  HAL_Delay(1000);
 8001874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001878:	f000 ffca 	bl	8002810 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //mpu6050_init(&hi2c4, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004);
  printf("Herllo /n");
 800187c:	483e      	ldr	r0, [pc, #248]	; (8001978 <main+0x208>)
 800187e:	f008 f86d 	bl	800995c <iprintf>

		*/


		  // Backward
		  while(setpoint*100 < 101){
 8001882:	e01c      	b.n	80018be <main+0x14e>
			  setpoint += 0.01f;
 8001884:	edd7 7a03 	vldr	s15, [r7, #12]
 8001888:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800197c <main+0x20c>
 800188c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001890:	edc7 7a03 	vstr	s15, [r7, #12]
			  TIM15->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 8001894:	edd7 7a03 	vldr	s15, [r7, #12]
 8001898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800189c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001958 <main+0x1e8>
 80018a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018a4:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001958 <main+0x1e8>
 80018a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <main+0x210>)
 80018ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018b2:	ee17 2a90 	vmov	r2, s15
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 80018b8:	2064      	movs	r0, #100	; 0x64
 80018ba:	f000 ffa9 	bl	8002810 <HAL_Delay>
		  while(setpoint*100 < 101){
 80018be:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001984 <main+0x214>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001988 <main+0x218>
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d4d5      	bmi.n	8001884 <main+0x114>
		  }
		  setpoint = 0.5f;
 80018d8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80018dc:	60fb      	str	r3, [r7, #12]
		  HAL_Delay(2000);
 80018de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018e2:	f000 ff95 	bl	8002810 <HAL_Delay>
		  // Forward
		  while(setpoint*100 > -1){
 80018e6:	e01c      	b.n	8001922 <main+0x1b2>
			  setpoint -= 0.01f;
 80018e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ec:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800197c <main+0x20c>
 80018f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f4:	edc7 7a03 	vstr	s15, [r7, #12]
			  TIM15->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 80018f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001900:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001958 <main+0x1e8>
 8001904:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001908:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001958 <main+0x1e8>
 800190c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <main+0x210>)
 8001912:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001916:	ee17 2a90 	vmov	r2, s15
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(100);
 800191c:	2064      	movs	r0, #100	; 0x64
 800191e:	f000 ff77 	bl	8002810 <HAL_Delay>
		  while(setpoint*100 > -1){
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001984 <main+0x214>
 800192a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	dcd5      	bgt.n	80018e8 <main+0x178>
		  }
		  setpoint = 0.5f;
 800193c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001940:	60fb      	str	r3, [r7, #12]
		  HAL_Delay(2000);
 8001942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001946:	f000 ff63 	bl	8002810 <HAL_Delay>



		   HAL_Delay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194e:	f000 ff5f 	bl	8002810 <HAL_Delay>
		  while(setpoint*100 < 101){
 8001952:	e7b4      	b.n	80018be <main+0x14e>
 8001954:	f3af 8000 	nop.w
 8001958:	66666667 	.word	0x66666667
 800195c:	40a8ffe6 	.word	0x40a8ffe6
 8001960:	58024400 	.word	0x58024400
 8001964:	240004f4 	.word	0x240004f4
 8001968:	240004a8 	.word	0x240004a8
 800196c:	24000420 	.word	0x24000420
 8001970:	58020800 	.word	0x58020800
 8001974:	24000008 	.word	0x24000008
 8001978:	0800c2c4 	.word	0x0800c2c4
 800197c:	3c23d70a 	.word	0x3c23d70a
 8001980:	40014000 	.word	0x40014000
 8001984:	42c80000 	.word	0x42c80000
 8001988:	42ca0000 	.word	0x42ca0000

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b09c      	sub	sp, #112	; 0x70
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	224c      	movs	r2, #76	; 0x4c
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f007 fb92 	bl	80090c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2220      	movs	r2, #32
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f007 fb8c 	bl	80090c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019ac:	2004      	movs	r0, #4
 80019ae:	f002 f80f 	bl	80039d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <SystemClock_Config+0x104>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <SystemClock_Config+0x104>)
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <SystemClock_Config+0x104>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <SystemClock_Config+0x108>)
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <SystemClock_Config+0x108>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <SystemClock_Config+0x108>)
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019e4:	bf00      	nop
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <SystemClock_Config+0x104>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f2:	d1f8      	bne.n	80019e6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <SystemClock_Config+0x10c>)
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f023 0303 	bic.w	r3, r3, #3
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <SystemClock_Config+0x10c>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001a04:	2303      	movs	r3, #3
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001a22:	23f0      	movs	r3, #240	; 0xf0
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001a2a:	2318      	movs	r3, #24
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001a32:	2308      	movs	r3, #8
 8001a34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 f81e 	bl	8003a84 <HAL_RCC_OscConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a4e:	f000 fafb 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	233f      	movs	r3, #63	; 0x3f
 8001a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a56:	2303      	movs	r3, #3
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2104      	movs	r1, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fc31 	bl	80042e0 <HAL_RCC_ClockConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001a84:	f000 fae0 	bl	8002048 <Error_Handler>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3770      	adds	r7, #112	; 0x70
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58024800 	.word	0x58024800
 8001a94:	58000400 	.word	0x58000400
 8001a98:	58024400 	.word	0x58024400

08001a9c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <MX_FDCAN1_Init+0x15c>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001aa8:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001aae:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001aba:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001acc:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ace:	2208      	movs	r2, #8
 8001ad0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001ad8:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ada:	2208      	movs	r2, #8
 8001adc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001ade:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b28:	2204      	movs	r2, #4
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b4a:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b4c:	f000 ff74 	bl	8002a38 <HAL_FDCAN_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001b56:	f000 fa77 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2301      	movs	r3, #1
 8001b84:	2202      	movs	r2, #2
 8001b86:	2102      	movs	r1, #2
 8001b88:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b8a:	f001 f9a9 	bl	8002ee0 <HAL_FDCAN_ConfigGlobalFilter>
  FDCAN_REJECT_REMOTE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001b8e:	491b      	ldr	r1, [pc, #108]	; (8001bfc <MX_FDCAN1_Init+0x160>)
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001b92:	f001 f92f 	bl	8002df4 <HAL_FDCAN_ConfigFilter>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_FDCAN1_Init+0x104>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 8001b9c:	f000 fa54 	bl	8002048 <Error_Handler>
  }
  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001ba2:	f001 f9ca 	bl	8002f3a <HAL_FDCAN_Start>
  }
  /* Start Error */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <MX_FDCAN1_Init+0x158>)
 8001bac:	f001 f9f0 	bl	8002f90 <HAL_FDCAN_ActivateNotification>
  }
  /* Notification Error */
	  /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bb2:	f240 1211 	movw	r2, #273	; 0x111
 8001bb6:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bc6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001bca:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bd8:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bdc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001be0:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <MX_FDCAN1_Init+0x164>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	24000334 	.word	0x24000334
 8001bf8:	4000a000 	.word	0x4000a000
 8001bfc:	240005d0 	.word	0x240005d0
 8001c00:	240005f0 	.word	0x240005f0

08001c04 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <MX_I2C4_Init+0x78>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <MX_I2C4_Init+0x7c>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c40:	f001 fd9e 	bl	8003780 <HAL_I2C_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001c4a:	f000 f9fd 	bl	8002048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c52:	f001 fe25 	bl	80038a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001c5c:	f000 f9f4 	bl	8002048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_I2C4_Init+0x74>)
 8001c64:	f001 fe67 	bl	8003936 <HAL_I2CEx_ConfigDigitalFilter>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c6e:	f000 f9eb 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	240003d4 	.word	0x240003d4
 8001c7c:	58001c00 	.word	0x58001c00
 8001c80:	00404c74 	.word	0x00404c74

08001c84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001c8a:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <MX_SPI5_Init+0xa8>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001c90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cb8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001cbc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_SPI5_Init+0xa4>)
 8001d16:	f004 f9d7 	bl	80060c8 <HAL_SPI_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001d20:	f000 f992 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	24000420 	.word	0x24000420
 8001d2c:	40015000 	.word	0x40015000

08001d30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b096      	sub	sp, #88	; 0x58
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	222c      	movs	r2, #44	; 0x2c
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 f9b1 	bl	80090c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <MX_TIM15_Init+0x108>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 74;
 8001d68:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d6a:	224a      	movs	r2, #74	; 0x4a
 8001d6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d76:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001d8e:	4829      	ldr	r0, [pc, #164]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001d90:	f005 f93f 	bl	8007012 <HAL_TIM_PWM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001d9a:	f000 f955 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001da6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4821      	ldr	r0, [pc, #132]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001dae:	f005 ff3f 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001db8:	f000 f946 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbc:	2360      	movs	r3, #96	; 0x60
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	4814      	ldr	r0, [pc, #80]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001de2:	f005 fa7b 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001dec:	f000 f92c 	bl	8002048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001e18:	f005 ff98 	bl	8007d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001e22:	f000 f911 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <MX_TIM15_Init+0x104>)
 8001e28:	f000 faa6 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001e2c:	bf00      	nop
 8001e2e:	3758      	adds	r7, #88	; 0x58
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	240004a8 	.word	0x240004a8
 8001e38:	40014000 	.word	0x40014000

08001e3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <MX_USART3_UART_Init+0x94>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e84:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e86:	f005 ffdf 	bl	8007e48 <HAL_UART_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e90:	f000 f8da 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e94:	2100      	movs	r1, #0
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001e98:	f007 f812 	bl	8008ec0 <HAL_UARTEx_SetTxFifoThreshold>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea2:	f000 f8d1 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001eaa:	f007 f847 	bl	8008f3c <HAL_UARTEx_SetRxFifoThreshold>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb4:	f000 f8c8 	bl	8002048 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <MX_USART3_UART_Init+0x90>)
 8001eba:	f006 ffc8 	bl	8008e4e <HAL_UARTEx_DisableFifoMode>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec4:	f000 f8c0 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	24000540 	.word	0x24000540
 8001ed0:	40004800 	.word	0x40004800

08001ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <MX_GPIO_Init+0x164>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a51      	ldr	r2, [pc, #324]	; (8002038 <MX_GPIO_Init+0x164>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <MX_GPIO_Init+0x164>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a33      	ldr	r2, [pc, #204]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <MX_GPIO_Init+0x164>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2148      	movs	r1, #72	; 0x48
 8001fa2:	4826      	ldr	r0, [pc, #152]	; (800203c <MX_GPIO_Init+0x168>)
 8001fa4:	f001 fba4 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f244 0101 	movw	r1, #16385	; 0x4001
 8001fae:	4824      	ldr	r0, [pc, #144]	; (8002040 <MX_GPIO_Init+0x16c>)
 8001fb0:	f001 fb9e 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nrf24_CE_Pin|nrf24_CSN_Pin, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	21c0      	movs	r1, #192	; 0xc0
 8001fb8:	4822      	ldr	r0, [pc, #136]	; (8002044 <MX_GPIO_Init+0x170>)
 8001fba:	f001 fb99 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = LLED_Pin|RLED_Pin;
 8001fbe:	2348      	movs	r3, #72	; 0x48
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4819      	ldr	r0, [pc, #100]	; (800203c <MX_GPIO_Init+0x168>)
 8001fd6:	f001 f9db 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4815      	ldr	r0, [pc, #84]	; (8002044 <MX_GPIO_Init+0x170>)
 8001ff0:	f001 f9ce 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001ff4:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <MX_GPIO_Init+0x16c>)
 800200e:	f001 f9bf 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf24_CE_Pin nrf24_CSN_Pin */
  GPIO_InitStruct.Pin = nrf24_CE_Pin|nrf24_CSN_Pin;
 8002012:	23c0      	movs	r3, #192	; 0xc0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4806      	ldr	r0, [pc, #24]	; (8002044 <MX_GPIO_Init+0x170>)
 800202a:	f001 f9b1 	bl	8003390 <HAL_GPIO_Init>

}
 800202e:	bf00      	nop
 8002030:	3730      	adds	r7, #48	; 0x30
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	58024400 	.word	0x58024400
 800203c:	58021000 	.word	0x58021000
 8002040:	58020400 	.word	0x58020400
 8002044:	58020800 	.word	0x58020800

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	e7fe      	b.n	8002050 <Error_Handler+0x8>
	...

08002054 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800205c:	1d39      	adds	r1, r7, #4
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	2201      	movs	r2, #1
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <__io_putchar+0x20>)
 8002066:	f005 ff3f 	bl	8007ee8 <HAL_UART_Transmit>
  return ch;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000540 	.word	0x24000540

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_MspInit+0x30>)
 8002080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_MspInit+0x30>)
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_MspInit+0x30>)
 8002090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	58024400 	.word	0x58024400

080020ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b8      	sub	sp, #224	; 0xe0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	22bc      	movs	r2, #188	; 0xbc
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 fff9 	bl	80090c4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_FDCAN_MspInit+0xc0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d142      	bne.n	8002162 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fc83 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80020f8:	f7ff ffa6 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 80020fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 800210e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_FDCAN_MspInit+0xc4>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002150:	2309      	movs	r3, #9
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002156:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_FDCAN_MspInit+0xc8>)
 800215e:	f001 f917 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	37e0      	adds	r7, #224	; 0xe0
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	4000a000 	.word	0x4000a000
 8002170:	58024400 	.word	0x58024400
 8002174:	58020c00 	.word	0x58020c00

08002178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0b8      	sub	sp, #224	; 0xe0
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	22bc      	movs	r2, #188	; 0xbc
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f006 ff93 	bl	80090c4 <memset>
  if(hi2c->Instance==I2C4)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2e      	ldr	r2, [pc, #184]	; (800225c <HAL_I2C_MspInit+0xe4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d154      	bne.n	8002252 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80021a8:	2310      	movs	r3, #16
 80021aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80021ac:	2304      	movs	r3, #4
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 80021b0:	2378      	movs	r3, #120	; 0x78
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 80021bc:	230c      	movs	r3, #12
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80021c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 80021ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fc0c 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 80021e6:	f7ff ff2f 	bl	8002048 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 80021f2:	f043 0320 	orr.w	r3, r3, #32
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002208:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800220c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002210:	2312      	movs	r3, #18
 8002212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002222:	2304      	movs	r3, #4
 8002224:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002228:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222c:	4619      	mov	r1, r3
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002230:	f001 f8ae 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 8002236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 8002246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	37e0      	adds	r7, #224	; 0xe0
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	58001c00 	.word	0x58001c00
 8002260:	58024400 	.word	0x58024400
 8002264:	58021400 	.word	0x58021400

08002268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b8      	sub	sp, #224	; 0xe0
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	22bc      	movs	r2, #188	; 0xbc
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f006 ff1b 	bl	80090c4 <memset>
  if(hspi->Instance==SPI5)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_SPI_MspInit+0xc0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d143      	bne.n	8002320 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 800229e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80022a2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fba5 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80022b4:	f7ff fec8 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022de:	f043 0320 	orr.w	r3, r3, #32
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_SPI_MspInit+0xc4>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022f4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800230e:	2305      	movs	r3, #5
 8002310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002314:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002318:	4619      	mov	r1, r3
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_SPI_MspInit+0xc8>)
 800231c:	f001 f838 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	37e0      	adds	r7, #224	; 0xe0
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40015000 	.word	0x40015000
 800232c:	58024400 	.word	0x58024400
 8002330:	58021400 	.word	0x58021400

08002334 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_TIM_PWM_MspInit+0x3c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_TIM_PWM_MspInit+0x40>)
 8002348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_TIM_PWM_MspInit+0x40>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_TIM_PWM_MspInit+0x40>)
 8002358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40014000 	.word	0x40014000
 8002374:	58024400 	.word	0x58024400

08002378 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_TIM_MspPostInit+0x68>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11e      	bne.n	80023d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023b8:	2320      	movs	r3, #32
 80023ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80023c8:	2304      	movs	r3, #4
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_TIM_MspPostInit+0x70>)
 80023d4:	f000 ffdc 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40014000 	.word	0x40014000
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58021000 	.word	0x58021000

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b8      	sub	sp, #224	; 0xe0
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	22bc      	movs	r2, #188	; 0xbc
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f006 fe59 	bl	80090c4 <memset>
  if(huart->Instance==USART3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_UART_MspInit+0xc0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d142      	bne.n	80024a2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fae4 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff fe07 	bl	8002048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800247a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002490:	2307      	movs	r3, #7
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 800249e:	f000 ff77 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	37e0      	adds	r7, #224	; 0xe0
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40004800 	.word	0x40004800
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020c00 	.word	0x58020c00

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f964 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_kill>:

int _kill(int pid, int sig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002526:	f006 fd95 	bl	8009054 <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2216      	movs	r2, #22
 800252e:	601a      	str	r2, [r3, #0]
	return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_exit>:

void _exit (int status)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ffe7 	bl	800251c <_kill>
	while (1) {}		/* Make sure we hang here */
 800254e:	e7fe      	b.n	800254e <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
	}

return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fd55 	bl	8002054 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
	}
	return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f006 fcfa 	bl	8009054 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	24080000 	.word	0x24080000
 800268c:	00000400 	.word	0x00000400
 8002690:	24000614 	.word	0x24000614
 8002694:	24000630 	.word	0x24000630

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800269c:	f7fd fffa 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	; (80026d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	; (80026e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026c6:	f006 fccb 	bl	8009060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7ff f851 	bl	8001770 <main>
  bx  lr
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026d8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80026dc:	0800c74c 	.word	0x0800c74c
  ldr r2, =_sbss
 80026e0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80026e4:	2400062c 	.word	0x2400062c

080026e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC3_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f2:	2003      	movs	r0, #3
 80026f4:	f000 f96e 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f8:	f001 ffa8 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_Init+0x68>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_Init+0x6c>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_Init+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_Init+0x6c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_Init+0x70>)
 800272e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_Init+0x74>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002736:	200f      	movs	r0, #15
 8002738:	f000 f814 	bl	8002764 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e002      	b.n	800274c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002746:	f7ff fc97 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	0800c31c 	.word	0x0800c31c
 800275c:	24000004 	.word	0x24000004
 8002760:	24000000 	.word	0x24000000

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_InitTick+0x60>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e021      	b.n	80027bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_InitTick+0x64>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_InitTick+0x60>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f945 	bl	8002a1e <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f000 f91d 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x68>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	24000014 	.word	0x24000014
 80027c8:	24000000 	.word	0x24000000
 80027cc:	24000010 	.word	0x24000010

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	24000014 	.word	0x24000014
 80027f4:	24000618 	.word	0x24000618

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	24000618 	.word	0x24000618

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff ffee 	bl	80027f8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffde 	bl	80027f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	24000014 	.word	0x24000014

08002858 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetREVID+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0c1b      	lsrs	r3, r3, #16
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	5c001000 	.word	0x5c001000

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x40>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	05fa0000 	.word	0x05fa0000

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f7ff ff8e 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff47 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff5e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff90 	bl	8002928 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5f 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffb2 	bl	8002990 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b098      	sub	sp, #96	; 0x60
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002a40:	4a84      	ldr	r2, [pc, #528]	; (8002c54 <HAL_FDCAN_Init+0x21c>)
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4611      	mov	r1, r2
 8002a48:	224c      	movs	r2, #76	; 0x4c
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f006 fb2c 	bl	80090a8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c6      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_FDCAN_Init+0x220>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d106      	bne.n	8002a72 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fb10 	bl	80020ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0210 	bic.w	r2, r2, #16
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9c:	f7ff feac 	bl	80027f8 <HAL_GetTick>
 8002aa0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aa2:	e014      	b.n	8002ace <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002aa4:	f7ff fea8 	bl	80027f8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b0a      	cmp	r3, #10
 8002ab0:	d90d      	bls.n	8002ace <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e18c      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d0e3      	beq.n	8002aa4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7ff fe84 	bl	80027f8 <HAL_GetTick>
 8002af0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002af2:	e014      	b.n	8002b1e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002af4:	f7ff fe80 	bl	80027f8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d90d      	bls.n	8002b1e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e164      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0e3      	beq.n	8002af4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0202 	orr.w	r2, r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c1b      	ldrb	r3, [r3, #16]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	e007      	b.n	8002b66 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7c5b      	ldrb	r3, [r3, #17]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	e007      	b.n	8002b90 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7c9b      	ldrb	r3, [r3, #18]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	619a      	str	r2, [r3, #24]
 8002ba8:	e007      	b.n	8002bba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bb8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bde:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0210 	bic.w	r2, r2, #16
 8002bee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d108      	bne.n	8002c0a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0204 	orr.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
 8002c08:	e030      	b.n	8002c6c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02c      	beq.n	8002c6c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d020      	beq.n	8002c5c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c28:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0210 	orr.w	r2, r2, #16
 8002c38:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d114      	bne.n	8002c6c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	e00b      	b.n	8002c6c <HAL_FDCAN_Init+0x234>
 8002c54:	0800c2d0 	.word	0x0800c2d0
 8002c58:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c7c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c94:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c96:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca0:	d115      	bne.n	8002cce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	3b01      	subs	r3, #1
 8002cae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cb0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002cca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ccc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	4413      	add	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d02:	f023 0107 	bic.w	r1, r3, #7
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	443b      	add	r3, r7
 8002d10:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d2e:	f023 0107 	bic.w	r1, r3, #7
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	443b      	add	r3, r7
 8002d3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d5a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	443b      	add	r3, r7
 8002d68:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d6c:	011a      	lsls	r2, r3, #4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d88:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	443b      	add	r3, r7
 8002d96:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <HAL_FDCAN_Init+0x3b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d107      	bne.n	8002dc0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f022 0203 	bic.w	r2, r2, #3
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f953 	bl	8003084 <FDCAN_CalcultateRamBlockAddresses>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002de4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3760      	adds	r7, #96	; 0x60
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	4000a000 	.word	0x4000a000

08002df4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e04:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <HAL_FDCAN_ConfigFilter+0x1e>
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d157      	bne.n	8002ec2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d12b      	bne.n	8002e72 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b07      	cmp	r3, #7
 8002e20:	d10d      	bne.n	8002e3e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e2e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e34:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002e36:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00e      	b.n	8002e5c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e4a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002e52:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e025      	b.n	8002ebe <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	075a      	lsls	r2, r3, #29
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b07      	cmp	r3, #7
 8002e86:	d103      	bne.n	8002e90 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e006      	b.n	8002e9e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	079a      	lsls	r2, r3, #30
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e008      	b.n	8002ed4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ec8:	f043 0202 	orr.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d110      	bne.n	8002f1c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f02:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e008      	b.n	8002f2e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f22:	f043 0204 	orr.w	r2, r3, #4
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d111      	bne.n	8002f72 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e008      	b.n	8002f84 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002fa2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d002      	beq.n	8002fb0 <HAL_FDCAN_ActivateNotification+0x20>
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d155      	bne.n	800305c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fce:	e014      	b.n	8002ffa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d108      	bne.n	8002ff2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0202 	orr.w	r2, r2, #2
 8002fee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff0:	e003      	b.n	8002ffa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	430a      	orrs	r2, r1
 8003014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	430a      	orrs	r2, r1
 8003032:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_FDCAN_ActivateNotification+0xec>)
 8003040:	4013      	ands	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	430b      	orrs	r3, r1
 8003048:	6553      	str	r3, [r2, #84]	; 0x54
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_FDCAN_ActivateNotification+0xf0>)
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	0f9b      	lsrs	r3, r3, #30
 8003052:	490b      	ldr	r1, [pc, #44]	; (8003080 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e008      	b.n	800306e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	3fcfffff 	.word	0x3fcfffff
 8003080:	4000a800 	.word	0x4000a800

08003084 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800309a:	4ba7      	ldr	r3, [pc, #668]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	0091      	lsls	r1, r2, #2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030da:	4b97      	ldr	r3, [pc, #604]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	0091      	lsls	r1, r2, #2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4413      	add	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800311c:	4b86      	ldr	r3, [pc, #536]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	0091      	lsls	r1, r2, #2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003136:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	041a      	lsls	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003164:	4b74      	ldr	r3, [pc, #464]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003166:	4013      	ands	r3, r2
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	0091      	lsls	r1, r2, #2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800317e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	041a      	lsls	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80031ac:	4b62      	ldr	r3, [pc, #392]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	0091      	lsls	r1, r2, #2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	0091      	lsls	r1, r2, #2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	041a      	lsls	r2, r3, #16
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4413      	add	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	0091      	lsls	r1, r2, #2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	430b      	orrs	r3, r1
 8003228:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003234:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	041a      	lsls	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003250:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	061a      	lsls	r2, r3, #24
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003268:	4b34      	ldr	r3, [pc, #208]	; (800333c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800326a:	4413      	add	r3, r2
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d915      	bls.n	8003360 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003334:	e006      	b.n	8003344 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003336:	bf00      	nop
 8003338:	ffff0003 	.word	0xffff0003
 800333c:	10002b00 	.word	0x10002b00
 8003340:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e010      	b.n	8003382 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e005      	b.n	8003374 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3304      	adds	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3f3      	bcc.n	8003368 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_GPIO_Init+0x234>)
 80033a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033a2:	e194      	b.n	80036ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8186 	beq.w	80036c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d005      	beq.n	80033d4 <HAL_GPIO_Init+0x44>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d130      	bne.n	8003436 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800340a:	2201      	movs	r2, #1
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0201 	and.w	r2, r3, #1
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b03      	cmp	r3, #3
 8003440:	d017      	beq.n	8003472 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d123      	bne.n	80034c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	220f      	movs	r2, #15
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	08da      	lsrs	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3208      	adds	r2, #8
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0203 	and.w	r2, r3, #3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80e0 	beq.w	80036c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_GPIO_Init+0x238>)
 800350a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800350e:	4a2e      	ldr	r2, [pc, #184]	; (80035c8 <HAL_GPIO_Init+0x238>)
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_GPIO_Init+0x238>)
 800351a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003526:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_GPIO_Init+0x23c>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <HAL_GPIO_Init+0x240>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d052      	beq.n	80035f8 <HAL_GPIO_Init+0x268>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_GPIO_Init+0x244>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_GPIO_Init+0x22e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1e      	ldr	r2, [pc, #120]	; (80035d8 <HAL_GPIO_Init+0x248>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <HAL_GPIO_Init+0x22a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_GPIO_Init+0x24c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_GPIO_Init+0x250>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_GPIO_Init+0x254>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_GPIO_Init+0x258>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a19      	ldr	r2, [pc, #100]	; (80035ec <HAL_GPIO_Init+0x25c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_GPIO_Init+0x260>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_GPIO_Init+0x264>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x20e>
 800359a:	2309      	movs	r3, #9
 800359c:	e02d      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 800359e:	230a      	movs	r3, #10
 80035a0:	e02b      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035a2:	2308      	movs	r3, #8
 80035a4:	e029      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e027      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e025      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e023      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e021      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035b6:	2303      	movs	r3, #3
 80035b8:	e01f      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e01d      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035be:	2301      	movs	r3, #1
 80035c0:	e01b      	b.n	80035fa <HAL_GPIO_Init+0x26a>
 80035c2:	bf00      	nop
 80035c4:	58000080 	.word	0x58000080
 80035c8:	58024400 	.word	0x58024400
 80035cc:	58000400 	.word	0x58000400
 80035d0:	58020000 	.word	0x58020000
 80035d4:	58020400 	.word	0x58020400
 80035d8:	58020800 	.word	0x58020800
 80035dc:	58020c00 	.word	0x58020c00
 80035e0:	58021000 	.word	0x58021000
 80035e4:	58021400 	.word	0x58021400
 80035e8:	58021800 	.word	0x58021800
 80035ec:	58021c00 	.word	0x58021c00
 80035f0:	58022000 	.word	0x58022000
 80035f4:	58022400 	.word	0x58022400
 80035f8:	2300      	movs	r3, #0
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f002 0203 	and.w	r2, r2, #3
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	4093      	lsls	r3, r2
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800360a:	4938      	ldr	r1, [pc, #224]	; (80036ec <HAL_GPIO_Init+0x35c>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800366c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3301      	adds	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f ae63 	bne.w	80033a4 <HAL_GPIO_Init+0x14>
  }
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	3724      	adds	r7, #36	; 0x24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	58000400 	.word	0x58000400

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_HSEM_FastTake+0x2c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3320      	adds	r3, #32
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_HSEM_FastTake+0x30>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	58026400 	.word	0x58026400
 8003754:	80000300 	.word	0x80000300

08003758 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003762:	4906      	ldr	r1, [pc, #24]	; (800377c <HAL_HSEM_Release+0x24>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	58026400 	.word	0x58026400

08003780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fe fce6 	bl	8002178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	e006      	b.n	8003808 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003806:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d104      	bne.n	800381a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_I2C_Init+0x11c>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003838:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1a      	ldr	r2, [r3, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	02008000 	.word	0x02008000

080038a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d138      	bne.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e032      	b.n	800392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b20      	cmp	r3, #32
 800394a:	d139      	bne.n	80039c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003956:	2302      	movs	r3, #2
 8003958:	e033      	b.n	80039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d00a      	beq.n	80039fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e03e      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a02:	491f      	ldr	r1, [pc, #124]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a0a:	f7fe fef5 	bl	80027f8 <HAL_GetTick>
 8003a0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a10:	e009      	b.n	8003a26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a12:	f7fe fef1 	bl	80027f8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a20:	d901      	bls.n	8003a26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e028      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d1ee      	bne.n	8003a12 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b1e      	cmp	r3, #30
 8003a38:	d008      	beq.n	8003a4c <HAL_PWREx_ConfigSupply+0x7c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a3e:	d005      	beq.n	8003a4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b1d      	cmp	r3, #29
 8003a44:	d002      	beq.n	8003a4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b2d      	cmp	r3, #45	; 0x2d
 8003a4a:	d114      	bne.n	8003a76 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a4c:	f7fe fed4 	bl	80027f8 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a54:	f7fe fed0 	bl	80027f8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	58024800 	.word	0x58024800

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f000 bc1d 	b.w	80042d2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8087 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa6:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab0:	4b96      	ldr	r3, [pc, #600]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d007      	beq.n	8003acc <HAL_RCC_OscConfig+0x48>
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b18      	cmp	r3, #24
 8003ac0:	d110      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x60>
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b8f      	ldr	r3, [pc, #572]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d06c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x12e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d168      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e3f6      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x78>
 8003aee:	4b87      	ldr	r3, [pc, #540]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a86      	ldr	r2, [pc, #536]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e02e      	b.n	8003b5a <HAL_RCC_OscConfig+0xd6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x9a>
 8003b04:	4b81      	ldr	r3, [pc, #516]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a80      	ldr	r2, [pc, #512]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b7e      	ldr	r3, [pc, #504]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e01d      	b.n	8003b5a <HAL_RCC_OscConfig+0xd6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0xbe>
 8003b28:	4b78      	ldr	r3, [pc, #480]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b75      	ldr	r3, [pc, #468]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a74      	ldr	r2, [pc, #464]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0xd6>
 8003b42:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a71      	ldr	r2, [pc, #452]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6e      	ldr	r2, [pc, #440]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fe49 	bl	80027f8 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fe45 	bl	80027f8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e3aa      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b7c:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0xe6>
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fe35 	bl	80027f8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b92:	f7fe fe31 	bl	80027f8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e396      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ba4:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x10e>
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80cb 	beq.w	8003d58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc2:	4b52      	ldr	r3, [pc, #328]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_RCC_OscConfig+0x164>
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b18      	cmp	r3, #24
 8003bdc:	d156      	bne.n	8003c8c <HAL_RCC_OscConfig+0x208>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d151      	bne.n	8003c8c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x17c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e368      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c00:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 0219 	bic.w	r2, r3, #25
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	493f      	ldr	r1, [pc, #252]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c12:	f7fe fdf1 	bl	80027f8 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fded 	bl	80027f8 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e352      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	f7fe fe0e 	bl	8002858 <HAL_GetREVID>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d817      	bhi.n	8003c76 <HAL_RCC_OscConfig+0x1f2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x1dc>
 8003c4e:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c56:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c5e:	e07b      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	031b      	lsls	r3, r3, #12
 8003c6e:	4927      	ldr	r1, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c74:	e070      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	4921      	ldr	r1, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8a:	e065      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d048      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 0219 	bic.w	r2, r3, #25
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	491a      	ldr	r1, [pc, #104]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fda7 	bl	80027f8 <HAL_GetTick>
 8003caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe fda3 	bl	80027f8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e308      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	f7fe fdc4 	bl	8002858 <HAL_GetREVID>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d81a      	bhi.n	8003d10 <HAL_RCC_OscConfig+0x28c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x270>
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf0:	6053      	str	r3, [r2, #4]
 8003cf2:	e031      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	031b      	lsls	r3, r3, #12
 8003d02:	4902      	ldr	r1, [pc, #8]	; (8003d0c <HAL_RCC_OscConfig+0x288>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	e026      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	4b9a      	ldr	r3, [pc, #616]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4997      	ldr	r1, [pc, #604]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	e018      	b.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b95      	ldr	r3, [pc, #596]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a94      	ldr	r2, [pc, #592]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fe fd61 	bl	80027f8 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fd5d 	bl	80027f8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e2c2      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d4c:	4b8b      	ldr	r3, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a9 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d007      	beq.n	8003d8c <HAL_RCC_OscConfig+0x308>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b18      	cmp	r3, #24
 8003d80:	d13a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x374>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d135      	bne.n	8003df8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_OscConfig+0x320>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e296      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003da4:	f7fe fd58 	bl	8002858 <HAL_GetREVID>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d817      	bhi.n	8003de2 <HAL_RCC_OscConfig+0x35e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x348>
 8003dba:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dca:	e075      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dcc:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	069b      	lsls	r3, r3, #26
 8003dda:	4968      	ldr	r1, [pc, #416]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003de0:	e06a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003de2:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	4962      	ldr	r1, [pc, #392]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003df6:	e05f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d042      	beq.n	8003e86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5d      	ldr	r2, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fcf4 	bl	80027f8 <HAL_GetTick>
 8003e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e14:	f7fe fcf0 	bl	80027f8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e255      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e26:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e32:	f7fe fd11 	bl	8002858 <HAL_GetREVID>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d817      	bhi.n	8003e70 <HAL_RCC_OscConfig+0x3ec>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d108      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3d6>
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e50:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	6053      	str	r3, [r2, #4]
 8003e58:	e02e      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	4944      	ldr	r1, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	e023      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
 8003e70:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	493f      	ldr	r1, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
 8003e84:	e018      	b.n	8003eb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3c      	ldr	r2, [pc, #240]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe fcb1 	bl	80027f8 <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e9a:	f7fe fcad 	bl	80027f8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e212      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d036      	beq.n	8003f32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d019      	beq.n	8003f00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fc8e 	bl	80027f8 <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7fe fc8a 	bl	80027f8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1ef      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x45c>
 8003efe:	e018      	b.n	8003f32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fc74 	bl	80027f8 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fe fc70 	bl	80027f8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1d5      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d039      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f52:	f7fe fc51 	bl	80027f8 <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f5a:	f7fe fc4d 	bl	80027f8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1b2      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x4d6>
 8003f78:	e01b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f80:	4b9b      	ldr	r3, [pc, #620]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a9a      	ldr	r2, [pc, #616]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8003f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f8c:	f7fe fc34 	bl	80027f8 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f94:	f7fe fc30 	bl	80027f8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e195      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fa6:	4b92      	ldr	r3, [pc, #584]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8081 	beq.w	80040c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fc0:	4b8c      	ldr	r3, [pc, #560]	; (80041f4 <HAL_RCC_OscConfig+0x770>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a8b      	ldr	r2, [pc, #556]	; (80041f4 <HAL_RCC_OscConfig+0x770>)
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe fc14 	bl	80027f8 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fd4:	f7fe fc10 	bl	80027f8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e175      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe6:	4b83      	ldr	r3, [pc, #524]	; (80041f4 <HAL_RCC_OscConfig+0x770>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x584>
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a7c      	ldr	r2, [pc, #496]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	e02d      	b.n	8004064 <HAL_RCC_OscConfig+0x5e0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x5a6>
 8004010:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a76      	ldr	r2, [pc, #472]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a73      	ldr	r2, [pc, #460]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004022:	f023 0304 	bic.w	r3, r3, #4
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	e01c      	b.n	8004064 <HAL_RCC_OscConfig+0x5e0>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x5c8>
 8004032:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	4a6e      	ldr	r2, [pc, #440]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	6713      	str	r3, [r2, #112]	; 0x70
 800403e:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a6b      	ldr	r2, [pc, #428]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0x5e0>
 800404c:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a67      	ldr	r2, [pc, #412]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
 8004058:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a64      	ldr	r2, [pc, #400]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d015      	beq.n	8004098 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fe fbc4 	bl	80027f8 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004072:	e00a      	b.n	800408a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fe fbc0 	bl	80027f8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e123      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800408a:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ee      	beq.n	8004074 <HAL_RCC_OscConfig+0x5f0>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fe fbae 	bl	80027f8 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fe fbaa 	bl	80027f8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e10d      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040b6:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ee      	bne.n	80040a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8102 	beq.w	80042d0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040cc:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	f000 80bd 	beq.w	8004254 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b02      	cmp	r3, #2
 80040e0:	f040 809e 	bne.w	8004220 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a41      	ldr	r2, [pc, #260]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fb82 	bl	80027f8 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fb7e 	bl	80027f8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0e3      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x774>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004126:	0112      	lsls	r2, r2, #4
 8004128:	430a      	orrs	r2, r1
 800412a:	4931      	ldr	r1, [pc, #196]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	628b      	str	r3, [r1, #40]	; 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	3b01      	subs	r3, #1
 8004136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	3b01      	subs	r3, #1
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	b29b      	uxth	r3, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	3b01      	subs	r3, #1
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004160:	4923      	ldr	r1, [pc, #140]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004176:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCC_OscConfig+0x778>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800417e:	00d2      	lsls	r2, r2, #3
 8004180:	491b      	ldr	r1, [pc, #108]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f023 020c 	bic.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4917      	ldr	r1, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	f023 0202 	bic.w	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	4912      	ldr	r1, [pc, #72]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041aa:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_RCC_OscConfig+0x76c>)
 80041e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fb07 	bl	80027f8 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ec:	e011      	b.n	8004212 <HAL_RCC_OscConfig+0x78e>
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	58024800 	.word	0x58024800
 80041f8:	fffffc0c 	.word	0xfffffc0c
 80041fc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fe fafa 	bl	80027f8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e05f      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x77c>
 800421e:	e057      	b.n	80042d0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fae4 	bl	80027f8 <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fe fae0 	bl	80027f8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e045      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004246:	4b25      	ldr	r3, [pc, #148]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x7b0>
 8004252:	e03d      	b.n	80042d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_OscConfig+0x858>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d031      	beq.n	80042cc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 0203 	and.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d12a      	bne.n	80042cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d122      	bne.n	80042cc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d11a      	bne.n	80042cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0a5b      	lsrs	r3, r3, #9
 800429a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d111      	bne.n	80042cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d108      	bne.n	80042cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0e1b      	lsrs	r3, r3, #24
 80042be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3730      	adds	r7, #48	; 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400

080042e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e19c      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b8a      	ldr	r3, [pc, #552]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b87      	ldr	r3, [pc, #540]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4985      	ldr	r1, [pc, #532]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b83      	ldr	r3, [pc, #524]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e184      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	4b7b      	ldr	r3, [pc, #492]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433c:	429a      	cmp	r2, r3
 800433e:	d908      	bls.n	8004352 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004340:	4b78      	ldr	r3, [pc, #480]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4975      	ldr	r1, [pc, #468]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 800434e:	4313      	orrs	r3, r2
 8004350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b70      	ldr	r3, [pc, #448]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436a:	429a      	cmp	r2, r3
 800436c:	d908      	bls.n	8004380 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	496a      	ldr	r1, [pc, #424]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	4b64      	ldr	r3, [pc, #400]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004398:	429a      	cmp	r2, r3
 800439a:	d908      	bls.n	80043ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	495e      	ldr	r1, [pc, #376]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d908      	bls.n	80043dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ca:	4b56      	ldr	r3, [pc, #344]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4953      	ldr	r1, [pc, #332]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d908      	bls.n	800440a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f023 020f 	bic.w	r2, r3, #15
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4947      	ldr	r1, [pc, #284]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004406:	4313      	orrs	r3, r2
 8004408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d055      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004416:	4b43      	ldr	r3, [pc, #268]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4940      	ldr	r1, [pc, #256]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004424:	4313      	orrs	r3, r2
 8004426:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d107      	bne.n	8004440 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004430:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d121      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0f6      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d107      	bne.n	8004458 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d115      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0ea      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0de      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0d6      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f023 0207 	bic.w	r2, r3, #7
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4925      	ldr	r1, [pc, #148]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 800448e:	4313      	orrs	r3, r2
 8004490:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004492:	f7fe f9b1 	bl	80027f8 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449a:	f7fe f9ad 	bl	80027f8 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0be      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	429a      	cmp	r2, r3
 80044c0:	d1eb      	bne.n	800449a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	429a      	cmp	r2, r3
 80044dc:	d208      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	490e      	ldr	r1, [pc, #56]	; (8004524 <HAL_RCC_ClockConfig+0x244>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d214      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 020f 	bic.w	r2, r3, #15
 8004506:	4906      	ldr	r1, [pc, #24]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_RCC_ClockConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e086      	b.n	800462e <HAL_RCC_ClockConfig+0x34e>
 8004520:	52002000 	.word	0x52002000
 8004524:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004540:	429a      	cmp	r2, r3
 8004542:	d208      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4939      	ldr	r1, [pc, #228]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800456e:	429a      	cmp	r2, r3
 8004570:	d208      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	492e      	ldr	r1, [pc, #184]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004580:	4313      	orrs	r3, r2
 8004582:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459c:	429a      	cmp	r2, r3
 800459e:	d208      	bcs.n	80045b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4922      	ldr	r1, [pc, #136]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d208      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4917      	ldr	r1, [pc, #92]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045e0:	f000 f834 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	4912      	ldr	r1, [pc, #72]	; (800463c <HAL_RCC_ClockConfig+0x35c>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <HAL_RCC_ClockConfig+0x358>)
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	4a0d      	ldr	r2, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x35c>)
 8004608:	5cd3      	ldrb	r3, [r2, r3]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x360>)
 8004616:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004618:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x364>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x368>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe f89e 	bl	8002764 <HAL_InitTick>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
 800463c:	0800c31c 	.word	0x0800c31c
 8004640:	24000004 	.word	0x24000004
 8004644:	24000000 	.word	0x24000000
 8004648:	24000010 	.word	0x24000010

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004652:	4bb3      	ldr	r3, [pc, #716]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465a:	2b18      	cmp	r3, #24
 800465c:	f200 8155 	bhi.w	800490a <HAL_RCC_GetSysClockFreq+0x2be>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	080046cd 	.word	0x080046cd
 800466c:	0800490b 	.word	0x0800490b
 8004670:	0800490b 	.word	0x0800490b
 8004674:	0800490b 	.word	0x0800490b
 8004678:	0800490b 	.word	0x0800490b
 800467c:	0800490b 	.word	0x0800490b
 8004680:	0800490b 	.word	0x0800490b
 8004684:	0800490b 	.word	0x0800490b
 8004688:	080046f3 	.word	0x080046f3
 800468c:	0800490b 	.word	0x0800490b
 8004690:	0800490b 	.word	0x0800490b
 8004694:	0800490b 	.word	0x0800490b
 8004698:	0800490b 	.word	0x0800490b
 800469c:	0800490b 	.word	0x0800490b
 80046a0:	0800490b 	.word	0x0800490b
 80046a4:	0800490b 	.word	0x0800490b
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	0800490b 	.word	0x0800490b
 80046b0:	0800490b 	.word	0x0800490b
 80046b4:	0800490b 	.word	0x0800490b
 80046b8:	0800490b 	.word	0x0800490b
 80046bc:	0800490b 	.word	0x0800490b
 80046c0:	0800490b 	.word	0x0800490b
 80046c4:	0800490b 	.word	0x0800490b
 80046c8:	080046ff 	.word	0x080046ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046cc:	4b94      	ldr	r3, [pc, #592]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046d8:	4b91      	ldr	r3, [pc, #580]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	4a90      	ldr	r2, [pc, #576]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046ea:	e111      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046ec:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046ee:	61bb      	str	r3, [r7, #24]
    break;
 80046f0:	e10e      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046f2:	4b8d      	ldr	r3, [pc, #564]	; (8004928 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046f4:	61bb      	str	r3, [r7, #24]
    break;
 80046f6:	e10b      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046f8:	4b8c      	ldr	r3, [pc, #560]	; (800492c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046fa:	61bb      	str	r3, [r7, #24]
    break;
 80046fc:	e108      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046fe:	4b88      	ldr	r3, [pc, #544]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004708:	4b85      	ldr	r3, [pc, #532]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004712:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004714:	4b82      	ldr	r3, [pc, #520]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800471e:	4b80      	ldr	r3, [pc, #512]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	08db      	lsrs	r3, r3, #3
 8004724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80e1 	beq.w	8004904 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b02      	cmp	r3, #2
 8004746:	f000 8083 	beq.w	8004850 <HAL_RCC_GetSysClockFreq+0x204>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b02      	cmp	r3, #2
 800474e:	f200 80a1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x248>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x114>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d056      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x1c0>
 800475e:	e099      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004760:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02d      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800476c:	4b6c      	ldr	r3, [pc, #432]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b62      	ldr	r3, [pc, #392]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047c6:	e087      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004934 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b51      	ldr	r3, [pc, #324]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480a:	e065      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004938 <HAL_RCC_GetSysClockFreq+0x2ec>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b40      	ldr	r3, [pc, #256]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004832:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e043      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800493c <HAL_RCC_GetSysClockFreq+0x2f0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a02 	vldr	s12, [r7, #8]
 8004876:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2e4>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004892:	e021      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004938 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	0a5b      	lsrs	r3, r3, #9
 80048de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e2:	3301      	adds	r3, #1
 80048e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fc:	ee17 3a90 	vmov	r3, s15
 8004900:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004902:	e005      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    break;
 8004908:	e002      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800490c:	61bb      	str	r3, [r7, #24]
    break;
 800490e:	bf00      	nop
  }

  return sysclockfreq;
 8004910:	69bb      	ldr	r3, [r7, #24]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	; 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	58024400 	.word	0x58024400
 8004924:	03d09000 	.word	0x03d09000
 8004928:	003d0900 	.word	0x003d0900
 800492c:	007a1200 	.word	0x007a1200
 8004930:	46000000 	.word	0x46000000
 8004934:	4c742400 	.word	0x4c742400
 8004938:	4a742400 	.word	0x4a742400
 800493c:	4af42400 	.word	0x4af42400

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004946:	f7ff fe81 	bl	800464c <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCC_GetHCLKFreq+0x50>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	490f      	ldr	r1, [pc, #60]	; (8004994 <HAL_RCC_GetHCLKFreq+0x54>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_GetHCLKFreq+0x50>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_GetHCLKFreq+0x54>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_RCC_GetHCLKFreq+0x58>)
 800497c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800497e:	4a07      	ldr	r2, [pc, #28]	; (800499c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <HAL_RCC_GetHCLKFreq+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	58024400 	.word	0x58024400
 8004994:	0800c31c 	.word	0x0800c31c
 8004998:	24000004 	.word	0x24000004
 800499c:	24000000 	.word	0x24000000

080049a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049a4:	f7ff ffcc 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4904      	ldr	r1, [pc, #16]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	58024400 	.word	0x58024400
 80049c8:	0800c31c 	.word	0x0800c31c

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049d0:	f7ff ffb6 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4904      	ldr	r1, [pc, #16]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	58024400 	.word	0x58024400
 80049f4:	0800c31c 	.word	0x0800c31c

080049f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a04:	2300      	movs	r3, #0
 8004a06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03f      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a1c:	d02a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a22:	d824      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a28:	d018      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a2e:	d81e      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a38:	d007      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a3a:	e018      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3c:	4ba3      	ldr	r3, [pc, #652]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4aa2      	ldr	r2, [pc, #648]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a48:	e015      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2102      	movs	r1, #2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f9d5 	bl	8005e00 <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a5a:	e00c      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fa7e 	bl	8005f64 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a7c:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a88:	4990      	ldr	r1, [pc, #576]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a8e:	e001      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03d      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d826      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac5 	.word	0x08004ac5
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afd 	.word	0x08004afd
 8004ac0:	08004afd 	.word	0x08004afd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac4:	4b81      	ldr	r3, [pc, #516]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	4a80      	ldr	r2, [pc, #512]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ad0:	e015      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 f991 	bl	8005e00 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae2:	e00c      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fa3a 	bl	8005f64 <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b04:	4b71      	ldr	r3, [pc, #452]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	496e      	ldr	r1, [pc, #440]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	650b      	str	r3, [r1, #80]	; 0x50
 8004b16:	e001      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d042      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b30:	d02b      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d825      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b38:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3a:	d028      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b3c:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3e:	d821      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d016      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d81d      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d007      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b50:	e018      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a5d      	ldr	r2, [pc, #372]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b5e:	e017      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f94a 	bl	8005e00 <RCCEx_PLL2_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b70:	e00e      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3324      	adds	r3, #36	; 0x24
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 f9f3 	bl	8005f64 <RCCEx_PLL3_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	75fb      	strb	r3, [r7, #23]
      break;
 8004b88:	e002      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b96:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	494a      	ldr	r1, [pc, #296]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d049      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bc4:	d030      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bca:	d82a      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bd0:	d02c      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bd6:	d824      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d018      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d81e      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bec:	d007      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004bee:	e018      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bfc:	e017      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 f8fb 	bl	8005e00 <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c0e:	e00e      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f9a4 	bl	8005f64 <RCCEx_PLL3_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c20:	e005      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c42:	4922      	ldr	r1, [pc, #136]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	658b      	str	r3, [r1, #88]	; 0x58
 8004c48:	e001      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04b      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c64:	d030      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c6a:	d82a      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c70:	d02e      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004c72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c76:	d824      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7c:	d018      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c82:	d81e      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c8c:	d007      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004c8e:	e018      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c9c:	e019      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 f8ab 	bl	8005e00 <RCCEx_PLL2_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cae:	e010      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3324      	adds	r3, #36	; 0x24
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f954 	bl	8005f64 <RCCEx_PLL3_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc0:	e007      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e002      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ccc:	58024400 	.word	0x58024400
      break;
 8004cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cd8:	4b99      	ldr	r3, [pc, #612]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ce6:	4996      	ldr	r1, [pc, #600]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	658b      	str	r3, [r1, #88]	; 0x58
 8004cec:	e001      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d032      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d01c      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	d817      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d00c      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d813      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d10f      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1a:	4b89      	ldr	r3, [pc, #548]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	4a88      	ldr	r2, [pc, #544]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d26:	e00e      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f866 	bl	8005e00 <RCCEx_PLL2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d38:	e005      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	e002      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d4c:	4b7c      	ldr	r3, [pc, #496]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	4979      	ldr	r1, [pc, #484]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d5e:	e001      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d047      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d78:	d030      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d7e:	d82a      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d84:	d02c      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d8a:	d824      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d90:	d018      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d96:	d81e      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d007      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004da2:	e018      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4b66      	ldr	r3, [pc, #408]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a65      	ldr	r2, [pc, #404]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004db0:	e017      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f821 	bl	8005e00 <RCCEx_PLL2_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dc2:	e00e      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3324      	adds	r3, #36	; 0x24
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 f8ca 	bl	8005f64 <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dd4:	e005      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dda:	e002      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004de8:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	4952      	ldr	r1, [pc, #328]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	650b      	str	r3, [r1, #80]	; 0x50
 8004dfa:	e001      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d049      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e14:	d02e      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1a:	d828      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e20:	d02a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004e22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e26:	d822      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e2c:	d026      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004e2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e32:	d81c      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e38:	d010      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e3e:	d816      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d111      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 ffd5 	bl	8005e00 <RCCEx_PLL2_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e012      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3324      	adds	r3, #36	; 0x24
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f87e 	bl	8005f64 <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e6c:	e009      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
      break;
 8004e72:	e006      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e74:	bf00      	nop
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e88:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e94:	492a      	ldr	r1, [pc, #168]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	650b      	str	r3, [r1, #80]	; 0x50
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d04d      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb6:	d02e      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ebc:	d828      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d02a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d822      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ece:	d026      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ed0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ed4:	d81c      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eda:	d010      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee0:	d816      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01d      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eea:	d111      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 ff84 	bl	8005e00 <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004efc:	e012      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f82d 	bl	8005f64 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f0e:	e009      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
      break;
 8004f14:	e006      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f38:	4901      	ldr	r1, [pc, #4]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02f      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5c:	d00e      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f62:	d814      	bhi.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d015      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6c:	d10f      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6e:	4baf      	ldr	r3, [pc, #700]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	4aae      	ldr	r2, [pc, #696]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 ff3c 	bl	8005e00 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
      break;
 8004f92:	e000      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f9c:	4ba3      	ldr	r3, [pc, #652]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	49a0      	ldr	r1, [pc, #640]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	650b      	str	r3, [r1, #80]	; 0x50
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d032      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d81b      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08005007 	.word	0x08005007
 8004fd4:	08004fe1 	.word	0x08004fe1
 8004fd8:	08004fef 	.word	0x08004fef
 8004fdc:	08005007 	.word	0x08005007
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe0:	4b92      	ldr	r3, [pc, #584]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	4a91      	ldr	r2, [pc, #580]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004fec:	e00c      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 ff03 	bl	8005e00 <RCCEx_PLL2_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ffe:	e003      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]
      break;
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800500e:	4b87      	ldr	r3, [pc, #540]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	4984      	ldr	r1, [pc, #528]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800501c:	4313      	orrs	r3, r2
 800501e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005020:	e001      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	7dfb      	ldrb	r3, [r7, #23]
 8005024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8086 	beq.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005034:	4b7e      	ldr	r3, [pc, #504]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7d      	ldr	r2, [pc, #500]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800503a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005040:	f7fd fbda 	bl	80027f8 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005046:	e009      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005048:	f7fd fbd6 	bl	80027f8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d902      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	75fb      	strb	r3, [r7, #23]
        break;
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505c:	4b74      	ldr	r3, [pc, #464]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ef      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d166      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800506e:	4b6f      	ldr	r3, [pc, #444]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005078:	4053      	eors	r3, r2
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d013      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005082:	4b6a      	ldr	r3, [pc, #424]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800508c:	4b67      	ldr	r3, [pc, #412]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	4a66      	ldr	r2, [pc, #408]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005098:	4b64      	ldr	r3, [pc, #400]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4a63      	ldr	r2, [pc, #396]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050a4:	4a61      	ldr	r2, [pc, #388]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b4:	d115      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fd fb9f 	bl	80027f8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050bc:	e00b      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fd fb9b 	bl	80027f8 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d902      	bls.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	75fb      	strb	r3, [r7, #23]
            break;
 80050d4:	e005      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d6:	4b55      	ldr	r3, [pc, #340]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ed      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d126      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f6:	d10d      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80050f8:	4b4c      	ldr	r3, [pc, #304]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005106:	0919      	lsrs	r1, r3, #4
 8005108:	4b4a      	ldr	r3, [pc, #296]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800510a:	400b      	ands	r3, r1
 800510c:	4947      	ldr	r1, [pc, #284]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800510e:	4313      	orrs	r3, r2
 8005110:	610b      	str	r3, [r1, #16]
 8005112:	e005      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005114:	4b45      	ldr	r3, [pc, #276]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	4a44      	ldr	r2, [pc, #272]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800511a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800511e:	6113      	str	r3, [r2, #16]
 8005120:	4b42      	ldr	r3, [pc, #264]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512e:	493f      	ldr	r1, [pc, #252]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005130:	4313      	orrs	r3, r2
 8005132:	670b      	str	r3, [r1, #112]	; 0x70
 8005134:	e004      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	75bb      	strb	r3, [r7, #22]
 800513a:	e001      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8085 	beq.w	8005258 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005152:	2b28      	cmp	r3, #40	; 0x28
 8005154:	d866      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005239 	.word	0x08005239
 8005160:	08005225 	.word	0x08005225
 8005164:	08005225 	.word	0x08005225
 8005168:	08005225 	.word	0x08005225
 800516c:	08005225 	.word	0x08005225
 8005170:	08005225 	.word	0x08005225
 8005174:	08005225 	.word	0x08005225
 8005178:	08005225 	.word	0x08005225
 800517c:	08005201 	.word	0x08005201
 8005180:	08005225 	.word	0x08005225
 8005184:	08005225 	.word	0x08005225
 8005188:	08005225 	.word	0x08005225
 800518c:	08005225 	.word	0x08005225
 8005190:	08005225 	.word	0x08005225
 8005194:	08005225 	.word	0x08005225
 8005198:	08005225 	.word	0x08005225
 800519c:	08005213 	.word	0x08005213
 80051a0:	08005225 	.word	0x08005225
 80051a4:	08005225 	.word	0x08005225
 80051a8:	08005225 	.word	0x08005225
 80051ac:	08005225 	.word	0x08005225
 80051b0:	08005225 	.word	0x08005225
 80051b4:	08005225 	.word	0x08005225
 80051b8:	08005225 	.word	0x08005225
 80051bc:	08005239 	.word	0x08005239
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005225 	.word	0x08005225
 80051c8:	08005225 	.word	0x08005225
 80051cc:	08005225 	.word	0x08005225
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005225 	.word	0x08005225
 80051dc:	08005239 	.word	0x08005239
 80051e0:	08005225 	.word	0x08005225
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005225 	.word	0x08005225
 80051ec:	08005225 	.word	0x08005225
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005225 	.word	0x08005225
 80051f8:	08005225 	.word	0x08005225
 80051fc:	08005239 	.word	0x08005239
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	2101      	movs	r1, #1
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fdfa 	bl	8005e00 <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005210:	e013      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3324      	adds	r3, #36	; 0x24
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fea3 	bl	8005f64 <RCCEx_PLL3_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005222:	e00a      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	e007      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800522a:	bf00      	nop
 800522c:	58024400 	.word	0x58024400
 8005230:	58024800 	.word	0x58024800
 8005234:	00ffffcf 	.word	0x00ffffcf
      break;
 8005238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005240:	4b96      	ldr	r3, [pc, #600]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524c:	4993      	ldr	r1, [pc, #588]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	654b      	str	r3, [r1, #84]	; 0x54
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d038      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	2b05      	cmp	r3, #5
 800526a:	d821      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	080052b7 	.word	0x080052b7
 8005278:	0800528d 	.word	0x0800528d
 800527c:	0800529f 	.word	0x0800529f
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052b7 	.word	0x080052b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fdb4 	bl	8005e00 <RCCEx_PLL2_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	2101      	movs	r1, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fe5d 	bl	8005f64 <RCCEx_PLL3_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052ae:	e003      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
      break;
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052be:	4b77      	ldr	r3, [pc, #476]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	4974      	ldr	r1, [pc, #464]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	654b      	str	r3, [r1, #84]	; 0x54
 80052d0:	e001      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d03a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d821      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005337 	.word	0x08005337
 80052f8:	0800530d 	.word	0x0800530d
 80052fc:	0800531f 	.word	0x0800531f
 8005300:	08005337 	.word	0x08005337
 8005304:	08005337 	.word	0x08005337
 8005308:	08005337 	.word	0x08005337
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fd74 	bl	8005e00 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800531c:	e00c      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3324      	adds	r3, #36	; 0x24
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fe1d 	bl	8005f64 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800532e:	e003      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	e000      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800533e:	4b57      	ldr	r3, [pc, #348]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f023 0207 	bic.w	r2, r3, #7
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	4953      	ldr	r1, [pc, #332]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800534e:	4313      	orrs	r3, r2
 8005350:	658b      	str	r3, [r1, #88]	; 0x58
 8005352:	e001      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d04b      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800536e:	d02e      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005374:	d828      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d02a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d822      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005386:	d026      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005388:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800538c:	d81c      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005392:	d010      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005398:	d816      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01d      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800539e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053a2:	d111      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd28 	bl	8005e00 <RCCEx_PLL2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053b4:	e012      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3324      	adds	r3, #36	; 0x24
 80053ba:	2102      	movs	r1, #2
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fdd1 	bl	8005f64 <RCCEx_PLL3_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053c6:	e009      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
      break;
 80053cc:	e006      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053ce:	bf00      	nop
 80053d0:	e004      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80053da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053e2:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	492a      	ldr	r1, [pc, #168]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	654b      	str	r3, [r1, #84]	; 0x54
 80053f6:	e001      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d04d      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800540e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005412:	d02e      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005414:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005418:	d828      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d02a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d822      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800542a:	d026      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800542c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005430:	d81c      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	d010      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d816      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d01d      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005446:	d111      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fcd6 	bl	8005e00 <RCCEx_PLL2_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005458:	e012      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3324      	adds	r3, #36	; 0x24
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fd7f 	bl	8005f64 <RCCEx_PLL3_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800546a:	e009      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
      break;
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005472:	bf00      	nop
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005476:	bf00      	nop
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800547e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005494:	4901      	ldr	r1, [pc, #4]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	658b      	str	r3, [r1, #88]	; 0x58
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800549c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d04b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054ba:	d02e      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80054bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054c0:	d828      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d02a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80054c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054cc:	d822      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054d2:	d026      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80054d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054d8:	d81c      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054de:	d010      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80054e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e4:	d816      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01d      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d111      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc82 	bl	8005e00 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005500:	e012      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3324      	adds	r3, #36	; 0x24
 8005506:	2102      	movs	r1, #2
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fd2b 	bl	8005f64 <RCCEx_PLL3_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005512:	e009      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	e006      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800551a:	bf00      	nop
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800552e:	4b9d      	ldr	r3, [pc, #628]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800553c:	4999      	ldr	r1, [pc, #612]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800553e:	4313      	orrs	r3, r2
 8005540:	658b      	str	r3, [r1, #88]	; 0x58
 8005542:	e001      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	2102      	movs	r1, #2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fcfc 	bl	8005f64 <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005576:	4b8b      	ldr	r3, [pc, #556]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	4987      	ldr	r1, [pc, #540]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005586:	4313      	orrs	r3, r2
 8005588:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a0:	d10a      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3324      	adds	r3, #36	; 0x24
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fcdb 	bl	8005f64 <RCCEx_PLL3_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055b8:	4b7a      	ldr	r3, [pc, #488]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	4977      	ldr	r1, [pc, #476]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d034      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e2:	d01d      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80055e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e8:	d817      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f2:	d009      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80055f4:	e011      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fbff 	bl	8005e00 <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005606:	e00c      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	2102      	movs	r1, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fca8 	bl	8005f64 <RCCEx_PLL3_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
      break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005628:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005636:	495b      	ldr	r1, [pc, #364]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005638:	4313      	orrs	r3, r2
 800563a:	658b      	str	r3, [r1, #88]	; 0x58
 800563c:	e001      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d033      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005658:	d01c      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800565a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800565e:	d816      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566a:	d007      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800566c:	e00f      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566e:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	4a4c      	ldr	r2, [pc, #304]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800567a:	e00c      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3324      	adds	r3, #36	; 0x24
 8005680:	2101      	movs	r1, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc6e 	bl	8005f64 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
      break;
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056aa:	493e      	ldr	r1, [pc, #248]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	654b      	str	r3, [r1, #84]	; 0x54
 80056b0:	e001      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d029      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d007      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80056d0:	e00f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056de:	e00b      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	2102      	movs	r1, #2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fb8a 	bl	8005e00 <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
      break;
 80056f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	4926      	ldr	r1, [pc, #152]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800570c:	4313      	orrs	r3, r2
 800570e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005710:	e001      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3324      	adds	r3, #36	; 0x24
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fc1b 	bl	8005f64 <RCCEx_PLL3_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d033      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800574c:	d017      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800574e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005752:	d811      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005758:	d013      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575e:	d80b      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d106      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005776:	e007      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
      break;
 800577c:	e004      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800579a:	4902      	ldr	r1, [pc, #8]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800579c:	4313      	orrs	r3, r2
 800579e:	654b      	str	r3, [r1, #84]	; 0x54
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	492e      	ldr	r1, [pc, #184]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057e4:	4926      	ldr	r1, [pc, #152]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005802:	491f      	ldr	r1, [pc, #124]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005804:	4313      	orrs	r3, r2
 8005806:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800581a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800581e:	6113      	str	r3, [r2, #16]
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800582a:	4915      	ldr	r1, [pc, #84]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800582c:	4313      	orrs	r3, r2
 800582e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da08      	bge.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800583a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	490e      	ldr	r1, [pc, #56]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005846:	4313      	orrs	r3, r2
 8005848:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	4906      	ldr	r1, [pc, #24]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005866:	4313      	orrs	r3, r2
 8005868:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800586a:	7dbb      	ldrb	r3, [r7, #22]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400

08005884 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005888:	f7ff f85a 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	091b      	lsrs	r3, r3, #4
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4904      	ldr	r1, [pc, #16]	; (80058ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	58024400 	.word	0x58024400
 80058ac:	0800c31c 	.word	0x0800c31c

080058b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058b8:	4ba1      	ldr	r3, [pc, #644]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058c2:	4b9f      	ldr	r3, [pc, #636]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	0b1b      	lsrs	r3, r3, #12
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058ce:	4b9c      	ldr	r3, [pc, #624]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	091b      	lsrs	r3, r3, #4
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058da:	4b99      	ldr	r3, [pc, #612]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	08db      	lsrs	r3, r3, #3
 80058e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8111 	beq.w	8005b20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b02      	cmp	r3, #2
 8005902:	f000 8083 	beq.w	8005a0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b02      	cmp	r3, #2
 800590a:	f200 80a1 	bhi.w	8005a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d056      	beq.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800591a:	e099      	b.n	8005a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800591c:	4b88      	ldr	r3, [pc, #544]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02d      	beq.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005928:	4b85      	ldr	r3, [pc, #532]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	4a84      	ldr	r2, [pc, #528]	; (8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a03 	vldr	s12, [r7, #12]
 8005966:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005982:	e087      	b.n	8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b6a      	ldr	r3, [pc, #424]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c6:	e065      	b.n	8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a0a:	e043      	b.n	8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a4e:	e021      	b.n	8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	0a5b      	lsrs	r3, r3, #9
 8005a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aba:	ee17 2a90 	vmov	r2, s15
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae8:	ee17 2a90 	vmov	r2, s15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	0e1b      	lsrs	r3, r3, #24
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 2a90 	vmov	r2, s15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b1e:	e008      	b.n	8005b32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
}
 8005b32:	bf00      	nop
 8005b34:	3724      	adds	r7, #36	; 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
 8005b44:	03d09000 	.word	0x03d09000
 8005b48:	46000000 	.word	0x46000000
 8005b4c:	4c742400 	.word	0x4c742400
 8005b50:	4a742400 	.word	0x4a742400
 8005b54:	4af42400 	.word	0x4af42400

08005b58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b60:	4ba1      	ldr	r3, [pc, #644]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b6a:	4b9f      	ldr	r3, [pc, #636]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	0d1b      	lsrs	r3, r3, #20
 8005b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b76:	4b9c      	ldr	r3, [pc, #624]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b82:	4b99      	ldr	r3, [pc, #612]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8111 	beq.w	8005dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	f000 8083 	beq.w	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	f200 80a1 	bhi.w	8005cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d056      	beq.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bc2:	e099      	b.n	8005cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc4:	4b88      	ldr	r3, [pc, #544]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02d      	beq.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bd0:	4b85      	ldr	r3, [pc, #532]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	4a84      	ldr	r2, [pc, #528]	; (8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b7b      	ldr	r3, [pc, #492]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c2a:	e087      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6e:	e065      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b59      	ldr	r3, [pc, #356]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb2:	e043      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b48      	ldr	r3, [pc, #288]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf6:	e021      	b.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b37      	ldr	r3, [pc, #220]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d3c:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	0a5b      	lsrs	r3, r3, #9
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d62:	ee17 2a90 	vmov	r2, s15
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d90:	ee17 2a90 	vmov	r2, s15
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	0e1b      	lsrs	r3, r3, #24
 8005d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbe:	ee17 2a90 	vmov	r2, s15
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dc6:	e008      	b.n	8005dda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
}
 8005dda:	bf00      	nop
 8005ddc:	3724      	adds	r7, #36	; 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400
 8005dec:	03d09000 	.word	0x03d09000
 8005df0:	46000000 	.word	0x46000000
 8005df4:	4c742400 	.word	0x4c742400
 8005df8:	4a742400 	.word	0x4a742400
 8005dfc:	4af42400 	.word	0x4af42400

08005e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e0e:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d101      	bne.n	8005e1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e099      	b.n	8005f52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4e      	ldr	r2, [pc, #312]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2a:	f7fc fce5 	bl	80027f8 <HAL_GetTick>
 8005e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e32:	f7fc fce1 	bl	80027f8 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e086      	b.n	8005f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e44:	4b45      	ldr	r3, [pc, #276]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e50:	4b42      	ldr	r3, [pc, #264]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	493f      	ldr	r1, [pc, #252]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	628b      	str	r3, [r1, #40]	; 0x28
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	061b      	lsls	r3, r3, #24
 8005e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e94:	4931      	ldr	r1, [pc, #196]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	492d      	ldr	r1, [pc, #180]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005eac:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	f023 0220 	bic.w	r2, r3, #32
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4928      	ldr	r1, [pc, #160]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ebe:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ec4:	f023 0310 	bic.w	r3, r3, #16
 8005ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <RCCEx_PLL2_Config+0x160>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	69d2      	ldr	r2, [r2, #28]
 8005ed6:	00d2      	lsls	r2, r2, #3
 8005ed8:	4920      	ldr	r1, [pc, #128]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	f043 0310 	orr.w	r3, r3, #16
 8005ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005efc:	e00f      	b.n	8005f1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f10:	e005      	b.n	8005f1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2a:	f7fc fc65 	bl	80027f8 <HAL_GetTick>
 8005f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f30:	e008      	b.n	8005f44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f32:	f7fc fc61 	bl	80027f8 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e006      	b.n	8005f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <RCCEx_PLL2_Config+0x15c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	ffff0007 	.word	0xffff0007

08005f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d101      	bne.n	8005f82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e099      	b.n	80060b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f82:	4b4f      	ldr	r3, [pc, #316]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4e      	ldr	r2, [pc, #312]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f8e:	f7fc fc33 	bl	80027f8 <HAL_GetTick>
 8005f92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f94:	e008      	b.n	8005fa8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f96:	f7fc fc2f 	bl	80027f8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e086      	b.n	80060b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fa8:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fb4:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	493f      	ldr	r1, [pc, #252]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	025b      	lsls	r3, r3, #9
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	061b      	lsls	r3, r3, #24
 8005ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ff8:	4931      	ldr	r1, [pc, #196]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	492d      	ldr	r1, [pc, #180]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	4928      	ldr	r1, [pc, #160]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006032:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <RCCEx_PLL3_Config+0x160>)
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	69d2      	ldr	r2, [r2, #28]
 800603a:	00d2      	lsls	r2, r2, #3
 800603c:	4920      	ldr	r1, [pc, #128]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800603e:	4313      	orrs	r3, r2
 8006040:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006042:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006054:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800605a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800605e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006060:	e00f      	b.n	8006082 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d106      	bne.n	8006076 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006068:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800606e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006074:	e005      	b.n	8006082 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 800607c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0e      	ldr	r2, [pc, #56]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608e:	f7fc fbb3 	bl	80027f8 <HAL_GetTick>
 8006092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006094:	e008      	b.n	80060a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006096:	f7fc fbaf 	bl	80027f8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <RCCEx_PLL3_Config+0x15c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	ffff0007 	.word	0xffff0007

080060c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0f1      	b.n	80062be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a78      	ldr	r2, [pc, #480]	; (80062c8 <HAL_SPI_Init+0x200>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <HAL_SPI_Init+0x42>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a77      	ldr	r2, [pc, #476]	; (80062cc <HAL_SPI_Init+0x204>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00a      	beq.n	800610a <HAL_SPI_Init+0x42>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <HAL_SPI_Init+0x208>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d005      	beq.n	800610a <HAL_SPI_Init+0x42>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d901      	bls.n	800610a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0d9      	b.n	80062be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 ff66 	bl	8006fdc <SPI_GetPacketSize>
 8006110:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a6c      	ldr	r2, [pc, #432]	; (80062c8 <HAL_SPI_Init+0x200>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00c      	beq.n	8006136 <HAL_SPI_Init+0x6e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6a      	ldr	r2, [pc, #424]	; (80062cc <HAL_SPI_Init+0x204>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_SPI_Init+0x6e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a69      	ldr	r2, [pc, #420]	; (80062d0 <HAL_SPI_Init+0x208>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Init+0x6e>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b08      	cmp	r3, #8
 8006134:	d811      	bhi.n	800615a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800613a:	4a63      	ldr	r2, [pc, #396]	; (80062c8 <HAL_SPI_Init+0x200>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a61      	ldr	r2, [pc, #388]	; (80062cc <HAL_SPI_Init+0x204>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_SPI_Init+0x8c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a60      	ldr	r2, [pc, #384]	; (80062d0 <HAL_SPI_Init+0x208>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d104      	bne.n	800615e <HAL_SPI_Init+0x96>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b10      	cmp	r3, #16
 8006158:	d901      	bls.n	800615e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e0af      	b.n	80062be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc f878 	bl	8002268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800619a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061a4:	d119      	bne.n	80061da <HAL_SPI_Init+0x112>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ae:	d103      	bne.n	80061b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061c8:	d107      	bne.n	80061da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	ea42 0103 	orr.w	r1, r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	ea42 0103 	orr.w	r1, r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d113      	bne.n	800627a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006264:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006278:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40013000 	.word	0x40013000
 80062cc:	40003800 	.word	0x40003800
 80062d0:	40003c00 	.word	0x40003c00

080062d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3320      	adds	r3, #32
 80062ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_SPI_Transmit+0x2a>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e1d7      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006306:	f7fc fa77 	bl	80027f8 <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d007      	beq.n	8006328 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006318:	2302      	movs	r3, #2
 800631a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006324:	7efb      	ldrb	r3, [r7, #27]
 8006326:	e1c2      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Transmit+0x60>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006340:	7efb      	ldrb	r3, [r7, #27]
 8006342:	e1b4      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2203      	movs	r2, #3
 8006348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006394:	d107      	bne.n	80063a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	4b96      	ldr	r3, [pc, #600]	; (8006608 <HAL_SPI_Transmit+0x334>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	88f9      	ldrh	r1, [r7, #6]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	430b      	orrs	r3, r1
 80063b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d2:	d107      	bne.n	80063e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	d947      	bls.n	800647c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063ec:	e03f      	b.n	800646e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d114      	bne.n	8006426 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006424:	e023      	b.n	800646e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006426:	f7fc f9e7 	bl	80027f8 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d803      	bhi.n	800643e <HAL_SPI_Transmit+0x16a>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d102      	bne.n	8006444 <HAL_SPI_Transmit+0x170>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d114      	bne.n	800646e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fcfb 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e11f      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1b9      	bne.n	80063ee <HAL_SPI_Transmit+0x11a>
 800647a:	e0f2      	b.n	8006662 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b07      	cmp	r3, #7
 8006482:	f240 80e7 	bls.w	8006654 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006486:	e05d      	b.n	8006544 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d132      	bne.n	80064fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d918      	bls.n	80064d4 <HAL_SPI_Transmit+0x200>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ba:	1d1a      	adds	r2, r3, #4
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b02      	subs	r3, #2
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064d2:	e037      	b.n	8006544 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	1c9a      	adds	r2, r3, #2
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064fa:	e023      	b.n	8006544 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064fc:	f7fc f97c 	bl	80027f8 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d803      	bhi.n	8006514 <HAL_SPI_Transmit+0x240>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d102      	bne.n	800651a <HAL_SPI_Transmit+0x246>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d114      	bne.n	8006544 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fc90 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e0b4      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d19b      	bne.n	8006488 <HAL_SPI_Transmit+0x1b4>
 8006550:	e087      	b.n	8006662 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d155      	bne.n	800660c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d918      	bls.n	800659e <HAL_SPI_Transmit+0x2ca>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d914      	bls.n	800659e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b04      	subs	r3, #4
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800659c:	e05a      	b.n	8006654 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d917      	bls.n	80065da <HAL_SPI_Transmit+0x306>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d013      	beq.n	80065da <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b02      	subs	r3, #2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065d8:	e03c      	b.n	8006654 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3320      	adds	r3, #32
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006604:	e026      	b.n	8006654 <HAL_SPI_Transmit+0x380>
 8006606:	bf00      	nop
 8006608:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660c:	f7fc f8f4 	bl	80027f8 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d803      	bhi.n	8006624 <HAL_SPI_Transmit+0x350>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d102      	bne.n	800662a <HAL_SPI_Transmit+0x356>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d114      	bne.n	8006654 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 fc08 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e02c      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f af78 	bne.w	8006552 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	2108      	movs	r1, #8
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fc87 	bl	8006f80 <SPI_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fbd9 	bl	8006e40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80066ac:	7efb      	ldrb	r3, [r7, #27]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3330      	adds	r3, #48	; 0x30
 80066d2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066dc:	d112      	bne.n	8006704 <HAL_SPI_Receive+0x4c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10e      	bne.n	8006704 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2204      	movs	r2, #4
 80066ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f978 	bl	80069f0 <HAL_SPI_TransmitReceive>
 8006700:	4603      	mov	r3, r0
 8006702:	e16f      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_SPI_Receive+0x5a>
 800670e:	2302      	movs	r3, #2
 8006710:	e168      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671a:	f7fc f86d 	bl	80027f8 <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d007      	beq.n	800673c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800672c:	2302      	movs	r3, #2
 800672e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006738:	7ffb      	ldrb	r3, [r7, #31]
 800673a:	e153      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_SPI_Receive+0x90>
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	e145      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2204      	movs	r2, #4
 800675c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80067a8:	d107      	bne.n	80067ba <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	4b8a      	ldr	r3, [pc, #552]	; (80069ec <HAL_SPI_Receive+0x334>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	88f9      	ldrh	r1, [r7, #6]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e6:	d107      	bne.n	80067f8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b0f      	cmp	r3, #15
 80067fe:	d948      	bls.n	8006892 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006800:	e040      	b.n	8006884 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	f248 0308 	movw	r3, #32776	; 0x8008
 800680c:	4013      	ands	r3, r2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d014      	beq.n	800683c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800681c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800683a:	e023      	b.n	8006884 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683c:	f7fb ffdc 	bl	80027f8 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d803      	bhi.n	8006854 <HAL_SPI_Receive+0x19c>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d102      	bne.n	800685a <HAL_SPI_Receive+0x1a2>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d114      	bne.n	8006884 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 faf0 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800686e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e0af      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1b8      	bne.n	8006802 <HAL_SPI_Receive+0x14a>
 8006890:	e095      	b.n	80069be <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b07      	cmp	r3, #7
 8006898:	f240 808b 	bls.w	80069b2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800689c:	e03f      	b.n	800691e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d114      	bne.n	80068d6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	8812      	ldrh	r2, [r2, #0]
 80068b4:	b292      	uxth	r2, r2
 80068b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068bc:	1c9a      	adds	r2, r3, #2
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80068d4:	e023      	b.n	800691e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d6:	f7fb ff8f 	bl	80027f8 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d803      	bhi.n	80068ee <HAL_SPI_Receive+0x236>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d102      	bne.n	80068f4 <HAL_SPI_Receive+0x23c>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d114      	bne.n	800691e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 faa3 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e062      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1b9      	bne.n	800689e <HAL_SPI_Receive+0x1e6>
 800692a:	e048      	b.n	80069be <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	d117      	bne.n	800696a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006968:	e023      	b.n	80069b2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696a:	f7fb ff45 	bl	80027f8 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d803      	bhi.n	8006982 <HAL_SPI_Receive+0x2ca>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d102      	bne.n	8006988 <HAL_SPI_Receive+0x2d0>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d114      	bne.n	80069b2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fa59 	bl	8006e40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e018      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1b6      	bne.n	800692c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa3e 	bl	8006e40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80069e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	ffff0000 	.word	0xffff0000

080069f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	; 0x38
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3320      	adds	r3, #32
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3330      	adds	r3, #48	; 0x30
 8006a12:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x32>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e209      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a2a:	f7fb fee5 	bl	80027f8 <HAL_GetTick>
 8006a2e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a3e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d014      	beq.n	8006a76 <HAL_SPI_TransmitReceive+0x86>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a52:	d106      	bne.n	8006a62 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006a5c:	7efb      	ldrb	r3, [r7, #27]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d009      	beq.n	8006a76 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a74:	e1df      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x98>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x98>
 8006a82:	887b      	ldrh	r3, [r7, #2]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9a:	e1cc      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d003      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2205      	movs	r2, #5
 8006aac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	887a      	ldrh	r2, [r7, #2]
 8006ac2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	887a      	ldrh	r2, [r7, #2]
 8006aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	887a      	ldrh	r2, [r7, #2]
 8006ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4b82      	ldr	r3, [pc, #520]	; (8006d00 <HAL_SPI_TransmitReceive+0x310>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	8879      	ldrh	r1, [r7, #2]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1c:	d107      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b0f      	cmp	r3, #15
 8006b34:	d970      	bls.n	8006c18 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b36:	e068      	b.n	8006c0a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d11a      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x18c>
 8006b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	1d1a      	adds	r2, r3, #4
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	f248 0308 	movw	r3, #32776	; 0x8008
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01a      	beq.n	8006bc2 <HAL_SPI_TransmitReceive+0x1d2>
 8006b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d017      	beq.n	8006bc2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc2:	f7fb fe19 	bl	80027f8 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d803      	bhi.n	8006bda <HAL_SPI_TransmitReceive+0x1ea>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d102      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x1f0>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d114      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f92d 	bl	8006e40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e115      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d193      	bne.n	8006b38 <HAL_SPI_TransmitReceive+0x148>
 8006c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d190      	bne.n	8006b38 <HAL_SPI_TransmitReceive+0x148>
 8006c16:	e0e7      	b.n	8006de8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b07      	cmp	r3, #7
 8006c1e:	f240 80dd 	bls.w	8006ddc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c22:	e066      	b.n	8006cf2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d119      	bne.n	8006c66 <HAL_SPI_TransmitReceive+0x276>
 8006c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d016      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d11a      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x2ba>
 8006c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c7e:	6a3a      	ldr	r2, [r7, #32]
 8006c80:	8812      	ldrh	r2, [r2, #0]
 8006c82:	b292      	uxth	r2, r2
 8006c84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ca8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006caa:	f7fb fda5 	bl	80027f8 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d803      	bhi.n	8006cc2 <HAL_SPI_TransmitReceive+0x2d2>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d102      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x2d8>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d114      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f8b9 	bl	8006e40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e0a1      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d195      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x234>
 8006cf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d192      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x234>
 8006cfe:	e073      	b.n	8006de8 <HAL_SPI_TransmitReceive+0x3f8>
 8006d00:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d11b      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x35a>
 8006d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3320      	adds	r3, #32
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d48:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d11d      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x3a4>
 8006d58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01a      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d92:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d94:	f7fb fd30 	bl	80027f8 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d803      	bhi.n	8006dac <HAL_SPI_TransmitReceive+0x3bc>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006daa:	d102      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x3c2>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d114      	bne.n	8006ddc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f844 	bl	8006e40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e02c      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d190      	bne.n	8006d04 <HAL_SPI_TransmitReceive+0x314>
 8006de2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d18d      	bne.n	8006d04 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2200      	movs	r2, #0
 8006df0:	2108      	movs	r1, #8
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f8c4 	bl	8006f80 <SPI_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d007      	beq.n	8006e0e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f816 	bl	8006e40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e001      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3730      	adds	r7, #48	; 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0210 	orr.w	r2, r2, #16
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6919      	ldr	r1, [r3, #16]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b3c      	ldr	r3, [pc, #240]	; (8006f7c <SPI_CloseTransfer+0x13c>)
 8006e8c:	400b      	ands	r3, r1
 8006e8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d014      	beq.n	8006ed6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00f      	beq.n	8006ed6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0220 	orr.w	r2, r2, #32
 8006ed4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d014      	beq.n	8006f0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef2:	f043 0204 	orr.w	r2, r3, #4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00f      	beq.n	8006f36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	f043 0201 	orr.w	r2, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f46:	f043 0208 	orr.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	fffffc90 	.word	0xfffffc90

08006f80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006f90:	e010      	b.n	8006fb4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f92:	f7fb fc31 	bl	80027f8 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d803      	bhi.n	8006faa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d102      	bne.n	8006fb0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e00f      	b.n	8006fd4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d0df      	beq.n	8006f92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	3307      	adds	r3, #7
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	fb02 f303 	mul.w	r3, r2, r3
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e049      	b.n	80070b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fb f97b 	bl	8002334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3304      	adds	r3, #4
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f000 fa57 	bl	8007504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <HAL_TIM_PWM_Start+0x24>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	bf14      	ite	ne
 80070dc:	2301      	movne	r3, #1
 80070de:	2300      	moveq	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	e03c      	b.n	800715e <HAL_TIM_PWM_Start+0x9e>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d109      	bne.n	80070fe <HAL_TIM_PWM_Start+0x3e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	e02f      	b.n	800715e <HAL_TIM_PWM_Start+0x9e>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d109      	bne.n	8007118 <HAL_TIM_PWM_Start+0x58>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	e022      	b.n	800715e <HAL_TIM_PWM_Start+0x9e>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b0c      	cmp	r3, #12
 800711c:	d109      	bne.n	8007132 <HAL_TIM_PWM_Start+0x72>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b01      	cmp	r3, #1
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	e015      	b.n	800715e <HAL_TIM_PWM_Start+0x9e>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b10      	cmp	r3, #16
 8007136:	d109      	bne.n	800714c <HAL_TIM_PWM_Start+0x8c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	e008      	b.n	800715e <HAL_TIM_PWM_Start+0x9e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e0a1      	b.n	80072aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <HAL_TIM_PWM_Start+0xb6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007174:	e023      	b.n	80071be <HAL_TIM_PWM_Start+0xfe>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0xc6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007184:	e01b      	b.n	80071be <HAL_TIM_PWM_Start+0xfe>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0xd6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007194:	e013      	b.n	80071be <HAL_TIM_PWM_Start+0xfe>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b0c      	cmp	r3, #12
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_PWM_Start+0xe6>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071a4:	e00b      	b.n	80071be <HAL_TIM_PWM_Start+0xfe>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_PWM_Start+0xf6>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071b4:	e003      	b.n	80071be <HAL_TIM_PWM_Start+0xfe>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2201      	movs	r2, #1
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fd0c 	bl	8007be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <HAL_TIM_PWM_Start+0x1f4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_TIM_PWM_Start+0x13e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a37      	ldr	r2, [pc, #220]	; (80072b8 <HAL_TIM_PWM_Start+0x1f8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIM_PWM_Start+0x13e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a35      	ldr	r2, [pc, #212]	; (80072bc <HAL_TIM_PWM_Start+0x1fc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIM_PWM_Start+0x13e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <HAL_TIM_PWM_Start+0x200>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIM_PWM_Start+0x13e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a32      	ldr	r2, [pc, #200]	; (80072c4 <HAL_TIM_PWM_Start+0x204>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_PWM_Start+0x142>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <HAL_TIM_PWM_Start+0x144>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <HAL_TIM_PWM_Start+0x1f4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722a:	d01d      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <HAL_TIM_PWM_Start+0x208>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <HAL_TIM_PWM_Start+0x20c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_TIM_PWM_Start+0x210>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1a      	ldr	r2, [pc, #104]	; (80072b8 <HAL_TIM_PWM_Start+0x1f8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <HAL_TIM_PWM_Start+0x214>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_TIM_PWM_Start+0x1a8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a16      	ldr	r2, [pc, #88]	; (80072bc <HAL_TIM_PWM_Start+0x1fc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d115      	bne.n	8007294 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <HAL_TIM_PWM_Start+0x218>)
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b06      	cmp	r3, #6
 8007278:	d015      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x1e6>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d011      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	e008      	b.n	80072a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e000      	b.n	80072a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800
 80072c8:	40000400 	.word	0x40000400
 80072cc:	40000800 	.word	0x40000800
 80072d0:	40000c00 	.word	0x40000c00
 80072d4:	40001800 	.word	0x40001800
 80072d8:	00010007 	.word	0x00010007

080072dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e0ff      	b.n	80074fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b14      	cmp	r3, #20
 8007306:	f200 80f0 	bhi.w	80074ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007365 	.word	0x08007365
 8007314:	080074eb 	.word	0x080074eb
 8007318:	080074eb 	.word	0x080074eb
 800731c:	080074eb 	.word	0x080074eb
 8007320:	080073a5 	.word	0x080073a5
 8007324:	080074eb 	.word	0x080074eb
 8007328:	080074eb 	.word	0x080074eb
 800732c:	080074eb 	.word	0x080074eb
 8007330:	080073e7 	.word	0x080073e7
 8007334:	080074eb 	.word	0x080074eb
 8007338:	080074eb 	.word	0x080074eb
 800733c:	080074eb 	.word	0x080074eb
 8007340:	08007427 	.word	0x08007427
 8007344:	080074eb 	.word	0x080074eb
 8007348:	080074eb 	.word	0x080074eb
 800734c:	080074eb 	.word	0x080074eb
 8007350:	08007469 	.word	0x08007469
 8007354:	080074eb 	.word	0x080074eb
 8007358:	080074eb 	.word	0x080074eb
 800735c:	080074eb 	.word	0x080074eb
 8007360:	080074a9 	.word	0x080074a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f964 	bl	8007638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0208 	orr.w	r2, r2, #8
 800737e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0204 	bic.w	r2, r2, #4
 800738e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6999      	ldr	r1, [r3, #24]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	619a      	str	r2, [r3, #24]
      break;
 80073a2:	e0a5      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f9d4 	bl	8007758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6999      	ldr	r1, [r3, #24]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	021a      	lsls	r2, r3, #8
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	619a      	str	r2, [r3, #24]
      break;
 80073e4:	e084      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fa3d 	bl	800786c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0208 	orr.w	r2, r2, #8
 8007400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	61da      	str	r2, [r3, #28]
      break;
 8007424:	e064      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 faa5 	bl	800797c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69d9      	ldr	r1, [r3, #28]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	021a      	lsls	r2, r3, #8
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	61da      	str	r2, [r3, #28]
      break;
 8007466:	e043      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 faee 	bl	8007a50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0208 	orr.w	r2, r2, #8
 8007482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074a6:	e023      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fb32 	bl	8007b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074e8:	e002      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
      break;
 80074ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop

08007504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a40      	ldr	r2, [pc, #256]	; (8007618 <TIM_Base_SetConfig+0x114>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d00f      	beq.n	8007544 <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a3d      	ldr	r2, [pc, #244]	; (800761c <TIM_Base_SetConfig+0x118>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00b      	beq.n	8007544 <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a3c      	ldr	r2, [pc, #240]	; (8007620 <TIM_Base_SetConfig+0x11c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <TIM_Base_SetConfig+0x120>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_Base_SetConfig+0x40>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <TIM_Base_SetConfig+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d108      	bne.n	8007556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2f      	ldr	r2, [pc, #188]	; (8007618 <TIM_Base_SetConfig+0x114>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01f      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d01b      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a2c      	ldr	r2, [pc, #176]	; (800761c <TIM_Base_SetConfig+0x118>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d017      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2b      	ldr	r2, [pc, #172]	; (8007620 <TIM_Base_SetConfig+0x11c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2a      	ldr	r2, [pc, #168]	; (8007624 <TIM_Base_SetConfig+0x120>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a29      	ldr	r2, [pc, #164]	; (8007628 <TIM_Base_SetConfig+0x124>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a28      	ldr	r2, [pc, #160]	; (800762c <TIM_Base_SetConfig+0x128>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a27      	ldr	r2, [pc, #156]	; (8007630 <TIM_Base_SetConfig+0x12c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0x9a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a26      	ldr	r2, [pc, #152]	; (8007634 <TIM_Base_SetConfig+0x130>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a10      	ldr	r2, [pc, #64]	; (8007618 <TIM_Base_SetConfig+0x114>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00f      	beq.n	80075fc <TIM_Base_SetConfig+0xf8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <TIM_Base_SetConfig+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00b      	beq.n	80075fc <TIM_Base_SetConfig+0xf8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a11      	ldr	r2, [pc, #68]	; (800762c <TIM_Base_SetConfig+0x128>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d007      	beq.n	80075fc <TIM_Base_SetConfig+0xf8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a10      	ldr	r2, [pc, #64]	; (8007630 <TIM_Base_SetConfig+0x12c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_Base_SetConfig+0xf8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a0f      	ldr	r2, [pc, #60]	; (8007634 <TIM_Base_SetConfig+0x130>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d103      	bne.n	8007604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	615a      	str	r2, [r3, #20]
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40010400 	.word	0x40010400
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400
 8007634:	40014800 	.word	0x40014800

08007638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4b37      	ldr	r3, [pc, #220]	; (8007740 <TIM_OC1_SetConfig+0x108>)
 8007664:	4013      	ands	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 0302 	bic.w	r3, r3, #2
 8007680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <TIM_OC1_SetConfig+0x10c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00f      	beq.n	80076b4 <TIM_OC1_SetConfig+0x7c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a2c      	ldr	r2, [pc, #176]	; (8007748 <TIM_OC1_SetConfig+0x110>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_OC1_SetConfig+0x7c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a2b      	ldr	r2, [pc, #172]	; (800774c <TIM_OC1_SetConfig+0x114>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_OC1_SetConfig+0x7c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a2a      	ldr	r2, [pc, #168]	; (8007750 <TIM_OC1_SetConfig+0x118>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_OC1_SetConfig+0x7c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a29      	ldr	r2, [pc, #164]	; (8007754 <TIM_OC1_SetConfig+0x11c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d10c      	bne.n	80076ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f023 0308 	bic.w	r3, r3, #8
 80076ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0304 	bic.w	r3, r3, #4
 80076cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <TIM_OC1_SetConfig+0x10c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00f      	beq.n	80076f6 <TIM_OC1_SetConfig+0xbe>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <TIM_OC1_SetConfig+0x110>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <TIM_OC1_SetConfig+0xbe>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1a      	ldr	r2, [pc, #104]	; (800774c <TIM_OC1_SetConfig+0x114>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <TIM_OC1_SetConfig+0xbe>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <TIM_OC1_SetConfig+0x118>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_OC1_SetConfig+0xbe>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a18      	ldr	r2, [pc, #96]	; (8007754 <TIM_OC1_SetConfig+0x11c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d111      	bne.n	800771a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	621a      	str	r2, [r3, #32]
}
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	fffeff8f 	.word	0xfffeff8f
 8007744:	40010000 	.word	0x40010000
 8007748:	40010400 	.word	0x40010400
 800774c:	40014000 	.word	0x40014000
 8007750:	40014400 	.word	0x40014400
 8007754:	40014800 	.word	0x40014800

08007758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	f023 0210 	bic.w	r2, r3, #16
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4b34      	ldr	r3, [pc, #208]	; (8007854 <TIM_OC2_SetConfig+0xfc>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800778e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f023 0320 	bic.w	r3, r3, #32
 80077a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a29      	ldr	r2, [pc, #164]	; (8007858 <TIM_OC2_SetConfig+0x100>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_OC2_SetConfig+0x68>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a28      	ldr	r2, [pc, #160]	; (800785c <TIM_OC2_SetConfig+0x104>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10d      	bne.n	80077dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1e      	ldr	r2, [pc, #120]	; (8007858 <TIM_OC2_SetConfig+0x100>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC2_SetConfig+0xac>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1d      	ldr	r2, [pc, #116]	; (800785c <TIM_OC2_SetConfig+0x104>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC2_SetConfig+0xac>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <TIM_OC2_SetConfig+0x108>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC2_SetConfig+0xac>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <TIM_OC2_SetConfig+0x10c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC2_SetConfig+0xac>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1a      	ldr	r2, [pc, #104]	; (8007868 <TIM_OC2_SetConfig+0x110>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d113      	bne.n	800782c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	feff8fff 	.word	0xfeff8fff
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800

0800786c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4b33      	ldr	r3, [pc, #204]	; (8007964 <TIM_OC3_SetConfig+0xf8>)
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <TIM_OC3_SetConfig+0xfc>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d003      	beq.n	80078d2 <TIM_OC3_SetConfig+0x66>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a27      	ldr	r2, [pc, #156]	; (800796c <TIM_OC3_SetConfig+0x100>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d10d      	bne.n	80078ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1d      	ldr	r2, [pc, #116]	; (8007968 <TIM_OC3_SetConfig+0xfc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_OC3_SetConfig+0xaa>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <TIM_OC3_SetConfig+0x100>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_OC3_SetConfig+0xaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <TIM_OC3_SetConfig+0x104>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_OC3_SetConfig+0xaa>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a1a      	ldr	r2, [pc, #104]	; (8007974 <TIM_OC3_SetConfig+0x108>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_OC3_SetConfig+0xaa>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a19      	ldr	r2, [pc, #100]	; (8007978 <TIM_OC3_SetConfig+0x10c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d113      	bne.n	800793e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	fffeff8f 	.word	0xfffeff8f
 8007968:	40010000 	.word	0x40010000
 800796c:	40010400 	.word	0x40010400
 8007970:	40014000 	.word	0x40014000
 8007974:	40014400 	.word	0x40014400
 8007978:	40014800 	.word	0x40014800

0800797c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <TIM_OC4_SetConfig+0xbc>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	031b      	lsls	r3, r3, #12
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <TIM_OC4_SetConfig+0xc0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00f      	beq.n	80079fc <TIM_OC4_SetConfig+0x80>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <TIM_OC4_SetConfig+0xc4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00b      	beq.n	80079fc <TIM_OC4_SetConfig+0x80>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <TIM_OC4_SetConfig+0xc8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d007      	beq.n	80079fc <TIM_OC4_SetConfig+0x80>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <TIM_OC4_SetConfig+0xcc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_OC4_SetConfig+0x80>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <TIM_OC4_SetConfig+0xd0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d109      	bne.n	8007a10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	019b      	lsls	r3, r3, #6
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	feff8fff 	.word	0xfeff8fff
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40010400 	.word	0x40010400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800

08007a50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4b21      	ldr	r3, [pc, #132]	; (8007b00 <TIM_OC5_SetConfig+0xb0>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a18      	ldr	r2, [pc, #96]	; (8007b04 <TIM_OC5_SetConfig+0xb4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00f      	beq.n	8007ac6 <TIM_OC5_SetConfig+0x76>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <TIM_OC5_SetConfig+0xb8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00b      	beq.n	8007ac6 <TIM_OC5_SetConfig+0x76>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <TIM_OC5_SetConfig+0xbc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d007      	beq.n	8007ac6 <TIM_OC5_SetConfig+0x76>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <TIM_OC5_SetConfig+0xc0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d003      	beq.n	8007ac6 <TIM_OC5_SetConfig+0x76>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a14      	ldr	r2, [pc, #80]	; (8007b14 <TIM_OC5_SetConfig+0xc4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d109      	bne.n	8007ada <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	fffeff8f 	.word	0xfffeff8f
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40010400 	.word	0x40010400
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40014400 	.word	0x40014400
 8007b14:	40014800 	.word	0x40014800

08007b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <TIM_OC6_SetConfig+0xb4>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	051b      	lsls	r3, r3, #20
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <TIM_OC6_SetConfig+0xb8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00f      	beq.n	8007b90 <TIM_OC6_SetConfig+0x78>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <TIM_OC6_SetConfig+0xbc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00b      	beq.n	8007b90 <TIM_OC6_SetConfig+0x78>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a17      	ldr	r2, [pc, #92]	; (8007bd8 <TIM_OC6_SetConfig+0xc0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d007      	beq.n	8007b90 <TIM_OC6_SetConfig+0x78>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <TIM_OC6_SetConfig+0xc4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_OC6_SetConfig+0x78>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <TIM_OC6_SetConfig+0xc8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d109      	bne.n	8007ba4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	029b      	lsls	r3, r3, #10
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	feff8fff 	.word	0xfeff8fff
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40010400 	.word	0x40010400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40014400 	.word	0x40014400
 8007be0:	40014800 	.word	0x40014800

08007be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	401a      	ands	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e06d      	b.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a20      	ldr	r2, [pc, #128]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d022      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cba:	d01d      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d018      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00e      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10c      	bne.n	8007d12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40001800 	.word	0x40001800
 8007d48:	40014000 	.word	0x40014000

08007d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e065      	b.n	8007e34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d115      	bne.n	8007e22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	051b      	lsls	r3, r3, #20
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40010400 	.word	0x40010400

08007e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e042      	b.n	8007ee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fa fabd 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2224      	movs	r2, #36	; 0x24
 8007e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f8c2 	bl	8008014 <UART_SetConfig>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e022      	b.n	8007ee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fe1e 	bl	8008ae4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fea5 	bl	8008c28 <UART_CheckIdleState>
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	f040 8083 	bne.w	800800a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_UART_Transmit+0x28>
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e07b      	b.n	800800c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UART_Transmit+0x3a>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e074      	b.n	800800c <HAL_UART_Transmit+0x124>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2221      	movs	r2, #33	; 0x21
 8007f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f3a:	f7fa fc5d 	bl	80027f8 <HAL_GetTick>
 8007f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f58:	d108      	bne.n	8007f6c <HAL_UART_Transmit+0x84>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	e003      	b.n	8007f74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f7c:	e02c      	b.n	8007fd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	2180      	movs	r1, #128	; 0x80
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fe98 	bl	8008cbe <UART_WaitOnFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e039      	b.n	800800c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	61bb      	str	r3, [r7, #24]
 8007fb4:	e007      	b.n	8007fc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1cc      	bne.n	8007f7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2200      	movs	r2, #0
 8007fec:	2140      	movs	r1, #64	; 0x40
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fe65 	bl	8008cbe <UART_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e006      	b.n	800800c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e000      	b.n	800800c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800800a:	2302      	movs	r3, #2
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008018:	b092      	sub	sp, #72	; 0x48
 800801a:	af00      	add	r7, sp, #0
 800801c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	431a      	orrs	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	431a      	orrs	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	4313      	orrs	r3, r2
 800803a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4bbe      	ldr	r3, [pc, #760]	; (800833c <UART_SetConfig+0x328>)
 8008044:	4013      	ands	r3, r2
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800804c:	430b      	orrs	r3, r1
 800804e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4ab3      	ldr	r2, [pc, #716]	; (8008340 <UART_SetConfig+0x32c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800807c:	4313      	orrs	r3, r2
 800807e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	4baf      	ldr	r3, [pc, #700]	; (8008344 <UART_SetConfig+0x330>)
 8008088:	4013      	ands	r3, r2
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008090:	430b      	orrs	r3, r1
 8008092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	f023 010f 	bic.w	r1, r3, #15
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4aa6      	ldr	r2, [pc, #664]	; (8008348 <UART_SetConfig+0x334>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d177      	bne.n	80081a4 <UART_SetConfig+0x190>
 80080b4:	4ba5      	ldr	r3, [pc, #660]	; (800834c <UART_SetConfig+0x338>)
 80080b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080bc:	2b28      	cmp	r3, #40	; 0x28
 80080be:	d86d      	bhi.n	800819c <UART_SetConfig+0x188>
 80080c0:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0xb4>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	0800816d 	.word	0x0800816d
 80080cc:	0800819d 	.word	0x0800819d
 80080d0:	0800819d 	.word	0x0800819d
 80080d4:	0800819d 	.word	0x0800819d
 80080d8:	0800819d 	.word	0x0800819d
 80080dc:	0800819d 	.word	0x0800819d
 80080e0:	0800819d 	.word	0x0800819d
 80080e4:	0800819d 	.word	0x0800819d
 80080e8:	08008175 	.word	0x08008175
 80080ec:	0800819d 	.word	0x0800819d
 80080f0:	0800819d 	.word	0x0800819d
 80080f4:	0800819d 	.word	0x0800819d
 80080f8:	0800819d 	.word	0x0800819d
 80080fc:	0800819d 	.word	0x0800819d
 8008100:	0800819d 	.word	0x0800819d
 8008104:	0800819d 	.word	0x0800819d
 8008108:	0800817d 	.word	0x0800817d
 800810c:	0800819d 	.word	0x0800819d
 8008110:	0800819d 	.word	0x0800819d
 8008114:	0800819d 	.word	0x0800819d
 8008118:	0800819d 	.word	0x0800819d
 800811c:	0800819d 	.word	0x0800819d
 8008120:	0800819d 	.word	0x0800819d
 8008124:	0800819d 	.word	0x0800819d
 8008128:	08008185 	.word	0x08008185
 800812c:	0800819d 	.word	0x0800819d
 8008130:	0800819d 	.word	0x0800819d
 8008134:	0800819d 	.word	0x0800819d
 8008138:	0800819d 	.word	0x0800819d
 800813c:	0800819d 	.word	0x0800819d
 8008140:	0800819d 	.word	0x0800819d
 8008144:	0800819d 	.word	0x0800819d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800819d 	.word	0x0800819d
 8008150:	0800819d 	.word	0x0800819d
 8008154:	0800819d 	.word	0x0800819d
 8008158:	0800819d 	.word	0x0800819d
 800815c:	0800819d 	.word	0x0800819d
 8008160:	0800819d 	.word	0x0800819d
 8008164:	0800819d 	.word	0x0800819d
 8008168:	08008195 	.word	0x08008195
 800816c:	2301      	movs	r3, #1
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e222      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e21e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e21a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818a:	e216      	b.n	80085ba <UART_SetConfig+0x5a6>
 800818c:	2320      	movs	r3, #32
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008192:	e212      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e20e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800819c:	2380      	movs	r3, #128	; 0x80
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e20a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a69      	ldr	r2, [pc, #420]	; (8008350 <UART_SetConfig+0x33c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d130      	bne.n	8008210 <UART_SetConfig+0x1fc>
 80081ae:	4b67      	ldr	r3, [pc, #412]	; (800834c <UART_SetConfig+0x338>)
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d826      	bhi.n	8008208 <UART_SetConfig+0x1f4>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0x1ac>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	080081e1 	.word	0x080081e1
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	08008201 	.word	0x08008201
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e1ec      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e1e8      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e1e4      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e1e0      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081f8:	2320      	movs	r3, #32
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e1dc      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008200:	2340      	movs	r3, #64	; 0x40
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e1d8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e1d4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a4f      	ldr	r2, [pc, #316]	; (8008354 <UART_SetConfig+0x340>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d130      	bne.n	800827c <UART_SetConfig+0x268>
 800821a:	4b4c      	ldr	r3, [pc, #304]	; (800834c <UART_SetConfig+0x338>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	2b05      	cmp	r3, #5
 8008224:	d826      	bhi.n	8008274 <UART_SetConfig+0x260>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <UART_SetConfig+0x218>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008245 	.word	0x08008245
 8008230:	0800824d 	.word	0x0800824d
 8008234:	08008255 	.word	0x08008255
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008265 	.word	0x08008265
 8008240:	0800826d 	.word	0x0800826d
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e1b6      	b.n	80085ba <UART_SetConfig+0x5a6>
 800824c:	2304      	movs	r3, #4
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e1b2      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008254:	2308      	movs	r3, #8
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e1ae      	b.n	80085ba <UART_SetConfig+0x5a6>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e1aa      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008264:	2320      	movs	r3, #32
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e1a6      	b.n	80085ba <UART_SetConfig+0x5a6>
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e1a2      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e19e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a35      	ldr	r2, [pc, #212]	; (8008358 <UART_SetConfig+0x344>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d130      	bne.n	80082e8 <UART_SetConfig+0x2d4>
 8008286:	4b31      	ldr	r3, [pc, #196]	; (800834c <UART_SetConfig+0x338>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b05      	cmp	r3, #5
 8008290:	d826      	bhi.n	80082e0 <UART_SetConfig+0x2cc>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <UART_SetConfig+0x284>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082b1 	.word	0x080082b1
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	2300      	movs	r3, #0
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e180      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e17c      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e178      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e174      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082d0:	2320      	movs	r3, #32
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e170      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e16c      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e168      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1b      	ldr	r2, [pc, #108]	; (800835c <UART_SetConfig+0x348>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d142      	bne.n	8008378 <UART_SetConfig+0x364>
 80082f2:	4b16      	ldr	r3, [pc, #88]	; (800834c <UART_SetConfig+0x338>)
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d838      	bhi.n	8008370 <UART_SetConfig+0x35c>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <UART_SetConfig+0x2f0>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800831d 	.word	0x0800831d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800832d 	.word	0x0800832d
 8008310:	08008335 	.word	0x08008335
 8008314:	08008361 	.word	0x08008361
 8008318:	08008369 	.word	0x08008369
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e14a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e146      	b.n	80085ba <UART_SetConfig+0x5a6>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e142      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e13e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800833c:	cfff69f3 	.word	0xcfff69f3
 8008340:	58000c00 	.word	0x58000c00
 8008344:	11fff4ff 	.word	0x11fff4ff
 8008348:	40011000 	.word	0x40011000
 800834c:	58024400 	.word	0x58024400
 8008350:	40004400 	.word	0x40004400
 8008354:	40004800 	.word	0x40004800
 8008358:	40004c00 	.word	0x40004c00
 800835c:	40005000 	.word	0x40005000
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e128      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e124      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e120      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4acb      	ldr	r2, [pc, #812]	; (80086ac <UART_SetConfig+0x698>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d176      	bne.n	8008470 <UART_SetConfig+0x45c>
 8008382:	4bcb      	ldr	r3, [pc, #812]	; (80086b0 <UART_SetConfig+0x69c>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800838a:	2b28      	cmp	r3, #40	; 0x28
 800838c:	d86c      	bhi.n	8008468 <UART_SetConfig+0x454>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x380>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	08008439 	.word	0x08008439
 8008398:	08008469 	.word	0x08008469
 800839c:	08008469 	.word	0x08008469
 80083a0:	08008469 	.word	0x08008469
 80083a4:	08008469 	.word	0x08008469
 80083a8:	08008469 	.word	0x08008469
 80083ac:	08008469 	.word	0x08008469
 80083b0:	08008469 	.word	0x08008469
 80083b4:	08008441 	.word	0x08008441
 80083b8:	08008469 	.word	0x08008469
 80083bc:	08008469 	.word	0x08008469
 80083c0:	08008469 	.word	0x08008469
 80083c4:	08008469 	.word	0x08008469
 80083c8:	08008469 	.word	0x08008469
 80083cc:	08008469 	.word	0x08008469
 80083d0:	08008469 	.word	0x08008469
 80083d4:	08008449 	.word	0x08008449
 80083d8:	08008469 	.word	0x08008469
 80083dc:	08008469 	.word	0x08008469
 80083e0:	08008469 	.word	0x08008469
 80083e4:	08008469 	.word	0x08008469
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008469 	.word	0x08008469
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008451 	.word	0x08008451
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	08008469 	.word	0x08008469
 8008410:	08008469 	.word	0x08008469
 8008414:	08008459 	.word	0x08008459
 8008418:	08008469 	.word	0x08008469
 800841c:	08008469 	.word	0x08008469
 8008420:	08008469 	.word	0x08008469
 8008424:	08008469 	.word	0x08008469
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
 8008430:	08008469 	.word	0x08008469
 8008434:	08008461 	.word	0x08008461
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e0bc      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e0b8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e0b4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e0b0      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008458:	2320      	movs	r3, #32
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e0ac      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e0a8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e0a4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a8f      	ldr	r2, [pc, #572]	; (80086b4 <UART_SetConfig+0x6a0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d130      	bne.n	80084dc <UART_SetConfig+0x4c8>
 800847a:	4b8d      	ldr	r3, [pc, #564]	; (80086b0 <UART_SetConfig+0x69c>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b05      	cmp	r3, #5
 8008484:	d826      	bhi.n	80084d4 <UART_SetConfig+0x4c0>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x478>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e086      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084ac:	2304      	movs	r3, #4
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e082      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084b4:	2308      	movs	r3, #8
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e07e      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084bc:	2310      	movs	r3, #16
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e07a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084c4:	2320      	movs	r3, #32
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e076      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e072      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e06e      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a75      	ldr	r2, [pc, #468]	; (80086b8 <UART_SetConfig+0x6a4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d130      	bne.n	8008548 <UART_SetConfig+0x534>
 80084e6:	4b72      	ldr	r3, [pc, #456]	; (80086b0 <UART_SetConfig+0x69c>)
 80084e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d826      	bhi.n	8008540 <UART_SetConfig+0x52c>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0x4e4>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008521 	.word	0x08008521
 8008504:	08008529 	.word	0x08008529
 8008508:	08008531 	.word	0x08008531
 800850c:	08008539 	.word	0x08008539
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e050      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e04c      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e048      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e044      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e040      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e03c      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e038      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a5b      	ldr	r2, [pc, #364]	; (80086bc <UART_SetConfig+0x6a8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d130      	bne.n	80085b4 <UART_SetConfig+0x5a0>
 8008552:	4b57      	ldr	r3, [pc, #348]	; (80086b0 <UART_SetConfig+0x69c>)
 8008554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b05      	cmp	r3, #5
 800855c:	d826      	bhi.n	80085ac <UART_SetConfig+0x598>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <UART_SetConfig+0x550>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800857d 	.word	0x0800857d
 8008568:	08008585 	.word	0x08008585
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008595 	.word	0x08008595
 8008574:	0800859d 	.word	0x0800859d
 8008578:	080085a5 	.word	0x080085a5
 800857c:	2302      	movs	r3, #2
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e01a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008584:	2304      	movs	r3, #4
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e016      	b.n	80085ba <UART_SetConfig+0x5a6>
 800858c:	2308      	movs	r3, #8
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e012      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008594:	2310      	movs	r3, #16
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e00e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800859c:	2320      	movs	r3, #32
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e00a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e006      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b2:	e002      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a3f      	ldr	r2, [pc, #252]	; (80086bc <UART_SetConfig+0x6a8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	f040 80f8 	bne.w	80087b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	dc46      	bgt.n	800865c <UART_SetConfig+0x648>
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f2c0 8082 	blt.w	80086d8 <UART_SetConfig+0x6c4>
 80085d4:	3b02      	subs	r3, #2
 80085d6:	2b1e      	cmp	r3, #30
 80085d8:	d87e      	bhi.n	80086d8 <UART_SetConfig+0x6c4>
 80085da:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0x5cc>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	08008663 	.word	0x08008663
 80085e4:	080086d9 	.word	0x080086d9
 80085e8:	0800866b 	.word	0x0800866b
 80085ec:	080086d9 	.word	0x080086d9
 80085f0:	080086d9 	.word	0x080086d9
 80085f4:	080086d9 	.word	0x080086d9
 80085f8:	0800867b 	.word	0x0800867b
 80085fc:	080086d9 	.word	0x080086d9
 8008600:	080086d9 	.word	0x080086d9
 8008604:	080086d9 	.word	0x080086d9
 8008608:	080086d9 	.word	0x080086d9
 800860c:	080086d9 	.word	0x080086d9
 8008610:	080086d9 	.word	0x080086d9
 8008614:	080086d9 	.word	0x080086d9
 8008618:	0800868b 	.word	0x0800868b
 800861c:	080086d9 	.word	0x080086d9
 8008620:	080086d9 	.word	0x080086d9
 8008624:	080086d9 	.word	0x080086d9
 8008628:	080086d9 	.word	0x080086d9
 800862c:	080086d9 	.word	0x080086d9
 8008630:	080086d9 	.word	0x080086d9
 8008634:	080086d9 	.word	0x080086d9
 8008638:	080086d9 	.word	0x080086d9
 800863c:	080086d9 	.word	0x080086d9
 8008640:	080086d9 	.word	0x080086d9
 8008644:	080086d9 	.word	0x080086d9
 8008648:	080086d9 	.word	0x080086d9
 800864c:	080086d9 	.word	0x080086d9
 8008650:	080086d9 	.word	0x080086d9
 8008654:	080086d9 	.word	0x080086d9
 8008658:	080086cb 	.word	0x080086cb
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d037      	beq.n	80086d0 <UART_SetConfig+0x6bc>
 8008660:	e03a      	b.n	80086d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008662:	f7fd f90f 	bl	8005884 <HAL_RCCEx_GetD3PCLK1Freq>
 8008666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008668:	e03c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fd f91e 	bl	80058b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008678:	e034      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f7fd fa6a 	bl	8005b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e02c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <UART_SetConfig+0x69c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d016      	beq.n	80086c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <UART_SetConfig+0x69c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	4a07      	ldr	r2, [pc, #28]	; (80086c0 <UART_SetConfig+0x6ac>)
 80086a2:	fa22 f303 	lsr.w	r3, r2, r3
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a8:	e01c      	b.n	80086e4 <UART_SetConfig+0x6d0>
 80086aa:	bf00      	nop
 80086ac:	40011400 	.word	0x40011400
 80086b0:	58024400 	.word	0x58024400
 80086b4:	40007800 	.word	0x40007800
 80086b8:	40007c00 	.word	0x40007c00
 80086bc:	58000c00 	.word	0x58000c00
 80086c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b9d      	ldr	r3, [pc, #628]	; (800893c <UART_SetConfig+0x928>)
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c8:	e00c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086ca:	4b9d      	ldr	r3, [pc, #628]	; (8008940 <UART_SetConfig+0x92c>)
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ce:	e009      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e005      	b.n	80086e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 81de 	beq.w	8008aa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	4a94      	ldr	r2, [pc, #592]	; (8008944 <UART_SetConfig+0x930>)
 80086f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	4413      	add	r3, r2
 800870a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800870c:	429a      	cmp	r2, r3
 800870e:	d305      	bcc.n	800871c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008722:	e1c1      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	2200      	movs	r2, #0
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	60fa      	str	r2, [r7, #12]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	4a84      	ldr	r2, [pc, #528]	; (8008944 <UART_SetConfig+0x930>)
 8008732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008736:	b29b      	uxth	r3, r3
 8008738:	2200      	movs	r2, #0
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008746:	f7f7 fe23 	bl	8000390 <__aeabi_uldivmod>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4610      	mov	r0, r2
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	020b      	lsls	r3, r1, #8
 800875c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008760:	0202      	lsls	r2, r0, #8
 8008762:	6979      	ldr	r1, [r7, #20]
 8008764:	6849      	ldr	r1, [r1, #4]
 8008766:	0849      	lsrs	r1, r1, #1
 8008768:	2000      	movs	r0, #0
 800876a:	460c      	mov	r4, r1
 800876c:	4605      	mov	r5, r0
 800876e:	eb12 0804 	adds.w	r8, r2, r4
 8008772:	eb43 0905 	adc.w	r9, r3, r5
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	469a      	mov	sl, r3
 800877e:	4693      	mov	fp, r2
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	f7f7 fe02 	bl	8000390 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4613      	mov	r3, r2
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800879a:	d308      	bcc.n	80087ae <UART_SetConfig+0x79a>
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a2:	d204      	bcs.n	80087ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	e17c      	b.n	8008aa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087b4:	e178      	b.n	8008aa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087be:	f040 80c5 	bne.w	800894c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	dc48      	bgt.n	800885c <UART_SetConfig+0x848>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	db7b      	blt.n	80088c6 <UART_SetConfig+0x8b2>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d879      	bhi.n	80088c6 <UART_SetConfig+0x8b2>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0x7c4>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008863 	.word	0x08008863
 80087dc:	0800886b 	.word	0x0800886b
 80087e0:	080088c7 	.word	0x080088c7
 80087e4:	080088c7 	.word	0x080088c7
 80087e8:	08008873 	.word	0x08008873
 80087ec:	080088c7 	.word	0x080088c7
 80087f0:	080088c7 	.word	0x080088c7
 80087f4:	080088c7 	.word	0x080088c7
 80087f8:	08008883 	.word	0x08008883
 80087fc:	080088c7 	.word	0x080088c7
 8008800:	080088c7 	.word	0x080088c7
 8008804:	080088c7 	.word	0x080088c7
 8008808:	080088c7 	.word	0x080088c7
 800880c:	080088c7 	.word	0x080088c7
 8008810:	080088c7 	.word	0x080088c7
 8008814:	080088c7 	.word	0x080088c7
 8008818:	08008893 	.word	0x08008893
 800881c:	080088c7 	.word	0x080088c7
 8008820:	080088c7 	.word	0x080088c7
 8008824:	080088c7 	.word	0x080088c7
 8008828:	080088c7 	.word	0x080088c7
 800882c:	080088c7 	.word	0x080088c7
 8008830:	080088c7 	.word	0x080088c7
 8008834:	080088c7 	.word	0x080088c7
 8008838:	080088c7 	.word	0x080088c7
 800883c:	080088c7 	.word	0x080088c7
 8008840:	080088c7 	.word	0x080088c7
 8008844:	080088c7 	.word	0x080088c7
 8008848:	080088c7 	.word	0x080088c7
 800884c:	080088c7 	.word	0x080088c7
 8008850:	080088c7 	.word	0x080088c7
 8008854:	080088c7 	.word	0x080088c7
 8008858:	080088b9 	.word	0x080088b9
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d02e      	beq.n	80088be <UART_SetConfig+0x8aa>
 8008860:	e031      	b.n	80088c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008862:	f7fc f89d 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8008866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008868:	e033      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886a:	f7fc f8af 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 800886e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008870:	e02f      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008876:	4618      	mov	r0, r3
 8008878:	f7fd f81a 	bl	80058b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	e027      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008882:	f107 0318 	add.w	r3, r7, #24
 8008886:	4618      	mov	r0, r3
 8008888:	f7fd f966 	bl	8005b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008890:	e01f      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008892:	4b2d      	ldr	r3, [pc, #180]	; (8008948 <UART_SetConfig+0x934>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800889e:	4b2a      	ldr	r3, [pc, #168]	; (8008948 <UART_SetConfig+0x934>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	4a24      	ldr	r2, [pc, #144]	; (800893c <UART_SetConfig+0x928>)
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b0:	e00f      	b.n	80088d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <UART_SetConfig+0x928>)
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b6:	e00c      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <UART_SetConfig+0x92c>)
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088bc:	e009      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c4:	e005      	b.n	80088d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80e7 	beq.w	8008aa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	4a19      	ldr	r2, [pc, #100]	; (8008944 <UART_SetConfig+0x930>)
 80088e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ec:	005a      	lsls	r2, r3, #1
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	441a      	add	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b0f      	cmp	r3, #15
 8008904:	d916      	bls.n	8008934 <UART_SetConfig+0x920>
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890c:	d212      	bcs.n	8008934 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	b29b      	uxth	r3, r3
 8008912:	f023 030f 	bic.w	r3, r3, #15
 8008916:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	b29a      	uxth	r2, r3
 8008924:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008926:	4313      	orrs	r3, r2
 8008928:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	e0b9      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800893a:	e0b5      	b.n	8008aa8 <UART_SetConfig+0xa94>
 800893c:	03d09000 	.word	0x03d09000
 8008940:	003d0900 	.word	0x003d0900
 8008944:	0800c33c 	.word	0x0800c33c
 8008948:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800894c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008950:	2b20      	cmp	r3, #32
 8008952:	dc49      	bgt.n	80089e8 <UART_SetConfig+0x9d4>
 8008954:	2b00      	cmp	r3, #0
 8008956:	db7c      	blt.n	8008a52 <UART_SetConfig+0xa3e>
 8008958:	2b20      	cmp	r3, #32
 800895a:	d87a      	bhi.n	8008a52 <UART_SetConfig+0xa3e>
 800895c:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <UART_SetConfig+0x950>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	080089ef 	.word	0x080089ef
 8008968:	080089f7 	.word	0x080089f7
 800896c:	08008a53 	.word	0x08008a53
 8008970:	08008a53 	.word	0x08008a53
 8008974:	080089ff 	.word	0x080089ff
 8008978:	08008a53 	.word	0x08008a53
 800897c:	08008a53 	.word	0x08008a53
 8008980:	08008a53 	.word	0x08008a53
 8008984:	08008a0f 	.word	0x08008a0f
 8008988:	08008a53 	.word	0x08008a53
 800898c:	08008a53 	.word	0x08008a53
 8008990:	08008a53 	.word	0x08008a53
 8008994:	08008a53 	.word	0x08008a53
 8008998:	08008a53 	.word	0x08008a53
 800899c:	08008a53 	.word	0x08008a53
 80089a0:	08008a53 	.word	0x08008a53
 80089a4:	08008a1f 	.word	0x08008a1f
 80089a8:	08008a53 	.word	0x08008a53
 80089ac:	08008a53 	.word	0x08008a53
 80089b0:	08008a53 	.word	0x08008a53
 80089b4:	08008a53 	.word	0x08008a53
 80089b8:	08008a53 	.word	0x08008a53
 80089bc:	08008a53 	.word	0x08008a53
 80089c0:	08008a53 	.word	0x08008a53
 80089c4:	08008a53 	.word	0x08008a53
 80089c8:	08008a53 	.word	0x08008a53
 80089cc:	08008a53 	.word	0x08008a53
 80089d0:	08008a53 	.word	0x08008a53
 80089d4:	08008a53 	.word	0x08008a53
 80089d8:	08008a53 	.word	0x08008a53
 80089dc:	08008a53 	.word	0x08008a53
 80089e0:	08008a53 	.word	0x08008a53
 80089e4:	08008a45 	.word	0x08008a45
 80089e8:	2b40      	cmp	r3, #64	; 0x40
 80089ea:	d02e      	beq.n	8008a4a <UART_SetConfig+0xa36>
 80089ec:	e031      	b.n	8008a52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ee:	f7fb ffd7 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 80089f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089f4:	e033      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f6:	f7fb ffe9 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 80089fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089fc:	e02f      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fc ff54 	bl	80058b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a0c:	e027      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0e:	f107 0318 	add.w	r3, r7, #24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fd f8a0 	bl	8005b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a1c:	e01f      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1e:	4b2d      	ldr	r3, [pc, #180]	; (8008ad4 <UART_SetConfig+0xac0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ad4 <UART_SetConfig+0xac0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	08db      	lsrs	r3, r3, #3
 8008a30:	f003 0303 	and.w	r3, r3, #3
 8008a34:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <UART_SetConfig+0xac4>)
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a3c:	e00f      	b.n	8008a5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a3e:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <UART_SetConfig+0xac4>)
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a42:	e00c      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a44:	4b25      	ldr	r3, [pc, #148]	; (8008adc <UART_SetConfig+0xac8>)
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a48:	e009      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a50:	e005      	b.n	8008a5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d021      	beq.n	8008aa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <UART_SetConfig+0xacc>)
 8008a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	441a      	add	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d909      	bls.n	8008aa2 <UART_SetConfig+0xa8e>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d205      	bcs.n	8008aa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60da      	str	r2, [r3, #12]
 8008aa0:	e002      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2200      	movs	r2, #0
 8008abc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ac4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3748      	adds	r7, #72	; 0x48
 8008acc:	46bd      	mov	sp, r7
 8008ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	0800c33c 	.word	0x0800c33c

08008ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be2:	d10a      	bne.n	8008bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c38:	f7f9 fdde 	bl	80027f8 <HAL_GetTick>
 8008c3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d10e      	bne.n	8008c6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f82f 	bl	8008cbe <UART_WaitOnFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e025      	b.n	8008cb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d10e      	bne.n	8008c96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f819 	bl	8008cbe <UART_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e00f      	b.n	8008cb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b09c      	sub	sp, #112	; 0x70
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cce:	e0a9      	b.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd6:	f000 80a5 	beq.w	8008e24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cda:	f7f9 fd8d 	bl	80027f8 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d302      	bcc.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d140      	bne.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d04:	667b      	str	r3, [r7, #100]	; 0x64
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	663b      	str	r3, [r7, #96]	; 0x60
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d42:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e069      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d051      	beq.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d8e:	d149      	bne.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e6      	bne.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	613b      	str	r3, [r7, #16]
   return(result);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 0301 	bic.w	r3, r3, #1
 8008de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dec:	623a      	str	r2, [r7, #32]
 8008dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	69f9      	ldr	r1, [r7, #28]
 8008df2:	6a3a      	ldr	r2, [r7, #32]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e010      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69da      	ldr	r2, [r3, #28]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bf0c      	ite	eq
 8008e34:	2301      	moveq	r3, #1
 8008e36:	2300      	movne	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f43f af46 	beq.w	8008cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3770      	adds	r7, #112	; 0x70
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e027      	b.n	8008eb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2224      	movs	r2, #36	; 0x24
 8008e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e02d      	b.n	8008f34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	; 0x24
 8008ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f84f 	bl	8008fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e02d      	b.n	8008fb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2224      	movs	r2, #36	; 0x24
 8008f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f811 	bl	8008fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fd8:	e031      	b.n	800903e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fda:	2310      	movs	r3, #16
 8008fdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fde:	2310      	movs	r3, #16
 8008fe0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	0e5b      	lsrs	r3, r3, #25
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	0f5b      	lsrs	r3, r3, #29
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	7b3a      	ldrb	r2, [r7, #12]
 8009006:	4911      	ldr	r1, [pc, #68]	; (800904c <UARTEx_SetNbDataToProcess+0x94>)
 8009008:	5c8a      	ldrb	r2, [r1, r2]
 800900a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800900e:	7b3a      	ldrb	r2, [r7, #12]
 8009010:	490f      	ldr	r1, [pc, #60]	; (8009050 <UARTEx_SetNbDataToProcess+0x98>)
 8009012:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009014:	fb93 f3f2 	sdiv	r3, r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	7b7a      	ldrb	r2, [r7, #13]
 8009024:	4909      	ldr	r1, [pc, #36]	; (800904c <UARTEx_SetNbDataToProcess+0x94>)
 8009026:	5c8a      	ldrb	r2, [r1, r2]
 8009028:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800902c:	7b7a      	ldrb	r2, [r7, #13]
 800902e:	4908      	ldr	r1, [pc, #32]	; (8009050 <UARTEx_SetNbDataToProcess+0x98>)
 8009030:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009032:	fb93 f3f2 	sdiv	r3, r3, r2
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	0800c354 	.word	0x0800c354
 8009050:	0800c35c 	.word	0x0800c35c

08009054 <__errno>:
 8009054:	4b01      	ldr	r3, [pc, #4]	; (800905c <__errno+0x8>)
 8009056:	6818      	ldr	r0, [r3, #0]
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	24000018 	.word	0x24000018

08009060 <__libc_init_array>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	4d0d      	ldr	r5, [pc, #52]	; (8009098 <__libc_init_array+0x38>)
 8009064:	4c0d      	ldr	r4, [pc, #52]	; (800909c <__libc_init_array+0x3c>)
 8009066:	1b64      	subs	r4, r4, r5
 8009068:	10a4      	asrs	r4, r4, #2
 800906a:	2600      	movs	r6, #0
 800906c:	42a6      	cmp	r6, r4
 800906e:	d109      	bne.n	8009084 <__libc_init_array+0x24>
 8009070:	4d0b      	ldr	r5, [pc, #44]	; (80090a0 <__libc_init_array+0x40>)
 8009072:	4c0c      	ldr	r4, [pc, #48]	; (80090a4 <__libc_init_array+0x44>)
 8009074:	f002 fe78 	bl	800bd68 <_init>
 8009078:	1b64      	subs	r4, r4, r5
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	2600      	movs	r6, #0
 800907e:	42a6      	cmp	r6, r4
 8009080:	d105      	bne.n	800908e <__libc_init_array+0x2e>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	f855 3b04 	ldr.w	r3, [r5], #4
 8009088:	4798      	blx	r3
 800908a:	3601      	adds	r6, #1
 800908c:	e7ee      	b.n	800906c <__libc_init_array+0xc>
 800908e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009092:	4798      	blx	r3
 8009094:	3601      	adds	r6, #1
 8009096:	e7f2      	b.n	800907e <__libc_init_array+0x1e>
 8009098:	0800c744 	.word	0x0800c744
 800909c:	0800c744 	.word	0x0800c744
 80090a0:	0800c744 	.word	0x0800c744
 80090a4:	0800c748 	.word	0x0800c748

080090a8 <memcpy>:
 80090a8:	440a      	add	r2, r1
 80090aa:	4291      	cmp	r1, r2
 80090ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b0:	d100      	bne.n	80090b4 <memcpy+0xc>
 80090b2:	4770      	bx	lr
 80090b4:	b510      	push	{r4, lr}
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090be:	4291      	cmp	r1, r2
 80090c0:	d1f9      	bne.n	80090b6 <memcpy+0xe>
 80090c2:	bd10      	pop	{r4, pc}

080090c4 <memset>:
 80090c4:	4402      	add	r2, r0
 80090c6:	4603      	mov	r3, r0
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d100      	bne.n	80090ce <memset+0xa>
 80090cc:	4770      	bx	lr
 80090ce:	f803 1b01 	strb.w	r1, [r3], #1
 80090d2:	e7f9      	b.n	80090c8 <memset+0x4>

080090d4 <__cvt>:
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	ed2d 8b02 	vpush	{d8}
 80090da:	eeb0 8b40 	vmov.f64	d8, d0
 80090de:	b085      	sub	sp, #20
 80090e0:	4617      	mov	r7, r2
 80090e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80090e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80090e6:	ee18 2a90 	vmov	r2, s17
 80090ea:	f025 0520 	bic.w	r5, r5, #32
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	bfb6      	itet	lt
 80090f2:	222d      	movlt	r2, #45	; 0x2d
 80090f4:	2200      	movge	r2, #0
 80090f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80090fa:	2d46      	cmp	r5, #70	; 0x46
 80090fc:	460c      	mov	r4, r1
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	d004      	beq.n	800910c <__cvt+0x38>
 8009102:	2d45      	cmp	r5, #69	; 0x45
 8009104:	d100      	bne.n	8009108 <__cvt+0x34>
 8009106:	3401      	adds	r4, #1
 8009108:	2102      	movs	r1, #2
 800910a:	e000      	b.n	800910e <__cvt+0x3a>
 800910c:	2103      	movs	r1, #3
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	ab02      	add	r3, sp, #8
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	4622      	mov	r2, r4
 8009118:	4633      	mov	r3, r6
 800911a:	eeb0 0b48 	vmov.f64	d0, d8
 800911e:	f000 fce3 	bl	8009ae8 <_dtoa_r>
 8009122:	2d47      	cmp	r5, #71	; 0x47
 8009124:	d101      	bne.n	800912a <__cvt+0x56>
 8009126:	07fb      	lsls	r3, r7, #31
 8009128:	d51a      	bpl.n	8009160 <__cvt+0x8c>
 800912a:	2d46      	cmp	r5, #70	; 0x46
 800912c:	eb00 0204 	add.w	r2, r0, r4
 8009130:	d10c      	bne.n	800914c <__cvt+0x78>
 8009132:	7803      	ldrb	r3, [r0, #0]
 8009134:	2b30      	cmp	r3, #48	; 0x30
 8009136:	d107      	bne.n	8009148 <__cvt+0x74>
 8009138:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800913c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009140:	bf1c      	itt	ne
 8009142:	f1c4 0401 	rsbne	r4, r4, #1
 8009146:	6034      	strne	r4, [r6, #0]
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	441a      	add	r2, r3
 800914c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009154:	bf08      	it	eq
 8009156:	9203      	streq	r2, [sp, #12]
 8009158:	2130      	movs	r1, #48	; 0x30
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	4293      	cmp	r3, r2
 800915e:	d307      	bcc.n	8009170 <__cvt+0x9c>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009164:	1a1b      	subs	r3, r3, r0
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	b005      	add	sp, #20
 800916a:	ecbd 8b02 	vpop	{d8}
 800916e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009170:	1c5c      	adds	r4, r3, #1
 8009172:	9403      	str	r4, [sp, #12]
 8009174:	7019      	strb	r1, [r3, #0]
 8009176:	e7f0      	b.n	800915a <__cvt+0x86>

08009178 <__exponent>:
 8009178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800917a:	4603      	mov	r3, r0
 800917c:	2900      	cmp	r1, #0
 800917e:	bfb8      	it	lt
 8009180:	4249      	neglt	r1, r1
 8009182:	f803 2b02 	strb.w	r2, [r3], #2
 8009186:	bfb4      	ite	lt
 8009188:	222d      	movlt	r2, #45	; 0x2d
 800918a:	222b      	movge	r2, #43	; 0x2b
 800918c:	2909      	cmp	r1, #9
 800918e:	7042      	strb	r2, [r0, #1]
 8009190:	dd2a      	ble.n	80091e8 <__exponent+0x70>
 8009192:	f10d 0407 	add.w	r4, sp, #7
 8009196:	46a4      	mov	ip, r4
 8009198:	270a      	movs	r7, #10
 800919a:	46a6      	mov	lr, r4
 800919c:	460a      	mov	r2, r1
 800919e:	fb91 f6f7 	sdiv	r6, r1, r7
 80091a2:	fb07 1516 	mls	r5, r7, r6, r1
 80091a6:	3530      	adds	r5, #48	; 0x30
 80091a8:	2a63      	cmp	r2, #99	; 0x63
 80091aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80091ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091b2:	4631      	mov	r1, r6
 80091b4:	dcf1      	bgt.n	800919a <__exponent+0x22>
 80091b6:	3130      	adds	r1, #48	; 0x30
 80091b8:	f1ae 0502 	sub.w	r5, lr, #2
 80091bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091c0:	1c44      	adds	r4, r0, #1
 80091c2:	4629      	mov	r1, r5
 80091c4:	4561      	cmp	r1, ip
 80091c6:	d30a      	bcc.n	80091de <__exponent+0x66>
 80091c8:	f10d 0209 	add.w	r2, sp, #9
 80091cc:	eba2 020e 	sub.w	r2, r2, lr
 80091d0:	4565      	cmp	r5, ip
 80091d2:	bf88      	it	hi
 80091d4:	2200      	movhi	r2, #0
 80091d6:	4413      	add	r3, r2
 80091d8:	1a18      	subs	r0, r3, r0
 80091da:	b003      	add	sp, #12
 80091dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091e6:	e7ed      	b.n	80091c4 <__exponent+0x4c>
 80091e8:	2330      	movs	r3, #48	; 0x30
 80091ea:	3130      	adds	r1, #48	; 0x30
 80091ec:	7083      	strb	r3, [r0, #2]
 80091ee:	70c1      	strb	r1, [r0, #3]
 80091f0:	1d03      	adds	r3, r0, #4
 80091f2:	e7f1      	b.n	80091d8 <__exponent+0x60>
 80091f4:	0000      	movs	r0, r0
	...

080091f8 <_printf_float>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	b08b      	sub	sp, #44	; 0x2c
 80091fe:	460c      	mov	r4, r1
 8009200:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009204:	4616      	mov	r6, r2
 8009206:	461f      	mov	r7, r3
 8009208:	4605      	mov	r5, r0
 800920a:	f001 fad1 	bl	800a7b0 <_localeconv_r>
 800920e:	f8d0 b000 	ldr.w	fp, [r0]
 8009212:	4658      	mov	r0, fp
 8009214:	f7f7 f864 	bl	80002e0 <strlen>
 8009218:	2300      	movs	r3, #0
 800921a:	9308      	str	r3, [sp, #32]
 800921c:	f8d8 3000 	ldr.w	r3, [r8]
 8009220:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	3307      	adds	r3, #7
 8009228:	f023 0307 	bic.w	r3, r3, #7
 800922c:	f103 0108 	add.w	r1, r3, #8
 8009230:	f8c8 1000 	str.w	r1, [r8]
 8009234:	4682      	mov	sl, r0
 8009236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800923a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800923e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80094a0 <_printf_float+0x2a8>
 8009242:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009246:	eeb0 6bc0 	vabs.f64	d6, d0
 800924a:	eeb4 6b47 	vcmp.f64	d6, d7
 800924e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009252:	dd24      	ble.n	800929e <_printf_float+0xa6>
 8009254:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	d502      	bpl.n	8009264 <_printf_float+0x6c>
 800925e:	232d      	movs	r3, #45	; 0x2d
 8009260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009264:	4b90      	ldr	r3, [pc, #576]	; (80094a8 <_printf_float+0x2b0>)
 8009266:	4891      	ldr	r0, [pc, #580]	; (80094ac <_printf_float+0x2b4>)
 8009268:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800926c:	bf94      	ite	ls
 800926e:	4698      	movls	r8, r3
 8009270:	4680      	movhi	r8, r0
 8009272:	2303      	movs	r3, #3
 8009274:	6123      	str	r3, [r4, #16]
 8009276:	f022 0204 	bic.w	r2, r2, #4
 800927a:	2300      	movs	r3, #0
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	9700      	str	r7, [sp, #0]
 8009282:	4633      	mov	r3, r6
 8009284:	aa09      	add	r2, sp, #36	; 0x24
 8009286:	4621      	mov	r1, r4
 8009288:	4628      	mov	r0, r5
 800928a:	f000 f9d3 	bl	8009634 <_printf_common>
 800928e:	3001      	adds	r0, #1
 8009290:	f040 808a 	bne.w	80093a8 <_printf_float+0x1b0>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b00b      	add	sp, #44	; 0x2c
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	eeb4 0b40 	vcmp.f64	d0, d0
 80092a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a6:	d709      	bvc.n	80092bc <_printf_float+0xc4>
 80092a8:	ee10 3a90 	vmov	r3, s1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfbc      	itt	lt
 80092b0:	232d      	movlt	r3, #45	; 0x2d
 80092b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092b6:	487e      	ldr	r0, [pc, #504]	; (80094b0 <_printf_float+0x2b8>)
 80092b8:	4b7e      	ldr	r3, [pc, #504]	; (80094b4 <_printf_float+0x2bc>)
 80092ba:	e7d5      	b.n	8009268 <_printf_float+0x70>
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80092c2:	9104      	str	r1, [sp, #16]
 80092c4:	1c59      	adds	r1, r3, #1
 80092c6:	d13c      	bne.n	8009342 <_printf_float+0x14a>
 80092c8:	2306      	movs	r3, #6
 80092ca:	6063      	str	r3, [r4, #4]
 80092cc:	2300      	movs	r3, #0
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	ab08      	add	r3, sp, #32
 80092d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80092d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092da:	ab07      	add	r3, sp, #28
 80092dc:	6861      	ldr	r1, [r4, #4]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	f10d 031b 	add.w	r3, sp, #27
 80092e6:	4628      	mov	r0, r5
 80092e8:	f7ff fef4 	bl	80090d4 <__cvt>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	9907      	ldr	r1, [sp, #28]
 80092f0:	2b47      	cmp	r3, #71	; 0x47
 80092f2:	4680      	mov	r8, r0
 80092f4:	d108      	bne.n	8009308 <_printf_float+0x110>
 80092f6:	1cc8      	adds	r0, r1, #3
 80092f8:	db02      	blt.n	8009300 <_printf_float+0x108>
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	4299      	cmp	r1, r3
 80092fe:	dd41      	ble.n	8009384 <_printf_float+0x18c>
 8009300:	f1a9 0902 	sub.w	r9, r9, #2
 8009304:	fa5f f989 	uxtb.w	r9, r9
 8009308:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800930c:	d820      	bhi.n	8009350 <_printf_float+0x158>
 800930e:	3901      	subs	r1, #1
 8009310:	464a      	mov	r2, r9
 8009312:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009316:	9107      	str	r1, [sp, #28]
 8009318:	f7ff ff2e 	bl	8009178 <__exponent>
 800931c:	9a08      	ldr	r2, [sp, #32]
 800931e:	9004      	str	r0, [sp, #16]
 8009320:	1813      	adds	r3, r2, r0
 8009322:	2a01      	cmp	r2, #1
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	dc02      	bgt.n	800932e <_printf_float+0x136>
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	07d2      	lsls	r2, r2, #31
 800932c:	d501      	bpl.n	8009332 <_printf_float+0x13a>
 800932e:	3301      	adds	r3, #1
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0a2      	beq.n	8009280 <_printf_float+0x88>
 800933a:	232d      	movs	r3, #45	; 0x2d
 800933c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009340:	e79e      	b.n	8009280 <_printf_float+0x88>
 8009342:	9904      	ldr	r1, [sp, #16]
 8009344:	2947      	cmp	r1, #71	; 0x47
 8009346:	d1c1      	bne.n	80092cc <_printf_float+0xd4>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1bf      	bne.n	80092cc <_printf_float+0xd4>
 800934c:	2301      	movs	r3, #1
 800934e:	e7bc      	b.n	80092ca <_printf_float+0xd2>
 8009350:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009354:	d118      	bne.n	8009388 <_printf_float+0x190>
 8009356:	2900      	cmp	r1, #0
 8009358:	6863      	ldr	r3, [r4, #4]
 800935a:	dd0b      	ble.n	8009374 <_printf_float+0x17c>
 800935c:	6121      	str	r1, [r4, #16]
 800935e:	b913      	cbnz	r3, 8009366 <_printf_float+0x16e>
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	07d0      	lsls	r0, r2, #31
 8009364:	d502      	bpl.n	800936c <_printf_float+0x174>
 8009366:	3301      	adds	r3, #1
 8009368:	440b      	add	r3, r1
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	2300      	movs	r3, #0
 800936e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	e7de      	b.n	8009332 <_printf_float+0x13a>
 8009374:	b913      	cbnz	r3, 800937c <_printf_float+0x184>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	07d2      	lsls	r2, r2, #31
 800937a:	d501      	bpl.n	8009380 <_printf_float+0x188>
 800937c:	3302      	adds	r3, #2
 800937e:	e7f4      	b.n	800936a <_printf_float+0x172>
 8009380:	2301      	movs	r3, #1
 8009382:	e7f2      	b.n	800936a <_printf_float+0x172>
 8009384:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	4299      	cmp	r1, r3
 800938c:	db05      	blt.n	800939a <_printf_float+0x1a2>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	6121      	str	r1, [r4, #16]
 8009392:	07d8      	lsls	r0, r3, #31
 8009394:	d5ea      	bpl.n	800936c <_printf_float+0x174>
 8009396:	1c4b      	adds	r3, r1, #1
 8009398:	e7e7      	b.n	800936a <_printf_float+0x172>
 800939a:	2900      	cmp	r1, #0
 800939c:	bfd4      	ite	le
 800939e:	f1c1 0202 	rsble	r2, r1, #2
 80093a2:	2201      	movgt	r2, #1
 80093a4:	4413      	add	r3, r2
 80093a6:	e7e0      	b.n	800936a <_printf_float+0x172>
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	055a      	lsls	r2, r3, #21
 80093ac:	d407      	bmi.n	80093be <_printf_float+0x1c6>
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	4642      	mov	r2, r8
 80093b2:	4631      	mov	r1, r6
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b8      	blx	r7
 80093b8:	3001      	adds	r0, #1
 80093ba:	d12a      	bne.n	8009412 <_printf_float+0x21a>
 80093bc:	e76a      	b.n	8009294 <_printf_float+0x9c>
 80093be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80093c2:	f240 80e2 	bls.w	800958a <_printf_float+0x392>
 80093c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80093ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d2:	d133      	bne.n	800943c <_printf_float+0x244>
 80093d4:	4a38      	ldr	r2, [pc, #224]	; (80094b8 <_printf_float+0x2c0>)
 80093d6:	2301      	movs	r3, #1
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f af58 	beq.w	8009294 <_printf_float+0x9c>
 80093e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	db02      	blt.n	80093f2 <_printf_float+0x1fa>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07d8      	lsls	r0, r3, #31
 80093f0:	d50f      	bpl.n	8009412 <_printf_float+0x21a>
 80093f2:	4653      	mov	r3, sl
 80093f4:	465a      	mov	r2, fp
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f af49 	beq.w	8009294 <_printf_float+0x9c>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	f104 091a 	add.w	r9, r4, #26
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	3b01      	subs	r3, #1
 800940e:	4543      	cmp	r3, r8
 8009410:	dc09      	bgt.n	8009426 <_printf_float+0x22e>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	079b      	lsls	r3, r3, #30
 8009416:	f100 8108 	bmi.w	800962a <_printf_float+0x432>
 800941a:	68e0      	ldr	r0, [r4, #12]
 800941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941e:	4298      	cmp	r0, r3
 8009420:	bfb8      	it	lt
 8009422:	4618      	movlt	r0, r3
 8009424:	e738      	b.n	8009298 <_printf_float+0xa0>
 8009426:	2301      	movs	r3, #1
 8009428:	464a      	mov	r2, r9
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f af2f 	beq.w	8009294 <_printf_float+0x9c>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	e7e6      	b.n	800940a <_printf_float+0x212>
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dc3c      	bgt.n	80094bc <_printf_float+0x2c4>
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <_printf_float+0x2c0>)
 8009444:	2301      	movs	r3, #1
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f af21 	beq.w	8009294 <_printf_float+0x9c>
 8009452:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009456:	4313      	orrs	r3, r2
 8009458:	d102      	bne.n	8009460 <_printf_float+0x268>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	d5d8      	bpl.n	8009412 <_printf_float+0x21a>
 8009460:	4653      	mov	r3, sl
 8009462:	465a      	mov	r2, fp
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f af12 	beq.w	8009294 <_printf_float+0x9c>
 8009470:	f04f 0900 	mov.w	r9, #0
 8009474:	f104 0a1a 	add.w	sl, r4, #26
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	425b      	negs	r3, r3
 800947c:	454b      	cmp	r3, r9
 800947e:	dc01      	bgt.n	8009484 <_printf_float+0x28c>
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	e795      	b.n	80093b0 <_printf_float+0x1b8>
 8009484:	2301      	movs	r3, #1
 8009486:	4652      	mov	r2, sl
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f af00 	beq.w	8009294 <_printf_float+0x9c>
 8009494:	f109 0901 	add.w	r9, r9, #1
 8009498:	e7ee      	b.n	8009478 <_printf_float+0x280>
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	ffffffff 	.word	0xffffffff
 80094a4:	7fefffff 	.word	0x7fefffff
 80094a8:	0800c368 	.word	0x0800c368
 80094ac:	0800c36c 	.word	0x0800c36c
 80094b0:	0800c374 	.word	0x0800c374
 80094b4:	0800c370 	.word	0x0800c370
 80094b8:	0800c378 	.word	0x0800c378
 80094bc:	9a08      	ldr	r2, [sp, #32]
 80094be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094c0:	429a      	cmp	r2, r3
 80094c2:	bfa8      	it	ge
 80094c4:	461a      	movge	r2, r3
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	4691      	mov	r9, r2
 80094ca:	dc38      	bgt.n	800953e <_printf_float+0x346>
 80094cc:	2300      	movs	r3, #0
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094d4:	f104 021a 	add.w	r2, r4, #26
 80094d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094da:	9905      	ldr	r1, [sp, #20]
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	eba3 0309 	sub.w	r3, r3, r9
 80094e2:	428b      	cmp	r3, r1
 80094e4:	dc33      	bgt.n	800954e <_printf_float+0x356>
 80094e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	db3c      	blt.n	8009568 <_printf_float+0x370>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	07da      	lsls	r2, r3, #31
 80094f2:	d439      	bmi.n	8009568 <_printf_float+0x370>
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	9a04      	ldr	r2, [sp, #16]
 80094f8:	9907      	ldr	r1, [sp, #28]
 80094fa:	1a9a      	subs	r2, r3, r2
 80094fc:	eba3 0901 	sub.w	r9, r3, r1
 8009500:	4591      	cmp	r9, r2
 8009502:	bfa8      	it	ge
 8009504:	4691      	movge	r9, r2
 8009506:	f1b9 0f00 	cmp.w	r9, #0
 800950a:	dc35      	bgt.n	8009578 <_printf_float+0x380>
 800950c:	f04f 0800 	mov.w	r8, #0
 8009510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009514:	f104 0a1a 	add.w	sl, r4, #26
 8009518:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	eba3 0309 	sub.w	r3, r3, r9
 8009522:	4543      	cmp	r3, r8
 8009524:	f77f af75 	ble.w	8009412 <_printf_float+0x21a>
 8009528:	2301      	movs	r3, #1
 800952a:	4652      	mov	r2, sl
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f aeae 	beq.w	8009294 <_printf_float+0x9c>
 8009538:	f108 0801 	add.w	r8, r8, #1
 800953c:	e7ec      	b.n	8009518 <_printf_float+0x320>
 800953e:	4613      	mov	r3, r2
 8009540:	4631      	mov	r1, r6
 8009542:	4642      	mov	r2, r8
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	d1bf      	bne.n	80094cc <_printf_float+0x2d4>
 800954c:	e6a2      	b.n	8009294 <_printf_float+0x9c>
 800954e:	2301      	movs	r3, #1
 8009550:	4631      	mov	r1, r6
 8009552:	4628      	mov	r0, r5
 8009554:	9204      	str	r2, [sp, #16]
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f ae9b 	beq.w	8009294 <_printf_float+0x9c>
 800955e:	9b05      	ldr	r3, [sp, #20]
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	9305      	str	r3, [sp, #20]
 8009566:	e7b7      	b.n	80094d8 <_printf_float+0x2e0>
 8009568:	4653      	mov	r3, sl
 800956a:	465a      	mov	r2, fp
 800956c:	4631      	mov	r1, r6
 800956e:	4628      	mov	r0, r5
 8009570:	47b8      	blx	r7
 8009572:	3001      	adds	r0, #1
 8009574:	d1be      	bne.n	80094f4 <_printf_float+0x2fc>
 8009576:	e68d      	b.n	8009294 <_printf_float+0x9c>
 8009578:	9a04      	ldr	r2, [sp, #16]
 800957a:	464b      	mov	r3, r9
 800957c:	4442      	add	r2, r8
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	d1c1      	bne.n	800950c <_printf_float+0x314>
 8009588:	e684      	b.n	8009294 <_printf_float+0x9c>
 800958a:	9a08      	ldr	r2, [sp, #32]
 800958c:	2a01      	cmp	r2, #1
 800958e:	dc01      	bgt.n	8009594 <_printf_float+0x39c>
 8009590:	07db      	lsls	r3, r3, #31
 8009592:	d537      	bpl.n	8009604 <_printf_float+0x40c>
 8009594:	2301      	movs	r3, #1
 8009596:	4642      	mov	r2, r8
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f ae78 	beq.w	8009294 <_printf_float+0x9c>
 80095a4:	4653      	mov	r3, sl
 80095a6:	465a      	mov	r2, fp
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	f43f ae70 	beq.w	8009294 <_printf_float+0x9c>
 80095b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80095b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c0:	d01b      	beq.n	80095fa <_printf_float+0x402>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	f108 0201 	add.w	r2, r8, #1
 80095c8:	3b01      	subs	r3, #1
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	d10e      	bne.n	80095f2 <_printf_float+0x3fa>
 80095d4:	e65e      	b.n	8009294 <_printf_float+0x9c>
 80095d6:	2301      	movs	r3, #1
 80095d8:	464a      	mov	r2, r9
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f ae57 	beq.w	8009294 <_printf_float+0x9c>
 80095e6:	f108 0801 	add.w	r8, r8, #1
 80095ea:	9b08      	ldr	r3, [sp, #32]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	4543      	cmp	r3, r8
 80095f0:	dcf1      	bgt.n	80095d6 <_printf_float+0x3de>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095f8:	e6db      	b.n	80093b2 <_printf_float+0x1ba>
 80095fa:	f04f 0800 	mov.w	r8, #0
 80095fe:	f104 091a 	add.w	r9, r4, #26
 8009602:	e7f2      	b.n	80095ea <_printf_float+0x3f2>
 8009604:	2301      	movs	r3, #1
 8009606:	4642      	mov	r2, r8
 8009608:	e7df      	b.n	80095ca <_printf_float+0x3d2>
 800960a:	2301      	movs	r3, #1
 800960c:	464a      	mov	r2, r9
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f ae3d 	beq.w	8009294 <_printf_float+0x9c>
 800961a:	f108 0801 	add.w	r8, r8, #1
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	4543      	cmp	r3, r8
 8009626:	dcf0      	bgt.n	800960a <_printf_float+0x412>
 8009628:	e6f7      	b.n	800941a <_printf_float+0x222>
 800962a:	f04f 0800 	mov.w	r8, #0
 800962e:	f104 0919 	add.w	r9, r4, #25
 8009632:	e7f4      	b.n	800961e <_printf_float+0x426>

08009634 <_printf_common>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	4616      	mov	r6, r2
 800963a:	4699      	mov	r9, r3
 800963c:	688a      	ldr	r2, [r1, #8]
 800963e:	690b      	ldr	r3, [r1, #16]
 8009640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009644:	4293      	cmp	r3, r2
 8009646:	bfb8      	it	lt
 8009648:	4613      	movlt	r3, r2
 800964a:	6033      	str	r3, [r6, #0]
 800964c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009650:	4607      	mov	r7, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b10a      	cbz	r2, 800965a <_printf_common+0x26>
 8009656:	3301      	adds	r3, #1
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	0699      	lsls	r1, r3, #26
 800965e:	bf42      	ittt	mi
 8009660:	6833      	ldrmi	r3, [r6, #0]
 8009662:	3302      	addmi	r3, #2
 8009664:	6033      	strmi	r3, [r6, #0]
 8009666:	6825      	ldr	r5, [r4, #0]
 8009668:	f015 0506 	ands.w	r5, r5, #6
 800966c:	d106      	bne.n	800967c <_printf_common+0x48>
 800966e:	f104 0a19 	add.w	sl, r4, #25
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	6832      	ldr	r2, [r6, #0]
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc26      	bgt.n	80096ca <_printf_common+0x96>
 800967c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009680:	1e13      	subs	r3, r2, #0
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	bf18      	it	ne
 8009686:	2301      	movne	r3, #1
 8009688:	0692      	lsls	r2, r2, #26
 800968a:	d42b      	bmi.n	80096e4 <_printf_common+0xb0>
 800968c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009690:	4649      	mov	r1, r9
 8009692:	4638      	mov	r0, r7
 8009694:	47c0      	blx	r8
 8009696:	3001      	adds	r0, #1
 8009698:	d01e      	beq.n	80096d8 <_printf_common+0xa4>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	68e5      	ldr	r5, [r4, #12]
 800969e:	6832      	ldr	r2, [r6, #0]
 80096a0:	f003 0306 	and.w	r3, r3, #6
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	bf08      	it	eq
 80096a8:	1aad      	subeq	r5, r5, r2
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	6922      	ldr	r2, [r4, #16]
 80096ae:	bf0c      	ite	eq
 80096b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b4:	2500      	movne	r5, #0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bfc4      	itt	gt
 80096ba:	1a9b      	subgt	r3, r3, r2
 80096bc:	18ed      	addgt	r5, r5, r3
 80096be:	2600      	movs	r6, #0
 80096c0:	341a      	adds	r4, #26
 80096c2:	42b5      	cmp	r5, r6
 80096c4:	d11a      	bne.n	80096fc <_printf_common+0xc8>
 80096c6:	2000      	movs	r0, #0
 80096c8:	e008      	b.n	80096dc <_printf_common+0xa8>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4649      	mov	r1, r9
 80096d0:	4638      	mov	r0, r7
 80096d2:	47c0      	blx	r8
 80096d4:	3001      	adds	r0, #1
 80096d6:	d103      	bne.n	80096e0 <_printf_common+0xac>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e0:	3501      	adds	r5, #1
 80096e2:	e7c6      	b.n	8009672 <_printf_common+0x3e>
 80096e4:	18e1      	adds	r1, r4, r3
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	2030      	movs	r0, #48	; 0x30
 80096ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ee:	4422      	add	r2, r4
 80096f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096f8:	3302      	adds	r3, #2
 80096fa:	e7c7      	b.n	800968c <_printf_common+0x58>
 80096fc:	2301      	movs	r3, #1
 80096fe:	4622      	mov	r2, r4
 8009700:	4649      	mov	r1, r9
 8009702:	4638      	mov	r0, r7
 8009704:	47c0      	blx	r8
 8009706:	3001      	adds	r0, #1
 8009708:	d0e6      	beq.n	80096d8 <_printf_common+0xa4>
 800970a:	3601      	adds	r6, #1
 800970c:	e7d9      	b.n	80096c2 <_printf_common+0x8e>
	...

08009710 <_printf_i>:
 8009710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	7e0f      	ldrb	r7, [r1, #24]
 8009716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009718:	2f78      	cmp	r7, #120	; 0x78
 800971a:	4691      	mov	r9, r2
 800971c:	4680      	mov	r8, r0
 800971e:	460c      	mov	r4, r1
 8009720:	469a      	mov	sl, r3
 8009722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009726:	d807      	bhi.n	8009738 <_printf_i+0x28>
 8009728:	2f62      	cmp	r7, #98	; 0x62
 800972a:	d80a      	bhi.n	8009742 <_printf_i+0x32>
 800972c:	2f00      	cmp	r7, #0
 800972e:	f000 80d8 	beq.w	80098e2 <_printf_i+0x1d2>
 8009732:	2f58      	cmp	r7, #88	; 0x58
 8009734:	f000 80a3 	beq.w	800987e <_printf_i+0x16e>
 8009738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009740:	e03a      	b.n	80097b8 <_printf_i+0xa8>
 8009742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009746:	2b15      	cmp	r3, #21
 8009748:	d8f6      	bhi.n	8009738 <_printf_i+0x28>
 800974a:	a101      	add	r1, pc, #4	; (adr r1, 8009750 <_printf_i+0x40>)
 800974c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097bd 	.word	0x080097bd
 8009758:	08009739 	.word	0x08009739
 800975c:	08009739 	.word	0x08009739
 8009760:	08009739 	.word	0x08009739
 8009764:	08009739 	.word	0x08009739
 8009768:	080097bd 	.word	0x080097bd
 800976c:	08009739 	.word	0x08009739
 8009770:	08009739 	.word	0x08009739
 8009774:	08009739 	.word	0x08009739
 8009778:	08009739 	.word	0x08009739
 800977c:	080098c9 	.word	0x080098c9
 8009780:	080097ed 	.word	0x080097ed
 8009784:	080098ab 	.word	0x080098ab
 8009788:	08009739 	.word	0x08009739
 800978c:	08009739 	.word	0x08009739
 8009790:	080098eb 	.word	0x080098eb
 8009794:	08009739 	.word	0x08009739
 8009798:	080097ed 	.word	0x080097ed
 800979c:	08009739 	.word	0x08009739
 80097a0:	08009739 	.word	0x08009739
 80097a4:	080098b3 	.word	0x080098b3
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	602a      	str	r2, [r5, #0]
 80097b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0a3      	b.n	8009904 <_printf_i+0x1f4>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	6829      	ldr	r1, [r5, #0]
 80097c0:	0606      	lsls	r6, r0, #24
 80097c2:	f101 0304 	add.w	r3, r1, #4
 80097c6:	d50a      	bpl.n	80097de <_printf_i+0xce>
 80097c8:	680e      	ldr	r6, [r1, #0]
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	da03      	bge.n	80097d8 <_printf_i+0xc8>
 80097d0:	232d      	movs	r3, #45	; 0x2d
 80097d2:	4276      	negs	r6, r6
 80097d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d8:	485e      	ldr	r0, [pc, #376]	; (8009954 <_printf_i+0x244>)
 80097da:	230a      	movs	r3, #10
 80097dc:	e019      	b.n	8009812 <_printf_i+0x102>
 80097de:	680e      	ldr	r6, [r1, #0]
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097e6:	bf18      	it	ne
 80097e8:	b236      	sxthne	r6, r6
 80097ea:	e7ef      	b.n	80097cc <_printf_i+0xbc>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	6820      	ldr	r0, [r4, #0]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	6029      	str	r1, [r5, #0]
 80097f4:	0601      	lsls	r1, r0, #24
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0xec>
 80097f8:	681e      	ldr	r6, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0xf2>
 80097fc:	0646      	lsls	r6, r0, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0xe8>
 8009800:	881e      	ldrh	r6, [r3, #0]
 8009802:	4854      	ldr	r0, [pc, #336]	; (8009954 <_printf_i+0x244>)
 8009804:	2f6f      	cmp	r7, #111	; 0x6f
 8009806:	bf0c      	ite	eq
 8009808:	2308      	moveq	r3, #8
 800980a:	230a      	movne	r3, #10
 800980c:	2100      	movs	r1, #0
 800980e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009812:	6865      	ldr	r5, [r4, #4]
 8009814:	60a5      	str	r5, [r4, #8]
 8009816:	2d00      	cmp	r5, #0
 8009818:	bfa2      	ittt	ge
 800981a:	6821      	ldrge	r1, [r4, #0]
 800981c:	f021 0104 	bicge.w	r1, r1, #4
 8009820:	6021      	strge	r1, [r4, #0]
 8009822:	b90e      	cbnz	r6, 8009828 <_printf_i+0x118>
 8009824:	2d00      	cmp	r5, #0
 8009826:	d04d      	beq.n	80098c4 <_printf_i+0x1b4>
 8009828:	4615      	mov	r5, r2
 800982a:	fbb6 f1f3 	udiv	r1, r6, r3
 800982e:	fb03 6711 	mls	r7, r3, r1, r6
 8009832:	5dc7      	ldrb	r7, [r0, r7]
 8009834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009838:	4637      	mov	r7, r6
 800983a:	42bb      	cmp	r3, r7
 800983c:	460e      	mov	r6, r1
 800983e:	d9f4      	bls.n	800982a <_printf_i+0x11a>
 8009840:	2b08      	cmp	r3, #8
 8009842:	d10b      	bne.n	800985c <_printf_i+0x14c>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	07de      	lsls	r6, r3, #31
 8009848:	d508      	bpl.n	800985c <_printf_i+0x14c>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	6861      	ldr	r1, [r4, #4]
 800984e:	4299      	cmp	r1, r3
 8009850:	bfde      	ittt	le
 8009852:	2330      	movle	r3, #48	; 0x30
 8009854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800985c:	1b52      	subs	r2, r2, r5
 800985e:	6122      	str	r2, [r4, #16]
 8009860:	f8cd a000 	str.w	sl, [sp]
 8009864:	464b      	mov	r3, r9
 8009866:	aa03      	add	r2, sp, #12
 8009868:	4621      	mov	r1, r4
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff fee2 	bl	8009634 <_printf_common>
 8009870:	3001      	adds	r0, #1
 8009872:	d14c      	bne.n	800990e <_printf_i+0x1fe>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	b004      	add	sp, #16
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	4835      	ldr	r0, [pc, #212]	; (8009954 <_printf_i+0x244>)
 8009880:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009884:	6829      	ldr	r1, [r5, #0]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	f851 6b04 	ldr.w	r6, [r1], #4
 800988c:	6029      	str	r1, [r5, #0]
 800988e:	061d      	lsls	r5, r3, #24
 8009890:	d514      	bpl.n	80098bc <_printf_i+0x1ac>
 8009892:	07df      	lsls	r7, r3, #31
 8009894:	bf44      	itt	mi
 8009896:	f043 0320 	orrmi.w	r3, r3, #32
 800989a:	6023      	strmi	r3, [r4, #0]
 800989c:	b91e      	cbnz	r6, 80098a6 <_printf_i+0x196>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	f023 0320 	bic.w	r3, r3, #32
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	2310      	movs	r3, #16
 80098a8:	e7b0      	b.n	800980c <_printf_i+0xfc>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	f043 0320 	orr.w	r3, r3, #32
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	2378      	movs	r3, #120	; 0x78
 80098b4:	4828      	ldr	r0, [pc, #160]	; (8009958 <_printf_i+0x248>)
 80098b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098ba:	e7e3      	b.n	8009884 <_printf_i+0x174>
 80098bc:	0659      	lsls	r1, r3, #25
 80098be:	bf48      	it	mi
 80098c0:	b2b6      	uxthmi	r6, r6
 80098c2:	e7e6      	b.n	8009892 <_printf_i+0x182>
 80098c4:	4615      	mov	r5, r2
 80098c6:	e7bb      	b.n	8009840 <_printf_i+0x130>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	6826      	ldr	r6, [r4, #0]
 80098cc:	6961      	ldr	r1, [r4, #20]
 80098ce:	1d18      	adds	r0, r3, #4
 80098d0:	6028      	str	r0, [r5, #0]
 80098d2:	0635      	lsls	r5, r6, #24
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	d501      	bpl.n	80098dc <_printf_i+0x1cc>
 80098d8:	6019      	str	r1, [r3, #0]
 80098da:	e002      	b.n	80098e2 <_printf_i+0x1d2>
 80098dc:	0670      	lsls	r0, r6, #25
 80098de:	d5fb      	bpl.n	80098d8 <_printf_i+0x1c8>
 80098e0:	8019      	strh	r1, [r3, #0]
 80098e2:	2300      	movs	r3, #0
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	4615      	mov	r5, r2
 80098e8:	e7ba      	b.n	8009860 <_printf_i+0x150>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	1d1a      	adds	r2, r3, #4
 80098ee:	602a      	str	r2, [r5, #0]
 80098f0:	681d      	ldr	r5, [r3, #0]
 80098f2:	6862      	ldr	r2, [r4, #4]
 80098f4:	2100      	movs	r1, #0
 80098f6:	4628      	mov	r0, r5
 80098f8:	f7f6 fcfa 	bl	80002f0 <memchr>
 80098fc:	b108      	cbz	r0, 8009902 <_printf_i+0x1f2>
 80098fe:	1b40      	subs	r0, r0, r5
 8009900:	6060      	str	r0, [r4, #4]
 8009902:	6863      	ldr	r3, [r4, #4]
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	2300      	movs	r3, #0
 8009908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990c:	e7a8      	b.n	8009860 <_printf_i+0x150>
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	462a      	mov	r2, r5
 8009912:	4649      	mov	r1, r9
 8009914:	4640      	mov	r0, r8
 8009916:	47d0      	blx	sl
 8009918:	3001      	adds	r0, #1
 800991a:	d0ab      	beq.n	8009874 <_printf_i+0x164>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	079b      	lsls	r3, r3, #30
 8009920:	d413      	bmi.n	800994a <_printf_i+0x23a>
 8009922:	68e0      	ldr	r0, [r4, #12]
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	4298      	cmp	r0, r3
 8009928:	bfb8      	it	lt
 800992a:	4618      	movlt	r0, r3
 800992c:	e7a4      	b.n	8009878 <_printf_i+0x168>
 800992e:	2301      	movs	r3, #1
 8009930:	4632      	mov	r2, r6
 8009932:	4649      	mov	r1, r9
 8009934:	4640      	mov	r0, r8
 8009936:	47d0      	blx	sl
 8009938:	3001      	adds	r0, #1
 800993a:	d09b      	beq.n	8009874 <_printf_i+0x164>
 800993c:	3501      	adds	r5, #1
 800993e:	68e3      	ldr	r3, [r4, #12]
 8009940:	9903      	ldr	r1, [sp, #12]
 8009942:	1a5b      	subs	r3, r3, r1
 8009944:	42ab      	cmp	r3, r5
 8009946:	dcf2      	bgt.n	800992e <_printf_i+0x21e>
 8009948:	e7eb      	b.n	8009922 <_printf_i+0x212>
 800994a:	2500      	movs	r5, #0
 800994c:	f104 0619 	add.w	r6, r4, #25
 8009950:	e7f5      	b.n	800993e <_printf_i+0x22e>
 8009952:	bf00      	nop
 8009954:	0800c37a 	.word	0x0800c37a
 8009958:	0800c38b 	.word	0x0800c38b

0800995c <iprintf>:
 800995c:	b40f      	push	{r0, r1, r2, r3}
 800995e:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <iprintf+0x2c>)
 8009960:	b513      	push	{r0, r1, r4, lr}
 8009962:	681c      	ldr	r4, [r3, #0]
 8009964:	b124      	cbz	r4, 8009970 <iprintf+0x14>
 8009966:	69a3      	ldr	r3, [r4, #24]
 8009968:	b913      	cbnz	r3, 8009970 <iprintf+0x14>
 800996a:	4620      	mov	r0, r4
 800996c:	f000 fe82 	bl	800a674 <__sinit>
 8009970:	ab05      	add	r3, sp, #20
 8009972:	9a04      	ldr	r2, [sp, #16]
 8009974:	68a1      	ldr	r1, [r4, #8]
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	4620      	mov	r0, r4
 800997a:	f001 fd29 	bl	800b3d0 <_vfiprintf_r>
 800997e:	b002      	add	sp, #8
 8009980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009984:	b004      	add	sp, #16
 8009986:	4770      	bx	lr
 8009988:	24000018 	.word	0x24000018

0800998c <siprintf>:
 800998c:	b40e      	push	{r1, r2, r3}
 800998e:	b500      	push	{lr}
 8009990:	b09c      	sub	sp, #112	; 0x70
 8009992:	ab1d      	add	r3, sp, #116	; 0x74
 8009994:	9002      	str	r0, [sp, #8]
 8009996:	9006      	str	r0, [sp, #24]
 8009998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800999c:	4809      	ldr	r0, [pc, #36]	; (80099c4 <siprintf+0x38>)
 800999e:	9107      	str	r1, [sp, #28]
 80099a0:	9104      	str	r1, [sp, #16]
 80099a2:	4909      	ldr	r1, [pc, #36]	; (80099c8 <siprintf+0x3c>)
 80099a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a8:	9105      	str	r1, [sp, #20]
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	a902      	add	r1, sp, #8
 80099b0:	f001 fbe4 	bl	800b17c <_svfiprintf_r>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	b01c      	add	sp, #112	; 0x70
 80099bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c0:	b003      	add	sp, #12
 80099c2:	4770      	bx	lr
 80099c4:	24000018 	.word	0x24000018
 80099c8:	ffff0208 	.word	0xffff0208

080099cc <quorem>:
 80099cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	6903      	ldr	r3, [r0, #16]
 80099d2:	690c      	ldr	r4, [r1, #16]
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	4607      	mov	r7, r0
 80099d8:	f2c0 8081 	blt.w	8009ade <quorem+0x112>
 80099dc:	3c01      	subs	r4, #1
 80099de:	f101 0814 	add.w	r8, r1, #20
 80099e2:	f100 0514 	add.w	r5, r0, #20
 80099e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099f4:	3301      	adds	r3, #1
 80099f6:	429a      	cmp	r2, r3
 80099f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a00:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a04:	d331      	bcc.n	8009a6a <quorem+0x9e>
 8009a06:	f04f 0e00 	mov.w	lr, #0
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	46ac      	mov	ip, r5
 8009a0e:	46f2      	mov	sl, lr
 8009a10:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a14:	b293      	uxth	r3, r2
 8009a16:	fb06 e303 	mla	r3, r6, r3, lr
 8009a1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	ebaa 0303 	sub.w	r3, sl, r3
 8009a24:	f8dc a000 	ldr.w	sl, [ip]
 8009a28:	0c12      	lsrs	r2, r2, #16
 8009a2a:	fa13 f38a 	uxtah	r3, r3, sl
 8009a2e:	fb06 e202 	mla	r2, r6, r2, lr
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a44:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a48:	4581      	cmp	r9, r0
 8009a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a4e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a56:	d2db      	bcs.n	8009a10 <quorem+0x44>
 8009a58:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a5c:	b92b      	cbnz	r3, 8009a6a <quorem+0x9e>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	3b04      	subs	r3, #4
 8009a62:	429d      	cmp	r5, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	d32e      	bcc.n	8009ac6 <quorem+0xfa>
 8009a68:	613c      	str	r4, [r7, #16]
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f001 f932 	bl	800acd4 <__mcmp>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	db24      	blt.n	8009abe <quorem+0xf2>
 8009a74:	3601      	adds	r6, #1
 8009a76:	4628      	mov	r0, r5
 8009a78:	f04f 0c00 	mov.w	ip, #0
 8009a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a80:	f8d0 e000 	ldr.w	lr, [r0]
 8009a84:	b293      	uxth	r3, r2
 8009a86:	ebac 0303 	sub.w	r3, ip, r3
 8009a8a:	0c12      	lsrs	r2, r2, #16
 8009a8c:	fa13 f38e 	uxtah	r3, r3, lr
 8009a90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a9e:	45c1      	cmp	r9, r8
 8009aa0:	f840 3b04 	str.w	r3, [r0], #4
 8009aa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009aa8:	d2e8      	bcs.n	8009a7c <quorem+0xb0>
 8009aaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ab2:	b922      	cbnz	r2, 8009abe <quorem+0xf2>
 8009ab4:	3b04      	subs	r3, #4
 8009ab6:	429d      	cmp	r5, r3
 8009ab8:	461a      	mov	r2, r3
 8009aba:	d30a      	bcc.n	8009ad2 <quorem+0x106>
 8009abc:	613c      	str	r4, [r7, #16]
 8009abe:	4630      	mov	r0, r6
 8009ac0:	b003      	add	sp, #12
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	6812      	ldr	r2, [r2, #0]
 8009ac8:	3b04      	subs	r3, #4
 8009aca:	2a00      	cmp	r2, #0
 8009acc:	d1cc      	bne.n	8009a68 <quorem+0x9c>
 8009ace:	3c01      	subs	r4, #1
 8009ad0:	e7c7      	b.n	8009a62 <quorem+0x96>
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	d1f0      	bne.n	8009abc <quorem+0xf0>
 8009ada:	3c01      	subs	r4, #1
 8009adc:	e7eb      	b.n	8009ab6 <quorem+0xea>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e7ee      	b.n	8009ac0 <quorem+0xf4>
 8009ae2:	0000      	movs	r0, r0
 8009ae4:	0000      	movs	r0, r0
	...

08009ae8 <_dtoa_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b02 	vpush	{d8}
 8009af0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009af2:	b091      	sub	sp, #68	; 0x44
 8009af4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009af8:	ec59 8b10 	vmov	r8, r9, d0
 8009afc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009afe:	9106      	str	r1, [sp, #24]
 8009b00:	4606      	mov	r6, r0
 8009b02:	9208      	str	r2, [sp, #32]
 8009b04:	930c      	str	r3, [sp, #48]	; 0x30
 8009b06:	b975      	cbnz	r5, 8009b26 <_dtoa_r+0x3e>
 8009b08:	2010      	movs	r0, #16
 8009b0a:	f000 fe59 	bl	800a7c0 <malloc>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6270      	str	r0, [r6, #36]	; 0x24
 8009b12:	b920      	cbnz	r0, 8009b1e <_dtoa_r+0x36>
 8009b14:	4baa      	ldr	r3, [pc, #680]	; (8009dc0 <_dtoa_r+0x2d8>)
 8009b16:	21ea      	movs	r1, #234	; 0xea
 8009b18:	48aa      	ldr	r0, [pc, #680]	; (8009dc4 <_dtoa_r+0x2dc>)
 8009b1a:	f001 feaf 	bl	800b87c <__assert_func>
 8009b1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b22:	6005      	str	r5, [r0, #0]
 8009b24:	60c5      	str	r5, [r0, #12]
 8009b26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b28:	6819      	ldr	r1, [r3, #0]
 8009b2a:	b151      	cbz	r1, 8009b42 <_dtoa_r+0x5a>
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	604a      	str	r2, [r1, #4]
 8009b30:	2301      	movs	r3, #1
 8009b32:	4093      	lsls	r3, r2
 8009b34:	608b      	str	r3, [r1, #8]
 8009b36:	4630      	mov	r0, r6
 8009b38:	f000 fe8a 	bl	800a850 <_Bfree>
 8009b3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	f1b9 0300 	subs.w	r3, r9, #0
 8009b46:	bfbb      	ittet	lt
 8009b48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b4c:	9303      	strlt	r3, [sp, #12]
 8009b4e:	2300      	movge	r3, #0
 8009b50:	2201      	movlt	r2, #1
 8009b52:	bfac      	ite	ge
 8009b54:	6023      	strge	r3, [r4, #0]
 8009b56:	6022      	strlt	r2, [r4, #0]
 8009b58:	4b9b      	ldr	r3, [pc, #620]	; (8009dc8 <_dtoa_r+0x2e0>)
 8009b5a:	9c03      	ldr	r4, [sp, #12]
 8009b5c:	43a3      	bics	r3, r4
 8009b5e:	d11c      	bne.n	8009b9a <_dtoa_r+0xb2>
 8009b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009b6c:	ea53 0308 	orrs.w	r3, r3, r8
 8009b70:	f000 84fd 	beq.w	800a56e <_dtoa_r+0xa86>
 8009b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b76:	b963      	cbnz	r3, 8009b92 <_dtoa_r+0xaa>
 8009b78:	4b94      	ldr	r3, [pc, #592]	; (8009dcc <_dtoa_r+0x2e4>)
 8009b7a:	e01f      	b.n	8009bbc <_dtoa_r+0xd4>
 8009b7c:	4b94      	ldr	r3, [pc, #592]	; (8009dd0 <_dtoa_r+0x2e8>)
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	3308      	adds	r3, #8
 8009b82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	9801      	ldr	r0, [sp, #4]
 8009b88:	b011      	add	sp, #68	; 0x44
 8009b8a:	ecbd 8b02 	vpop	{d8}
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b92:	4b8e      	ldr	r3, [pc, #568]	; (8009dcc <_dtoa_r+0x2e4>)
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	3303      	adds	r3, #3
 8009b98:	e7f3      	b.n	8009b82 <_dtoa_r+0x9a>
 8009b9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009b9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	d10b      	bne.n	8009bc0 <_dtoa_r+0xd8>
 8009ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009baa:	2301      	movs	r3, #1
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 84d9 	beq.w	800a568 <_dtoa_r+0xa80>
 8009bb6:	4887      	ldr	r0, [pc, #540]	; (8009dd4 <_dtoa_r+0x2ec>)
 8009bb8:	6018      	str	r0, [r3, #0]
 8009bba:	1e43      	subs	r3, r0, #1
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	e7e2      	b.n	8009b86 <_dtoa_r+0x9e>
 8009bc0:	a90f      	add	r1, sp, #60	; 0x3c
 8009bc2:	aa0e      	add	r2, sp, #56	; 0x38
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	eeb0 0b48 	vmov.f64	d0, d8
 8009bca:	f001 f929 	bl	800ae20 <__d2b>
 8009bce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d046      	beq.n	8009c68 <_dtoa_r+0x180>
 8009bda:	ee18 4a90 	vmov	r4, s17
 8009bde:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009be2:	ec53 2b18 	vmov	r2, r3, d8
 8009be6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009bea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009bf2:	2400      	movs	r4, #0
 8009bf4:	ec43 2b16 	vmov	d6, r2, r3
 8009bf8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009bfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009da8 <_dtoa_r+0x2c0>
 8009c00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009c04:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009db0 <_dtoa_r+0x2c8>
 8009c08:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009db8 <_dtoa_r+0x2d0>
 8009c10:	ee07 1a90 	vmov	s15, r1
 8009c14:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009c18:	eeb0 7b46 	vmov.f64	d7, d6
 8009c1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009c20:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009c24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2c:	ee16 ba90 	vmov	fp, s13
 8009c30:	940a      	str	r4, [sp, #40]	; 0x28
 8009c32:	d508      	bpl.n	8009c46 <_dtoa_r+0x15e>
 8009c34:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009c38:	eeb4 6b47 	vcmp.f64	d6, d7
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	bf18      	it	ne
 8009c42:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009c46:	f1bb 0f16 	cmp.w	fp, #22
 8009c4a:	d82f      	bhi.n	8009cac <_dtoa_r+0x1c4>
 8009c4c:	4b62      	ldr	r3, [pc, #392]	; (8009dd8 <_dtoa_r+0x2f0>)
 8009c4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c52:	ed93 7b00 	vldr	d7, [r3]
 8009c56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5e:	d501      	bpl.n	8009c64 <_dtoa_r+0x17c>
 8009c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c64:	2300      	movs	r3, #0
 8009c66:	e022      	b.n	8009cae <_dtoa_r+0x1c6>
 8009c68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c6a:	4401      	add	r1, r0
 8009c6c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	bfc1      	itttt	gt
 8009c74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c78:	fa04 f303 	lslgt.w	r3, r4, r3
 8009c7c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009c80:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009c84:	bfd6      	itet	le
 8009c86:	f1c3 0320 	rsble	r3, r3, #32
 8009c8a:	ea43 0808 	orrgt.w	r8, r3, r8
 8009c8e:	fa08 f803 	lslle.w	r8, r8, r3
 8009c92:	ee07 8a90 	vmov	s15, r8
 8009c96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009c9a:	3901      	subs	r1, #1
 8009c9c:	ee17 4a90 	vmov	r4, s15
 8009ca0:	ec53 2b17 	vmov	r2, r3, d7
 8009ca4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009ca8:	2401      	movs	r4, #1
 8009caa:	e7a3      	b.n	8009bf4 <_dtoa_r+0x10c>
 8009cac:	2301      	movs	r3, #1
 8009cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb0:	1a43      	subs	r3, r0, r1
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	bf45      	ittet	mi
 8009cb6:	f1c3 0301 	rsbmi	r3, r3, #1
 8009cba:	9304      	strmi	r3, [sp, #16]
 8009cbc:	2300      	movpl	r3, #0
 8009cbe:	2300      	movmi	r3, #0
 8009cc0:	9205      	str	r2, [sp, #20]
 8009cc2:	bf54      	ite	pl
 8009cc4:	9304      	strpl	r3, [sp, #16]
 8009cc6:	9305      	strmi	r3, [sp, #20]
 8009cc8:	f1bb 0f00 	cmp.w	fp, #0
 8009ccc:	db18      	blt.n	8009d00 <_dtoa_r+0x218>
 8009cce:	9b05      	ldr	r3, [sp, #20]
 8009cd0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009cd4:	445b      	add	r3, fp
 8009cd6:	9305      	str	r3, [sp, #20]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9a06      	ldr	r2, [sp, #24]
 8009cdc:	2a09      	cmp	r2, #9
 8009cde:	d849      	bhi.n	8009d74 <_dtoa_r+0x28c>
 8009ce0:	2a05      	cmp	r2, #5
 8009ce2:	bfc4      	itt	gt
 8009ce4:	3a04      	subgt	r2, #4
 8009ce6:	9206      	strgt	r2, [sp, #24]
 8009ce8:	9a06      	ldr	r2, [sp, #24]
 8009cea:	f1a2 0202 	sub.w	r2, r2, #2
 8009cee:	bfcc      	ite	gt
 8009cf0:	2400      	movgt	r4, #0
 8009cf2:	2401      	movle	r4, #1
 8009cf4:	2a03      	cmp	r2, #3
 8009cf6:	d848      	bhi.n	8009d8a <_dtoa_r+0x2a2>
 8009cf8:	e8df f002 	tbb	[pc, r2]
 8009cfc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009d00:	9b04      	ldr	r3, [sp, #16]
 8009d02:	2200      	movs	r2, #0
 8009d04:	eba3 030b 	sub.w	r3, r3, fp
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0c:	f1cb 0300 	rsb	r3, fp, #0
 8009d10:	e7e3      	b.n	8009cda <_dtoa_r+0x1f2>
 8009d12:	2200      	movs	r2, #0
 8009d14:	9207      	str	r2, [sp, #28]
 8009d16:	9a08      	ldr	r2, [sp, #32]
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	dc39      	bgt.n	8009d90 <_dtoa_r+0x2a8>
 8009d1c:	f04f 0a01 	mov.w	sl, #1
 8009d20:	46d1      	mov	r9, sl
 8009d22:	4652      	mov	r2, sl
 8009d24:	f8cd a020 	str.w	sl, [sp, #32]
 8009d28:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6079      	str	r1, [r7, #4]
 8009d2e:	2004      	movs	r0, #4
 8009d30:	f100 0c14 	add.w	ip, r0, #20
 8009d34:	4594      	cmp	ip, r2
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	d92f      	bls.n	8009d9a <_dtoa_r+0x2b2>
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d3e:	f000 fd47 	bl	800a7d0 <_Balloc>
 8009d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d44:	9001      	str	r0, [sp, #4]
 8009d46:	4602      	mov	r2, r0
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d149      	bne.n	8009de0 <_dtoa_r+0x2f8>
 8009d4c:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <_dtoa_r+0x2f4>)
 8009d4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d52:	e6e1      	b.n	8009b18 <_dtoa_r+0x30>
 8009d54:	2201      	movs	r2, #1
 8009d56:	e7dd      	b.n	8009d14 <_dtoa_r+0x22c>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	9207      	str	r2, [sp, #28]
 8009d5c:	9a08      	ldr	r2, [sp, #32]
 8009d5e:	eb0b 0a02 	add.w	sl, fp, r2
 8009d62:	f10a 0901 	add.w	r9, sl, #1
 8009d66:	464a      	mov	r2, r9
 8009d68:	2a01      	cmp	r2, #1
 8009d6a:	bfb8      	it	lt
 8009d6c:	2201      	movlt	r2, #1
 8009d6e:	e7db      	b.n	8009d28 <_dtoa_r+0x240>
 8009d70:	2201      	movs	r2, #1
 8009d72:	e7f2      	b.n	8009d5a <_dtoa_r+0x272>
 8009d74:	2401      	movs	r4, #1
 8009d76:	2200      	movs	r2, #0
 8009d78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009d7c:	f04f 3aff 	mov.w	sl, #4294967295
 8009d80:	2100      	movs	r1, #0
 8009d82:	46d1      	mov	r9, sl
 8009d84:	2212      	movs	r2, #18
 8009d86:	9108      	str	r1, [sp, #32]
 8009d88:	e7ce      	b.n	8009d28 <_dtoa_r+0x240>
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	9207      	str	r2, [sp, #28]
 8009d8e:	e7f5      	b.n	8009d7c <_dtoa_r+0x294>
 8009d90:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d94:	46d1      	mov	r9, sl
 8009d96:	4652      	mov	r2, sl
 8009d98:	e7c6      	b.n	8009d28 <_dtoa_r+0x240>
 8009d9a:	3101      	adds	r1, #1
 8009d9c:	6079      	str	r1, [r7, #4]
 8009d9e:	0040      	lsls	r0, r0, #1
 8009da0:	e7c6      	b.n	8009d30 <_dtoa_r+0x248>
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
 8009da8:	636f4361 	.word	0x636f4361
 8009dac:	3fd287a7 	.word	0x3fd287a7
 8009db0:	8b60c8b3 	.word	0x8b60c8b3
 8009db4:	3fc68a28 	.word	0x3fc68a28
 8009db8:	509f79fb 	.word	0x509f79fb
 8009dbc:	3fd34413 	.word	0x3fd34413
 8009dc0:	0800c3a9 	.word	0x0800c3a9
 8009dc4:	0800c3c0 	.word	0x0800c3c0
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	0800c3a5 	.word	0x0800c3a5
 8009dd0:	0800c39c 	.word	0x0800c39c
 8009dd4:	0800c379 	.word	0x0800c379
 8009dd8:	0800c510 	.word	0x0800c510
 8009ddc:	0800c41b 	.word	0x0800c41b
 8009de0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009de2:	9901      	ldr	r1, [sp, #4]
 8009de4:	6011      	str	r1, [r2, #0]
 8009de6:	f1b9 0f0e 	cmp.w	r9, #14
 8009dea:	d86c      	bhi.n	8009ec6 <_dtoa_r+0x3de>
 8009dec:	2c00      	cmp	r4, #0
 8009dee:	d06a      	beq.n	8009ec6 <_dtoa_r+0x3de>
 8009df0:	f1bb 0f00 	cmp.w	fp, #0
 8009df4:	f340 80a0 	ble.w	8009f38 <_dtoa_r+0x450>
 8009df8:	49c1      	ldr	r1, [pc, #772]	; (800a100 <_dtoa_r+0x618>)
 8009dfa:	f00b 020f 	and.w	r2, fp, #15
 8009dfe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009e02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e06:	ed92 7b00 	vldr	d7, [r2]
 8009e0a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009e0e:	f000 8087 	beq.w	8009f20 <_dtoa_r+0x438>
 8009e12:	4abc      	ldr	r2, [pc, #752]	; (800a104 <_dtoa_r+0x61c>)
 8009e14:	ed92 6b08 	vldr	d6, [r2, #32]
 8009e18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009e1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009e20:	f001 010f 	and.w	r1, r1, #15
 8009e24:	2203      	movs	r2, #3
 8009e26:	48b7      	ldr	r0, [pc, #732]	; (800a104 <_dtoa_r+0x61c>)
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d17b      	bne.n	8009f24 <_dtoa_r+0x43c>
 8009e2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009e30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	f000 80a2 	beq.w	8009f84 <_dtoa_r+0x49c>
 8009e40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009e44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e50:	f140 8098 	bpl.w	8009f84 <_dtoa_r+0x49c>
 8009e54:	f1b9 0f00 	cmp.w	r9, #0
 8009e58:	f000 8094 	beq.w	8009f84 <_dtoa_r+0x49c>
 8009e5c:	f1ba 0f00 	cmp.w	sl, #0
 8009e60:	dd2f      	ble.n	8009ec2 <_dtoa_r+0x3da>
 8009e62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009e66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e6e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e72:	3201      	adds	r2, #1
 8009e74:	4650      	mov	r0, sl
 8009e76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009e7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009e7e:	ee07 2a90 	vmov	s15, r2
 8009e82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009e8a:	ee15 4a90 	vmov	r4, s11
 8009e8e:	ec52 1b15 	vmov	r1, r2, d5
 8009e92:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d177      	bne.n	8009f8a <_dtoa_r+0x4a2>
 8009e9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009e9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ea2:	ec42 1b17 	vmov	d7, r1, r2
 8009ea6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	f300 8263 	bgt.w	800a378 <_dtoa_r+0x890>
 8009eb2:	eeb1 7b47 	vneg.f64	d7, d7
 8009eb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	f100 8258 	bmi.w	800a372 <_dtoa_r+0x88a>
 8009ec2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	f2c0 811d 	blt.w	800a108 <_dtoa_r+0x620>
 8009ece:	f1bb 0f0e 	cmp.w	fp, #14
 8009ed2:	f300 8119 	bgt.w	800a108 <_dtoa_r+0x620>
 8009ed6:	4b8a      	ldr	r3, [pc, #552]	; (800a100 <_dtoa_r+0x618>)
 8009ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009edc:	ed93 6b00 	vldr	d6, [r3]
 8009ee0:	9b08      	ldr	r3, [sp, #32]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f280 80b7 	bge.w	800a056 <_dtoa_r+0x56e>
 8009ee8:	f1b9 0f00 	cmp.w	r9, #0
 8009eec:	f300 80b3 	bgt.w	800a056 <_dtoa_r+0x56e>
 8009ef0:	f040 823f 	bne.w	800a372 <_dtoa_r+0x88a>
 8009ef4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ef8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009efc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f08:	464c      	mov	r4, r9
 8009f0a:	464f      	mov	r7, r9
 8009f0c:	f280 8215 	bge.w	800a33a <_dtoa_r+0x852>
 8009f10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f14:	2331      	movs	r3, #49	; 0x31
 8009f16:	f808 3b01 	strb.w	r3, [r8], #1
 8009f1a:	f10b 0b01 	add.w	fp, fp, #1
 8009f1e:	e211      	b.n	800a344 <_dtoa_r+0x85c>
 8009f20:	2202      	movs	r2, #2
 8009f22:	e780      	b.n	8009e26 <_dtoa_r+0x33e>
 8009f24:	07cc      	lsls	r4, r1, #31
 8009f26:	d504      	bpl.n	8009f32 <_dtoa_r+0x44a>
 8009f28:	ed90 6b00 	vldr	d6, [r0]
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f32:	1049      	asrs	r1, r1, #1
 8009f34:	3008      	adds	r0, #8
 8009f36:	e777      	b.n	8009e28 <_dtoa_r+0x340>
 8009f38:	d022      	beq.n	8009f80 <_dtoa_r+0x498>
 8009f3a:	f1cb 0100 	rsb	r1, fp, #0
 8009f3e:	4a70      	ldr	r2, [pc, #448]	; (800a100 <_dtoa_r+0x618>)
 8009f40:	f001 000f 	and.w	r0, r1, #15
 8009f44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009f48:	ed92 7b00 	vldr	d7, [r2]
 8009f4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009f50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f54:	486b      	ldr	r0, [pc, #428]	; (800a104 <_dtoa_r+0x61c>)
 8009f56:	1109      	asrs	r1, r1, #4
 8009f58:	2400      	movs	r4, #0
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	b929      	cbnz	r1, 8009f6a <_dtoa_r+0x482>
 8009f5e:	2c00      	cmp	r4, #0
 8009f60:	f43f af6a 	beq.w	8009e38 <_dtoa_r+0x350>
 8009f64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f68:	e766      	b.n	8009e38 <_dtoa_r+0x350>
 8009f6a:	07cf      	lsls	r7, r1, #31
 8009f6c:	d505      	bpl.n	8009f7a <_dtoa_r+0x492>
 8009f6e:	ed90 6b00 	vldr	d6, [r0]
 8009f72:	3201      	adds	r2, #1
 8009f74:	2401      	movs	r4, #1
 8009f76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f7a:	1049      	asrs	r1, r1, #1
 8009f7c:	3008      	adds	r0, #8
 8009f7e:	e7ed      	b.n	8009f5c <_dtoa_r+0x474>
 8009f80:	2202      	movs	r2, #2
 8009f82:	e759      	b.n	8009e38 <_dtoa_r+0x350>
 8009f84:	465f      	mov	r7, fp
 8009f86:	4648      	mov	r0, r9
 8009f88:	e775      	b.n	8009e76 <_dtoa_r+0x38e>
 8009f8a:	ec42 1b17 	vmov	d7, r1, r2
 8009f8e:	4a5c      	ldr	r2, [pc, #368]	; (800a100 <_dtoa_r+0x618>)
 8009f90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009f94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009f98:	9a01      	ldr	r2, [sp, #4]
 8009f9a:	1814      	adds	r4, r2, r0
 8009f9c:	9a07      	ldr	r2, [sp, #28]
 8009f9e:	b352      	cbz	r2, 8009ff6 <_dtoa_r+0x50e>
 8009fa0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009fa4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009fa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009fac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009fb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009fb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009fb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009fbc:	ee14 2a90 	vmov	r2, s9
 8009fc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009fc4:	3230      	adds	r2, #48	; 0x30
 8009fc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009fca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd2:	f808 2b01 	strb.w	r2, [r8], #1
 8009fd6:	d439      	bmi.n	800a04c <_dtoa_r+0x564>
 8009fd8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009fdc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	d472      	bmi.n	800a0cc <_dtoa_r+0x5e4>
 8009fe6:	45a0      	cmp	r8, r4
 8009fe8:	f43f af6b 	beq.w	8009ec2 <_dtoa_r+0x3da>
 8009fec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ff0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ff4:	e7e0      	b.n	8009fb8 <_dtoa_r+0x4d0>
 8009ff6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ffa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ffe:	4621      	mov	r1, r4
 800a000:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a004:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a008:	ee14 2a90 	vmov	r2, s9
 800a00c:	3230      	adds	r2, #48	; 0x30
 800a00e:	f808 2b01 	strb.w	r2, [r8], #1
 800a012:	45a0      	cmp	r8, r4
 800a014:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a018:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a01c:	d118      	bne.n	800a050 <_dtoa_r+0x568>
 800a01e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a022:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a026:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02e:	dc4d      	bgt.n	800a0cc <_dtoa_r+0x5e4>
 800a030:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a034:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	f57f af41 	bpl.w	8009ec2 <_dtoa_r+0x3da>
 800a040:	4688      	mov	r8, r1
 800a042:	3901      	subs	r1, #1
 800a044:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d0f9      	beq.n	800a040 <_dtoa_r+0x558>
 800a04c:	46bb      	mov	fp, r7
 800a04e:	e02a      	b.n	800a0a6 <_dtoa_r+0x5be>
 800a050:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a054:	e7d6      	b.n	800a004 <_dtoa_r+0x51c>
 800a056:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a05a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a05e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a062:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a066:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a06a:	ee15 3a10 	vmov	r3, s10
 800a06e:	3330      	adds	r3, #48	; 0x30
 800a070:	f808 3b01 	strb.w	r3, [r8], #1
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	eba8 0303 	sub.w	r3, r8, r3
 800a07a:	4599      	cmp	r9, r3
 800a07c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a080:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a084:	d133      	bne.n	800a0ee <_dtoa_r+0x606>
 800a086:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a08a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a092:	dc1a      	bgt.n	800a0ca <_dtoa_r+0x5e2>
 800a094:	eeb4 7b46 	vcmp.f64	d7, d6
 800a098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09c:	d103      	bne.n	800a0a6 <_dtoa_r+0x5be>
 800a09e:	ee15 3a10 	vmov	r3, s10
 800a0a2:	07d9      	lsls	r1, r3, #31
 800a0a4:	d411      	bmi.n	800a0ca <_dtoa_r+0x5e2>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f000 fbd1 	bl	800a850 <_Bfree>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b2:	f888 3000 	strb.w	r3, [r8]
 800a0b6:	f10b 0301 	add.w	r3, fp, #1
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f43f ad61 	beq.w	8009b86 <_dtoa_r+0x9e>
 800a0c4:	f8c3 8000 	str.w	r8, [r3]
 800a0c8:	e55d      	b.n	8009b86 <_dtoa_r+0x9e>
 800a0ca:	465f      	mov	r7, fp
 800a0cc:	4643      	mov	r3, r8
 800a0ce:	4698      	mov	r8, r3
 800a0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0d4:	2a39      	cmp	r2, #57	; 0x39
 800a0d6:	d106      	bne.n	800a0e6 <_dtoa_r+0x5fe>
 800a0d8:	9a01      	ldr	r2, [sp, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d1f7      	bne.n	800a0ce <_dtoa_r+0x5e6>
 800a0de:	9901      	ldr	r1, [sp, #4]
 800a0e0:	2230      	movs	r2, #48	; 0x30
 800a0e2:	3701      	adds	r7, #1
 800a0e4:	700a      	strb	r2, [r1, #0]
 800a0e6:	781a      	ldrb	r2, [r3, #0]
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]
 800a0ec:	e7ae      	b.n	800a04c <_dtoa_r+0x564>
 800a0ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a0f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fa:	d1b2      	bne.n	800a062 <_dtoa_r+0x57a>
 800a0fc:	e7d3      	b.n	800a0a6 <_dtoa_r+0x5be>
 800a0fe:	bf00      	nop
 800a100:	0800c510 	.word	0x0800c510
 800a104:	0800c4e8 	.word	0x0800c4e8
 800a108:	9907      	ldr	r1, [sp, #28]
 800a10a:	2900      	cmp	r1, #0
 800a10c:	f000 80d0 	beq.w	800a2b0 <_dtoa_r+0x7c8>
 800a110:	9906      	ldr	r1, [sp, #24]
 800a112:	2901      	cmp	r1, #1
 800a114:	f300 80b4 	bgt.w	800a280 <_dtoa_r+0x798>
 800a118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a11a:	2900      	cmp	r1, #0
 800a11c:	f000 80ac 	beq.w	800a278 <_dtoa_r+0x790>
 800a120:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a124:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a128:	461c      	mov	r4, r3
 800a12a:	930a      	str	r3, [sp, #40]	; 0x28
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	4413      	add	r3, r2
 800a130:	9304      	str	r3, [sp, #16]
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	2101      	movs	r1, #1
 800a136:	4413      	add	r3, r2
 800a138:	4630      	mov	r0, r6
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	f000 fc40 	bl	800a9c0 <__i2b>
 800a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a142:	4607      	mov	r7, r0
 800a144:	f1b8 0f00 	cmp.w	r8, #0
 800a148:	dd0d      	ble.n	800a166 <_dtoa_r+0x67e>
 800a14a:	9a05      	ldr	r2, [sp, #20]
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	dd0a      	ble.n	800a166 <_dtoa_r+0x67e>
 800a150:	4542      	cmp	r2, r8
 800a152:	9904      	ldr	r1, [sp, #16]
 800a154:	bfa8      	it	ge
 800a156:	4642      	movge	r2, r8
 800a158:	1a89      	subs	r1, r1, r2
 800a15a:	9104      	str	r1, [sp, #16]
 800a15c:	9905      	ldr	r1, [sp, #20]
 800a15e:	eba8 0802 	sub.w	r8, r8, r2
 800a162:	1a8a      	subs	r2, r1, r2
 800a164:	9205      	str	r2, [sp, #20]
 800a166:	b303      	cbz	r3, 800a1aa <_dtoa_r+0x6c2>
 800a168:	9a07      	ldr	r2, [sp, #28]
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	f000 80a5 	beq.w	800a2ba <_dtoa_r+0x7d2>
 800a170:	2c00      	cmp	r4, #0
 800a172:	dd13      	ble.n	800a19c <_dtoa_r+0x6b4>
 800a174:	4639      	mov	r1, r7
 800a176:	4622      	mov	r2, r4
 800a178:	4630      	mov	r0, r6
 800a17a:	930d      	str	r3, [sp, #52]	; 0x34
 800a17c:	f000 fce0 	bl	800ab40 <__pow5mult>
 800a180:	462a      	mov	r2, r5
 800a182:	4601      	mov	r1, r0
 800a184:	4607      	mov	r7, r0
 800a186:	4630      	mov	r0, r6
 800a188:	f000 fc30 	bl	800a9ec <__multiply>
 800a18c:	4629      	mov	r1, r5
 800a18e:	900a      	str	r0, [sp, #40]	; 0x28
 800a190:	4630      	mov	r0, r6
 800a192:	f000 fb5d 	bl	800a850 <_Bfree>
 800a196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19a:	4615      	mov	r5, r2
 800a19c:	1b1a      	subs	r2, r3, r4
 800a19e:	d004      	beq.n	800a1aa <_dtoa_r+0x6c2>
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 fccc 	bl	800ab40 <__pow5mult>
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f000 fc07 	bl	800a9c0 <__i2b>
 800a1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	f340 8081 	ble.w	800a2be <_dtoa_r+0x7d6>
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 fcbd 	bl	800ab40 <__pow5mult>
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	dd7a      	ble.n	800a2c4 <_dtoa_r+0x7dc>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d2:	6922      	ldr	r2, [r4, #16]
 800a1d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a1d8:	6910      	ldr	r0, [r2, #16]
 800a1da:	f000 fba1 	bl	800a920 <__hi0bits>
 800a1de:	f1c0 0020 	rsb	r0, r0, #32
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	4418      	add	r0, r3
 800a1e6:	f010 001f 	ands.w	r0, r0, #31
 800a1ea:	f000 808c 	beq.w	800a306 <_dtoa_r+0x81e>
 800a1ee:	f1c0 0220 	rsb	r2, r0, #32
 800a1f2:	2a04      	cmp	r2, #4
 800a1f4:	f340 8085 	ble.w	800a302 <_dtoa_r+0x81a>
 800a1f8:	f1c0 001c 	rsb	r0, r0, #28
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	4403      	add	r3, r0
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	4403      	add	r3, r0
 800a206:	4480      	add	r8, r0
 800a208:	9305      	str	r3, [sp, #20]
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd05      	ble.n	800a21c <_dtoa_r+0x734>
 800a210:	4629      	mov	r1, r5
 800a212:	461a      	mov	r2, r3
 800a214:	4630      	mov	r0, r6
 800a216:	f000 fced 	bl	800abf4 <__lshift>
 800a21a:	4605      	mov	r5, r0
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd05      	ble.n	800a22e <_dtoa_r+0x746>
 800a222:	4621      	mov	r1, r4
 800a224:	461a      	mov	r2, r3
 800a226:	4630      	mov	r0, r6
 800a228:	f000 fce4 	bl	800abf4 <__lshift>
 800a22c:	4604      	mov	r4, r0
 800a22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d06a      	beq.n	800a30a <_dtoa_r+0x822>
 800a234:	4621      	mov	r1, r4
 800a236:	4628      	mov	r0, r5
 800a238:	f000 fd4c 	bl	800acd4 <__mcmp>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	da64      	bge.n	800a30a <_dtoa_r+0x822>
 800a240:	2300      	movs	r3, #0
 800a242:	4629      	mov	r1, r5
 800a244:	220a      	movs	r2, #10
 800a246:	4630      	mov	r0, r6
 800a248:	f000 fb24 	bl	800a894 <__multadd>
 800a24c:	9b07      	ldr	r3, [sp, #28]
 800a24e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a252:	4605      	mov	r5, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 8191 	beq.w	800a57c <_dtoa_r+0xa94>
 800a25a:	4639      	mov	r1, r7
 800a25c:	2300      	movs	r3, #0
 800a25e:	220a      	movs	r2, #10
 800a260:	4630      	mov	r0, r6
 800a262:	f000 fb17 	bl	800a894 <__multadd>
 800a266:	f1ba 0f00 	cmp.w	sl, #0
 800a26a:	4607      	mov	r7, r0
 800a26c:	f300 808d 	bgt.w	800a38a <_dtoa_r+0x8a2>
 800a270:	9b06      	ldr	r3, [sp, #24]
 800a272:	2b02      	cmp	r3, #2
 800a274:	dc50      	bgt.n	800a318 <_dtoa_r+0x830>
 800a276:	e088      	b.n	800a38a <_dtoa_r+0x8a2>
 800a278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a27a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a27e:	e751      	b.n	800a124 <_dtoa_r+0x63c>
 800a280:	f109 34ff 	add.w	r4, r9, #4294967295
 800a284:	42a3      	cmp	r3, r4
 800a286:	bfbf      	itttt	lt
 800a288:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a28a:	1ae3      	sublt	r3, r4, r3
 800a28c:	18d2      	addlt	r2, r2, r3
 800a28e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a290:	bfb6      	itet	lt
 800a292:	4623      	movlt	r3, r4
 800a294:	1b1c      	subge	r4, r3, r4
 800a296:	2400      	movlt	r4, #0
 800a298:	f1b9 0f00 	cmp.w	r9, #0
 800a29c:	bfb5      	itete	lt
 800a29e:	9a04      	ldrlt	r2, [sp, #16]
 800a2a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a2a4:	eba2 0809 	sublt.w	r8, r2, r9
 800a2a8:	464a      	movge	r2, r9
 800a2aa:	bfb8      	it	lt
 800a2ac:	2200      	movlt	r2, #0
 800a2ae:	e73c      	b.n	800a12a <_dtoa_r+0x642>
 800a2b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a2b4:	9f07      	ldr	r7, [sp, #28]
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	e744      	b.n	800a144 <_dtoa_r+0x65c>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	e770      	b.n	800a1a0 <_dtoa_r+0x6b8>
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	dc18      	bgt.n	800a2f6 <_dtoa_r+0x80e>
 800a2c4:	9b02      	ldr	r3, [sp, #8]
 800a2c6:	b9b3      	cbnz	r3, 800a2f6 <_dtoa_r+0x80e>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a2ce:	b9a2      	cbnz	r2, 800a2fa <_dtoa_r+0x812>
 800a2d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2d4:	0d12      	lsrs	r2, r2, #20
 800a2d6:	0512      	lsls	r2, r2, #20
 800a2d8:	b18a      	cbz	r2, 800a2fe <_dtoa_r+0x816>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	9304      	str	r3, [sp, #16]
 800a2e0:	9b05      	ldr	r3, [sp, #20]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f47f af70 	bne.w	800a1d2 <_dtoa_r+0x6ea>
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	e775      	b.n	800a1e2 <_dtoa_r+0x6fa>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e7f6      	b.n	800a2e8 <_dtoa_r+0x800>
 800a2fa:	9b02      	ldr	r3, [sp, #8]
 800a2fc:	e7f4      	b.n	800a2e8 <_dtoa_r+0x800>
 800a2fe:	920a      	str	r2, [sp, #40]	; 0x28
 800a300:	e7f3      	b.n	800a2ea <_dtoa_r+0x802>
 800a302:	d082      	beq.n	800a20a <_dtoa_r+0x722>
 800a304:	4610      	mov	r0, r2
 800a306:	301c      	adds	r0, #28
 800a308:	e778      	b.n	800a1fc <_dtoa_r+0x714>
 800a30a:	f1b9 0f00 	cmp.w	r9, #0
 800a30e:	dc37      	bgt.n	800a380 <_dtoa_r+0x898>
 800a310:	9b06      	ldr	r3, [sp, #24]
 800a312:	2b02      	cmp	r3, #2
 800a314:	dd34      	ble.n	800a380 <_dtoa_r+0x898>
 800a316:	46ca      	mov	sl, r9
 800a318:	f1ba 0f00 	cmp.w	sl, #0
 800a31c:	d10d      	bne.n	800a33a <_dtoa_r+0x852>
 800a31e:	4621      	mov	r1, r4
 800a320:	4653      	mov	r3, sl
 800a322:	2205      	movs	r2, #5
 800a324:	4630      	mov	r0, r6
 800a326:	f000 fab5 	bl	800a894 <__multadd>
 800a32a:	4601      	mov	r1, r0
 800a32c:	4604      	mov	r4, r0
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 fcd0 	bl	800acd4 <__mcmp>
 800a334:	2800      	cmp	r0, #0
 800a336:	f73f adeb 	bgt.w	8009f10 <_dtoa_r+0x428>
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a340:	ea6f 0b03 	mvn.w	fp, r3
 800a344:	f04f 0900 	mov.w	r9, #0
 800a348:	4621      	mov	r1, r4
 800a34a:	4630      	mov	r0, r6
 800a34c:	f000 fa80 	bl	800a850 <_Bfree>
 800a350:	2f00      	cmp	r7, #0
 800a352:	f43f aea8 	beq.w	800a0a6 <_dtoa_r+0x5be>
 800a356:	f1b9 0f00 	cmp.w	r9, #0
 800a35a:	d005      	beq.n	800a368 <_dtoa_r+0x880>
 800a35c:	45b9      	cmp	r9, r7
 800a35e:	d003      	beq.n	800a368 <_dtoa_r+0x880>
 800a360:	4649      	mov	r1, r9
 800a362:	4630      	mov	r0, r6
 800a364:	f000 fa74 	bl	800a850 <_Bfree>
 800a368:	4639      	mov	r1, r7
 800a36a:	4630      	mov	r0, r6
 800a36c:	f000 fa70 	bl	800a850 <_Bfree>
 800a370:	e699      	b.n	800a0a6 <_dtoa_r+0x5be>
 800a372:	2400      	movs	r4, #0
 800a374:	4627      	mov	r7, r4
 800a376:	e7e0      	b.n	800a33a <_dtoa_r+0x852>
 800a378:	46bb      	mov	fp, r7
 800a37a:	4604      	mov	r4, r0
 800a37c:	4607      	mov	r7, r0
 800a37e:	e5c7      	b.n	8009f10 <_dtoa_r+0x428>
 800a380:	9b07      	ldr	r3, [sp, #28]
 800a382:	46ca      	mov	sl, r9
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8100 	beq.w	800a58a <_dtoa_r+0xaa2>
 800a38a:	f1b8 0f00 	cmp.w	r8, #0
 800a38e:	dd05      	ble.n	800a39c <_dtoa_r+0x8b4>
 800a390:	4639      	mov	r1, r7
 800a392:	4642      	mov	r2, r8
 800a394:	4630      	mov	r0, r6
 800a396:	f000 fc2d 	bl	800abf4 <__lshift>
 800a39a:	4607      	mov	r7, r0
 800a39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d05d      	beq.n	800a45e <_dtoa_r+0x976>
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 fa13 	bl	800a7d0 <_Balloc>
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <_dtoa_r+0x8d2>
 800a3ae:	4b82      	ldr	r3, [pc, #520]	; (800a5b8 <_dtoa_r+0xad0>)
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3b6:	f7ff bbaf 	b.w	8009b18 <_dtoa_r+0x30>
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	3202      	adds	r2, #2
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	f107 010c 	add.w	r1, r7, #12
 800a3c4:	300c      	adds	r0, #12
 800a3c6:	f7fe fe6f 	bl	80090a8 <memcpy>
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4641      	mov	r1, r8
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f000 fc10 	bl	800abf4 <__lshift>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	4453      	add	r3, sl
 800a3de:	9308      	str	r3, [sp, #32]
 800a3e0:	9b02      	ldr	r3, [sp, #8]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	46b9      	mov	r9, r7
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	f7ff fae9 	bl	80099cc <quorem>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	3330      	adds	r3, #48	; 0x30
 800a3fe:	9005      	str	r0, [sp, #20]
 800a400:	4649      	mov	r1, r9
 800a402:	4628      	mov	r0, r5
 800a404:	9309      	str	r3, [sp, #36]	; 0x24
 800a406:	f000 fc65 	bl	800acd4 <__mcmp>
 800a40a:	463a      	mov	r2, r7
 800a40c:	4682      	mov	sl, r0
 800a40e:	4621      	mov	r1, r4
 800a410:	4630      	mov	r0, r6
 800a412:	f000 fc7b 	bl	800ad0c <__mdiff>
 800a416:	68c2      	ldr	r2, [r0, #12]
 800a418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41a:	4680      	mov	r8, r0
 800a41c:	bb0a      	cbnz	r2, 800a462 <_dtoa_r+0x97a>
 800a41e:	4601      	mov	r1, r0
 800a420:	4628      	mov	r0, r5
 800a422:	f000 fc57 	bl	800acd4 <__mcmp>
 800a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a428:	4602      	mov	r2, r0
 800a42a:	4641      	mov	r1, r8
 800a42c:	4630      	mov	r0, r6
 800a42e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a432:	f000 fa0d 	bl	800a850 <_Bfree>
 800a436:	9b06      	ldr	r3, [sp, #24]
 800a438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a43a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a43e:	ea43 0102 	orr.w	r1, r3, r2
 800a442:	9b07      	ldr	r3, [sp, #28]
 800a444:	430b      	orrs	r3, r1
 800a446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a448:	d10d      	bne.n	800a466 <_dtoa_r+0x97e>
 800a44a:	2b39      	cmp	r3, #57	; 0x39
 800a44c:	d029      	beq.n	800a4a2 <_dtoa_r+0x9ba>
 800a44e:	f1ba 0f00 	cmp.w	sl, #0
 800a452:	dd01      	ble.n	800a458 <_dtoa_r+0x970>
 800a454:	9b05      	ldr	r3, [sp, #20]
 800a456:	3331      	adds	r3, #49	; 0x31
 800a458:	9a02      	ldr	r2, [sp, #8]
 800a45a:	7013      	strb	r3, [r2, #0]
 800a45c:	e774      	b.n	800a348 <_dtoa_r+0x860>
 800a45e:	4638      	mov	r0, r7
 800a460:	e7b8      	b.n	800a3d4 <_dtoa_r+0x8ec>
 800a462:	2201      	movs	r2, #1
 800a464:	e7e1      	b.n	800a42a <_dtoa_r+0x942>
 800a466:	f1ba 0f00 	cmp.w	sl, #0
 800a46a:	db06      	blt.n	800a47a <_dtoa_r+0x992>
 800a46c:	9906      	ldr	r1, [sp, #24]
 800a46e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a472:	9907      	ldr	r1, [sp, #28]
 800a474:	ea5a 0101 	orrs.w	r1, sl, r1
 800a478:	d120      	bne.n	800a4bc <_dtoa_r+0x9d4>
 800a47a:	2a00      	cmp	r2, #0
 800a47c:	ddec      	ble.n	800a458 <_dtoa_r+0x970>
 800a47e:	4629      	mov	r1, r5
 800a480:	2201      	movs	r2, #1
 800a482:	4630      	mov	r0, r6
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	f000 fbb5 	bl	800abf4 <__lshift>
 800a48a:	4621      	mov	r1, r4
 800a48c:	4605      	mov	r5, r0
 800a48e:	f000 fc21 	bl	800acd4 <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	dc02      	bgt.n	800a49e <_dtoa_r+0x9b6>
 800a498:	d1de      	bne.n	800a458 <_dtoa_r+0x970>
 800a49a:	07da      	lsls	r2, r3, #31
 800a49c:	d5dc      	bpl.n	800a458 <_dtoa_r+0x970>
 800a49e:	2b39      	cmp	r3, #57	; 0x39
 800a4a0:	d1d8      	bne.n	800a454 <_dtoa_r+0x96c>
 800a4a2:	9a02      	ldr	r2, [sp, #8]
 800a4a4:	2339      	movs	r3, #57	; 0x39
 800a4a6:	7013      	strb	r3, [r2, #0]
 800a4a8:	4643      	mov	r3, r8
 800a4aa:	4698      	mov	r8, r3
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a4b2:	2a39      	cmp	r2, #57	; 0x39
 800a4b4:	d051      	beq.n	800a55a <_dtoa_r+0xa72>
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	e745      	b.n	800a348 <_dtoa_r+0x860>
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	dd03      	ble.n	800a4c8 <_dtoa_r+0x9e0>
 800a4c0:	2b39      	cmp	r3, #57	; 0x39
 800a4c2:	d0ee      	beq.n	800a4a2 <_dtoa_r+0x9ba>
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	e7c7      	b.n	800a458 <_dtoa_r+0x970>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	9908      	ldr	r1, [sp, #32]
 800a4cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4d0:	428a      	cmp	r2, r1
 800a4d2:	d02b      	beq.n	800a52c <_dtoa_r+0xa44>
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f000 f9da 	bl	800a894 <__multadd>
 800a4e0:	45b9      	cmp	r9, r7
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	f04f 0300 	mov.w	r3, #0
 800a4e8:	f04f 020a 	mov.w	r2, #10
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	d107      	bne.n	800a502 <_dtoa_r+0xa1a>
 800a4f2:	f000 f9cf 	bl	800a894 <__multadd>
 800a4f6:	4681      	mov	r9, r0
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	9304      	str	r3, [sp, #16]
 800a500:	e774      	b.n	800a3ec <_dtoa_r+0x904>
 800a502:	f000 f9c7 	bl	800a894 <__multadd>
 800a506:	4639      	mov	r1, r7
 800a508:	4681      	mov	r9, r0
 800a50a:	2300      	movs	r3, #0
 800a50c:	220a      	movs	r2, #10
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f9c0 	bl	800a894 <__multadd>
 800a514:	4607      	mov	r7, r0
 800a516:	e7f0      	b.n	800a4fa <_dtoa_r+0xa12>
 800a518:	f1ba 0f00 	cmp.w	sl, #0
 800a51c:	9a01      	ldr	r2, [sp, #4]
 800a51e:	bfcc      	ite	gt
 800a520:	46d0      	movgt	r8, sl
 800a522:	f04f 0801 	movle.w	r8, #1
 800a526:	4490      	add	r8, r2
 800a528:	f04f 0900 	mov.w	r9, #0
 800a52c:	4629      	mov	r1, r5
 800a52e:	2201      	movs	r2, #1
 800a530:	4630      	mov	r0, r6
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	f000 fb5e 	bl	800abf4 <__lshift>
 800a538:	4621      	mov	r1, r4
 800a53a:	4605      	mov	r5, r0
 800a53c:	f000 fbca 	bl	800acd4 <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	dcb1      	bgt.n	800a4a8 <_dtoa_r+0x9c0>
 800a544:	d102      	bne.n	800a54c <_dtoa_r+0xa64>
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	07db      	lsls	r3, r3, #31
 800a54a:	d4ad      	bmi.n	800a4a8 <_dtoa_r+0x9c0>
 800a54c:	4643      	mov	r3, r8
 800a54e:	4698      	mov	r8, r3
 800a550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a554:	2a30      	cmp	r2, #48	; 0x30
 800a556:	d0fa      	beq.n	800a54e <_dtoa_r+0xa66>
 800a558:	e6f6      	b.n	800a348 <_dtoa_r+0x860>
 800a55a:	9a01      	ldr	r2, [sp, #4]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d1a4      	bne.n	800a4aa <_dtoa_r+0x9c2>
 800a560:	f10b 0b01 	add.w	fp, fp, #1
 800a564:	2331      	movs	r3, #49	; 0x31
 800a566:	e778      	b.n	800a45a <_dtoa_r+0x972>
 800a568:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <_dtoa_r+0xad4>)
 800a56a:	f7ff bb27 	b.w	8009bbc <_dtoa_r+0xd4>
 800a56e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a570:	2b00      	cmp	r3, #0
 800a572:	f47f ab03 	bne.w	8009b7c <_dtoa_r+0x94>
 800a576:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <_dtoa_r+0xad8>)
 800a578:	f7ff bb20 	b.w	8009bbc <_dtoa_r+0xd4>
 800a57c:	f1ba 0f00 	cmp.w	sl, #0
 800a580:	dc03      	bgt.n	800a58a <_dtoa_r+0xaa2>
 800a582:	9b06      	ldr	r3, [sp, #24]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f73f aec7 	bgt.w	800a318 <_dtoa_r+0x830>
 800a58a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f7ff fa1b 	bl	80099cc <quorem>
 800a596:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a59a:	f808 3b01 	strb.w	r3, [r8], #1
 800a59e:	9a01      	ldr	r2, [sp, #4]
 800a5a0:	eba8 0202 	sub.w	r2, r8, r2
 800a5a4:	4592      	cmp	sl, r2
 800a5a6:	ddb7      	ble.n	800a518 <_dtoa_r+0xa30>
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	220a      	movs	r2, #10
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f000 f970 	bl	800a894 <__multadd>
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	e7ea      	b.n	800a58e <_dtoa_r+0xaa6>
 800a5b8:	0800c41b 	.word	0x0800c41b
 800a5bc:	0800c378 	.word	0x0800c378
 800a5c0:	0800c39c 	.word	0x0800c39c

0800a5c4 <std>:
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5d2:	6083      	str	r3, [r0, #8]
 800a5d4:	8181      	strh	r1, [r0, #12]
 800a5d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5d8:	81c2      	strh	r2, [r0, #14]
 800a5da:	6183      	str	r3, [r0, #24]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	2208      	movs	r2, #8
 800a5e0:	305c      	adds	r0, #92	; 0x5c
 800a5e2:	f7fe fd6f 	bl	80090c4 <memset>
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <std+0x38>)
 800a5e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <std+0x3c>)
 800a5ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <std+0x40>)
 800a5f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <std+0x44>)
 800a5f4:	6224      	str	r4, [r4, #32]
 800a5f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0800b651 	.word	0x0800b651
 800a600:	0800b673 	.word	0x0800b673
 800a604:	0800b6ab 	.word	0x0800b6ab
 800a608:	0800b6cf 	.word	0x0800b6cf

0800a60c <_cleanup_r>:
 800a60c:	4901      	ldr	r1, [pc, #4]	; (800a614 <_cleanup_r+0x8>)
 800a60e:	f000 b8af 	b.w	800a770 <_fwalk_reent>
 800a612:	bf00      	nop
 800a614:	0800b9e5 	.word	0x0800b9e5

0800a618 <__sfmoreglue>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	2268      	movs	r2, #104	; 0x68
 800a61c:	1e4d      	subs	r5, r1, #1
 800a61e:	4355      	muls	r5, r2
 800a620:	460e      	mov	r6, r1
 800a622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a626:	f000 fcd9 	bl	800afdc <_malloc_r>
 800a62a:	4604      	mov	r4, r0
 800a62c:	b140      	cbz	r0, 800a640 <__sfmoreglue+0x28>
 800a62e:	2100      	movs	r1, #0
 800a630:	e9c0 1600 	strd	r1, r6, [r0]
 800a634:	300c      	adds	r0, #12
 800a636:	60a0      	str	r0, [r4, #8]
 800a638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a63c:	f7fe fd42 	bl	80090c4 <memset>
 800a640:	4620      	mov	r0, r4
 800a642:	bd70      	pop	{r4, r5, r6, pc}

0800a644 <__sfp_lock_acquire>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sfp_lock_acquire+0x8>)
 800a646:	f000 b8b8 	b.w	800a7ba <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	2400061d 	.word	0x2400061d

0800a650 <__sfp_lock_release>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sfp_lock_release+0x8>)
 800a652:	f000 b8b3 	b.w	800a7bc <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	2400061d 	.word	0x2400061d

0800a65c <__sinit_lock_acquire>:
 800a65c:	4801      	ldr	r0, [pc, #4]	; (800a664 <__sinit_lock_acquire+0x8>)
 800a65e:	f000 b8ac 	b.w	800a7ba <__retarget_lock_acquire_recursive>
 800a662:	bf00      	nop
 800a664:	2400061e 	.word	0x2400061e

0800a668 <__sinit_lock_release>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__sinit_lock_release+0x8>)
 800a66a:	f000 b8a7 	b.w	800a7bc <__retarget_lock_release_recursive>
 800a66e:	bf00      	nop
 800a670:	2400061e 	.word	0x2400061e

0800a674 <__sinit>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	f7ff fff0 	bl	800a65c <__sinit_lock_acquire>
 800a67c:	69a3      	ldr	r3, [r4, #24]
 800a67e:	b11b      	cbz	r3, 800a688 <__sinit+0x14>
 800a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a684:	f7ff bff0 	b.w	800a668 <__sinit_lock_release>
 800a688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a68c:	6523      	str	r3, [r4, #80]	; 0x50
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <__sinit+0x68>)
 800a690:	4a13      	ldr	r2, [pc, #76]	; (800a6e0 <__sinit+0x6c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	62a2      	str	r2, [r4, #40]	; 0x28
 800a696:	42a3      	cmp	r3, r4
 800a698:	bf04      	itt	eq
 800a69a:	2301      	moveq	r3, #1
 800a69c:	61a3      	streq	r3, [r4, #24]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f820 	bl	800a6e4 <__sfp>
 800a6a4:	6060      	str	r0, [r4, #4]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f81c 	bl	800a6e4 <__sfp>
 800a6ac:	60a0      	str	r0, [r4, #8]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 f818 	bl	800a6e4 <__sfp>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	60e0      	str	r0, [r4, #12]
 800a6b8:	2104      	movs	r1, #4
 800a6ba:	6860      	ldr	r0, [r4, #4]
 800a6bc:	f7ff ff82 	bl	800a5c4 <std>
 800a6c0:	68a0      	ldr	r0, [r4, #8]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	2109      	movs	r1, #9
 800a6c6:	f7ff ff7d 	bl	800a5c4 <std>
 800a6ca:	68e0      	ldr	r0, [r4, #12]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	2112      	movs	r1, #18
 800a6d0:	f7ff ff78 	bl	800a5c4 <std>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61a3      	str	r3, [r4, #24]
 800a6d8:	e7d2      	b.n	800a680 <__sinit+0xc>
 800a6da:	bf00      	nop
 800a6dc:	0800c364 	.word	0x0800c364
 800a6e0:	0800a60d 	.word	0x0800a60d

0800a6e4 <__sfp>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	f7ff ffac 	bl	800a644 <__sfp_lock_acquire>
 800a6ec:	4b1e      	ldr	r3, [pc, #120]	; (800a768 <__sfp+0x84>)
 800a6ee:	681e      	ldr	r6, [r3, #0]
 800a6f0:	69b3      	ldr	r3, [r6, #24]
 800a6f2:	b913      	cbnz	r3, 800a6fa <__sfp+0x16>
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff ffbd 	bl	800a674 <__sinit>
 800a6fa:	3648      	adds	r6, #72	; 0x48
 800a6fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	d503      	bpl.n	800a70c <__sfp+0x28>
 800a704:	6833      	ldr	r3, [r6, #0]
 800a706:	b30b      	cbz	r3, 800a74c <__sfp+0x68>
 800a708:	6836      	ldr	r6, [r6, #0]
 800a70a:	e7f7      	b.n	800a6fc <__sfp+0x18>
 800a70c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a710:	b9d5      	cbnz	r5, 800a748 <__sfp+0x64>
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <__sfp+0x88>)
 800a714:	60e3      	str	r3, [r4, #12]
 800a716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a71a:	6665      	str	r5, [r4, #100]	; 0x64
 800a71c:	f000 f84c 	bl	800a7b8 <__retarget_lock_init_recursive>
 800a720:	f7ff ff96 	bl	800a650 <__sfp_lock_release>
 800a724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a72c:	6025      	str	r5, [r4, #0]
 800a72e:	61a5      	str	r5, [r4, #24]
 800a730:	2208      	movs	r2, #8
 800a732:	4629      	mov	r1, r5
 800a734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a738:	f7fe fcc4 	bl	80090c4 <memset>
 800a73c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a744:	4620      	mov	r0, r4
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	3468      	adds	r4, #104	; 0x68
 800a74a:	e7d9      	b.n	800a700 <__sfp+0x1c>
 800a74c:	2104      	movs	r1, #4
 800a74e:	4638      	mov	r0, r7
 800a750:	f7ff ff62 	bl	800a618 <__sfmoreglue>
 800a754:	4604      	mov	r4, r0
 800a756:	6030      	str	r0, [r6, #0]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1d5      	bne.n	800a708 <__sfp+0x24>
 800a75c:	f7ff ff78 	bl	800a650 <__sfp_lock_release>
 800a760:	230c      	movs	r3, #12
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	e7ee      	b.n	800a744 <__sfp+0x60>
 800a766:	bf00      	nop
 800a768:	0800c364 	.word	0x0800c364
 800a76c:	ffff0001 	.word	0xffff0001

0800a770 <_fwalk_reent>:
 800a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a774:	4606      	mov	r6, r0
 800a776:	4688      	mov	r8, r1
 800a778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a77c:	2700      	movs	r7, #0
 800a77e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a782:	f1b9 0901 	subs.w	r9, r9, #1
 800a786:	d505      	bpl.n	800a794 <_fwalk_reent+0x24>
 800a788:	6824      	ldr	r4, [r4, #0]
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	d1f7      	bne.n	800a77e <_fwalk_reent+0xe>
 800a78e:	4638      	mov	r0, r7
 800a790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a794:	89ab      	ldrh	r3, [r5, #12]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d907      	bls.n	800a7aa <_fwalk_reent+0x3a>
 800a79a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	d003      	beq.n	800a7aa <_fwalk_reent+0x3a>
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	47c0      	blx	r8
 800a7a8:	4307      	orrs	r7, r0
 800a7aa:	3568      	adds	r5, #104	; 0x68
 800a7ac:	e7e9      	b.n	800a782 <_fwalk_reent+0x12>
	...

0800a7b0 <_localeconv_r>:
 800a7b0:	4800      	ldr	r0, [pc, #0]	; (800a7b4 <_localeconv_r+0x4>)
 800a7b2:	4770      	bx	lr
 800a7b4:	2400016c 	.word	0x2400016c

0800a7b8 <__retarget_lock_init_recursive>:
 800a7b8:	4770      	bx	lr

0800a7ba <__retarget_lock_acquire_recursive>:
 800a7ba:	4770      	bx	lr

0800a7bc <__retarget_lock_release_recursive>:
 800a7bc:	4770      	bx	lr
	...

0800a7c0 <malloc>:
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <malloc+0xc>)
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f000 bc09 	b.w	800afdc <_malloc_r>
 800a7ca:	bf00      	nop
 800a7cc:	24000018 	.word	0x24000018

0800a7d0 <_Balloc>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	b976      	cbnz	r6, 800a7f8 <_Balloc+0x28>
 800a7da:	2010      	movs	r0, #16
 800a7dc:	f7ff fff0 	bl	800a7c0 <malloc>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a7e4:	b920      	cbnz	r0, 800a7f0 <_Balloc+0x20>
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <_Balloc+0x78>)
 800a7e8:	4818      	ldr	r0, [pc, #96]	; (800a84c <_Balloc+0x7c>)
 800a7ea:	2166      	movs	r1, #102	; 0x66
 800a7ec:	f001 f846 	bl	800b87c <__assert_func>
 800a7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7f4:	6006      	str	r6, [r0, #0]
 800a7f6:	60c6      	str	r6, [r0, #12]
 800a7f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7fa:	68f3      	ldr	r3, [r6, #12]
 800a7fc:	b183      	cbz	r3, 800a820 <_Balloc+0x50>
 800a7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a806:	b9b8      	cbnz	r0, 800a838 <_Balloc+0x68>
 800a808:	2101      	movs	r1, #1
 800a80a:	fa01 f605 	lsl.w	r6, r1, r5
 800a80e:	1d72      	adds	r2, r6, #5
 800a810:	0092      	lsls	r2, r2, #2
 800a812:	4620      	mov	r0, r4
 800a814:	f000 fb60 	bl	800aed8 <_calloc_r>
 800a818:	b160      	cbz	r0, 800a834 <_Balloc+0x64>
 800a81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a81e:	e00e      	b.n	800a83e <_Balloc+0x6e>
 800a820:	2221      	movs	r2, #33	; 0x21
 800a822:	2104      	movs	r1, #4
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fb57 	bl	800aed8 <_calloc_r>
 800a82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a82c:	60f0      	str	r0, [r6, #12]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e4      	bne.n	800a7fe <_Balloc+0x2e>
 800a834:	2000      	movs	r0, #0
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	6802      	ldr	r2, [r0, #0]
 800a83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a83e:	2300      	movs	r3, #0
 800a840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a844:	e7f7      	b.n	800a836 <_Balloc+0x66>
 800a846:	bf00      	nop
 800a848:	0800c3a9 	.word	0x0800c3a9
 800a84c:	0800c48c 	.word	0x0800c48c

0800a850 <_Bfree>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a854:	4605      	mov	r5, r0
 800a856:	460c      	mov	r4, r1
 800a858:	b976      	cbnz	r6, 800a878 <_Bfree+0x28>
 800a85a:	2010      	movs	r0, #16
 800a85c:	f7ff ffb0 	bl	800a7c0 <malloc>
 800a860:	4602      	mov	r2, r0
 800a862:	6268      	str	r0, [r5, #36]	; 0x24
 800a864:	b920      	cbnz	r0, 800a870 <_Bfree+0x20>
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <_Bfree+0x3c>)
 800a868:	4809      	ldr	r0, [pc, #36]	; (800a890 <_Bfree+0x40>)
 800a86a:	218a      	movs	r1, #138	; 0x8a
 800a86c:	f001 f806 	bl	800b87c <__assert_func>
 800a870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a874:	6006      	str	r6, [r0, #0]
 800a876:	60c6      	str	r6, [r0, #12]
 800a878:	b13c      	cbz	r4, 800a88a <_Bfree+0x3a>
 800a87a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a87c:	6862      	ldr	r2, [r4, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a884:	6021      	str	r1, [r4, #0]
 800a886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	0800c3a9 	.word	0x0800c3a9
 800a890:	0800c48c 	.word	0x0800c48c

0800a894 <__multadd>:
 800a894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	690d      	ldr	r5, [r1, #16]
 800a89a:	4607      	mov	r7, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	461e      	mov	r6, r3
 800a8a0:	f101 0c14 	add.w	ip, r1, #20
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a8aa:	b299      	uxth	r1, r3
 800a8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a8b0:	0c1e      	lsrs	r6, r3, #16
 800a8b2:	0c0b      	lsrs	r3, r1, #16
 800a8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a8b8:	b289      	uxth	r1, r1
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8c0:	4285      	cmp	r5, r0
 800a8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8ca:	dcec      	bgt.n	800a8a6 <__multadd+0x12>
 800a8cc:	b30e      	cbz	r6, 800a912 <__multadd+0x7e>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	dc19      	bgt.n	800a908 <__multadd+0x74>
 800a8d4:	6861      	ldr	r1, [r4, #4]
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	3101      	adds	r1, #1
 800a8da:	f7ff ff79 	bl	800a7d0 <_Balloc>
 800a8de:	4680      	mov	r8, r0
 800a8e0:	b928      	cbnz	r0, 800a8ee <__multadd+0x5a>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <__multadd+0x84>)
 800a8e6:	480d      	ldr	r0, [pc, #52]	; (800a91c <__multadd+0x88>)
 800a8e8:	21b5      	movs	r1, #181	; 0xb5
 800a8ea:	f000 ffc7 	bl	800b87c <__assert_func>
 800a8ee:	6922      	ldr	r2, [r4, #16]
 800a8f0:	3202      	adds	r2, #2
 800a8f2:	f104 010c 	add.w	r1, r4, #12
 800a8f6:	0092      	lsls	r2, r2, #2
 800a8f8:	300c      	adds	r0, #12
 800a8fa:	f7fe fbd5 	bl	80090a8 <memcpy>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff ffa5 	bl	800a850 <_Bfree>
 800a906:	4644      	mov	r4, r8
 800a908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a90c:	3501      	adds	r5, #1
 800a90e:	615e      	str	r6, [r3, #20]
 800a910:	6125      	str	r5, [r4, #16]
 800a912:	4620      	mov	r0, r4
 800a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a918:	0800c41b 	.word	0x0800c41b
 800a91c:	0800c48c 	.word	0x0800c48c

0800a920 <__hi0bits>:
 800a920:	0c03      	lsrs	r3, r0, #16
 800a922:	041b      	lsls	r3, r3, #16
 800a924:	b9d3      	cbnz	r3, 800a95c <__hi0bits+0x3c>
 800a926:	0400      	lsls	r0, r0, #16
 800a928:	2310      	movs	r3, #16
 800a92a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a92e:	bf04      	itt	eq
 800a930:	0200      	lsleq	r0, r0, #8
 800a932:	3308      	addeq	r3, #8
 800a934:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a938:	bf04      	itt	eq
 800a93a:	0100      	lsleq	r0, r0, #4
 800a93c:	3304      	addeq	r3, #4
 800a93e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a942:	bf04      	itt	eq
 800a944:	0080      	lsleq	r0, r0, #2
 800a946:	3302      	addeq	r3, #2
 800a948:	2800      	cmp	r0, #0
 800a94a:	db05      	blt.n	800a958 <__hi0bits+0x38>
 800a94c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a950:	f103 0301 	add.w	r3, r3, #1
 800a954:	bf08      	it	eq
 800a956:	2320      	moveq	r3, #32
 800a958:	4618      	mov	r0, r3
 800a95a:	4770      	bx	lr
 800a95c:	2300      	movs	r3, #0
 800a95e:	e7e4      	b.n	800a92a <__hi0bits+0xa>

0800a960 <__lo0bits>:
 800a960:	6803      	ldr	r3, [r0, #0]
 800a962:	f013 0207 	ands.w	r2, r3, #7
 800a966:	4601      	mov	r1, r0
 800a968:	d00b      	beq.n	800a982 <__lo0bits+0x22>
 800a96a:	07da      	lsls	r2, r3, #31
 800a96c:	d423      	bmi.n	800a9b6 <__lo0bits+0x56>
 800a96e:	0798      	lsls	r0, r3, #30
 800a970:	bf49      	itett	mi
 800a972:	085b      	lsrmi	r3, r3, #1
 800a974:	089b      	lsrpl	r3, r3, #2
 800a976:	2001      	movmi	r0, #1
 800a978:	600b      	strmi	r3, [r1, #0]
 800a97a:	bf5c      	itt	pl
 800a97c:	600b      	strpl	r3, [r1, #0]
 800a97e:	2002      	movpl	r0, #2
 800a980:	4770      	bx	lr
 800a982:	b298      	uxth	r0, r3
 800a984:	b9a8      	cbnz	r0, 800a9b2 <__lo0bits+0x52>
 800a986:	0c1b      	lsrs	r3, r3, #16
 800a988:	2010      	movs	r0, #16
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	b90a      	cbnz	r2, 800a992 <__lo0bits+0x32>
 800a98e:	3008      	adds	r0, #8
 800a990:	0a1b      	lsrs	r3, r3, #8
 800a992:	071a      	lsls	r2, r3, #28
 800a994:	bf04      	itt	eq
 800a996:	091b      	lsreq	r3, r3, #4
 800a998:	3004      	addeq	r0, #4
 800a99a:	079a      	lsls	r2, r3, #30
 800a99c:	bf04      	itt	eq
 800a99e:	089b      	lsreq	r3, r3, #2
 800a9a0:	3002      	addeq	r0, #2
 800a9a2:	07da      	lsls	r2, r3, #31
 800a9a4:	d403      	bmi.n	800a9ae <__lo0bits+0x4e>
 800a9a6:	085b      	lsrs	r3, r3, #1
 800a9a8:	f100 0001 	add.w	r0, r0, #1
 800a9ac:	d005      	beq.n	800a9ba <__lo0bits+0x5a>
 800a9ae:	600b      	str	r3, [r1, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	e7e9      	b.n	800a98a <__lo0bits+0x2a>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	4770      	bx	lr
 800a9ba:	2020      	movs	r0, #32
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <__i2b>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	f7ff ff03 	bl	800a7d0 <_Balloc>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	b928      	cbnz	r0, 800a9da <__i2b+0x1a>
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <__i2b+0x24>)
 800a9d0:	4805      	ldr	r0, [pc, #20]	; (800a9e8 <__i2b+0x28>)
 800a9d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9d6:	f000 ff51 	bl	800b87c <__assert_func>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	6144      	str	r4, [r0, #20]
 800a9de:	6103      	str	r3, [r0, #16]
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	bf00      	nop
 800a9e4:	0800c41b 	.word	0x0800c41b
 800a9e8:	0800c48c 	.word	0x0800c48c

0800a9ec <__multiply>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	4691      	mov	r9, r2
 800a9f2:	690a      	ldr	r2, [r1, #16]
 800a9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	bfb8      	it	lt
 800a9fc:	460b      	movlt	r3, r1
 800a9fe:	460c      	mov	r4, r1
 800aa00:	bfbc      	itt	lt
 800aa02:	464c      	movlt	r4, r9
 800aa04:	4699      	movlt	r9, r3
 800aa06:	6927      	ldr	r7, [r4, #16]
 800aa08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa0c:	68a3      	ldr	r3, [r4, #8]
 800aa0e:	6861      	ldr	r1, [r4, #4]
 800aa10:	eb07 060a 	add.w	r6, r7, sl
 800aa14:	42b3      	cmp	r3, r6
 800aa16:	b085      	sub	sp, #20
 800aa18:	bfb8      	it	lt
 800aa1a:	3101      	addlt	r1, #1
 800aa1c:	f7ff fed8 	bl	800a7d0 <_Balloc>
 800aa20:	b930      	cbnz	r0, 800aa30 <__multiply+0x44>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4b44      	ldr	r3, [pc, #272]	; (800ab38 <__multiply+0x14c>)
 800aa26:	4845      	ldr	r0, [pc, #276]	; (800ab3c <__multiply+0x150>)
 800aa28:	f240 115d 	movw	r1, #349	; 0x15d
 800aa2c:	f000 ff26 	bl	800b87c <__assert_func>
 800aa30:	f100 0514 	add.w	r5, r0, #20
 800aa34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa38:	462b      	mov	r3, r5
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	4543      	cmp	r3, r8
 800aa3e:	d321      	bcc.n	800aa84 <__multiply+0x98>
 800aa40:	f104 0314 	add.w	r3, r4, #20
 800aa44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa48:	f109 0314 	add.w	r3, r9, #20
 800aa4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa50:	9202      	str	r2, [sp, #8]
 800aa52:	1b3a      	subs	r2, r7, r4
 800aa54:	3a15      	subs	r2, #21
 800aa56:	f022 0203 	bic.w	r2, r2, #3
 800aa5a:	3204      	adds	r2, #4
 800aa5c:	f104 0115 	add.w	r1, r4, #21
 800aa60:	428f      	cmp	r7, r1
 800aa62:	bf38      	it	cc
 800aa64:	2204      	movcc	r2, #4
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9a02      	ldr	r2, [sp, #8]
 800aa6a:	9303      	str	r3, [sp, #12]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d80c      	bhi.n	800aa8a <__multiply+0x9e>
 800aa70:	2e00      	cmp	r6, #0
 800aa72:	dd03      	ble.n	800aa7c <__multiply+0x90>
 800aa74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d05a      	beq.n	800ab32 <__multiply+0x146>
 800aa7c:	6106      	str	r6, [r0, #16]
 800aa7e:	b005      	add	sp, #20
 800aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa84:	f843 2b04 	str.w	r2, [r3], #4
 800aa88:	e7d8      	b.n	800aa3c <__multiply+0x50>
 800aa8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa8e:	f1ba 0f00 	cmp.w	sl, #0
 800aa92:	d024      	beq.n	800aade <__multiply+0xf2>
 800aa94:	f104 0e14 	add.w	lr, r4, #20
 800aa98:	46a9      	mov	r9, r5
 800aa9a:	f04f 0c00 	mov.w	ip, #0
 800aa9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaa2:	f8d9 1000 	ldr.w	r1, [r9]
 800aaa6:	fa1f fb82 	uxth.w	fp, r2
 800aaaa:	b289      	uxth	r1, r1
 800aaac:	fb0a 110b 	mla	r1, sl, fp, r1
 800aab0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aab4:	f8d9 2000 	ldr.w	r2, [r9]
 800aab8:	4461      	add	r1, ip
 800aaba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aabe:	fb0a c20b 	mla	r2, sl, fp, ip
 800aac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aac6:	b289      	uxth	r1, r1
 800aac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aacc:	4577      	cmp	r7, lr
 800aace:	f849 1b04 	str.w	r1, [r9], #4
 800aad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aad6:	d8e2      	bhi.n	800aa9e <__multiply+0xb2>
 800aad8:	9a01      	ldr	r2, [sp, #4]
 800aada:	f845 c002 	str.w	ip, [r5, r2]
 800aade:	9a03      	ldr	r2, [sp, #12]
 800aae0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aae4:	3304      	adds	r3, #4
 800aae6:	f1b9 0f00 	cmp.w	r9, #0
 800aaea:	d020      	beq.n	800ab2e <__multiply+0x142>
 800aaec:	6829      	ldr	r1, [r5, #0]
 800aaee:	f104 0c14 	add.w	ip, r4, #20
 800aaf2:	46ae      	mov	lr, r5
 800aaf4:	f04f 0a00 	mov.w	sl, #0
 800aaf8:	f8bc b000 	ldrh.w	fp, [ip]
 800aafc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab00:	fb09 220b 	mla	r2, r9, fp, r2
 800ab04:	4492      	add	sl, r2
 800ab06:	b289      	uxth	r1, r1
 800ab08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab14:	f8be 1000 	ldrh.w	r1, [lr]
 800ab18:	0c12      	lsrs	r2, r2, #16
 800ab1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ab1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab22:	4567      	cmp	r7, ip
 800ab24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab28:	d8e6      	bhi.n	800aaf8 <__multiply+0x10c>
 800ab2a:	9a01      	ldr	r2, [sp, #4]
 800ab2c:	50a9      	str	r1, [r5, r2]
 800ab2e:	3504      	adds	r5, #4
 800ab30:	e79a      	b.n	800aa68 <__multiply+0x7c>
 800ab32:	3e01      	subs	r6, #1
 800ab34:	e79c      	b.n	800aa70 <__multiply+0x84>
 800ab36:	bf00      	nop
 800ab38:	0800c41b 	.word	0x0800c41b
 800ab3c:	0800c48c 	.word	0x0800c48c

0800ab40 <__pow5mult>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	4615      	mov	r5, r2
 800ab46:	f012 0203 	ands.w	r2, r2, #3
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	460f      	mov	r7, r1
 800ab4e:	d007      	beq.n	800ab60 <__pow5mult+0x20>
 800ab50:	4c25      	ldr	r4, [pc, #148]	; (800abe8 <__pow5mult+0xa8>)
 800ab52:	3a01      	subs	r2, #1
 800ab54:	2300      	movs	r3, #0
 800ab56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab5a:	f7ff fe9b 	bl	800a894 <__multadd>
 800ab5e:	4607      	mov	r7, r0
 800ab60:	10ad      	asrs	r5, r5, #2
 800ab62:	d03d      	beq.n	800abe0 <__pow5mult+0xa0>
 800ab64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab66:	b97c      	cbnz	r4, 800ab88 <__pow5mult+0x48>
 800ab68:	2010      	movs	r0, #16
 800ab6a:	f7ff fe29 	bl	800a7c0 <malloc>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	6270      	str	r0, [r6, #36]	; 0x24
 800ab72:	b928      	cbnz	r0, 800ab80 <__pow5mult+0x40>
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <__pow5mult+0xac>)
 800ab76:	481e      	ldr	r0, [pc, #120]	; (800abf0 <__pow5mult+0xb0>)
 800ab78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab7c:	f000 fe7e 	bl	800b87c <__assert_func>
 800ab80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab84:	6004      	str	r4, [r0, #0]
 800ab86:	60c4      	str	r4, [r0, #12]
 800ab88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab90:	b94c      	cbnz	r4, 800aba6 <__pow5mult+0x66>
 800ab92:	f240 2171 	movw	r1, #625	; 0x271
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7ff ff12 	bl	800a9c0 <__i2b>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aba2:	4604      	mov	r4, r0
 800aba4:	6003      	str	r3, [r0, #0]
 800aba6:	f04f 0900 	mov.w	r9, #0
 800abaa:	07eb      	lsls	r3, r5, #31
 800abac:	d50a      	bpl.n	800abc4 <__pow5mult+0x84>
 800abae:	4639      	mov	r1, r7
 800abb0:	4622      	mov	r2, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ff1a 	bl	800a9ec <__multiply>
 800abb8:	4639      	mov	r1, r7
 800abba:	4680      	mov	r8, r0
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff fe47 	bl	800a850 <_Bfree>
 800abc2:	4647      	mov	r7, r8
 800abc4:	106d      	asrs	r5, r5, #1
 800abc6:	d00b      	beq.n	800abe0 <__pow5mult+0xa0>
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	b938      	cbnz	r0, 800abdc <__pow5mult+0x9c>
 800abcc:	4622      	mov	r2, r4
 800abce:	4621      	mov	r1, r4
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7ff ff0b 	bl	800a9ec <__multiply>
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	f8c0 9000 	str.w	r9, [r0]
 800abdc:	4604      	mov	r4, r0
 800abde:	e7e4      	b.n	800abaa <__pow5mult+0x6a>
 800abe0:	4638      	mov	r0, r7
 800abe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe6:	bf00      	nop
 800abe8:	0800c5d8 	.word	0x0800c5d8
 800abec:	0800c3a9 	.word	0x0800c3a9
 800abf0:	0800c48c 	.word	0x0800c48c

0800abf4 <__lshift>:
 800abf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	460c      	mov	r4, r1
 800abfa:	6849      	ldr	r1, [r1, #4]
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	4607      	mov	r7, r0
 800ac06:	4691      	mov	r9, r2
 800ac08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac0c:	f108 0601 	add.w	r6, r8, #1
 800ac10:	42b3      	cmp	r3, r6
 800ac12:	db0b      	blt.n	800ac2c <__lshift+0x38>
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff fddb 	bl	800a7d0 <_Balloc>
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	b948      	cbnz	r0, 800ac32 <__lshift+0x3e>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b2a      	ldr	r3, [pc, #168]	; (800accc <__lshift+0xd8>)
 800ac22:	482b      	ldr	r0, [pc, #172]	; (800acd0 <__lshift+0xdc>)
 800ac24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac28:	f000 fe28 	bl	800b87c <__assert_func>
 800ac2c:	3101      	adds	r1, #1
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	e7ee      	b.n	800ac10 <__lshift+0x1c>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f100 0114 	add.w	r1, r0, #20
 800ac38:	f100 0210 	add.w	r2, r0, #16
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	4553      	cmp	r3, sl
 800ac40:	db37      	blt.n	800acb2 <__lshift+0xbe>
 800ac42:	6920      	ldr	r0, [r4, #16]
 800ac44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac48:	f104 0314 	add.w	r3, r4, #20
 800ac4c:	f019 091f 	ands.w	r9, r9, #31
 800ac50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac58:	d02f      	beq.n	800acba <__lshift+0xc6>
 800ac5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac5e:	468a      	mov	sl, r1
 800ac60:	f04f 0c00 	mov.w	ip, #0
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	fa02 f209 	lsl.w	r2, r2, r9
 800ac6a:	ea42 020c 	orr.w	r2, r2, ip
 800ac6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac76:	4298      	cmp	r0, r3
 800ac78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac7c:	d8f2      	bhi.n	800ac64 <__lshift+0x70>
 800ac7e:	1b03      	subs	r3, r0, r4
 800ac80:	3b15      	subs	r3, #21
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	3304      	adds	r3, #4
 800ac88:	f104 0215 	add.w	r2, r4, #21
 800ac8c:	4290      	cmp	r0, r2
 800ac8e:	bf38      	it	cc
 800ac90:	2304      	movcc	r3, #4
 800ac92:	f841 c003 	str.w	ip, [r1, r3]
 800ac96:	f1bc 0f00 	cmp.w	ip, #0
 800ac9a:	d001      	beq.n	800aca0 <__lshift+0xac>
 800ac9c:	f108 0602 	add.w	r6, r8, #2
 800aca0:	3e01      	subs	r6, #1
 800aca2:	4638      	mov	r0, r7
 800aca4:	612e      	str	r6, [r5, #16]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff fdd2 	bl	800a850 <_Bfree>
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb6:	3301      	adds	r3, #1
 800acb8:	e7c1      	b.n	800ac3e <__lshift+0x4a>
 800acba:	3904      	subs	r1, #4
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc4:	4298      	cmp	r0, r3
 800acc6:	d8f9      	bhi.n	800acbc <__lshift+0xc8>
 800acc8:	e7ea      	b.n	800aca0 <__lshift+0xac>
 800acca:	bf00      	nop
 800accc:	0800c41b 	.word	0x0800c41b
 800acd0:	0800c48c 	.word	0x0800c48c

0800acd4 <__mcmp>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	6902      	ldr	r2, [r0, #16]
 800acd8:	690c      	ldr	r4, [r1, #16]
 800acda:	1b12      	subs	r2, r2, r4
 800acdc:	d10e      	bne.n	800acfc <__mcmp+0x28>
 800acde:	f100 0314 	add.w	r3, r0, #20
 800ace2:	3114      	adds	r1, #20
 800ace4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ace8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acf4:	42a5      	cmp	r5, r4
 800acf6:	d003      	beq.n	800ad00 <__mcmp+0x2c>
 800acf8:	d305      	bcc.n	800ad06 <__mcmp+0x32>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4610      	mov	r0, r2
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	4283      	cmp	r3, r0
 800ad02:	d3f3      	bcc.n	800acec <__mcmp+0x18>
 800ad04:	e7fa      	b.n	800acfc <__mcmp+0x28>
 800ad06:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0a:	e7f7      	b.n	800acfc <__mcmp+0x28>

0800ad0c <__mdiff>:
 800ad0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	4606      	mov	r6, r0
 800ad14:	4611      	mov	r1, r2
 800ad16:	4620      	mov	r0, r4
 800ad18:	4690      	mov	r8, r2
 800ad1a:	f7ff ffdb 	bl	800acd4 <__mcmp>
 800ad1e:	1e05      	subs	r5, r0, #0
 800ad20:	d110      	bne.n	800ad44 <__mdiff+0x38>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff fd53 	bl	800a7d0 <_Balloc>
 800ad2a:	b930      	cbnz	r0, 800ad3a <__mdiff+0x2e>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__mdiff+0x10c>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f240 2132 	movw	r1, #562	; 0x232
 800ad34:	4839      	ldr	r0, [pc, #228]	; (800ae1c <__mdiff+0x110>)
 800ad36:	f000 fda1 	bl	800b87c <__assert_func>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	bfa4      	itt	ge
 800ad46:	4643      	movge	r3, r8
 800ad48:	46a0      	movge	r8, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad50:	bfa6      	itte	ge
 800ad52:	461c      	movge	r4, r3
 800ad54:	2500      	movge	r5, #0
 800ad56:	2501      	movlt	r5, #1
 800ad58:	f7ff fd3a 	bl	800a7d0 <_Balloc>
 800ad5c:	b920      	cbnz	r0, 800ad68 <__mdiff+0x5c>
 800ad5e:	4b2e      	ldr	r3, [pc, #184]	; (800ae18 <__mdiff+0x10c>)
 800ad60:	4602      	mov	r2, r0
 800ad62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad66:	e7e5      	b.n	800ad34 <__mdiff+0x28>
 800ad68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad6c:	6926      	ldr	r6, [r4, #16]
 800ad6e:	60c5      	str	r5, [r0, #12]
 800ad70:	f104 0914 	add.w	r9, r4, #20
 800ad74:	f108 0514 	add.w	r5, r8, #20
 800ad78:	f100 0e14 	add.w	lr, r0, #20
 800ad7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad84:	f108 0210 	add.w	r2, r8, #16
 800ad88:	46f2      	mov	sl, lr
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad94:	fa1f f883 	uxth.w	r8, r3
 800ad98:	fa11 f18b 	uxtah	r1, r1, fp
 800ad9c:	0c1b      	lsrs	r3, r3, #16
 800ad9e:	eba1 0808 	sub.w	r8, r1, r8
 800ada2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ada6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adaa:	fa1f f888 	uxth.w	r8, r8
 800adae:	1419      	asrs	r1, r3, #16
 800adb0:	454e      	cmp	r6, r9
 800adb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adb6:	f84a 3b04 	str.w	r3, [sl], #4
 800adba:	d8e7      	bhi.n	800ad8c <__mdiff+0x80>
 800adbc:	1b33      	subs	r3, r6, r4
 800adbe:	3b15      	subs	r3, #21
 800adc0:	f023 0303 	bic.w	r3, r3, #3
 800adc4:	3304      	adds	r3, #4
 800adc6:	3415      	adds	r4, #21
 800adc8:	42a6      	cmp	r6, r4
 800adca:	bf38      	it	cc
 800adcc:	2304      	movcc	r3, #4
 800adce:	441d      	add	r5, r3
 800add0:	4473      	add	r3, lr
 800add2:	469e      	mov	lr, r3
 800add4:	462e      	mov	r6, r5
 800add6:	4566      	cmp	r6, ip
 800add8:	d30e      	bcc.n	800adf8 <__mdiff+0xec>
 800adda:	f10c 0203 	add.w	r2, ip, #3
 800adde:	1b52      	subs	r2, r2, r5
 800ade0:	f022 0203 	bic.w	r2, r2, #3
 800ade4:	3d03      	subs	r5, #3
 800ade6:	45ac      	cmp	ip, r5
 800ade8:	bf38      	it	cc
 800adea:	2200      	movcc	r2, #0
 800adec:	441a      	add	r2, r3
 800adee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800adf2:	b17b      	cbz	r3, 800ae14 <__mdiff+0x108>
 800adf4:	6107      	str	r7, [r0, #16]
 800adf6:	e7a3      	b.n	800ad40 <__mdiff+0x34>
 800adf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800adfc:	fa11 f288 	uxtah	r2, r1, r8
 800ae00:	1414      	asrs	r4, r2, #16
 800ae02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae06:	b292      	uxth	r2, r2
 800ae08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae0c:	f84e 2b04 	str.w	r2, [lr], #4
 800ae10:	1421      	asrs	r1, r4, #16
 800ae12:	e7e0      	b.n	800add6 <__mdiff+0xca>
 800ae14:	3f01      	subs	r7, #1
 800ae16:	e7ea      	b.n	800adee <__mdiff+0xe2>
 800ae18:	0800c41b 	.word	0x0800c41b
 800ae1c:	0800c48c 	.word	0x0800c48c

0800ae20 <__d2b>:
 800ae20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	4689      	mov	r9, r1
 800ae26:	2101      	movs	r1, #1
 800ae28:	ec57 6b10 	vmov	r6, r7, d0
 800ae2c:	4690      	mov	r8, r2
 800ae2e:	f7ff fccf 	bl	800a7d0 <_Balloc>
 800ae32:	4604      	mov	r4, r0
 800ae34:	b930      	cbnz	r0, 800ae44 <__d2b+0x24>
 800ae36:	4602      	mov	r2, r0
 800ae38:	4b25      	ldr	r3, [pc, #148]	; (800aed0 <__d2b+0xb0>)
 800ae3a:	4826      	ldr	r0, [pc, #152]	; (800aed4 <__d2b+0xb4>)
 800ae3c:	f240 310a 	movw	r1, #778	; 0x30a
 800ae40:	f000 fd1c 	bl	800b87c <__assert_func>
 800ae44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae4c:	bb35      	cbnz	r5, 800ae9c <__d2b+0x7c>
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	d028      	beq.n	800aea6 <__d2b+0x86>
 800ae54:	4668      	mov	r0, sp
 800ae56:	9600      	str	r6, [sp, #0]
 800ae58:	f7ff fd82 	bl	800a960 <__lo0bits>
 800ae5c:	9900      	ldr	r1, [sp, #0]
 800ae5e:	b300      	cbz	r0, 800aea2 <__d2b+0x82>
 800ae60:	9a01      	ldr	r2, [sp, #4]
 800ae62:	f1c0 0320 	rsb	r3, r0, #32
 800ae66:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	40c2      	lsrs	r2, r0
 800ae6e:	6163      	str	r3, [r4, #20]
 800ae70:	9201      	str	r2, [sp, #4]
 800ae72:	9b01      	ldr	r3, [sp, #4]
 800ae74:	61a3      	str	r3, [r4, #24]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2202      	movne	r2, #2
 800ae7c:	2201      	moveq	r2, #1
 800ae7e:	6122      	str	r2, [r4, #16]
 800ae80:	b1d5      	cbz	r5, 800aeb8 <__d2b+0x98>
 800ae82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae86:	4405      	add	r5, r0
 800ae88:	f8c9 5000 	str.w	r5, [r9]
 800ae8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae90:	f8c8 0000 	str.w	r0, [r8]
 800ae94:	4620      	mov	r0, r4
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aea0:	e7d5      	b.n	800ae4e <__d2b+0x2e>
 800aea2:	6161      	str	r1, [r4, #20]
 800aea4:	e7e5      	b.n	800ae72 <__d2b+0x52>
 800aea6:	a801      	add	r0, sp, #4
 800aea8:	f7ff fd5a 	bl	800a960 <__lo0bits>
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	6163      	str	r3, [r4, #20]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	6122      	str	r2, [r4, #16]
 800aeb4:	3020      	adds	r0, #32
 800aeb6:	e7e3      	b.n	800ae80 <__d2b+0x60>
 800aeb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aec0:	f8c9 0000 	str.w	r0, [r9]
 800aec4:	6918      	ldr	r0, [r3, #16]
 800aec6:	f7ff fd2b 	bl	800a920 <__hi0bits>
 800aeca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aece:	e7df      	b.n	800ae90 <__d2b+0x70>
 800aed0:	0800c41b 	.word	0x0800c41b
 800aed4:	0800c48c 	.word	0x0800c48c

0800aed8 <_calloc_r>:
 800aed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeda:	fba1 2402 	umull	r2, r4, r1, r2
 800aede:	b94c      	cbnz	r4, 800aef4 <_calloc_r+0x1c>
 800aee0:	4611      	mov	r1, r2
 800aee2:	9201      	str	r2, [sp, #4]
 800aee4:	f000 f87a 	bl	800afdc <_malloc_r>
 800aee8:	9a01      	ldr	r2, [sp, #4]
 800aeea:	4605      	mov	r5, r0
 800aeec:	b930      	cbnz	r0, 800aefc <_calloc_r+0x24>
 800aeee:	4628      	mov	r0, r5
 800aef0:	b003      	add	sp, #12
 800aef2:	bd30      	pop	{r4, r5, pc}
 800aef4:	220c      	movs	r2, #12
 800aef6:	6002      	str	r2, [r0, #0]
 800aef8:	2500      	movs	r5, #0
 800aefa:	e7f8      	b.n	800aeee <_calloc_r+0x16>
 800aefc:	4621      	mov	r1, r4
 800aefe:	f7fe f8e1 	bl	80090c4 <memset>
 800af02:	e7f4      	b.n	800aeee <_calloc_r+0x16>

0800af04 <_free_r>:
 800af04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af06:	2900      	cmp	r1, #0
 800af08:	d044      	beq.n	800af94 <_free_r+0x90>
 800af0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f1a1 0404 	sub.w	r4, r1, #4
 800af16:	bfb8      	it	lt
 800af18:	18e4      	addlt	r4, r4, r3
 800af1a:	f000 fe55 	bl	800bbc8 <__malloc_lock>
 800af1e:	4a1e      	ldr	r2, [pc, #120]	; (800af98 <_free_r+0x94>)
 800af20:	9801      	ldr	r0, [sp, #4]
 800af22:	6813      	ldr	r3, [r2, #0]
 800af24:	b933      	cbnz	r3, 800af34 <_free_r+0x30>
 800af26:	6063      	str	r3, [r4, #4]
 800af28:	6014      	str	r4, [r2, #0]
 800af2a:	b003      	add	sp, #12
 800af2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af30:	f000 be50 	b.w	800bbd4 <__malloc_unlock>
 800af34:	42a3      	cmp	r3, r4
 800af36:	d908      	bls.n	800af4a <_free_r+0x46>
 800af38:	6825      	ldr	r5, [r4, #0]
 800af3a:	1961      	adds	r1, r4, r5
 800af3c:	428b      	cmp	r3, r1
 800af3e:	bf01      	itttt	eq
 800af40:	6819      	ldreq	r1, [r3, #0]
 800af42:	685b      	ldreq	r3, [r3, #4]
 800af44:	1949      	addeq	r1, r1, r5
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	e7ed      	b.n	800af26 <_free_r+0x22>
 800af4a:	461a      	mov	r2, r3
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	b10b      	cbz	r3, 800af54 <_free_r+0x50>
 800af50:	42a3      	cmp	r3, r4
 800af52:	d9fa      	bls.n	800af4a <_free_r+0x46>
 800af54:	6811      	ldr	r1, [r2, #0]
 800af56:	1855      	adds	r5, r2, r1
 800af58:	42a5      	cmp	r5, r4
 800af5a:	d10b      	bne.n	800af74 <_free_r+0x70>
 800af5c:	6824      	ldr	r4, [r4, #0]
 800af5e:	4421      	add	r1, r4
 800af60:	1854      	adds	r4, r2, r1
 800af62:	42a3      	cmp	r3, r4
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	d1e0      	bne.n	800af2a <_free_r+0x26>
 800af68:	681c      	ldr	r4, [r3, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	6053      	str	r3, [r2, #4]
 800af6e:	4421      	add	r1, r4
 800af70:	6011      	str	r1, [r2, #0]
 800af72:	e7da      	b.n	800af2a <_free_r+0x26>
 800af74:	d902      	bls.n	800af7c <_free_r+0x78>
 800af76:	230c      	movs	r3, #12
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	e7d6      	b.n	800af2a <_free_r+0x26>
 800af7c:	6825      	ldr	r5, [r4, #0]
 800af7e:	1961      	adds	r1, r4, r5
 800af80:	428b      	cmp	r3, r1
 800af82:	bf04      	itt	eq
 800af84:	6819      	ldreq	r1, [r3, #0]
 800af86:	685b      	ldreq	r3, [r3, #4]
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	bf04      	itt	eq
 800af8c:	1949      	addeq	r1, r1, r5
 800af8e:	6021      	streq	r1, [r4, #0]
 800af90:	6054      	str	r4, [r2, #4]
 800af92:	e7ca      	b.n	800af2a <_free_r+0x26>
 800af94:	b003      	add	sp, #12
 800af96:	bd30      	pop	{r4, r5, pc}
 800af98:	24000620 	.word	0x24000620

0800af9c <sbrk_aligned>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	4e0e      	ldr	r6, [pc, #56]	; (800afd8 <sbrk_aligned+0x3c>)
 800afa0:	460c      	mov	r4, r1
 800afa2:	6831      	ldr	r1, [r6, #0]
 800afa4:	4605      	mov	r5, r0
 800afa6:	b911      	cbnz	r1, 800afae <sbrk_aligned+0x12>
 800afa8:	f000 fb42 	bl	800b630 <_sbrk_r>
 800afac:	6030      	str	r0, [r6, #0]
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 fb3d 	bl	800b630 <_sbrk_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d00a      	beq.n	800afd0 <sbrk_aligned+0x34>
 800afba:	1cc4      	adds	r4, r0, #3
 800afbc:	f024 0403 	bic.w	r4, r4, #3
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d007      	beq.n	800afd4 <sbrk_aligned+0x38>
 800afc4:	1a21      	subs	r1, r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 fb32 	bl	800b630 <_sbrk_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	d101      	bne.n	800afd4 <sbrk_aligned+0x38>
 800afd0:	f04f 34ff 	mov.w	r4, #4294967295
 800afd4:	4620      	mov	r0, r4
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	24000624 	.word	0x24000624

0800afdc <_malloc_r>:
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	1ccd      	adds	r5, r1, #3
 800afe2:	f025 0503 	bic.w	r5, r5, #3
 800afe6:	3508      	adds	r5, #8
 800afe8:	2d0c      	cmp	r5, #12
 800afea:	bf38      	it	cc
 800afec:	250c      	movcc	r5, #12
 800afee:	2d00      	cmp	r5, #0
 800aff0:	4607      	mov	r7, r0
 800aff2:	db01      	blt.n	800aff8 <_malloc_r+0x1c>
 800aff4:	42a9      	cmp	r1, r5
 800aff6:	d905      	bls.n	800b004 <_malloc_r+0x28>
 800aff8:	230c      	movs	r3, #12
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	2600      	movs	r6, #0
 800affe:	4630      	mov	r0, r6
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	4e2e      	ldr	r6, [pc, #184]	; (800b0c0 <_malloc_r+0xe4>)
 800b006:	f000 fddf 	bl	800bbc8 <__malloc_lock>
 800b00a:	6833      	ldr	r3, [r6, #0]
 800b00c:	461c      	mov	r4, r3
 800b00e:	bb34      	cbnz	r4, 800b05e <_malloc_r+0x82>
 800b010:	4629      	mov	r1, r5
 800b012:	4638      	mov	r0, r7
 800b014:	f7ff ffc2 	bl	800af9c <sbrk_aligned>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	4604      	mov	r4, r0
 800b01c:	d14d      	bne.n	800b0ba <_malloc_r+0xde>
 800b01e:	6834      	ldr	r4, [r6, #0]
 800b020:	4626      	mov	r6, r4
 800b022:	2e00      	cmp	r6, #0
 800b024:	d140      	bne.n	800b0a8 <_malloc_r+0xcc>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	4631      	mov	r1, r6
 800b02a:	4638      	mov	r0, r7
 800b02c:	eb04 0803 	add.w	r8, r4, r3
 800b030:	f000 fafe 	bl	800b630 <_sbrk_r>
 800b034:	4580      	cmp	r8, r0
 800b036:	d13a      	bne.n	800b0ae <_malloc_r+0xd2>
 800b038:	6821      	ldr	r1, [r4, #0]
 800b03a:	3503      	adds	r5, #3
 800b03c:	1a6d      	subs	r5, r5, r1
 800b03e:	f025 0503 	bic.w	r5, r5, #3
 800b042:	3508      	adds	r5, #8
 800b044:	2d0c      	cmp	r5, #12
 800b046:	bf38      	it	cc
 800b048:	250c      	movcc	r5, #12
 800b04a:	4629      	mov	r1, r5
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7ff ffa5 	bl	800af9c <sbrk_aligned>
 800b052:	3001      	adds	r0, #1
 800b054:	d02b      	beq.n	800b0ae <_malloc_r+0xd2>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	442b      	add	r3, r5
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	e00e      	b.n	800b07c <_malloc_r+0xa0>
 800b05e:	6822      	ldr	r2, [r4, #0]
 800b060:	1b52      	subs	r2, r2, r5
 800b062:	d41e      	bmi.n	800b0a2 <_malloc_r+0xc6>
 800b064:	2a0b      	cmp	r2, #11
 800b066:	d916      	bls.n	800b096 <_malloc_r+0xba>
 800b068:	1961      	adds	r1, r4, r5
 800b06a:	42a3      	cmp	r3, r4
 800b06c:	6025      	str	r5, [r4, #0]
 800b06e:	bf18      	it	ne
 800b070:	6059      	strne	r1, [r3, #4]
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	bf08      	it	eq
 800b076:	6031      	streq	r1, [r6, #0]
 800b078:	5162      	str	r2, [r4, r5]
 800b07a:	604b      	str	r3, [r1, #4]
 800b07c:	4638      	mov	r0, r7
 800b07e:	f104 060b 	add.w	r6, r4, #11
 800b082:	f000 fda7 	bl	800bbd4 <__malloc_unlock>
 800b086:	f026 0607 	bic.w	r6, r6, #7
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	1af2      	subs	r2, r6, r3
 800b08e:	d0b6      	beq.n	800affe <_malloc_r+0x22>
 800b090:	1b9b      	subs	r3, r3, r6
 800b092:	50a3      	str	r3, [r4, r2]
 800b094:	e7b3      	b.n	800affe <_malloc_r+0x22>
 800b096:	6862      	ldr	r2, [r4, #4]
 800b098:	42a3      	cmp	r3, r4
 800b09a:	bf0c      	ite	eq
 800b09c:	6032      	streq	r2, [r6, #0]
 800b09e:	605a      	strne	r2, [r3, #4]
 800b0a0:	e7ec      	b.n	800b07c <_malloc_r+0xa0>
 800b0a2:	4623      	mov	r3, r4
 800b0a4:	6864      	ldr	r4, [r4, #4]
 800b0a6:	e7b2      	b.n	800b00e <_malloc_r+0x32>
 800b0a8:	4634      	mov	r4, r6
 800b0aa:	6876      	ldr	r6, [r6, #4]
 800b0ac:	e7b9      	b.n	800b022 <_malloc_r+0x46>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	603b      	str	r3, [r7, #0]
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f000 fd8e 	bl	800bbd4 <__malloc_unlock>
 800b0b8:	e7a1      	b.n	800affe <_malloc_r+0x22>
 800b0ba:	6025      	str	r5, [r4, #0]
 800b0bc:	e7de      	b.n	800b07c <_malloc_r+0xa0>
 800b0be:	bf00      	nop
 800b0c0:	24000620 	.word	0x24000620

0800b0c4 <__ssputs_r>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	688e      	ldr	r6, [r1, #8]
 800b0ca:	429e      	cmp	r6, r3
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	4690      	mov	r8, r2
 800b0d2:	461f      	mov	r7, r3
 800b0d4:	d838      	bhi.n	800b148 <__ssputs_r+0x84>
 800b0d6:	898a      	ldrh	r2, [r1, #12]
 800b0d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0dc:	d032      	beq.n	800b144 <__ssputs_r+0x80>
 800b0de:	6825      	ldr	r5, [r4, #0]
 800b0e0:	6909      	ldr	r1, [r1, #16]
 800b0e2:	eba5 0901 	sub.w	r9, r5, r1
 800b0e6:	6965      	ldr	r5, [r4, #20]
 800b0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	444b      	add	r3, r9
 800b0f4:	106d      	asrs	r5, r5, #1
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	bf38      	it	cc
 800b0fa:	461d      	movcc	r5, r3
 800b0fc:	0553      	lsls	r3, r2, #21
 800b0fe:	d531      	bpl.n	800b164 <__ssputs_r+0xa0>
 800b100:	4629      	mov	r1, r5
 800b102:	f7ff ff6b 	bl	800afdc <_malloc_r>
 800b106:	4606      	mov	r6, r0
 800b108:	b950      	cbnz	r0, 800b120 <__ssputs_r+0x5c>
 800b10a:	230c      	movs	r3, #12
 800b10c:	f8ca 3000 	str.w	r3, [sl]
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	f04f 30ff 	mov.w	r0, #4294967295
 800b11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b120:	6921      	ldr	r1, [r4, #16]
 800b122:	464a      	mov	r2, r9
 800b124:	f7fd ffc0 	bl	80090a8 <memcpy>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	6126      	str	r6, [r4, #16]
 800b136:	6165      	str	r5, [r4, #20]
 800b138:	444e      	add	r6, r9
 800b13a:	eba5 0509 	sub.w	r5, r5, r9
 800b13e:	6026      	str	r6, [r4, #0]
 800b140:	60a5      	str	r5, [r4, #8]
 800b142:	463e      	mov	r6, r7
 800b144:	42be      	cmp	r6, r7
 800b146:	d900      	bls.n	800b14a <__ssputs_r+0x86>
 800b148:	463e      	mov	r6, r7
 800b14a:	6820      	ldr	r0, [r4, #0]
 800b14c:	4632      	mov	r2, r6
 800b14e:	4641      	mov	r1, r8
 800b150:	f000 fd20 	bl	800bb94 <memmove>
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	1b9b      	subs	r3, r3, r6
 800b158:	60a3      	str	r3, [r4, #8]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	4433      	add	r3, r6
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	2000      	movs	r0, #0
 800b162:	e7db      	b.n	800b11c <__ssputs_r+0x58>
 800b164:	462a      	mov	r2, r5
 800b166:	f000 fd3b 	bl	800bbe0 <_realloc_r>
 800b16a:	4606      	mov	r6, r0
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d1e1      	bne.n	800b134 <__ssputs_r+0x70>
 800b170:	6921      	ldr	r1, [r4, #16]
 800b172:	4650      	mov	r0, sl
 800b174:	f7ff fec6 	bl	800af04 <_free_r>
 800b178:	e7c7      	b.n	800b10a <__ssputs_r+0x46>
	...

0800b17c <_svfiprintf_r>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	4698      	mov	r8, r3
 800b182:	898b      	ldrh	r3, [r1, #12]
 800b184:	061b      	lsls	r3, r3, #24
 800b186:	b09d      	sub	sp, #116	; 0x74
 800b188:	4607      	mov	r7, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	4614      	mov	r4, r2
 800b18e:	d50e      	bpl.n	800b1ae <_svfiprintf_r+0x32>
 800b190:	690b      	ldr	r3, [r1, #16]
 800b192:	b963      	cbnz	r3, 800b1ae <_svfiprintf_r+0x32>
 800b194:	2140      	movs	r1, #64	; 0x40
 800b196:	f7ff ff21 	bl	800afdc <_malloc_r>
 800b19a:	6028      	str	r0, [r5, #0]
 800b19c:	6128      	str	r0, [r5, #16]
 800b19e:	b920      	cbnz	r0, 800b1aa <_svfiprintf_r+0x2e>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e0d1      	b.n	800b34e <_svfiprintf_r+0x1d2>
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	616b      	str	r3, [r5, #20]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b2:	2320      	movs	r3, #32
 800b1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1bc:	2330      	movs	r3, #48	; 0x30
 800b1be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b368 <_svfiprintf_r+0x1ec>
 800b1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c6:	f04f 0901 	mov.w	r9, #1
 800b1ca:	4623      	mov	r3, r4
 800b1cc:	469a      	mov	sl, r3
 800b1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d2:	b10a      	cbz	r2, 800b1d8 <_svfiprintf_r+0x5c>
 800b1d4:	2a25      	cmp	r2, #37	; 0x25
 800b1d6:	d1f9      	bne.n	800b1cc <_svfiprintf_r+0x50>
 800b1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b1dc:	d00b      	beq.n	800b1f6 <_svfiprintf_r+0x7a>
 800b1de:	465b      	mov	r3, fp
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7ff ff6d 	bl	800b0c4 <__ssputs_r>
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f000 80aa 	beq.w	800b344 <_svfiprintf_r+0x1c8>
 800b1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f2:	445a      	add	r2, fp
 800b1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 80a2 	beq.w	800b344 <_svfiprintf_r+0x1c8>
 800b200:	2300      	movs	r3, #0
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20a:	f10a 0a01 	add.w	sl, sl, #1
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	9307      	str	r3, [sp, #28]
 800b212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b216:	931a      	str	r3, [sp, #104]	; 0x68
 800b218:	4654      	mov	r4, sl
 800b21a:	2205      	movs	r2, #5
 800b21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b220:	4851      	ldr	r0, [pc, #324]	; (800b368 <_svfiprintf_r+0x1ec>)
 800b222:	f7f5 f865 	bl	80002f0 <memchr>
 800b226:	9a04      	ldr	r2, [sp, #16]
 800b228:	b9d8      	cbnz	r0, 800b262 <_svfiprintf_r+0xe6>
 800b22a:	06d0      	lsls	r0, r2, #27
 800b22c:	bf44      	itt	mi
 800b22e:	2320      	movmi	r3, #32
 800b230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b234:	0711      	lsls	r1, r2, #28
 800b236:	bf44      	itt	mi
 800b238:	232b      	movmi	r3, #43	; 0x2b
 800b23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23e:	f89a 3000 	ldrb.w	r3, [sl]
 800b242:	2b2a      	cmp	r3, #42	; 0x2a
 800b244:	d015      	beq.n	800b272 <_svfiprintf_r+0xf6>
 800b246:	9a07      	ldr	r2, [sp, #28]
 800b248:	4654      	mov	r4, sl
 800b24a:	2000      	movs	r0, #0
 800b24c:	f04f 0c0a 	mov.w	ip, #10
 800b250:	4621      	mov	r1, r4
 800b252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b256:	3b30      	subs	r3, #48	; 0x30
 800b258:	2b09      	cmp	r3, #9
 800b25a:	d94e      	bls.n	800b2fa <_svfiprintf_r+0x17e>
 800b25c:	b1b0      	cbz	r0, 800b28c <_svfiprintf_r+0x110>
 800b25e:	9207      	str	r2, [sp, #28]
 800b260:	e014      	b.n	800b28c <_svfiprintf_r+0x110>
 800b262:	eba0 0308 	sub.w	r3, r0, r8
 800b266:	fa09 f303 	lsl.w	r3, r9, r3
 800b26a:	4313      	orrs	r3, r2
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	46a2      	mov	sl, r4
 800b270:	e7d2      	b.n	800b218 <_svfiprintf_r+0x9c>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	1d19      	adds	r1, r3, #4
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	9103      	str	r1, [sp, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bfbb      	ittet	lt
 800b27e:	425b      	neglt	r3, r3
 800b280:	f042 0202 	orrlt.w	r2, r2, #2
 800b284:	9307      	strge	r3, [sp, #28]
 800b286:	9307      	strlt	r3, [sp, #28]
 800b288:	bfb8      	it	lt
 800b28a:	9204      	strlt	r2, [sp, #16]
 800b28c:	7823      	ldrb	r3, [r4, #0]
 800b28e:	2b2e      	cmp	r3, #46	; 0x2e
 800b290:	d10c      	bne.n	800b2ac <_svfiprintf_r+0x130>
 800b292:	7863      	ldrb	r3, [r4, #1]
 800b294:	2b2a      	cmp	r3, #42	; 0x2a
 800b296:	d135      	bne.n	800b304 <_svfiprintf_r+0x188>
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	1d1a      	adds	r2, r3, #4
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	9203      	str	r2, [sp, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfb8      	it	lt
 800b2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a8:	3402      	adds	r4, #2
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b378 <_svfiprintf_r+0x1fc>
 800b2b0:	7821      	ldrb	r1, [r4, #0]
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	f7f5 f81b 	bl	80002f0 <memchr>
 800b2ba:	b140      	cbz	r0, 800b2ce <_svfiprintf_r+0x152>
 800b2bc:	2340      	movs	r3, #64	; 0x40
 800b2be:	eba0 000a 	sub.w	r0, r0, sl
 800b2c2:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	4303      	orrs	r3, r0
 800b2ca:	3401      	adds	r4, #1
 800b2cc:	9304      	str	r3, [sp, #16]
 800b2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d2:	4826      	ldr	r0, [pc, #152]	; (800b36c <_svfiprintf_r+0x1f0>)
 800b2d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d8:	2206      	movs	r2, #6
 800b2da:	f7f5 f809 	bl	80002f0 <memchr>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d038      	beq.n	800b354 <_svfiprintf_r+0x1d8>
 800b2e2:	4b23      	ldr	r3, [pc, #140]	; (800b370 <_svfiprintf_r+0x1f4>)
 800b2e4:	bb1b      	cbnz	r3, 800b32e <_svfiprintf_r+0x1b2>
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	3307      	adds	r3, #7
 800b2ea:	f023 0307 	bic.w	r3, r3, #7
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f4:	4433      	add	r3, r6
 800b2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f8:	e767      	b.n	800b1ca <_svfiprintf_r+0x4e>
 800b2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fe:	460c      	mov	r4, r1
 800b300:	2001      	movs	r0, #1
 800b302:	e7a5      	b.n	800b250 <_svfiprintf_r+0xd4>
 800b304:	2300      	movs	r3, #0
 800b306:	3401      	adds	r4, #1
 800b308:	9305      	str	r3, [sp, #20]
 800b30a:	4619      	mov	r1, r3
 800b30c:	f04f 0c0a 	mov.w	ip, #10
 800b310:	4620      	mov	r0, r4
 800b312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b316:	3a30      	subs	r2, #48	; 0x30
 800b318:	2a09      	cmp	r2, #9
 800b31a:	d903      	bls.n	800b324 <_svfiprintf_r+0x1a8>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0c5      	beq.n	800b2ac <_svfiprintf_r+0x130>
 800b320:	9105      	str	r1, [sp, #20]
 800b322:	e7c3      	b.n	800b2ac <_svfiprintf_r+0x130>
 800b324:	fb0c 2101 	mla	r1, ip, r1, r2
 800b328:	4604      	mov	r4, r0
 800b32a:	2301      	movs	r3, #1
 800b32c:	e7f0      	b.n	800b310 <_svfiprintf_r+0x194>
 800b32e:	ab03      	add	r3, sp, #12
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	462a      	mov	r2, r5
 800b334:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <_svfiprintf_r+0x1f8>)
 800b336:	a904      	add	r1, sp, #16
 800b338:	4638      	mov	r0, r7
 800b33a:	f7fd ff5d 	bl	80091f8 <_printf_float>
 800b33e:	1c42      	adds	r2, r0, #1
 800b340:	4606      	mov	r6, r0
 800b342:	d1d6      	bne.n	800b2f2 <_svfiprintf_r+0x176>
 800b344:	89ab      	ldrh	r3, [r5, #12]
 800b346:	065b      	lsls	r3, r3, #25
 800b348:	f53f af2c 	bmi.w	800b1a4 <_svfiprintf_r+0x28>
 800b34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34e:	b01d      	add	sp, #116	; 0x74
 800b350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b354:	ab03      	add	r3, sp, #12
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	462a      	mov	r2, r5
 800b35a:	4b06      	ldr	r3, [pc, #24]	; (800b374 <_svfiprintf_r+0x1f8>)
 800b35c:	a904      	add	r1, sp, #16
 800b35e:	4638      	mov	r0, r7
 800b360:	f7fe f9d6 	bl	8009710 <_printf_i>
 800b364:	e7eb      	b.n	800b33e <_svfiprintf_r+0x1c2>
 800b366:	bf00      	nop
 800b368:	0800c5e4 	.word	0x0800c5e4
 800b36c:	0800c5ee 	.word	0x0800c5ee
 800b370:	080091f9 	.word	0x080091f9
 800b374:	0800b0c5 	.word	0x0800b0c5
 800b378:	0800c5ea 	.word	0x0800c5ea

0800b37c <__sfputc_r>:
 800b37c:	6893      	ldr	r3, [r2, #8]
 800b37e:	3b01      	subs	r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	b410      	push	{r4}
 800b384:	6093      	str	r3, [r2, #8]
 800b386:	da08      	bge.n	800b39a <__sfputc_r+0x1e>
 800b388:	6994      	ldr	r4, [r2, #24]
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	db01      	blt.n	800b392 <__sfputc_r+0x16>
 800b38e:	290a      	cmp	r1, #10
 800b390:	d103      	bne.n	800b39a <__sfputc_r+0x1e>
 800b392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b396:	f000 b99f 	b.w	800b6d8 <__swbuf_r>
 800b39a:	6813      	ldr	r3, [r2, #0]
 800b39c:	1c58      	adds	r0, r3, #1
 800b39e:	6010      	str	r0, [r2, #0]
 800b3a0:	7019      	strb	r1, [r3, #0]
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <__sfputs_r>:
 800b3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	18d5      	adds	r5, r2, r3
 800b3b4:	42ac      	cmp	r4, r5
 800b3b6:	d101      	bne.n	800b3bc <__sfputs_r+0x12>
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e007      	b.n	800b3cc <__sfputs_r+0x22>
 800b3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c0:	463a      	mov	r2, r7
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ffda 	bl	800b37c <__sfputc_r>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d1f3      	bne.n	800b3b4 <__sfputs_r+0xa>
 800b3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3d0 <_vfiprintf_r>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	b09d      	sub	sp, #116	; 0x74
 800b3d8:	4614      	mov	r4, r2
 800b3da:	4698      	mov	r8, r3
 800b3dc:	4606      	mov	r6, r0
 800b3de:	b118      	cbz	r0, 800b3e8 <_vfiprintf_r+0x18>
 800b3e0:	6983      	ldr	r3, [r0, #24]
 800b3e2:	b90b      	cbnz	r3, 800b3e8 <_vfiprintf_r+0x18>
 800b3e4:	f7ff f946 	bl	800a674 <__sinit>
 800b3e8:	4b89      	ldr	r3, [pc, #548]	; (800b610 <_vfiprintf_r+0x240>)
 800b3ea:	429d      	cmp	r5, r3
 800b3ec:	d11b      	bne.n	800b426 <_vfiprintf_r+0x56>
 800b3ee:	6875      	ldr	r5, [r6, #4]
 800b3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f2:	07d9      	lsls	r1, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_vfiprintf_r+0x32>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	059a      	lsls	r2, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_vfiprintf_r+0x32>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3fe:	f7ff f9dc 	bl	800a7ba <__retarget_lock_acquire_recursive>
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	071b      	lsls	r3, r3, #28
 800b406:	d501      	bpl.n	800b40c <_vfiprintf_r+0x3c>
 800b408:	692b      	ldr	r3, [r5, #16]
 800b40a:	b9eb      	cbnz	r3, 800b448 <_vfiprintf_r+0x78>
 800b40c:	4629      	mov	r1, r5
 800b40e:	4630      	mov	r0, r6
 800b410:	f000 f9c6 	bl	800b7a0 <__swsetup_r>
 800b414:	b1c0      	cbz	r0, 800b448 <_vfiprintf_r+0x78>
 800b416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b418:	07dc      	lsls	r4, r3, #31
 800b41a:	d50e      	bpl.n	800b43a <_vfiprintf_r+0x6a>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	b01d      	add	sp, #116	; 0x74
 800b422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b426:	4b7b      	ldr	r3, [pc, #492]	; (800b614 <_vfiprintf_r+0x244>)
 800b428:	429d      	cmp	r5, r3
 800b42a:	d101      	bne.n	800b430 <_vfiprintf_r+0x60>
 800b42c:	68b5      	ldr	r5, [r6, #8]
 800b42e:	e7df      	b.n	800b3f0 <_vfiprintf_r+0x20>
 800b430:	4b79      	ldr	r3, [pc, #484]	; (800b618 <_vfiprintf_r+0x248>)
 800b432:	429d      	cmp	r5, r3
 800b434:	bf08      	it	eq
 800b436:	68f5      	ldreq	r5, [r6, #12]
 800b438:	e7da      	b.n	800b3f0 <_vfiprintf_r+0x20>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	0598      	lsls	r0, r3, #22
 800b43e:	d4ed      	bmi.n	800b41c <_vfiprintf_r+0x4c>
 800b440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b442:	f7ff f9bb 	bl	800a7bc <__retarget_lock_release_recursive>
 800b446:	e7e9      	b.n	800b41c <_vfiprintf_r+0x4c>
 800b448:	2300      	movs	r3, #0
 800b44a:	9309      	str	r3, [sp, #36]	; 0x24
 800b44c:	2320      	movs	r3, #32
 800b44e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b452:	f8cd 800c 	str.w	r8, [sp, #12]
 800b456:	2330      	movs	r3, #48	; 0x30
 800b458:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b61c <_vfiprintf_r+0x24c>
 800b45c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b460:	f04f 0901 	mov.w	r9, #1
 800b464:	4623      	mov	r3, r4
 800b466:	469a      	mov	sl, r3
 800b468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46c:	b10a      	cbz	r2, 800b472 <_vfiprintf_r+0xa2>
 800b46e:	2a25      	cmp	r2, #37	; 0x25
 800b470:	d1f9      	bne.n	800b466 <_vfiprintf_r+0x96>
 800b472:	ebba 0b04 	subs.w	fp, sl, r4
 800b476:	d00b      	beq.n	800b490 <_vfiprintf_r+0xc0>
 800b478:	465b      	mov	r3, fp
 800b47a:	4622      	mov	r2, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ff93 	bl	800b3aa <__sfputs_r>
 800b484:	3001      	adds	r0, #1
 800b486:	f000 80aa 	beq.w	800b5de <_vfiprintf_r+0x20e>
 800b48a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48c:	445a      	add	r2, fp
 800b48e:	9209      	str	r2, [sp, #36]	; 0x24
 800b490:	f89a 3000 	ldrb.w	r3, [sl]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80a2 	beq.w	800b5de <_vfiprintf_r+0x20e>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a4:	f10a 0a01 	add.w	sl, sl, #1
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b2:	4654      	mov	r4, sl
 800b4b4:	2205      	movs	r2, #5
 800b4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ba:	4858      	ldr	r0, [pc, #352]	; (800b61c <_vfiprintf_r+0x24c>)
 800b4bc:	f7f4 ff18 	bl	80002f0 <memchr>
 800b4c0:	9a04      	ldr	r2, [sp, #16]
 800b4c2:	b9d8      	cbnz	r0, 800b4fc <_vfiprintf_r+0x12c>
 800b4c4:	06d1      	lsls	r1, r2, #27
 800b4c6:	bf44      	itt	mi
 800b4c8:	2320      	movmi	r3, #32
 800b4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ce:	0713      	lsls	r3, r2, #28
 800b4d0:	bf44      	itt	mi
 800b4d2:	232b      	movmi	r3, #43	; 0x2b
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4de:	d015      	beq.n	800b50c <_vfiprintf_r+0x13c>
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f0:	3b30      	subs	r3, #48	; 0x30
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d94e      	bls.n	800b594 <_vfiprintf_r+0x1c4>
 800b4f6:	b1b0      	cbz	r0, 800b526 <_vfiprintf_r+0x156>
 800b4f8:	9207      	str	r2, [sp, #28]
 800b4fa:	e014      	b.n	800b526 <_vfiprintf_r+0x156>
 800b4fc:	eba0 0308 	sub.w	r3, r0, r8
 800b500:	fa09 f303 	lsl.w	r3, r9, r3
 800b504:	4313      	orrs	r3, r2
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	46a2      	mov	sl, r4
 800b50a:	e7d2      	b.n	800b4b2 <_vfiprintf_r+0xe2>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d19      	adds	r1, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9103      	str	r1, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	bfbb      	ittet	lt
 800b518:	425b      	neglt	r3, r3
 800b51a:	f042 0202 	orrlt.w	r2, r2, #2
 800b51e:	9307      	strge	r3, [sp, #28]
 800b520:	9307      	strlt	r3, [sp, #28]
 800b522:	bfb8      	it	lt
 800b524:	9204      	strlt	r2, [sp, #16]
 800b526:	7823      	ldrb	r3, [r4, #0]
 800b528:	2b2e      	cmp	r3, #46	; 0x2e
 800b52a:	d10c      	bne.n	800b546 <_vfiprintf_r+0x176>
 800b52c:	7863      	ldrb	r3, [r4, #1]
 800b52e:	2b2a      	cmp	r3, #42	; 0x2a
 800b530:	d135      	bne.n	800b59e <_vfiprintf_r+0x1ce>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	1d1a      	adds	r2, r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9203      	str	r2, [sp, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bfb8      	it	lt
 800b53e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b542:	3402      	adds	r4, #2
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b62c <_vfiprintf_r+0x25c>
 800b54a:	7821      	ldrb	r1, [r4, #0]
 800b54c:	2203      	movs	r2, #3
 800b54e:	4650      	mov	r0, sl
 800b550:	f7f4 fece 	bl	80002f0 <memchr>
 800b554:	b140      	cbz	r0, 800b568 <_vfiprintf_r+0x198>
 800b556:	2340      	movs	r3, #64	; 0x40
 800b558:	eba0 000a 	sub.w	r0, r0, sl
 800b55c:	fa03 f000 	lsl.w	r0, r3, r0
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	4303      	orrs	r3, r0
 800b564:	3401      	adds	r4, #1
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56c:	482c      	ldr	r0, [pc, #176]	; (800b620 <_vfiprintf_r+0x250>)
 800b56e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b572:	2206      	movs	r2, #6
 800b574:	f7f4 febc 	bl	80002f0 <memchr>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d03f      	beq.n	800b5fc <_vfiprintf_r+0x22c>
 800b57c:	4b29      	ldr	r3, [pc, #164]	; (800b624 <_vfiprintf_r+0x254>)
 800b57e:	bb1b      	cbnz	r3, 800b5c8 <_vfiprintf_r+0x1f8>
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	3307      	adds	r3, #7
 800b584:	f023 0307 	bic.w	r3, r3, #7
 800b588:	3308      	adds	r3, #8
 800b58a:	9303      	str	r3, [sp, #12]
 800b58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58e:	443b      	add	r3, r7
 800b590:	9309      	str	r3, [sp, #36]	; 0x24
 800b592:	e767      	b.n	800b464 <_vfiprintf_r+0x94>
 800b594:	fb0c 3202 	mla	r2, ip, r2, r3
 800b598:	460c      	mov	r4, r1
 800b59a:	2001      	movs	r0, #1
 800b59c:	e7a5      	b.n	800b4ea <_vfiprintf_r+0x11a>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	3401      	adds	r4, #1
 800b5a2:	9305      	str	r3, [sp, #20]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	f04f 0c0a 	mov.w	ip, #10
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b0:	3a30      	subs	r2, #48	; 0x30
 800b5b2:	2a09      	cmp	r2, #9
 800b5b4:	d903      	bls.n	800b5be <_vfiprintf_r+0x1ee>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0c5      	beq.n	800b546 <_vfiprintf_r+0x176>
 800b5ba:	9105      	str	r1, [sp, #20]
 800b5bc:	e7c3      	b.n	800b546 <_vfiprintf_r+0x176>
 800b5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e7f0      	b.n	800b5aa <_vfiprintf_r+0x1da>
 800b5c8:	ab03      	add	r3, sp, #12
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4b16      	ldr	r3, [pc, #88]	; (800b628 <_vfiprintf_r+0x258>)
 800b5d0:	a904      	add	r1, sp, #16
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7fd fe10 	bl	80091f8 <_printf_float>
 800b5d8:	4607      	mov	r7, r0
 800b5da:	1c78      	adds	r0, r7, #1
 800b5dc:	d1d6      	bne.n	800b58c <_vfiprintf_r+0x1bc>
 800b5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5e0:	07d9      	lsls	r1, r3, #31
 800b5e2:	d405      	bmi.n	800b5f0 <_vfiprintf_r+0x220>
 800b5e4:	89ab      	ldrh	r3, [r5, #12]
 800b5e6:	059a      	lsls	r2, r3, #22
 800b5e8:	d402      	bmi.n	800b5f0 <_vfiprintf_r+0x220>
 800b5ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ec:	f7ff f8e6 	bl	800a7bc <__retarget_lock_release_recursive>
 800b5f0:	89ab      	ldrh	r3, [r5, #12]
 800b5f2:	065b      	lsls	r3, r3, #25
 800b5f4:	f53f af12 	bmi.w	800b41c <_vfiprintf_r+0x4c>
 800b5f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fa:	e711      	b.n	800b420 <_vfiprintf_r+0x50>
 800b5fc:	ab03      	add	r3, sp, #12
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	462a      	mov	r2, r5
 800b602:	4b09      	ldr	r3, [pc, #36]	; (800b628 <_vfiprintf_r+0x258>)
 800b604:	a904      	add	r1, sp, #16
 800b606:	4630      	mov	r0, r6
 800b608:	f7fe f882 	bl	8009710 <_printf_i>
 800b60c:	e7e4      	b.n	800b5d8 <_vfiprintf_r+0x208>
 800b60e:	bf00      	nop
 800b610:	0800c44c 	.word	0x0800c44c
 800b614:	0800c46c 	.word	0x0800c46c
 800b618:	0800c42c 	.word	0x0800c42c
 800b61c:	0800c5e4 	.word	0x0800c5e4
 800b620:	0800c5ee 	.word	0x0800c5ee
 800b624:	080091f9 	.word	0x080091f9
 800b628:	0800b3ab 	.word	0x0800b3ab
 800b62c:	0800c5ea 	.word	0x0800c5ea

0800b630 <_sbrk_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_sbrk_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f7f6 fff6 	bl	800262c <_sbrk>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_sbrk_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_sbrk_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	24000628 	.word	0x24000628

0800b650 <__sread>:
 800b650:	b510      	push	{r4, lr}
 800b652:	460c      	mov	r4, r1
 800b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b658:	f000 faf2 	bl	800bc40 <_read_r>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	bfab      	itete	ge
 800b660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b662:	89a3      	ldrhlt	r3, [r4, #12]
 800b664:	181b      	addge	r3, r3, r0
 800b666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b66a:	bfac      	ite	ge
 800b66c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b66e:	81a3      	strhlt	r3, [r4, #12]
 800b670:	bd10      	pop	{r4, pc}

0800b672 <__swrite>:
 800b672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	461f      	mov	r7, r3
 800b678:	898b      	ldrh	r3, [r1, #12]
 800b67a:	05db      	lsls	r3, r3, #23
 800b67c:	4605      	mov	r5, r0
 800b67e:	460c      	mov	r4, r1
 800b680:	4616      	mov	r6, r2
 800b682:	d505      	bpl.n	800b690 <__swrite+0x1e>
 800b684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b688:	2302      	movs	r3, #2
 800b68a:	2200      	movs	r2, #0
 800b68c:	f000 f9f8 	bl	800ba80 <_lseek_r>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	4632      	mov	r2, r6
 800b69e:	463b      	mov	r3, r7
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a6:	f000 b869 	b.w	800b77c <_write_r>

0800b6aa <__sseek>:
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b2:	f000 f9e5 	bl	800ba80 <_lseek_r>
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	bf15      	itete	ne
 800b6bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6c6:	81a3      	strheq	r3, [r4, #12]
 800b6c8:	bf18      	it	ne
 800b6ca:	81a3      	strhne	r3, [r4, #12]
 800b6cc:	bd10      	pop	{r4, pc}

0800b6ce <__sclose>:
 800b6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d2:	f000 b8f1 	b.w	800b8b8 <_close_r>
	...

0800b6d8 <__swbuf_r>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	460e      	mov	r6, r1
 800b6dc:	4614      	mov	r4, r2
 800b6de:	4605      	mov	r5, r0
 800b6e0:	b118      	cbz	r0, 800b6ea <__swbuf_r+0x12>
 800b6e2:	6983      	ldr	r3, [r0, #24]
 800b6e4:	b90b      	cbnz	r3, 800b6ea <__swbuf_r+0x12>
 800b6e6:	f7fe ffc5 	bl	800a674 <__sinit>
 800b6ea:	4b21      	ldr	r3, [pc, #132]	; (800b770 <__swbuf_r+0x98>)
 800b6ec:	429c      	cmp	r4, r3
 800b6ee:	d12b      	bne.n	800b748 <__swbuf_r+0x70>
 800b6f0:	686c      	ldr	r4, [r5, #4]
 800b6f2:	69a3      	ldr	r3, [r4, #24]
 800b6f4:	60a3      	str	r3, [r4, #8]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	071a      	lsls	r2, r3, #28
 800b6fa:	d52f      	bpl.n	800b75c <__swbuf_r+0x84>
 800b6fc:	6923      	ldr	r3, [r4, #16]
 800b6fe:	b36b      	cbz	r3, 800b75c <__swbuf_r+0x84>
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	1ac0      	subs	r0, r0, r3
 800b706:	6963      	ldr	r3, [r4, #20]
 800b708:	b2f6      	uxtb	r6, r6
 800b70a:	4283      	cmp	r3, r0
 800b70c:	4637      	mov	r7, r6
 800b70e:	dc04      	bgt.n	800b71a <__swbuf_r+0x42>
 800b710:	4621      	mov	r1, r4
 800b712:	4628      	mov	r0, r5
 800b714:	f000 f966 	bl	800b9e4 <_fflush_r>
 800b718:	bb30      	cbnz	r0, 800b768 <__swbuf_r+0x90>
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	60a3      	str	r3, [r4, #8]
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	6022      	str	r2, [r4, #0]
 800b726:	701e      	strb	r6, [r3, #0]
 800b728:	6963      	ldr	r3, [r4, #20]
 800b72a:	3001      	adds	r0, #1
 800b72c:	4283      	cmp	r3, r0
 800b72e:	d004      	beq.n	800b73a <__swbuf_r+0x62>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	07db      	lsls	r3, r3, #31
 800b734:	d506      	bpl.n	800b744 <__swbuf_r+0x6c>
 800b736:	2e0a      	cmp	r6, #10
 800b738:	d104      	bne.n	800b744 <__swbuf_r+0x6c>
 800b73a:	4621      	mov	r1, r4
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 f951 	bl	800b9e4 <_fflush_r>
 800b742:	b988      	cbnz	r0, 800b768 <__swbuf_r+0x90>
 800b744:	4638      	mov	r0, r7
 800b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b748:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <__swbuf_r+0x9c>)
 800b74a:	429c      	cmp	r4, r3
 800b74c:	d101      	bne.n	800b752 <__swbuf_r+0x7a>
 800b74e:	68ac      	ldr	r4, [r5, #8]
 800b750:	e7cf      	b.n	800b6f2 <__swbuf_r+0x1a>
 800b752:	4b09      	ldr	r3, [pc, #36]	; (800b778 <__swbuf_r+0xa0>)
 800b754:	429c      	cmp	r4, r3
 800b756:	bf08      	it	eq
 800b758:	68ec      	ldreq	r4, [r5, #12]
 800b75a:	e7ca      	b.n	800b6f2 <__swbuf_r+0x1a>
 800b75c:	4621      	mov	r1, r4
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f81e 	bl	800b7a0 <__swsetup_r>
 800b764:	2800      	cmp	r0, #0
 800b766:	d0cb      	beq.n	800b700 <__swbuf_r+0x28>
 800b768:	f04f 37ff 	mov.w	r7, #4294967295
 800b76c:	e7ea      	b.n	800b744 <__swbuf_r+0x6c>
 800b76e:	bf00      	nop
 800b770:	0800c44c 	.word	0x0800c44c
 800b774:	0800c46c 	.word	0x0800c46c
 800b778:	0800c42c 	.word	0x0800c42c

0800b77c <_write_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d07      	ldr	r5, [pc, #28]	; (800b79c <_write_r+0x20>)
 800b780:	4604      	mov	r4, r0
 800b782:	4608      	mov	r0, r1
 800b784:	4611      	mov	r1, r2
 800b786:	2200      	movs	r2, #0
 800b788:	602a      	str	r2, [r5, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	f7f6 fefd 	bl	800258a <_write>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_write_r+0x1e>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_write_r+0x1e>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	24000628 	.word	0x24000628

0800b7a0 <__swsetup_r>:
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <__swsetup_r+0xcc>)
 800b7a2:	b570      	push	{r4, r5, r6, lr}
 800b7a4:	681d      	ldr	r5, [r3, #0]
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	b125      	cbz	r5, 800b7b6 <__swsetup_r+0x16>
 800b7ac:	69ab      	ldr	r3, [r5, #24]
 800b7ae:	b913      	cbnz	r3, 800b7b6 <__swsetup_r+0x16>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f7fe ff5f 	bl	800a674 <__sinit>
 800b7b6:	4b2e      	ldr	r3, [pc, #184]	; (800b870 <__swsetup_r+0xd0>)
 800b7b8:	429c      	cmp	r4, r3
 800b7ba:	d10f      	bne.n	800b7dc <__swsetup_r+0x3c>
 800b7bc:	686c      	ldr	r4, [r5, #4]
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c4:	0719      	lsls	r1, r3, #28
 800b7c6:	d42c      	bmi.n	800b822 <__swsetup_r+0x82>
 800b7c8:	06dd      	lsls	r5, r3, #27
 800b7ca:	d411      	bmi.n	800b7f0 <__swsetup_r+0x50>
 800b7cc:	2309      	movs	r3, #9
 800b7ce:	6033      	str	r3, [r6, #0]
 800b7d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7da:	e03e      	b.n	800b85a <__swsetup_r+0xba>
 800b7dc:	4b25      	ldr	r3, [pc, #148]	; (800b874 <__swsetup_r+0xd4>)
 800b7de:	429c      	cmp	r4, r3
 800b7e0:	d101      	bne.n	800b7e6 <__swsetup_r+0x46>
 800b7e2:	68ac      	ldr	r4, [r5, #8]
 800b7e4:	e7eb      	b.n	800b7be <__swsetup_r+0x1e>
 800b7e6:	4b24      	ldr	r3, [pc, #144]	; (800b878 <__swsetup_r+0xd8>)
 800b7e8:	429c      	cmp	r4, r3
 800b7ea:	bf08      	it	eq
 800b7ec:	68ec      	ldreq	r4, [r5, #12]
 800b7ee:	e7e6      	b.n	800b7be <__swsetup_r+0x1e>
 800b7f0:	0758      	lsls	r0, r3, #29
 800b7f2:	d512      	bpl.n	800b81a <__swsetup_r+0x7a>
 800b7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f6:	b141      	cbz	r1, 800b80a <__swsetup_r+0x6a>
 800b7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d002      	beq.n	800b806 <__swsetup_r+0x66>
 800b800:	4630      	mov	r0, r6
 800b802:	f7ff fb7f 	bl	800af04 <_free_r>
 800b806:	2300      	movs	r3, #0
 800b808:	6363      	str	r3, [r4, #52]	; 0x34
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	2300      	movs	r3, #0
 800b814:	6063      	str	r3, [r4, #4]
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f043 0308 	orr.w	r3, r3, #8
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	b94b      	cbnz	r3, 800b83a <__swsetup_r+0x9a>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b830:	d003      	beq.n	800b83a <__swsetup_r+0x9a>
 800b832:	4621      	mov	r1, r4
 800b834:	4630      	mov	r0, r6
 800b836:	f000 f95b 	bl	800baf0 <__smakebuf_r>
 800b83a:	89a0      	ldrh	r0, [r4, #12]
 800b83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b840:	f010 0301 	ands.w	r3, r0, #1
 800b844:	d00a      	beq.n	800b85c <__swsetup_r+0xbc>
 800b846:	2300      	movs	r3, #0
 800b848:	60a3      	str	r3, [r4, #8]
 800b84a:	6963      	ldr	r3, [r4, #20]
 800b84c:	425b      	negs	r3, r3
 800b84e:	61a3      	str	r3, [r4, #24]
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	b943      	cbnz	r3, 800b866 <__swsetup_r+0xc6>
 800b854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b858:	d1ba      	bne.n	800b7d0 <__swsetup_r+0x30>
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
 800b85c:	0781      	lsls	r1, r0, #30
 800b85e:	bf58      	it	pl
 800b860:	6963      	ldrpl	r3, [r4, #20]
 800b862:	60a3      	str	r3, [r4, #8]
 800b864:	e7f4      	b.n	800b850 <__swsetup_r+0xb0>
 800b866:	2000      	movs	r0, #0
 800b868:	e7f7      	b.n	800b85a <__swsetup_r+0xba>
 800b86a:	bf00      	nop
 800b86c:	24000018 	.word	0x24000018
 800b870:	0800c44c 	.word	0x0800c44c
 800b874:	0800c46c 	.word	0x0800c46c
 800b878:	0800c42c 	.word	0x0800c42c

0800b87c <__assert_func>:
 800b87c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b87e:	4614      	mov	r4, r2
 800b880:	461a      	mov	r2, r3
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <__assert_func+0x2c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4605      	mov	r5, r0
 800b888:	68d8      	ldr	r0, [r3, #12]
 800b88a:	b14c      	cbz	r4, 800b8a0 <__assert_func+0x24>
 800b88c:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <__assert_func+0x30>)
 800b88e:	9100      	str	r1, [sp, #0]
 800b890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b894:	4906      	ldr	r1, [pc, #24]	; (800b8b0 <__assert_func+0x34>)
 800b896:	462b      	mov	r3, r5
 800b898:	f000 f8e0 	bl	800ba5c <fiprintf>
 800b89c:	f000 f9ef 	bl	800bc7e <abort>
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <__assert_func+0x38>)
 800b8a2:	461c      	mov	r4, r3
 800b8a4:	e7f3      	b.n	800b88e <__assert_func+0x12>
 800b8a6:	bf00      	nop
 800b8a8:	24000018 	.word	0x24000018
 800b8ac:	0800c5f5 	.word	0x0800c5f5
 800b8b0:	0800c602 	.word	0x0800c602
 800b8b4:	0800c630 	.word	0x0800c630

0800b8b8 <_close_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	; (800b8d4 <_close_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f6 fe7d 	bl	80025c2 <_close>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_close_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_close_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	24000628 	.word	0x24000628

0800b8d8 <__sflush_r>:
 800b8d8:	898a      	ldrh	r2, [r1, #12]
 800b8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	4605      	mov	r5, r0
 800b8e0:	0710      	lsls	r0, r2, #28
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	d458      	bmi.n	800b998 <__sflush_r+0xc0>
 800b8e6:	684b      	ldr	r3, [r1, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dc05      	bgt.n	800b8f8 <__sflush_r+0x20>
 800b8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dc02      	bgt.n	800b8f8 <__sflush_r+0x20>
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	d0f9      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b8fe:	2300      	movs	r3, #0
 800b900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b904:	682f      	ldr	r7, [r5, #0]
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	d032      	beq.n	800b970 <__sflush_r+0x98>
 800b90a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	075a      	lsls	r2, r3, #29
 800b910:	d505      	bpl.n	800b91e <__sflush_r+0x46>
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	1ac0      	subs	r0, r0, r3
 800b916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b918:	b10b      	cbz	r3, 800b91e <__sflush_r+0x46>
 800b91a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b91c:	1ac0      	subs	r0, r0, r3
 800b91e:	2300      	movs	r3, #0
 800b920:	4602      	mov	r2, r0
 800b922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b924:	6a21      	ldr	r1, [r4, #32]
 800b926:	4628      	mov	r0, r5
 800b928:	47b0      	blx	r6
 800b92a:	1c43      	adds	r3, r0, #1
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	d106      	bne.n	800b93e <__sflush_r+0x66>
 800b930:	6829      	ldr	r1, [r5, #0]
 800b932:	291d      	cmp	r1, #29
 800b934:	d82c      	bhi.n	800b990 <__sflush_r+0xb8>
 800b936:	4a2a      	ldr	r2, [pc, #168]	; (800b9e0 <__sflush_r+0x108>)
 800b938:	40ca      	lsrs	r2, r1
 800b93a:	07d6      	lsls	r6, r2, #31
 800b93c:	d528      	bpl.n	800b990 <__sflush_r+0xb8>
 800b93e:	2200      	movs	r2, #0
 800b940:	6062      	str	r2, [r4, #4]
 800b942:	04d9      	lsls	r1, r3, #19
 800b944:	6922      	ldr	r2, [r4, #16]
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	d504      	bpl.n	800b954 <__sflush_r+0x7c>
 800b94a:	1c42      	adds	r2, r0, #1
 800b94c:	d101      	bne.n	800b952 <__sflush_r+0x7a>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	b903      	cbnz	r3, 800b954 <__sflush_r+0x7c>
 800b952:	6560      	str	r0, [r4, #84]	; 0x54
 800b954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b956:	602f      	str	r7, [r5, #0]
 800b958:	2900      	cmp	r1, #0
 800b95a:	d0ca      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b960:	4299      	cmp	r1, r3
 800b962:	d002      	beq.n	800b96a <__sflush_r+0x92>
 800b964:	4628      	mov	r0, r5
 800b966:	f7ff facd 	bl	800af04 <_free_r>
 800b96a:	2000      	movs	r0, #0
 800b96c:	6360      	str	r0, [r4, #52]	; 0x34
 800b96e:	e7c1      	b.n	800b8f4 <__sflush_r+0x1c>
 800b970:	6a21      	ldr	r1, [r4, #32]
 800b972:	2301      	movs	r3, #1
 800b974:	4628      	mov	r0, r5
 800b976:	47b0      	blx	r6
 800b978:	1c41      	adds	r1, r0, #1
 800b97a:	d1c7      	bne.n	800b90c <__sflush_r+0x34>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0c4      	beq.n	800b90c <__sflush_r+0x34>
 800b982:	2b1d      	cmp	r3, #29
 800b984:	d001      	beq.n	800b98a <__sflush_r+0xb2>
 800b986:	2b16      	cmp	r3, #22
 800b988:	d101      	bne.n	800b98e <__sflush_r+0xb6>
 800b98a:	602f      	str	r7, [r5, #0]
 800b98c:	e7b1      	b.n	800b8f2 <__sflush_r+0x1a>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	e7ad      	b.n	800b8f4 <__sflush_r+0x1c>
 800b998:	690f      	ldr	r7, [r1, #16]
 800b99a:	2f00      	cmp	r7, #0
 800b99c:	d0a9      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b99e:	0793      	lsls	r3, r2, #30
 800b9a0:	680e      	ldr	r6, [r1, #0]
 800b9a2:	bf08      	it	eq
 800b9a4:	694b      	ldreq	r3, [r1, #20]
 800b9a6:	600f      	str	r7, [r1, #0]
 800b9a8:	bf18      	it	ne
 800b9aa:	2300      	movne	r3, #0
 800b9ac:	eba6 0807 	sub.w	r8, r6, r7
 800b9b0:	608b      	str	r3, [r1, #8]
 800b9b2:	f1b8 0f00 	cmp.w	r8, #0
 800b9b6:	dd9c      	ble.n	800b8f2 <__sflush_r+0x1a>
 800b9b8:	6a21      	ldr	r1, [r4, #32]
 800b9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9bc:	4643      	mov	r3, r8
 800b9be:	463a      	mov	r2, r7
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b0      	blx	r6
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	dc06      	bgt.n	800b9d6 <__sflush_r+0xfe>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e78e      	b.n	800b8f4 <__sflush_r+0x1c>
 800b9d6:	4407      	add	r7, r0
 800b9d8:	eba8 0800 	sub.w	r8, r8, r0
 800b9dc:	e7e9      	b.n	800b9b2 <__sflush_r+0xda>
 800b9de:	bf00      	nop
 800b9e0:	20400001 	.word	0x20400001

0800b9e4 <_fflush_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	690b      	ldr	r3, [r1, #16]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b913      	cbnz	r3, 800b9f4 <_fflush_r+0x10>
 800b9ee:	2500      	movs	r5, #0
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	b118      	cbz	r0, 800b9fe <_fflush_r+0x1a>
 800b9f6:	6983      	ldr	r3, [r0, #24]
 800b9f8:	b90b      	cbnz	r3, 800b9fe <_fflush_r+0x1a>
 800b9fa:	f7fe fe3b 	bl	800a674 <__sinit>
 800b9fe:	4b14      	ldr	r3, [pc, #80]	; (800ba50 <_fflush_r+0x6c>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	d11b      	bne.n	800ba3c <_fflush_r+0x58>
 800ba04:	686c      	ldr	r4, [r5, #4]
 800ba06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0ef      	beq.n	800b9ee <_fflush_r+0xa>
 800ba0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba10:	07d0      	lsls	r0, r2, #31
 800ba12:	d404      	bmi.n	800ba1e <_fflush_r+0x3a>
 800ba14:	0599      	lsls	r1, r3, #22
 800ba16:	d402      	bmi.n	800ba1e <_fflush_r+0x3a>
 800ba18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba1a:	f7fe fece 	bl	800a7ba <__retarget_lock_acquire_recursive>
 800ba1e:	4628      	mov	r0, r5
 800ba20:	4621      	mov	r1, r4
 800ba22:	f7ff ff59 	bl	800b8d8 <__sflush_r>
 800ba26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba28:	07da      	lsls	r2, r3, #31
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	d4e0      	bmi.n	800b9f0 <_fflush_r+0xc>
 800ba2e:	89a3      	ldrh	r3, [r4, #12]
 800ba30:	059b      	lsls	r3, r3, #22
 800ba32:	d4dd      	bmi.n	800b9f0 <_fflush_r+0xc>
 800ba34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba36:	f7fe fec1 	bl	800a7bc <__retarget_lock_release_recursive>
 800ba3a:	e7d9      	b.n	800b9f0 <_fflush_r+0xc>
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <_fflush_r+0x70>)
 800ba3e:	429c      	cmp	r4, r3
 800ba40:	d101      	bne.n	800ba46 <_fflush_r+0x62>
 800ba42:	68ac      	ldr	r4, [r5, #8]
 800ba44:	e7df      	b.n	800ba06 <_fflush_r+0x22>
 800ba46:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <_fflush_r+0x74>)
 800ba48:	429c      	cmp	r4, r3
 800ba4a:	bf08      	it	eq
 800ba4c:	68ec      	ldreq	r4, [r5, #12]
 800ba4e:	e7da      	b.n	800ba06 <_fflush_r+0x22>
 800ba50:	0800c44c 	.word	0x0800c44c
 800ba54:	0800c46c 	.word	0x0800c46c
 800ba58:	0800c42c 	.word	0x0800c42c

0800ba5c <fiprintf>:
 800ba5c:	b40e      	push	{r1, r2, r3}
 800ba5e:	b503      	push	{r0, r1, lr}
 800ba60:	4601      	mov	r1, r0
 800ba62:	ab03      	add	r3, sp, #12
 800ba64:	4805      	ldr	r0, [pc, #20]	; (800ba7c <fiprintf+0x20>)
 800ba66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6a:	6800      	ldr	r0, [r0, #0]
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	f7ff fcaf 	bl	800b3d0 <_vfiprintf_r>
 800ba72:	b002      	add	sp, #8
 800ba74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba78:	b003      	add	sp, #12
 800ba7a:	4770      	bx	lr
 800ba7c:	24000018 	.word	0x24000018

0800ba80 <_lseek_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d07      	ldr	r5, [pc, #28]	; (800baa0 <_lseek_r+0x20>)
 800ba84:	4604      	mov	r4, r0
 800ba86:	4608      	mov	r0, r1
 800ba88:	4611      	mov	r1, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f7f6 fdbe 	bl	8002610 <_lseek>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_lseek_r+0x1e>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_lseek_r+0x1e>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	24000628 	.word	0x24000628

0800baa4 <__swhatbuf_r>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	460e      	mov	r6, r1
 800baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baac:	2900      	cmp	r1, #0
 800baae:	b096      	sub	sp, #88	; 0x58
 800bab0:	4614      	mov	r4, r2
 800bab2:	461d      	mov	r5, r3
 800bab4:	da08      	bge.n	800bac8 <__swhatbuf_r+0x24>
 800bab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	602a      	str	r2, [r5, #0]
 800babe:	061a      	lsls	r2, r3, #24
 800bac0:	d410      	bmi.n	800bae4 <__swhatbuf_r+0x40>
 800bac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac6:	e00e      	b.n	800bae6 <__swhatbuf_r+0x42>
 800bac8:	466a      	mov	r2, sp
 800baca:	f000 f8df 	bl	800bc8c <_fstat_r>
 800bace:	2800      	cmp	r0, #0
 800bad0:	dbf1      	blt.n	800bab6 <__swhatbuf_r+0x12>
 800bad2:	9a01      	ldr	r2, [sp, #4]
 800bad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800badc:	425a      	negs	r2, r3
 800bade:	415a      	adcs	r2, r3
 800bae0:	602a      	str	r2, [r5, #0]
 800bae2:	e7ee      	b.n	800bac2 <__swhatbuf_r+0x1e>
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	2000      	movs	r0, #0
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	b016      	add	sp, #88	; 0x58
 800baec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800baf0 <__smakebuf_r>:
 800baf0:	898b      	ldrh	r3, [r1, #12]
 800baf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baf4:	079d      	lsls	r5, r3, #30
 800baf6:	4606      	mov	r6, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	d507      	bpl.n	800bb0c <__smakebuf_r+0x1c>
 800bafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	6123      	str	r3, [r4, #16]
 800bb04:	2301      	movs	r3, #1
 800bb06:	6163      	str	r3, [r4, #20]
 800bb08:	b002      	add	sp, #8
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	ab01      	add	r3, sp, #4
 800bb0e:	466a      	mov	r2, sp
 800bb10:	f7ff ffc8 	bl	800baa4 <__swhatbuf_r>
 800bb14:	9900      	ldr	r1, [sp, #0]
 800bb16:	4605      	mov	r5, r0
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff fa5f 	bl	800afdc <_malloc_r>
 800bb1e:	b948      	cbnz	r0, 800bb34 <__smakebuf_r+0x44>
 800bb20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb24:	059a      	lsls	r2, r3, #22
 800bb26:	d4ef      	bmi.n	800bb08 <__smakebuf_r+0x18>
 800bb28:	f023 0303 	bic.w	r3, r3, #3
 800bb2c:	f043 0302 	orr.w	r3, r3, #2
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	e7e3      	b.n	800bafc <__smakebuf_r+0xc>
 800bb34:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <__smakebuf_r+0x7c>)
 800bb36:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	9b00      	ldr	r3, [sp, #0]
 800bb44:	6163      	str	r3, [r4, #20]
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	6120      	str	r0, [r4, #16]
 800bb4a:	b15b      	cbz	r3, 800bb64 <__smakebuf_r+0x74>
 800bb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb50:	4630      	mov	r0, r6
 800bb52:	f000 f8ad 	bl	800bcb0 <_isatty_r>
 800bb56:	b128      	cbz	r0, 800bb64 <__smakebuf_r+0x74>
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	f023 0303 	bic.w	r3, r3, #3
 800bb5e:	f043 0301 	orr.w	r3, r3, #1
 800bb62:	81a3      	strh	r3, [r4, #12]
 800bb64:	89a0      	ldrh	r0, [r4, #12]
 800bb66:	4305      	orrs	r5, r0
 800bb68:	81a5      	strh	r5, [r4, #12]
 800bb6a:	e7cd      	b.n	800bb08 <__smakebuf_r+0x18>
 800bb6c:	0800a60d 	.word	0x0800a60d

0800bb70 <__ascii_mbtowc>:
 800bb70:	b082      	sub	sp, #8
 800bb72:	b901      	cbnz	r1, 800bb76 <__ascii_mbtowc+0x6>
 800bb74:	a901      	add	r1, sp, #4
 800bb76:	b142      	cbz	r2, 800bb8a <__ascii_mbtowc+0x1a>
 800bb78:	b14b      	cbz	r3, 800bb8e <__ascii_mbtowc+0x1e>
 800bb7a:	7813      	ldrb	r3, [r2, #0]
 800bb7c:	600b      	str	r3, [r1, #0]
 800bb7e:	7812      	ldrb	r2, [r2, #0]
 800bb80:	1e10      	subs	r0, r2, #0
 800bb82:	bf18      	it	ne
 800bb84:	2001      	movne	r0, #1
 800bb86:	b002      	add	sp, #8
 800bb88:	4770      	bx	lr
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	e7fb      	b.n	800bb86 <__ascii_mbtowc+0x16>
 800bb8e:	f06f 0001 	mvn.w	r0, #1
 800bb92:	e7f8      	b.n	800bb86 <__ascii_mbtowc+0x16>

0800bb94 <memmove>:
 800bb94:	4288      	cmp	r0, r1
 800bb96:	b510      	push	{r4, lr}
 800bb98:	eb01 0402 	add.w	r4, r1, r2
 800bb9c:	d902      	bls.n	800bba4 <memmove+0x10>
 800bb9e:	4284      	cmp	r4, r0
 800bba0:	4623      	mov	r3, r4
 800bba2:	d807      	bhi.n	800bbb4 <memmove+0x20>
 800bba4:	1e43      	subs	r3, r0, #1
 800bba6:	42a1      	cmp	r1, r4
 800bba8:	d008      	beq.n	800bbbc <memmove+0x28>
 800bbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbb2:	e7f8      	b.n	800bba6 <memmove+0x12>
 800bbb4:	4402      	add	r2, r0
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	428a      	cmp	r2, r1
 800bbba:	d100      	bne.n	800bbbe <memmove+0x2a>
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbc6:	e7f7      	b.n	800bbb8 <memmove+0x24>

0800bbc8 <__malloc_lock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	; (800bbd0 <__malloc_lock+0x8>)
 800bbca:	f7fe bdf6 	b.w	800a7ba <__retarget_lock_acquire_recursive>
 800bbce:	bf00      	nop
 800bbd0:	2400061c 	.word	0x2400061c

0800bbd4 <__malloc_unlock>:
 800bbd4:	4801      	ldr	r0, [pc, #4]	; (800bbdc <__malloc_unlock+0x8>)
 800bbd6:	f7fe bdf1 	b.w	800a7bc <__retarget_lock_release_recursive>
 800bbda:	bf00      	nop
 800bbdc:	2400061c 	.word	0x2400061c

0800bbe0 <_realloc_r>:
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	460e      	mov	r6, r1
 800bbea:	b921      	cbnz	r1, 800bbf6 <_realloc_r+0x16>
 800bbec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	f7ff b9f3 	b.w	800afdc <_malloc_r>
 800bbf6:	b92a      	cbnz	r2, 800bc04 <_realloc_r+0x24>
 800bbf8:	f7ff f984 	bl	800af04 <_free_r>
 800bbfc:	4625      	mov	r5, r4
 800bbfe:	4628      	mov	r0, r5
 800bc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc04:	f000 f864 	bl	800bcd0 <_malloc_usable_size_r>
 800bc08:	4284      	cmp	r4, r0
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	d802      	bhi.n	800bc14 <_realloc_r+0x34>
 800bc0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc12:	d812      	bhi.n	800bc3a <_realloc_r+0x5a>
 800bc14:	4621      	mov	r1, r4
 800bc16:	4640      	mov	r0, r8
 800bc18:	f7ff f9e0 	bl	800afdc <_malloc_r>
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d0ed      	beq.n	800bbfe <_realloc_r+0x1e>
 800bc22:	42bc      	cmp	r4, r7
 800bc24:	4622      	mov	r2, r4
 800bc26:	4631      	mov	r1, r6
 800bc28:	bf28      	it	cs
 800bc2a:	463a      	movcs	r2, r7
 800bc2c:	f7fd fa3c 	bl	80090a8 <memcpy>
 800bc30:	4631      	mov	r1, r6
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7ff f966 	bl	800af04 <_free_r>
 800bc38:	e7e1      	b.n	800bbfe <_realloc_r+0x1e>
 800bc3a:	4635      	mov	r5, r6
 800bc3c:	e7df      	b.n	800bbfe <_realloc_r+0x1e>
	...

0800bc40 <_read_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_read_r+0x20>)
 800bc44:	4604      	mov	r4, r0
 800bc46:	4608      	mov	r0, r1
 800bc48:	4611      	mov	r1, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f7f6 fc7e 	bl	8002550 <_read>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_read_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_read_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	24000628 	.word	0x24000628

0800bc64 <__ascii_wctomb>:
 800bc64:	b149      	cbz	r1, 800bc7a <__ascii_wctomb+0x16>
 800bc66:	2aff      	cmp	r2, #255	; 0xff
 800bc68:	bf85      	ittet	hi
 800bc6a:	238a      	movhi	r3, #138	; 0x8a
 800bc6c:	6003      	strhi	r3, [r0, #0]
 800bc6e:	700a      	strbls	r2, [r1, #0]
 800bc70:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc74:	bf98      	it	ls
 800bc76:	2001      	movls	r0, #1
 800bc78:	4770      	bx	lr
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	4770      	bx	lr

0800bc7e <abort>:
 800bc7e:	b508      	push	{r3, lr}
 800bc80:	2006      	movs	r0, #6
 800bc82:	f000 f855 	bl	800bd30 <raise>
 800bc86:	2001      	movs	r0, #1
 800bc88:	f7f6 fc58 	bl	800253c <_exit>

0800bc8c <_fstat_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	; (800bcac <_fstat_r+0x20>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	4611      	mov	r1, r2
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	f7f6 fc9e 	bl	80025da <_fstat>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d102      	bne.n	800bca8 <_fstat_r+0x1c>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	b103      	cbz	r3, 800bca8 <_fstat_r+0x1c>
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	bf00      	nop
 800bcac:	24000628 	.word	0x24000628

0800bcb0 <_isatty_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d06      	ldr	r5, [pc, #24]	; (800bccc <_isatty_r+0x1c>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	f7f6 fc9d 	bl	80025fa <_isatty>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_isatty_r+0x1a>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_isatty_r+0x1a>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	24000628 	.word	0x24000628

0800bcd0 <_malloc_usable_size_r>:
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f18      	subs	r0, r3, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfbc      	itt	lt
 800bcda:	580b      	ldrlt	r3, [r1, r0]
 800bcdc:	18c0      	addlt	r0, r0, r3
 800bcde:	4770      	bx	lr

0800bce0 <_raise_r>:
 800bce0:	291f      	cmp	r1, #31
 800bce2:	b538      	push	{r3, r4, r5, lr}
 800bce4:	4604      	mov	r4, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	d904      	bls.n	800bcf4 <_raise_r+0x14>
 800bcea:	2316      	movs	r3, #22
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcf6:	b112      	cbz	r2, 800bcfe <_raise_r+0x1e>
 800bcf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcfc:	b94b      	cbnz	r3, 800bd12 <_raise_r+0x32>
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 f830 	bl	800bd64 <_getpid_r>
 800bd04:	462a      	mov	r2, r5
 800bd06:	4601      	mov	r1, r0
 800bd08:	4620      	mov	r0, r4
 800bd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0e:	f000 b817 	b.w	800bd40 <_kill_r>
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d00a      	beq.n	800bd2c <_raise_r+0x4c>
 800bd16:	1c59      	adds	r1, r3, #1
 800bd18:	d103      	bne.n	800bd22 <_raise_r+0x42>
 800bd1a:	2316      	movs	r3, #22
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	2001      	movs	r0, #1
 800bd20:	e7e7      	b.n	800bcf2 <_raise_r+0x12>
 800bd22:	2400      	movs	r4, #0
 800bd24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd28:	4628      	mov	r0, r5
 800bd2a:	4798      	blx	r3
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e7e0      	b.n	800bcf2 <_raise_r+0x12>

0800bd30 <raise>:
 800bd30:	4b02      	ldr	r3, [pc, #8]	; (800bd3c <raise+0xc>)
 800bd32:	4601      	mov	r1, r0
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	f7ff bfd3 	b.w	800bce0 <_raise_r>
 800bd3a:	bf00      	nop
 800bd3c:	24000018 	.word	0x24000018

0800bd40 <_kill_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	; (800bd60 <_kill_r+0x20>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	f7f6 fbe5 	bl	800251c <_kill>
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	d102      	bne.n	800bd5c <_kill_r+0x1c>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	b103      	cbz	r3, 800bd5c <_kill_r+0x1c>
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	bf00      	nop
 800bd60:	24000628 	.word	0x24000628

0800bd64 <_getpid_r>:
 800bd64:	f7f6 bbd2 	b.w	800250c <_getpid>

0800bd68 <_init>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	bf00      	nop
 800bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6e:	bc08      	pop	{r3}
 800bd70:	469e      	mov	lr, r3
 800bd72:	4770      	bx	lr

0800bd74 <_fini>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	bf00      	nop
 800bd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7a:	bc08      	pop	{r3}
 800bd7c:	469e      	mov	lr, r3
 800bd7e:	4770      	bx	lr
