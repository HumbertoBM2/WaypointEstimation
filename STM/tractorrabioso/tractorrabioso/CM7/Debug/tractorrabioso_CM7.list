
tractorrabioso_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002438  0800e558  0800e558  0001e558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010990  08010990  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08010990  08010990  00020990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010998  08010998  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010998  08010998  00020998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801099c  0801099c  0002099c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  24000000  080109a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  24000228  08010bc8  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240007b8  08010bc8  000307b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ed0  00000000  00000000  00030256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2a  00000000  00000000  00054126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00057b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00059770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ec3a  00000000  00000000  0005b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022849  00000000  00000000  00099e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019933e  00000000  00000000  000bc69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002559d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d0c  00000000  00000000  00255a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000228 	.word	0x24000228
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e540 	.word	0x0800e540

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400022c 	.word	0x2400022c
 80002dc:	0800e540 	.word	0x0800e540

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 ffa9 	bl	8004774 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 ffa0 	bl	8004774 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000254 	.word	0x24000254
 8000840:	24000258 	.word	0x24000258

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 ff89 	bl	8004774 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 ff80 	bl	8004774 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000254 	.word	0x24000254
 8000880:	2400025a 	.word	0x2400025a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f007 f9de 	bl	8007c68 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f007 fbc8 	bl	800804c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400025c 	.word	0x2400025c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f007 f9b3 	bl	8007c68 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f007 fb9e 	bl	800804c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400025c 	.word	0x2400025c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f007 f989 	bl	8007c68 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400025c 	.word	0x2400025c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f007 f969 	bl	8007c68 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f007 f962 	bl	8007c68 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400025c 	.word	0x2400025c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f007 f939 	bl	8007c68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f007 fb24 	bl	800804c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400025c 	.word	0x2400025c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00a fb40 	bl	800b0f8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f002 fed0 	bl	800383c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fad5 	bl	8001150 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fae5 	bl	8001184 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f9ab 	bl	8000f1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9e1 	bl	8000f90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fa24 	bl	800101c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f976 	bl	8000ec4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 faae 	bl	800113e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa3c 	bl	800106c <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400025c 	.word	0x2400025c
 8000c08:	24000254 	.word	0x24000254
 8000c0c:	24000258 	.word	0x24000258
 8000c10:	2400025a 	.word	0x2400025a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000248 	.word	0x24000248

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa10 	bl	800108a <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000248 	.word	0x24000248
 8000d40:	0800ecc4 	.word	0x0800ecc4
 8000d44:	0800eccc 	.word	0x0800eccc
 8000d48:	24000250 	.word	0x24000250

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000250 	.word	0x24000250

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000250 	.word	0x24000250

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0306 	orr.w	r3, r3, #6
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f991 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0306 	orr.w	r3, r3, #6
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 0303 	orr.w	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd0d 	bl	8000884 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd55 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fd02 	bl	8000884 <NRF24_read_register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e86:	f000 f963 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff fcfa 	bl	8000884 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f7ff fd42 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fcef 	bl	8000884 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f7ff fd37 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <NRF24_enableDynamicPayloads+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24000251 	.word	0x24000251

08000ec4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f7ff fcdb 	bl	8000884 <NRF24_read_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fd23 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f7ff fd1f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <NRF24_disableDynamicPayloads+0x2c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000251 	.word	0x24000251

08000ef4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f04:	213f      	movs	r1, #63	; 0x3f
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fd0c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f0c:	e003      	b.n	8000f16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd07 	bl	8000924 <NRF24_write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fcab 	bl	8000884 <NRF24_read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f023 0306 	bic.w	r3, r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d104      	bne.n	8000f4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0306 	orr.w	r3, r3, #6
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e019      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d104      	bne.n	8000f5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e011      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d103      	bne.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0306 	orr.w	r3, r3, #6
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fcce 	bl	8000924 <NRF24_write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fc70 	bl	8000884 <NRF24_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <NRF24_setDataRate+0x88>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00d      	b.n	8000fe8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	e002      	b.n	8000fe8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fc99 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f7ff fc46 	bl	8000884 <NRF24_read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e002      	b.n	800100e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_setDataRate+0x88>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000252 	.word	0x24000252

0800101c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fc2c 	bl	8000884 <NRF24_read_register>
 800102c:	4603      	mov	r3, r0
 800102e:	f023 030c 	bic.w	r3, r3, #12
 8001032:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e007      	b.n	800105a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc60 	bl	8000924 <NRF24_write_register>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc07 	bl	8000884 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc4f 	bl	8000924 <NRF24_write_register>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001092:	f7ff fcd1 	bl	8000a38 <NRF24_get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fc2b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010d8:	2120      	movs	r1, #32
 80010da:	2007      	movs	r0, #7
 80010dc:	f7ff fc22 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80010fe:	2320      	movs	r3, #32
 8001100:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001102:	7afa      	ldrb	r2, [r7, #11]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	4293      	cmp	r3, r2
 8001108:	bf28      	it	cs
 800110a:	4613      	movcs	r3, r2
 800110c:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(0);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fb78 	bl	8000804 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc1c 	bl	8000968 <NRF24_write_registerN>
  NRF24_csn(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fb67 	bl	8000804 <NRF24_csn>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001142:	2170      	movs	r1, #112	; 0x70
 8001144:	2007      	movs	r0, #7
 8001146:	f7ff fbed 	bl	8000924 <NRF24_write_register>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fb54 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800115c:	2350      	movs	r3, #80	; 0x50
 800115e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001160:	2373      	movs	r3, #115	; 0x73
 8001162:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2202      	movs	r2, #2
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <NRF24_ACTIVATE_cmd+0x30>)
 800116c:	f006 fd7c 	bl	8007c68 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fb47 	bl	8000804 <NRF24_csn>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2400025c 	.word	0x2400025c

08001184 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b0a1      	sub	sp, #132	; 0x84
 8001188:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	49c3      	ldr	r1, [pc, #780]	; (800149c <printRadioSettings+0x318>)
 8001190:	4618      	mov	r0, r3
 8001192:	f00a fccd 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8a0 	bl	80002e0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	230a      	movs	r3, #10
 80011aa:	48bd      	ldr	r0, [pc, #756]	; (80014a0 <printRadioSettings+0x31c>)
 80011ac:	f008 fec4 	bl	8009f38 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fb67 	bl	8000884 <NRF24_read_register>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80011bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80011c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <printRadioSettings+0x5e>
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	49b2      	ldr	r1, [pc, #712]	; (80014a4 <printRadioSettings+0x320>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a fca8 	bl	800bb30 <siprintf>
 80011e0:	e00c      	b.n	80011fc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	49b0      	ldr	r1, [pc, #704]	; (80014a8 <printRadioSettings+0x324>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a fca1 	bl	800bb30 <siprintf>
 80011ee:	e005      	b.n	80011fc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49ad      	ldr	r1, [pc, #692]	; (80014ac <printRadioSettings+0x328>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00a fc9a 	bl	800bb30 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f86d 	bl	80002e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <printRadioSettings+0x31c>)
 8001212:	f008 fe91 	bl	8009f38 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fb34 	bl	8000884 <NRF24_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfcc      	ite	gt
 800122e:	2301      	movgt	r3, #1
 8001230:	2300      	movle	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfcc      	ite	gt
 8001256:	2301      	movgt	r3, #1
 8001258:	2300      	movle	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfcc      	ite	gt
 800126a:	2301      	movgt	r3, #1
 800126c:	2300      	movle	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001276:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfcc      	ite	gt
 800127e:	2301      	movgt	r3, #1
 8001280:	2300      	movle	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfcc      	ite	gt
 8001292:	2301      	movgt	r3, #1
 8001294:	2300      	movle	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	9303      	str	r3, [sp, #12]
 800129e:	9402      	str	r4, [sp, #8]
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	4633      	mov	r3, r6
 80012a6:	462a      	mov	r2, r5
 80012a8:	4981      	ldr	r1, [pc, #516]	; (80014b0 <printRadioSettings+0x32c>)
 80012aa:	f00a fc41 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f814 	bl	80002e0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	230a      	movs	r3, #10
 80012c2:	4877      	ldr	r0, [pc, #476]	; (80014a0 <printRadioSettings+0x31c>)
 80012c4:	f008 fe38 	bl	8009f38 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fadb 	bl	8000884 <NRF24_read_register>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfcc      	ite	gt
 80012f4:	2301      	movgt	r3, #1
 80012f6:	2300      	movle	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001300:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	bfcc      	ite	gt
 8001308:	2301      	movgt	r3, #1
 800130a:	2300      	movle	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001310:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001314:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfcc      	ite	gt
 800131c:	2301      	movgt	r3, #1
 800131e:	2300      	movle	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001328:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfcc      	ite	gt
 8001330:	2301      	movgt	r3, #1
 8001332:	2300      	movle	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f107 0008 	add.w	r0, r7, #8
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	9402      	str	r4, [sp, #8]
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	4633      	mov	r3, r6
 8001358:	462a      	mov	r2, r5
 800135a:	4956      	ldr	r1, [pc, #344]	; (80014b4 <printRadioSettings+0x330>)
 800135c:	f00a fbe8 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffbb 	bl	80002e0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	230a      	movs	r3, #10
 8001374:	484a      	ldr	r0, [pc, #296]	; (80014a0 <printRadioSettings+0x31c>)
 8001376:	f008 fddf 	bl	8009f38 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fa82 	bl	8000884 <NRF24_read_register>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	3302      	adds	r3, #2
 8001390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001394:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4946      	ldr	r1, [pc, #280]	; (80014b8 <printRadioSettings+0x334>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a fbc6 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	230a      	movs	r3, #10
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <printRadioSettings+0x31c>)
 80013ba:	f008 fdbd 	bl	8009f38 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80013be:	2005      	movs	r0, #5
 80013c0:	f7ff fa60 	bl	8000884 <NRF24_read_register>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80013ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <printRadioSettings+0x338>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f00a fba9 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff7c 	bl	80002e0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f107 0108 	add.w	r1, r7, #8
 80013f0:	230a      	movs	r3, #10
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <printRadioSettings+0x31c>)
 80013f4:	f008 fda0 	bl	8009f38 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80013f8:	2006      	movs	r0, #6
 80013fa:	f7ff fa43 	bl	8000884 <NRF24_read_register>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <printRadioSettings+0x29a>
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	492a      	ldr	r1, [pc, #168]	; (80014c0 <printRadioSettings+0x33c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f00a fb8a 	bl	800bb30 <siprintf>
 800141c:	e005      	b.n	800142a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4928      	ldr	r1, [pc, #160]	; (80014c4 <printRadioSettings+0x340>)
 8001424:	4618      	mov	r0, r3
 8001426:	f00a fb83 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ff56 	bl	80002e0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0108 	add.w	r1, r7, #8
 800143c:	230a      	movs	r3, #10
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <printRadioSettings+0x31c>)
 8001440:	f008 fd7a 	bl	8009f38 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001448:	f003 0306 	and.w	r3, r3, #6
 800144c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <printRadioSettings+0x2ec>
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4918      	ldr	r1, [pc, #96]	; (80014c8 <printRadioSettings+0x344>)
 8001468:	4618      	mov	r0, r3
 800146a:	f00a fb61 	bl	800bb30 <siprintf>
 800146e:	e03b      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <printRadioSettings+0x302>
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <printRadioSettings+0x348>)
 800147e:	4618      	mov	r0, r3
 8001480:	f00a fb56 	bl	800bb30 <siprintf>
 8001484:	e030      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	2b02      	cmp	r3, #2
 800148c:	d122      	bne.n	80014d4 <printRadioSettings+0x350>
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <printRadioSettings+0x34c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f00a fb4b 	bl	800bb30 <siprintf>
 800149a:	e025      	b.n	80014e8 <printRadioSettings+0x364>
 800149c:	0800e558 	.word	0x0800e558
 80014a0:	240002e4 	.word	0x240002e4
 80014a4:	0800e58c 	.word	0x0800e58c
 80014a8:	0800e5a8 	.word	0x0800e5a8
 80014ac:	0800e5c4 	.word	0x0800e5c4
 80014b0:	0800e5d8 	.word	0x0800e5d8
 80014b4:	0800e61c 	.word	0x0800e61c
 80014b8:	0800e668 	.word	0x0800e668
 80014bc:	0800e684 	.word	0x0800e684
 80014c0:	0800e698 	.word	0x0800e698
 80014c4:	0800e6b0 	.word	0x0800e6b0
 80014c8:	0800e6c8 	.word	0x0800e6c8
 80014cc:	0800e6dc 	.word	0x0800e6dc
 80014d0:	0800e6f0 	.word	0x0800e6f0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80014d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d105      	bne.n	80014e8 <printRadioSettings+0x364>
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	49d7      	ldr	r1, [pc, #860]	; (8001840 <printRadioSettings+0x6bc>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00a fb24 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fef7 	bl	80002e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	230a      	movs	r3, #10
 80014fc:	48d1      	ldr	r0, [pc, #836]	; (8001844 <printRadioSettings+0x6c0>)
 80014fe:	f008 fd1b 	bl	8009f38 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001502:	463b      	mov	r3, r7
 8001504:	2205      	movs	r2, #5
 8001506:	4619      	mov	r1, r3
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff f9e3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	461c      	mov	r4, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	461d      	mov	r5, r3
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	787a      	ldrb	r2, [r7, #1]
 800151a:	7839      	ldrb	r1, [r7, #0]
 800151c:	f107 0008 	add.w	r0, r7, #8
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	49c7      	ldr	r1, [pc, #796]	; (8001848 <printRadioSettings+0x6c4>)
 800152c:	f00a fb00 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed3 	bl	80002e0 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	230a      	movs	r3, #10
 8001544:	48bf      	ldr	r0, [pc, #764]	; (8001844 <printRadioSettings+0x6c0>)
 8001546:	f008 fcf7 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800154a:	463b      	mov	r3, r7
 800154c:	2205      	movs	r2, #5
 800154e:	4619      	mov	r1, r3
 8001550:	200b      	movs	r0, #11
 8001552:	f7ff f9bf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	461d      	mov	r5, r3
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	787a      	ldrb	r2, [r7, #1]
 8001562:	7839      	ldrb	r1, [r7, #0]
 8001564:	f107 0008 	add.w	r0, r7, #8
 8001568:	9102      	str	r1, [sp, #8]
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	462b      	mov	r3, r5
 8001570:	4622      	mov	r2, r4
 8001572:	49b6      	ldr	r1, [pc, #728]	; (800184c <printRadioSettings+0x6c8>)
 8001574:	f00a fadc 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feaf 	bl	80002e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	230a      	movs	r3, #10
 800158c:	48ad      	ldr	r0, [pc, #692]	; (8001844 <printRadioSettings+0x6c0>)
 800158e:	f008 fcd3 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001592:	463b      	mov	r3, r7
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	200c      	movs	r0, #12
 800159a:	f7ff f99b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	49aa      	ldr	r1, [pc, #680]	; (8001850 <printRadioSettings+0x6cc>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00a fac1 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe94 	bl	80002e0 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	230a      	movs	r3, #10
 80015c2:	48a0      	ldr	r0, [pc, #640]	; (8001844 <printRadioSettings+0x6c0>)
 80015c4:	f008 fcb8 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80015c8:	463b      	mov	r3, r7
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	200d      	movs	r0, #13
 80015d0:	f7ff f980 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	499d      	ldr	r1, [pc, #628]	; (8001854 <printRadioSettings+0x6d0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f00a faa6 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fe79 	bl	80002e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	230a      	movs	r3, #10
 80015f8:	4892      	ldr	r0, [pc, #584]	; (8001844 <printRadioSettings+0x6c0>)
 80015fa:	f008 fc9d 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80015fe:	463b      	mov	r3, r7
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	200e      	movs	r0, #14
 8001606:	f7ff f965 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800160a:	783b      	ldrb	r3, [r7, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4991      	ldr	r1, [pc, #580]	; (8001858 <printRadioSettings+0x6d4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fa8b 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe5e 	bl	80002e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	4885      	ldr	r0, [pc, #532]	; (8001844 <printRadioSettings+0x6c0>)
 8001630:	f008 fc82 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff f94a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001640:	783b      	ldrb	r3, [r7, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4984      	ldr	r1, [pc, #528]	; (800185c <printRadioSettings+0x6d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f00a fa70 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe43 	bl	80002e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	230a      	movs	r3, #10
 8001664:	4877      	ldr	r0, [pc, #476]	; (8001844 <printRadioSettings+0x6c0>)
 8001666:	f008 fc67 	bl	8009f38 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800166a:	463b      	mov	r3, r7
 800166c:	2205      	movs	r2, #5
 800166e:	4619      	mov	r1, r3
 8001670:	2010      	movs	r0, #16
 8001672:	f7ff f92f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	461c      	mov	r4, r3
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	461d      	mov	r5, r3
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	787a      	ldrb	r2, [r7, #1]
 8001682:	7839      	ldrb	r1, [r7, #0]
 8001684:	f107 0008 	add.w	r0, r7, #8
 8001688:	9102      	str	r1, [sp, #8]
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	462b      	mov	r3, r5
 8001690:	4622      	mov	r2, r4
 8001692:	4973      	ldr	r1, [pc, #460]	; (8001860 <printRadioSettings+0x6dc>)
 8001694:	f00a fa4c 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fe1f 	bl	80002e0 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	230a      	movs	r3, #10
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <printRadioSettings+0x6c0>)
 80016ae:	f008 fc43 	bl	8009f38 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80016b2:	2011      	movs	r0, #17
 80016b4:	f7ff f8e6 	bl	8000884 <NRF24_read_register>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4966      	ldr	r1, [pc, #408]	; (8001864 <printRadioSettings+0x6e0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a fa2f 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 0108 	add.w	r1, r7, #8
 80016e4:	230a      	movs	r3, #10
 80016e6:	4857      	ldr	r0, [pc, #348]	; (8001844 <printRadioSettings+0x6c0>)
 80016e8:	f008 fc26 	bl	8009f38 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f7ff f8c9 	bl	8000884 <NRF24_read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4958      	ldr	r1, [pc, #352]	; (8001868 <printRadioSettings+0x6e4>)
 8001706:	4618      	mov	r0, r3
 8001708:	f00a fa12 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fde5 	bl	80002e0 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	f107 0108 	add.w	r1, r7, #8
 800171e:	230a      	movs	r3, #10
 8001720:	4848      	ldr	r0, [pc, #288]	; (8001844 <printRadioSettings+0x6c0>)
 8001722:	f008 fc09 	bl	8009f38 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001726:	2013      	movs	r0, #19
 8001728:	f7ff f8ac 	bl	8000884 <NRF24_read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001732:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <printRadioSettings+0x6e8>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00a f9f5 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdc8 	bl	80002e0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	230a      	movs	r3, #10
 800175a:	483a      	ldr	r0, [pc, #232]	; (8001844 <printRadioSettings+0x6c0>)
 800175c:	f008 fbec 	bl	8009f38 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001760:	2014      	movs	r0, #20
 8001762:	f7ff f88f 	bl	8000884 <NRF24_read_register>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <printRadioSettings+0x6ec>)
 800177a:	4618      	mov	r0, r3
 800177c:	f00a f9d8 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdab 	bl	80002e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	482b      	ldr	r0, [pc, #172]	; (8001844 <printRadioSettings+0x6c0>)
 8001796:	f008 fbcf 	bl	8009f38 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 800179a:	2015      	movs	r0, #21
 800179c:	f7ff f872 	bl	8000884 <NRF24_read_register>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4930      	ldr	r1, [pc, #192]	; (8001874 <printRadioSettings+0x6f0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a f9bb 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd8e 	bl	80002e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <printRadioSettings+0x6c0>)
 80017d0:	f008 fbb2 	bl	8009f38 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80017d4:	2016      	movs	r0, #22
 80017d6:	f7ff f855 	bl	8000884 <NRF24_read_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4922      	ldr	r1, [pc, #136]	; (8001878 <printRadioSettings+0x6f4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00a f99e 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd71 	bl	80002e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <printRadioSettings+0x6c0>)
 800180a:	f008 fb95 	bl	8009f38 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800180e:	201c      	movs	r0, #28
 8001810:	f7ff f838 	bl	8000884 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfcc      	ite	gt
 8001826:	2301      	movgt	r3, #1
 8001828:	2300      	movle	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001832:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfcc      	ite	gt
 800183a:	2301      	movgt	r3, #1
 800183c:	2300      	movle	r3, #0
 800183e:	e01d      	b.n	800187c <printRadioSettings+0x6f8>
 8001840:	0800e704 	.word	0x0800e704
 8001844:	240002e4 	.word	0x240002e4
 8001848:	0800e718 	.word	0x0800e718
 800184c:	0800e748 	.word	0x0800e748
 8001850:	0800e778 	.word	0x0800e778
 8001854:	0800e7a0 	.word	0x0800e7a0
 8001858:	0800e7c8 	.word	0x0800e7c8
 800185c:	0800e7f0 	.word	0x0800e7f0
 8001860:	0800e818 	.word	0x0800e818
 8001864:	0800e844 	.word	0x0800e844
 8001868:	0800e860 	.word	0x0800e860
 800186c:	0800e87c 	.word	0x0800e87c
 8001870:	0800e898 	.word	0x0800e898
 8001874:	0800e8b4 	.word	0x0800e8b4
 8001878:	0800e8d0 	.word	0x0800e8d0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfcc      	ite	gt
 800188c:	2301      	movgt	r3, #1
 800188e:	2300      	movle	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001894:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001898:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800189c:	2b00      	cmp	r3, #0
 800189e:	bfcc      	ite	gt
 80018a0:	2301      	movgt	r3, #1
 80018a2:	2300      	movle	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bfcc      	ite	gt
 80018b4:	2301      	movgt	r3, #1
 80018b6:	2300      	movle	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bfcc      	ite	gt
 80018c8:	2301      	movgt	r3, #1
 80018ca:	2300      	movle	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f107 0008 	add.w	r0, r7, #8
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9402      	str	r4, [sp, #8]
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	462a      	mov	r2, r5
 80018de:	4936      	ldr	r1, [pc, #216]	; (80019b8 <printRadioSettings+0x834>)
 80018e0:	f00a f926 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcf9 	bl	80002e0 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	230a      	movs	r3, #10
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <printRadioSettings+0x838>)
 80018fa:	f008 fb1d 	bl	8009f38 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80018fe:	201d      	movs	r0, #29
 8001900:	f7fe ffc0 	bl	8000884 <NRF24_read_register>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800190a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <printRadioSettings+0x7a0>
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4929      	ldr	r1, [pc, #164]	; (80019c0 <printRadioSettings+0x83c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f00a f907 	bl	800bb30 <siprintf>
 8001922:	e005      	b.n	8001930 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4926      	ldr	r1, [pc, #152]	; (80019c4 <printRadioSettings+0x840>)
 800192a:	4618      	mov	r0, r3
 800192c:	f00a f900 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fcd3 	bl	80002e0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0108 	add.w	r1, r7, #8
 8001942:	230a      	movs	r3, #10
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <printRadioSettings+0x838>)
 8001946:	f008 faf7 	bl	8009f38 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800194a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <printRadioSettings+0x7e0>
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <printRadioSettings+0x844>)
 800195c:	4618      	mov	r0, r3
 800195e:	f00a f8e7 	bl	800bb30 <siprintf>
 8001962:	e005      	b.n	8001970 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <printRadioSettings+0x848>)
 800196a:	4618      	mov	r0, r3
 800196c:	f00a f8e0 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <printRadioSettings+0x838>)
 8001986:	f008 fad7 	bl	8009f38 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <printRadioSettings+0x84c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00a f8cd 	bl	800bb30 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fca0 	bl	80002e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0108 	add.w	r1, r7, #8
 80019a8:	230a      	movs	r3, #10
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <printRadioSettings+0x838>)
 80019ac:	f008 fac4 	bl	8009f38 <HAL_UART_Transmit>
}
 80019b0:	bf00      	nop
 80019b2:	3774      	adds	r7, #116	; 0x74
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	0800e8ec 	.word	0x0800e8ec
 80019bc:	240002e4 	.word	0x240002e4
 80019c0:	0800e938 	.word	0x0800e938
 80019c4:	0800e950 	.word	0x0800e950
 80019c8:	0800e968 	.word	0x0800e968
 80019cc:	0800e984 	.word	0x0800e984
 80019d0:	0800e558 	.word	0x0800e558

080019d4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019d4:	b084      	sub	sp, #16
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f107 0c08 	add.w	ip, r7, #8
 80019de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <nrf24_DebugUART_Init+0x2c>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2290      	movs	r2, #144	; 0x90
 80019ec:	4619      	mov	r1, r3
 80019ee:	f009 fb83 	bl	800b0f8 <memcpy>
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fa:	b004      	add	sp, #16
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	240002e4 	.word	0x240002e4

08001a04 <WaypointUpdateState>:
static float wpNextX;
static float wpNextY;

static uint32_t stateId = 0;

uint32_t WaypointUpdateState(float wpEstX, float wpEstY) { // run periodically from main loop
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a0e:	edc7 0a00 	vstr	s1, [r7]
switch (CurrState) {
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <WaypointUpdateState+0x104>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d869      	bhi.n	8001aee <WaypointUpdateState+0xea>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <WaypointUpdateState+0x1c>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a8f 	.word	0x08001a8f
 8001a28:	08001abb 	.word	0x08001abb
 8001a2c:	08001ae1 	.word	0x08001ae1
   case START:   /* state 0 */
	  currentWaypointIndex = 0;
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
      wpCurrX = waypoints[currentWaypointIndex][0];   // Setup Initial WayPoints
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <WaypointUpdateState+0x110>)
 8001a44:	6013      	str	r3, [r2, #0]
      wpCurrY = waypoints[currentWaypointIndex][1];
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <WaypointUpdateState+0x114>)
 8001a56:	6013      	str	r3, [r2, #0]
	  currentWaypointIndex = 1;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
      wpNextX = waypoints[currentWaypointIndex][0];   // Setup Initial WayPoints
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <WaypointUpdateState+0x118>)
 8001a6c:	6013      	str	r3, [r2, #0]
      wpNextY = waypoints[currentWaypointIndex][1];
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <WaypointUpdateState+0x11c>)
 8001a7e:	6013      	str	r3, [r2, #0]
      CurrState = GOTOwp;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <WaypointUpdateState+0x104>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      stateId = 1;
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <WaypointUpdateState+0x120>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      break;
 8001a8c:	e036      	b.n	8001afc <WaypointUpdateState+0xf8>

   case GOTOwp:   /* state 1 */
	  wpCurrX = wpEstX;
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <WaypointUpdateState+0x110>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6013      	str	r3, [r2, #0]
	  wpCurrY = wpEstY;
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <WaypointUpdateState+0x114>)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6013      	str	r3, [r2, #0]
	  if (isCarAtWaypoint()){   /* distance (next - current) way points*/
 8001a9a:	f000 f845 	bl	8001b28 <isCarAtWaypoint>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <WaypointUpdateState+0xae>
         CurrState = ATwp;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <WaypointUpdateState+0x104>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
         stateId = 2;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <WaypointUpdateState+0x120>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
	  }
      else {
         CurrState = GOTOwp;
      }
      break;
 8001ab0:	e024      	b.n	8001afc <WaypointUpdateState+0xf8>
         CurrState = GOTOwp;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
      break;
 8001ab8:	e020      	b.n	8001afc <WaypointUpdateState+0xf8>

   case ATwp:  /* state 2 */
      if(updateNextWaypoint()) {
 8001aba:	f000 f885 	bl	8001bc8 <updateNextWaypoint>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <WaypointUpdateState+0xce>
         CurrState = GOTOwp;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
         stateId = 1;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <WaypointUpdateState+0x120>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
      }
      else {
         CurrState = OFF;
         stateId = 3;
      }
      break;
 8001ad0:	e014      	b.n	8001afc <WaypointUpdateState+0xf8>
         CurrState = OFF;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
         stateId = 3;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <WaypointUpdateState+0x120>)
 8001ada:	2203      	movs	r2, #3
 8001adc:	601a      	str	r2, [r3, #0]
      break;
 8001ade:	e00d      	b.n	8001afc <WaypointUpdateState+0xf8>

   case OFF:   /* state 3*/
      stateId = 3;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <WaypointUpdateState+0x120>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e006      	b.n	8001afc <WaypointUpdateState+0xf8>

   default:   /* state 4 error: invalid state */
      stateId = 4;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <WaypointUpdateState+0x120>)
 8001af0:	2204      	movs	r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <WaypointUpdateState+0x104>)
 8001af6:	2203      	movs	r2, #3
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	bf00      	nop
    }

   return(stateId);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <WaypointUpdateState+0x120>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	24000378 	.word	0x24000378
 8001b0c:	24000374 	.word	0x24000374
 8001b10:	24000008 	.word	0x24000008
 8001b14:	2400037c 	.word	0x2400037c
 8001b18:	24000380 	.word	0x24000380
 8001b1c:	24000384 	.word	0x24000384
 8001b20:	24000388 	.word	0x24000388
 8001b24:	2400038c 	.word	0x2400038c

08001b28 <isCarAtWaypoint>:



// Function to check if the car is near a way point
uint8_t isCarAtWaypoint() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	ed2d 8b02 	vpush	{d8}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
    float distance = sqrt(pow(wpNextX - wpCurrX, 2) + pow(wpNextY - wpCurrY, 2));
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <isCarAtWaypoint+0x90>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <isCarAtWaypoint+0x94>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b46:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b4e:	f00c fa0f 	bl	800df70 <pow>
 8001b52:	eeb0 8b40 	vmov.f64	d8, d0
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <isCarAtWaypoint+0x98>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <isCarAtWaypoint+0x9c>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b72:	f00c f9fd 	bl	800df70 <pow>
 8001b76:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b7e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b82:	f00c fc49 	bl	800e418 <sqrt>
 8001b86:	eeb0 7b40 	vmov.f64	d7, d0
 8001b8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b8e:	edc7 7a01 	vstr	s15, [r7, #4]
    return (distance <= WAYPOINT_RADIUS);
 8001b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b96:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	bf94      	ite	ls
 8001ba4:	2301      	movls	r3, #1
 8001ba6:	2300      	movhi	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	ecbd 8b02 	vpop	{d8}
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24000384 	.word	0x24000384
 8001bbc:	2400037c 	.word	0x2400037c
 8001bc0:	24000388 	.word	0x24000388
 8001bc4:	24000380 	.word	0x24000380

08001bc8 <updateNextWaypoint>:

// Function to update the target way point
uint8_t updateNextWaypoint() {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	uint8_t retval = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	currentWaypointIndex = currentWaypointIndex + 1;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bda:	6013      	str	r3, [r2, #0]
    if (currentWaypointIndex < NUM_WAYPOINTS) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	dc13      	bgt.n	8001c0c <updateNextWaypoint+0x44>
        wpNextX = waypoints[currentWaypointIndex][0];
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <updateNextWaypoint+0x58>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <updateNextWaypoint+0x5c>)
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <updateNextWaypoint+0x60>)
 8001bf2:	6013      	str	r3, [r2, #0]
        wpNextY = waypoints[currentWaypointIndex][1];
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <updateNextWaypoint+0x5c>)
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <updateNextWaypoint+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]
        retval = 1; /* process next way point*/
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e001      	b.n	8001c10 <updateNextWaypoint+0x48>
        }
    else{
      retval = 0; /* no way points left */
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
    }
    return(retval);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	24000374 	.word	0x24000374
 8001c24:	24000008 	.word	0x24000008
 8001c28:	24000384 	.word	0x24000384
 8001c2c:	24000388 	.word	0x24000388

08001c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c34:	b0cb      	sub	sp, #300	; 0x12c
 8001c36:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c40:	bf00      	nop
 8001c42:	4bb5      	ldr	r3, [pc, #724]	; (8001f18 <main+0x2e8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <main+0x2c>
 8001c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dcf2      	bgt.n	8001c42 <main+0x12>
  if ( timeout < 0 )
 8001c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da01      	bge.n	8001c68 <main+0x38>
  {
  Error_Handler();
 8001c64:	f000 fe3a 	bl	80028dc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f001 fd56 	bl	8003718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 fa18 	bl	80020a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001c70:	4ba9      	ldr	r3, [pc, #676]	; (8001f18 <main+0x2e8>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4aa8      	ldr	r2, [pc, #672]	; (8001f18 <main+0x2e8>)
 8001c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4ba5      	ldr	r3, [pc, #660]	; (8001f18 <main+0x2e8>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f002 fda4 	bl	80047dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f002 fdba 	bl	8004810 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ca4:	bf00      	nop
 8001ca6:	4b9c      	ldr	r3, [pc, #624]	; (8001f18 <main+0x2e8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <main+0x90>
 8001cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dcf2      	bgt.n	8001ca6 <main+0x76>
if ( timeout < 0 )
 8001cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da01      	bge.n	8001ccc <main+0x9c>
{
Error_Handler();
 8001cc8:	f000 fe08 	bl	80028dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ccc:	f000 fd40 	bl	8002750 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001cd0:	f000 fcf2 	bl	80026b8 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001cd4:	f000 fb60 	bl	8002398 <MX_SPI5_Init>
  MX_TIM16_Init();
 8001cd8:	f000 fc74 	bl	80025c4 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001cdc:	f000 fbec 	bl	80024b8 <MX_TIM15_Init>
  MX_FDCAN1_Init();
 8001ce0:	f000 fa66 	bl	80021b0 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001ce4:	f000 fb18 	bl	8002318 <MX_I2C4_Init>
  MX_TIM12_Init();
 8001ce8:	f000 fbac 	bl	8002444 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  //RetargetInit(&huart3);

  NRF24_begin(GPIOC, nrf24_CSN_Pin, nrf24_CE_Pin, hspi5);
 8001cec:	4c8b      	ldr	r4, [pc, #556]	; (8001f1c <main+0x2ec>)
 8001cee:	4668      	mov	r0, sp
 8001cf0:	1d23      	adds	r3, r4, #4
 8001cf2:	2284      	movs	r2, #132	; 0x84
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f009 f9ff 	bl	800b0f8 <memcpy>
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	4887      	ldr	r0, [pc, #540]	; (8001f20 <main+0x2f0>)
 8001d02:	f7fe fea7 	bl	8000a54 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001d06:	4c87      	ldr	r4, [pc, #540]	; (8001f24 <main+0x2f4>)
 8001d08:	4668      	mov	r0, sp
 8001d0a:	f104 0310 	add.w	r3, r4, #16
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	4619      	mov	r1, r3
 8001d12:	f009 f9f1 	bl	800b0f8 <memcpy>
 8001d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1a:	f7ff fe5b 	bl	80019d4 <nrf24_DebugUART_Init>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <main+0x2f8>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7fe ffc3 	bl	8000cb0 <NRF24_openReadingPipe>
  NRF24_setAutoAck(false);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f8e2 	bl	8000ef4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001d30:	2034      	movs	r0, #52	; 0x34
 8001d32:	f7ff f826 	bl	8000d82 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001d36:	2020      	movs	r0, #32
 8001d38:	f7ff f838 	bl	8000dac <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_2MBPS);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff f927 	bl	8000f90 <NRF24_setDataRate>

  NRF24_enableDynamicPayloads();
 8001d42:	f7ff f88d 	bl	8000e60 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8001d46:	f7ff f85d 	bl	8000e04 <NRF24_enableAckPayload>
  printRadioSettings();
 8001d4a:	f7ff fa1b 	bl	8001184 <printRadioSettings>
  NRF24_startListening();
 8001d4e:	f7fe ff61 	bl	8000c14 <NRF24_startListening>
  printf("Starting NRF24\r\n");
 8001d52:	4876      	ldr	r0, [pc, #472]	; (8001f2c <main+0x2fc>)
 8001d54:	f009 feb0 	bl	800bab8 <puts>
  HAL_Delay(1000);
 8001d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5c:	f001 fd6e 	bl	800383c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  initServoTim(htim16);
 8001d60:	4e73      	ldr	r6, [pc, #460]	; (8001f30 <main+0x300>)
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d80:	f001 f87e 	bl	8002e80 <initServoTim>
  initESCTim(htim15);
 8001d84:	4e6b      	ldr	r6, [pc, #428]	; (8001f34 <main+0x304>)
 8001d86:	466d      	mov	r5, sp
 8001d88:	f106 0410 	add.w	r4, r6, #16
 8001d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001da0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001da4:	f001 f896 	bl	8002ed4 <initESCTim>
  mpu6050_init(&hi2c4, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004);
 8001da8:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001f38 <main+0x308>
 8001dac:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8001f3c <main+0x30c>
 8001db0:	2301      	movs	r3, #1
 8001db2:	2201      	movs	r2, #1
 8001db4:	2168      	movs	r1, #104	; 0x68
 8001db6:	4862      	ldr	r0, [pc, #392]	; (8001f40 <main+0x310>)
 8001db8:	f000 fd96 	bl	80028e8 <mpu6050_init>

  // Parameters are: uint16_t forwardSpeed, uint16_t turningSpeed, uint16_t forwardTime, uint16_t turningTime, uint16_t turnigAngle
  //hardCodedPath(1350, 1300, 3150, 5080, 150);

  /* Previous time peripherals */
  uint64_t prevTimNRF24 = 0;  /* initial values */
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  uint64_t prevTimCAN = 0;
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  uint64_t prevTimIMU = 0;
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  uint64_t prevTimLED = 0;
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

  /* Interval time peripherals */
  uint64_t intTimNRF24 = 500;  /* every 500 mili-seconds */
 8001dec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  uint64_t intTimCAN =  200;  /* every 200 miliseconds */
 8001df8:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  uint64_t intTimIMU = 500;  /* every 500 miliseconds */
 8001e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  uint64_t intTimLED = 1000; /* every 1 second */
 8001e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  uint8_t stateHardCode = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t prevStateHardCode = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint8_t stateWaypointNotify = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  uint8_t prevStateWPNotify = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  uint8_t counter = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		 stopCar();
	 }
	 com */


	stateHardCode = PathHardCodeUpdateState(cntMilisec);
 8001e3a:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <main+0x314>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f000 ff2c 	bl	8002ca0 <PathHardCodeUpdateState>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stateHardCode != prevStateHardCode){
 8001e4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001e52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d009      	beq.n	8001e6e <main+0x23e>
	  prevStateHardCode = stateHardCode;
 8001e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  printf("\n\rCurrent State of HardCoded Path is: %u",stateHardCode);
 8001e62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e66:	4619      	mov	r1, r3
 8001e68:	4837      	ldr	r0, [pc, #220]	; (8001f48 <main+0x318>)
 8001e6a:	f009 fd9f 	bl	800b9ac <iprintf>
    	break;
	}
*/


	stateWaypointNotify = WaypointUpdateState(wpCurrX, wpCurrY);
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <main+0x31c>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <main+0x320>)
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	eef0 0a47 	vmov.f32	s1, s14
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	f7ff fdbf 	bl	8001a04 <WaypointUpdateState>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	if (stateWaypointNotify != prevStateWPNotify){
 8001e8c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001e90:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d009      	beq.n	8001eac <main+0x27c>
	  prevStateWPNotify = stateWaypointNotify;
 8001e98:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e9c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	  printf("\n\rCurrent Waypoint Notify State is: %u",stateWaypointNotify);
 8001ea0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	482b      	ldr	r0, [pc, #172]	; (8001f54 <main+0x324>)
 8001ea8:	f009 fd80 	bl	800b9ac <iprintf>
	}

	if((cntMilisec - prevTimNRF24) >= intTimNRF24) {                    // Send this at a one second interval.
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <main+0x314>)
 8001eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001eb6:	ebb0 0802 	subs.w	r8, r0, r2
 8001eba:	eb61 0903 	sbc.w	r9, r1, r3
 8001ebe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001ec2:	4590      	cmp	r8, r2
 8001ec4:	eb79 0303 	sbcs.w	r3, r9, r3
 8001ec8:	d378      	bcc.n	8001fbc <main+0x38c>
	    prevTimNRF24 = cntMilisec;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <main+0x314>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	    char myRxData[50] = "";
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	222e      	movs	r2, #46	; 0x2e
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f009 f917 	bl	800b114 <memset>
	    if(NRF24_available()) {
 8001ee6:	f7fe febb 	bl	8000c60 <NRF24_available>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d065      	beq.n	8001fbc <main+0x38c>
	       NRF24_read(buffer, 6);
 8001ef0:	2106      	movs	r1, #6
 8001ef2:	4819      	ldr	r0, [pc, #100]	; (8001f58 <main+0x328>)
 8001ef4:	f7fe febc 	bl	8000c70 <NRF24_read>
           if(buffer[0] == 0xFF && buffer[1] == 0xFF) {
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <main+0x328>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2bff      	cmp	r3, #255	; 0xff
 8001efe:	d12f      	bne.n	8001f60 <main+0x330>
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <main+0x328>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2bff      	cmp	r3, #255	; 0xff
 8001f06:	d12b      	bne.n	8001f60 <main+0x330>
   	  	     snprintf(myRxData, 32, "Coordinates not found\r\n");
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <main+0x32c>)
 8001f0e:	2120      	movs	r1, #32
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 fdd9 	bl	800bac8 <sniprintf>
 8001f16:	e03f      	b.n	8001f98 <main+0x368>
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	2400047c 	.word	0x2400047c
 8001f20:	58020800 	.word	0x58020800
 8001f24:	240005e8 	.word	0x240005e8
 8001f28:	24000028 	.word	0x24000028
 8001f2c:	0800ea9c 	.word	0x0800ea9c
 8001f30:	2400059c 	.word	0x2400059c
 8001f34:	24000550 	.word	0x24000550
 8001f38:	3b83126f 	.word	0x3b83126f
 8001f3c:	3f7ae148 	.word	0x3f7ae148
 8001f40:	24000430 	.word	0x24000430
 8001f44:	240006d0 	.word	0x240006d0
 8001f48:	0800eaac 	.word	0x0800eaac
 8001f4c:	240006e0 	.word	0x240006e0
 8001f50:	240006e4 	.word	0x240006e4
 8001f54:	0800ead8 	.word	0x0800ead8
 8001f58:	240006d8 	.word	0x240006d8
 8001f5c:	0800eb00 	.word	0x0800eb00
    	   }
           else {
   	  	     snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <main+0x44c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	4a45      	ldr	r2, [pc, #276]	; (800207c <main+0x44c>)
 8001f68:	7852      	ldrb	r2, [r2, #1]
 8001f6a:	ea43 0102 	orr.w	r1, r3, r2
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <main+0x44c>)
 8001f70:	789b      	ldrb	r3, [r3, #2]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4a41      	ldr	r2, [pc, #260]	; (800207c <main+0x44c>)
 8001f76:	78d2      	ldrb	r2, [r2, #3]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	4a40      	ldr	r2, [pc, #256]	; (800207c <main+0x44c>)
 8001f7c:	7912      	ldrb	r2, [r2, #4]
 8001f7e:	0212      	lsls	r2, r2, #8
 8001f80:	483e      	ldr	r0, [pc, #248]	; (800207c <main+0x44c>)
 8001f82:	7940      	ldrb	r0, [r0, #5]
 8001f84:	4302      	orrs	r2, r0
 8001f86:	f107 0014 	add.w	r0, r7, #20
 8001f8a:	9201      	str	r2, [sp, #4]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <main+0x450>)
 8001f92:	2120      	movs	r1, #32
 8001f94:	f009 fd98 	bl	800bac8 <sniprintf>
    	   }
           NRF24_writeAckPayload(1, myAckPayload, 32);
 8001f98:	2220      	movs	r2, #32
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <main+0x454>)
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff f8a4 	bl	80010ea <NRF24_writeAckPayload>
           HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f99a 	bl	80002e0 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f107 0114 	add.w	r1, r7, #20
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	4834      	ldr	r0, [pc, #208]	; (8002088 <main+0x458>)
 8001fb8:	f007 ffbe 	bl	8009f38 <HAL_UART_Transmit>
        }

	}

	if((cntMilisec - prevTimIMU) >= intTimIMU) {                    // Send this at a one second interval.
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <main+0x45c>)
 8001fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001fc6:	ebb0 0a02 	subs.w	sl, r0, r2
 8001fca:	eb61 0b03 	sbc.w	fp, r1, r3
 8001fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fd2:	4592      	cmp	sl, r2
 8001fd4:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001fd8:	d304      	bcc.n	8001fe4 <main+0x3b4>
	    prevTimIMU = cntMilisec;
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <main+0x45c>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if((cntMilisec - prevTimCAN) >= intTimCAN) {                    // Send this at a one second interval.
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <main+0x45c>)
 8001fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fee:	1a84      	subs	r4, r0, r2
 8001ff0:	60bc      	str	r4, [r7, #8]
 8001ff2:	eb61 0303 	sbc.w	r3, r1, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ffc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002000:	4621      	mov	r1, r4
 8002002:	4291      	cmp	r1, r2
 8002004:	4629      	mov	r1, r5
 8002006:	eb71 0303 	sbcs.w	r3, r1, r3
 800200a:	d318      	bcc.n	800203e <main+0x40e>
	    prevTimCAN = cntMilisec;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <main+0x45c>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    	//while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
    	//HAL_Delay(10);
    	valueCAN.valueInt[0] = RxData[0];
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <main+0x460>)
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <main+0x464>)
 800201c:	701a      	strb	r2, [r3, #0]
    	valueCAN.valueInt[1] = RxData[1];
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <main+0x460>)
 8002020:	785a      	ldrb	r2, [r3, #1]
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <main+0x464>)
 8002024:	705a      	strb	r2, [r3, #1]
    	valueCAN.valueInt[2] = RxData[2];
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <main+0x460>)
 8002028:	789a      	ldrb	r2, [r3, #2]
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <main+0x464>)
 800202c:	709a      	strb	r2, [r3, #2]
    	valueCAN.valueInt[3] = RxData[3];
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <main+0x460>)
 8002030:	78da      	ldrb	r2, [r3, #3]
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <main+0x464>)
 8002034:	70da      	strb	r2, [r3, #3]
    	direction = RxData[4];
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <main+0x460>)
 8002038:	791a      	ldrb	r2, [r3, #4]
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <main+0x468>)
 800203c:	701a      	strb	r2, [r3, #0]
    	//else
    	  //printf("direction: backwards");
	}


	if((cntMilisec - prevTimLED) >= intTimLED) {                    // Send this at a one second interval.
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <main+0x45c>)
 8002040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002044:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002048:	1a84      	subs	r4, r0, r2
 800204a:	603c      	str	r4, [r7, #0]
 800204c:	eb61 0303 	sbc.w	r3, r1, r3
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205a:	4621      	mov	r1, r4
 800205c:	4291      	cmp	r1, r2
 800205e:	4629      	mov	r1, r5
 8002060:	eb71 0303 	sbcs.w	r3, r1, r3
 8002064:	f4ff aee9 	bcc.w	8001e3a <main+0x20a>
	    prevTimLED = cntMilisec;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <main+0x45c>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	    HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8002072:	2101      	movs	r1, #1
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <main+0x46c>)
 8002076:	f002 fb96 	bl	80047a6 <HAL_GPIO_TogglePin>
	stateHardCode = PathHardCodeUpdateState(cntMilisec);
 800207a:	e6de      	b.n	8001e3a <main+0x20a>
 800207c:	240006d8 	.word	0x240006d8
 8002080:	0800eb18 	.word	0x0800eb18
 8002084:	24000030 	.word	0x24000030
 8002088:	240005e8 	.word	0x240005e8
 800208c:	240006d0 	.word	0x240006d0
 8002090:	240006c0 	.word	0x240006c0
 8002094:	24000678 	.word	0x24000678
 8002098:	240006c8 	.word	0x240006c8
 800209c:	58020400 	.word	0x58020400

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09c      	sub	sp, #112	; 0x70
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	224c      	movs	r2, #76	; 0x4c
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f009 f830 	bl	800b114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2220      	movs	r2, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f009 f82a 	bl	800b114 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80020c0:	2004      	movs	r0, #4
 80020c2:	f003 f94f 	bl	8005364 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <SystemClock_Config+0x104>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <SystemClock_Config+0x104>)
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d4:	6193      	str	r3, [r2, #24]
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <SystemClock_Config+0x104>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <SystemClock_Config+0x108>)
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <SystemClock_Config+0x108>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <SystemClock_Config+0x108>)
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020f8:	bf00      	nop
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <SystemClock_Config+0x104>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d1f8      	bne.n	80020fa <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <SystemClock_Config+0x10c>)
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f023 0303 	bic.w	r3, r3, #3
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <SystemClock_Config+0x10c>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002118:	2303      	movs	r3, #3
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800211c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002122:	2301      	movs	r3, #1
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002126:	2340      	movs	r3, #64	; 0x40
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212a:	2302      	movs	r3, #2
 800212c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800212e:	2302      	movs	r3, #2
 8002130:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002132:	2302      	movs	r3, #2
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002136:	23f0      	movs	r3, #240	; 0xf0
 8002138:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800213a:	2302      	movs	r3, #2
 800213c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 800213e:	2318      	movs	r3, #24
 8002140:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002142:	2302      	movs	r3, #2
 8002144:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002146:	2308      	movs	r3, #8
 8002148:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800214a:	2300      	movs	r3, #0
 800214c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f95e 	bl	8005418 <HAL_RCC_OscConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002162:	f000 fbbb 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002166:	233f      	movs	r3, #63	; 0x3f
 8002168:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800216a:	2303      	movs	r3, #3
 800216c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002172:	2308      	movs	r3, #8
 8002174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800217a:	2340      	movs	r3, #64	; 0x40
 800217c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800217e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002182:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002184:	2340      	movs	r3, #64	; 0x40
 8002186:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2104      	movs	r1, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fd71 	bl	8005c74 <HAL_RCC_ClockConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002198:	f000 fba0 	bl	80028dc <Error_Handler>
  }
}
 800219c:	bf00      	nop
 800219e:	3770      	adds	r7, #112	; 0x70
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58024800 	.word	0x58024800
 80021a8:	58000400 	.word	0x58000400
 80021ac:	58024400 	.word	0x58024400

080021b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <MX_FDCAN1_Init+0x15c>)
 80021ba:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021dc:	2202      	movs	r2, #2
 80021de:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021e2:	2208      	movs	r2, #8
 80021e4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 80021e6:	4b48      	ldr	r3, [pc, #288]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021e8:	221f      	movs	r2, #31
 80021ea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021ee:	2208      	movs	r2, #8
 80021f0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80021fe:	4b42      	ldr	r3, [pc, #264]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002200:	2201      	movs	r2, #1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002206:	2201      	movs	r2, #1
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800220c:	2200      	movs	r2, #0
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002212:	2201      	movs	r2, #1
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002216:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800221e:	2201      	movs	r2, #1
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002224:	2204      	movs	r2, #4
 8002226:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800222a:	2200      	movs	r2, #0
 800222c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002230:	2204      	movs	r2, #4
 8002232:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002236:	2200      	movs	r2, #0
 8002238:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800223c:	2204      	movs	r2, #4
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002242:	2200      	movs	r2, #0
 8002244:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002248:	2200      	movs	r2, #0
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800224e:	2201      	movs	r2, #1
 8002250:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002254:	2200      	movs	r2, #0
 8002256:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800225a:	2204      	movs	r2, #4
 800225c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800225e:	482a      	ldr	r0, [pc, #168]	; (8002308 <MX_FDCAN1_Init+0x158>)
 8002260:	f001 fc2c 	bl	8003abc <HAL_FDCAN_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800226a:	f000 fb37 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <MX_FDCAN1_Init+0x160>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <MX_FDCAN1_Init+0x160>)
 8002276:	2200      	movs	r2, #0
 8002278:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <MX_FDCAN1_Init+0x160>)
 800227c:	2202      	movs	r2, #2
 800227e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <MX_FDCAN1_Init+0x160>)
 8002282:	2201      	movs	r2, #1
 8002284:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <MX_FDCAN1_Init+0x160>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <MX_FDCAN1_Init+0x160>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8002292:	2301      	movs	r3, #1
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	2202      	movs	r2, #2
 800229a:	2102      	movs	r1, #2
 800229c:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_FDCAN1_Init+0x158>)
 800229e:	f001 fe61 	bl	8003f64 <HAL_FDCAN_ConfigGlobalFilter>
  FDCAN_REJECT_REMOTE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <MX_FDCAN1_Init+0x160>)
 80022a4:	4818      	ldr	r0, [pc, #96]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80022a6:	f001 fde7 	bl	8003e78 <HAL_FDCAN_ConfigFilter>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_FDCAN1_Init+0x104>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 80022b0:	f000 fb14 	bl	80028dc <Error_Handler>
  }
  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80022b6:	f001 fe82 	bl	8003fbe <HAL_FDCAN_Start>
  }
  /* Start Error */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <MX_FDCAN1_Init+0x158>)
 80022c0:	f001 fea8 	bl	8004014 <HAL_FDCAN_ActivateNotification>
  }
  /* Notification Error */
	  /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022c6:	f240 1211 	movw	r2, #273	; 0x111
 80022ca:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022da:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80022de:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ec:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022f4:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <MX_FDCAN1_Init+0x164>)
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	24000390 	.word	0x24000390
 800230c:	4000a000 	.word	0x4000a000
 8002310:	2400067c 	.word	0x2400067c
 8002314:	2400069c 	.word	0x2400069c

08002318 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_I2C4_Init+0x74>)
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <MX_I2C4_Init+0x78>)
 8002320:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_I2C4_Init+0x74>)
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <MX_I2C4_Init+0x7c>)
 8002326:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_I2C4_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_I2C4_Init+0x74>)
 8002330:	2201      	movs	r2, #1
 8002332:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_I2C4_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_I2C4_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_I2C4_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_I2C4_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_I2C4_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <MX_I2C4_Init+0x74>)
 8002354:	f002 fa70 	bl	8004838 <HAL_I2C_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800235e:	f000 fabd 	bl	80028dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <MX_I2C4_Init+0x74>)
 8002366:	f002 ff65 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002370:	f000 fab4 	bl	80028dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_I2C4_Init+0x74>)
 8002378:	f002 ffa7 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002382:	f000 faab 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24000430 	.word	0x24000430
 8002390:	58001c00 	.word	0x58001c00
 8002394:	00404c74 	.word	0x00404c74

08002398 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <MX_SPI5_Init+0xa4>)
 800239e:	4a28      	ldr	r2, [pc, #160]	; (8002440 <MX_SPI5_Init+0xa8>)
 80023a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <MX_SPI5_Init+0xa4>)
 80023a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <MX_SPI5_Init+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <MX_SPI5_Init+0xa4>)
 80023b2:	2207      	movs	r2, #7
 80023b4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <MX_SPI5_Init+0xa4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <MX_SPI5_Init+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_SPI5_Init+0xa4>)
 80023c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <MX_SPI5_Init+0xa4>)
 80023cc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80023d0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_SPI5_Init+0xa4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_SPI5_Init+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <MX_SPI5_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <MX_SPI5_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <MX_SPI5_Init+0xa4>)
 80023ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <MX_SPI5_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_SPI5_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_SPI5_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <MX_SPI5_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_SPI5_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <MX_SPI5_Init+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_SPI5_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <MX_SPI5_Init+0xa4>)
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_SPI5_Init+0xa4>)
 8002424:	2200      	movs	r2, #0
 8002426:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	; (800243c <MX_SPI5_Init+0xa4>)
 800242a:	f005 fb17 	bl	8007a5c <HAL_SPI_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8002434:	f000 fa52 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2400047c 	.word	0x2400047c
 8002440:	40015000 	.word	0x40015000

08002444 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	463b      	mov	r3, r7
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_TIM12_Init+0x6c>)
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <MX_TIM12_Init+0x70>)
 800245a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 23;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_TIM12_Init+0x6c>)
 800245e:	2217      	movs	r2, #23
 8002460:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_TIM12_Init+0x6c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_TIM12_Init+0x6c>)
 800246a:	f242 720f 	movw	r2, #9999	; 0x270f
 800246e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_TIM12_Init+0x6c>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_TIM12_Init+0x6c>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <MX_TIM12_Init+0x6c>)
 800247e:	f006 fa92 	bl	80089a6 <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002488:	f000 fa28 	bl	80028dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_TIM12_Init+0x6c>)
 8002498:	f006 fe76 	bl	8009188 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80024a2:	f000 fa1b 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	24000504 	.word	0x24000504
 80024b4:	40001800 	.word	0x40001800

080024b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b096      	sub	sp, #88	; 0x58
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	615a      	str	r2, [r3, #20]
 80024dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	222c      	movs	r2, #44	; 0x2c
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f008 fe15 	bl	800b114 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <MX_TIM15_Init+0x104>)
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <MX_TIM15_Init+0x108>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 239;
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <MX_TIM15_Init+0x104>)
 80024f2:	22ef      	movs	r2, #239	; 0xef
 80024f4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <MX_TIM15_Init+0x104>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <MX_TIM15_Init+0x104>)
 80024fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002502:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <MX_TIM15_Init+0x104>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <MX_TIM15_Init+0x104>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <MX_TIM15_Init+0x104>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002516:	4829      	ldr	r0, [pc, #164]	; (80025bc <MX_TIM15_Init+0x104>)
 8002518:	f006 fa9c 	bl	8008a54 <HAL_TIM_PWM_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002522:	f000 f9db 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800252e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002532:	4619      	mov	r1, r3
 8002534:	4821      	ldr	r0, [pc, #132]	; (80025bc <MX_TIM15_Init+0x104>)
 8002536:	f007 fb85 	bl	8009c44 <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002540:	f000 f9cc 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002544:	2360      	movs	r3, #96	; 0x60
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254c:	2300      	movs	r3, #0
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002564:	2200      	movs	r2, #0
 8002566:	4619      	mov	r1, r3
 8002568:	4814      	ldr	r0, [pc, #80]	; (80025bc <MX_TIM15_Init+0x104>)
 800256a:	f006 fcf9 	bl	8008f60 <HAL_TIM_PWM_ConfigChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002574:	f000 f9b2 	bl	80028dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800258c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002590:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4807      	ldr	r0, [pc, #28]	; (80025bc <MX_TIM15_Init+0x104>)
 80025a0:	f007 fbde 	bl	8009d60 <HAL_TIMEx_ConfigBreakDeadTime>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80025aa:	f000 f997 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80025ae:	4803      	ldr	r0, [pc, #12]	; (80025bc <MX_TIM15_Init+0x104>)
 80025b0:	f000 feb8 	bl	8003324 <HAL_TIM_MspPostInit>

}
 80025b4:	bf00      	nop
 80025b6:	3758      	adds	r7, #88	; 0x58
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	24000550 	.word	0x24000550
 80025c0:	40014000 	.word	0x40014000

080025c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b092      	sub	sp, #72	; 0x48
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]
 80025dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025de:	463b      	mov	r3, r7
 80025e0:	222c      	movs	r2, #44	; 0x2c
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f008 fd95 	bl	800b114 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <MX_TIM16_Init+0xec>)
 80025ec:	4a31      	ldr	r2, [pc, #196]	; (80026b4 <MX_TIM16_Init+0xf0>)
 80025ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 239;
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <MX_TIM16_Init+0xec>)
 80025f2:	22ef      	movs	r2, #239	; 0xef
 80025f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <MX_TIM16_Init+0xec>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <MX_TIM16_Init+0xec>)
 80025fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002602:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <MX_TIM16_Init+0xec>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <MX_TIM16_Init+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <MX_TIM16_Init+0xec>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002616:	4826      	ldr	r0, [pc, #152]	; (80026b0 <MX_TIM16_Init+0xec>)
 8002618:	f006 f9c5 	bl	80089a6 <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002622:	f000 f95b 	bl	80028dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002626:	4822      	ldr	r0, [pc, #136]	; (80026b0 <MX_TIM16_Init+0xec>)
 8002628:	f006 fa14 	bl	8008a54 <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002632:	f000 f953 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002636:	2360      	movs	r3, #96	; 0x60
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002642:	2300      	movs	r3, #0
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	4815      	ldr	r0, [pc, #84]	; (80026b0 <MX_TIM16_Init+0xec>)
 800265c:	f006 fc80 	bl	8008f60 <HAL_TIM_PWM_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002666:	f000 f939 	bl	80028dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800267e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002682:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	4619      	mov	r1, r3
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <MX_TIM16_Init+0xec>)
 8002692:	f007 fb65 	bl	8009d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800269c:	f000 f91e 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <MX_TIM16_Init+0xec>)
 80026a2:	f000 fe3f 	bl	8003324 <HAL_TIM_MspPostInit>

}
 80026a6:	bf00      	nop
 80026a8:	3748      	adds	r7, #72	; 0x48
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2400059c 	.word	0x2400059c
 80026b4:	40014400 	.word	0x40014400

080026b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026be:	4a23      	ldr	r2, [pc, #140]	; (800274c <MX_USART3_UART_Init+0x94>)
 80026c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026de:	220c      	movs	r2, #12
 80026e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <MX_USART3_UART_Init+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002700:	4811      	ldr	r0, [pc, #68]	; (8002748 <MX_USART3_UART_Init+0x90>)
 8002702:	f007 fbc9 	bl	8009e98 <HAL_UART_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800270c:	f000 f8e6 	bl	80028dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002710:	2100      	movs	r1, #0
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_USART3_UART_Init+0x90>)
 8002714:	f008 fbfc 	bl	800af10 <HAL_UARTEx_SetTxFifoThreshold>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800271e:	f000 f8dd 	bl	80028dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002722:	2100      	movs	r1, #0
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <MX_USART3_UART_Init+0x90>)
 8002726:	f008 fc31 	bl	800af8c <HAL_UARTEx_SetRxFifoThreshold>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002730:	f000 f8d4 	bl	80028dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <MX_USART3_UART_Init+0x90>)
 8002736:	f008 fbb2 	bl	800ae9e <HAL_UARTEx_DisableFifoMode>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002740:	f000 f8cc 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	240005e8 	.word	0x240005e8
 800274c:	40004800 	.word	0x40004800

08002750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	4b59      	ldr	r3, [pc, #356]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276c:	4a57      	ldr	r2, [pc, #348]	; (80028cc <MX_GPIO_Init+0x17c>)
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002776:	4b55      	ldr	r3, [pc, #340]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	4b51      	ldr	r3, [pc, #324]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278a:	4a50      	ldr	r2, [pc, #320]	; (80028cc <MX_GPIO_Init+0x17c>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002802:	4a32      	ldr	r2, [pc, #200]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002804:	f043 0308 	orr.w	r3, r3, #8
 8002808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800280c:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <MX_GPIO_Init+0x17c>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <MX_GPIO_Init+0x17c>)
 800281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <MX_GPIO_Init+0x17c>)
 800282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	2148      	movs	r1, #72	; 0x48
 800283c:	4824      	ldr	r0, [pc, #144]	; (80028d0 <MX_GPIO_Init+0x180>)
 800283e:	f001 ff99 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2101      	movs	r1, #1
 8002846:	4823      	ldr	r0, [pc, #140]	; (80028d4 <MX_GPIO_Init+0x184>)
 8002848:	f001 ff94 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nrf24_CE_Pin|nrf24_CSN_Pin, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	21c0      	movs	r1, #192	; 0xc0
 8002850:	4821      	ldr	r0, [pc, #132]	; (80028d8 <MX_GPIO_Init+0x188>)
 8002852:	f001 ff8f 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = LLED_Pin|RLED_Pin;
 8002856:	2348      	movs	r3, #72	; 0x48
 8002858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4818      	ldr	r0, [pc, #96]	; (80028d0 <MX_GPIO_Init+0x180>)
 800286e:	f001 fdd1 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <MX_GPIO_Init+0x188>)
 8002888:	f001 fdc4 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800288c:	2301      	movs	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002890:	2301      	movs	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <MX_GPIO_Init+0x184>)
 80028a4:	f001 fdb6 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf24_CE_Pin nrf24_CSN_Pin */
  GPIO_InitStruct.Pin = nrf24_CE_Pin|nrf24_CSN_Pin;
 80028a8:	23c0      	movs	r3, #192	; 0xc0
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_GPIO_Init+0x188>)
 80028c0:	f001 fda8 	bl	8004414 <HAL_GPIO_Init>

}
 80028c4:	bf00      	nop
 80028c6:	3730      	adds	r7, #48	; 0x30
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	58024400 	.word	0x58024400
 80028d0:	58021000 	.word	0x58021000
 80028d4:	58020400 	.word	0x58020400
 80028d8:	58020800 	.word	0x58020800

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <mpu6050_init>:
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.

void mpu6050_init(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af04      	add	r7, sp, #16
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028fa:	edc7 0a00 	vstr	s1, [r7]
 80028fe:	4603      	mov	r3, r0
 8002900:	72fb      	strb	r3, [r7, #11]
 8002902:	460b      	mov	r3, r1
 8002904:	72bb      	strb	r3, [r7, #10]
 8002906:	4613      	mov	r3, r2
 8002908:	727b      	strb	r3, [r7, #9]
    uint8_t select =0;
 800290a:	2300      	movs	r3, #0
 800290c:	75bb      	strb	r3, [r7, #22]
	// Save values
	mpu6050_addr = addr << 1;
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <mpu6050_init+0xf0>)
 8002916:	701a      	strb	r2, [r3, #0]
    tau_val = tau;
 8002918:	4a30      	ldr	r2, [pc, #192]	; (80029dc <mpu6050_init+0xf4>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
    dt_val = dt;
 800291e:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <mpu6050_init+0xf8>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6013      	str	r3, [r2, #0]


    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(I2Cx, (mpu6050_addr + 0), 1, I2C_TIMOUT_MS);
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <mpu6050_init+0xf0>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b299      	uxth	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	2201      	movs	r2, #1
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f002 f925 	bl	8004b80 <HAL_I2C_IsDeviceReady>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <mpu6050_init+0x60>
  	  printf("The device is OK\n\r");
 8002940:	4828      	ldr	r0, [pc, #160]	; (80029e4 <mpu6050_init+0xfc>)
 8002942:	f009 f833 	bl	800b9ac <iprintf>
 8002946:	e002      	b.n	800294e <mpu6050_init+0x66>
    }
    else {
  	  printf("The device is not ready \n\r");
 8002948:	4827      	ldr	r0, [pc, #156]	; (80029e8 <mpu6050_init+0x100>)
 800294a:	f009 f82f 	bl	800b9ac <iprintf>
    }

    // Quit sleep mode and enable temperature sensor
    select = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	75bb      	strb	r3, [r7, #22]
    ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <mpu6050_init+0xf0>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b299      	uxth	r1, r3
 8002958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2301      	movs	r3, #1
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	f107 0316 	add.w	r3, r7, #22
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2301      	movs	r3, #1
 800296a:	226b      	movs	r2, #107	; 0x6b
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f001 fff3 	bl	8004958 <HAL_I2C_Mem_Write>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <mpu6050_init+0x9c>
  	  printf("Out of sleep mode and temp sensor on is OK\n\r");
 800297c:	481b      	ldr	r0, [pc, #108]	; (80029ec <mpu6050_init+0x104>)
 800297e:	f009 f815 	bl	800b9ac <iprintf>
 8002982:	e002      	b.n	800298a <mpu6050_init+0xa2>
    }
    else {
  	  printf("sleep mode and temp sensor error \n\r");
 8002984:	481a      	ldr	r0, [pc, #104]	; (80029f0 <mpu6050_init+0x108>)
 8002986:	f009 f811 	bl	800b9ac <iprintf>
    }

    // Set the full scale ranges
    ret = MPU_writeAccFullScaleRange(I2Cx, aScale);
 800298a:	7abb      	ldrb	r3, [r7, #10]
 800298c:	4619      	mov	r1, r3
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f838 	bl	8002a04 <MPU_writeAccFullScaleRange>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <mpu6050_init+0xbe>
  	  printf("Acc scale is OK\n\r");
 800299e:	4815      	ldr	r0, [pc, #84]	; (80029f4 <mpu6050_init+0x10c>)
 80029a0:	f009 f804 	bl	800b9ac <iprintf>
 80029a4:	e002      	b.n	80029ac <mpu6050_init+0xc4>
    }
    else {
  	  printf("Acc scale not ready \n\r");
 80029a6:	4814      	ldr	r0, [pc, #80]	; (80029f8 <mpu6050_init+0x110>)
 80029a8:	f009 f800 	bl	800b9ac <iprintf>
    }


    ret = MPU_writeGyroFullScaleRange(I2Cx, gScale);
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	4619      	mov	r1, r3
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8c3 	bl	8002b3c <MPU_writeGyroFullScaleRange>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <mpu6050_init+0xe0>
  	  printf("Gyro scale is OK\n\r");
 80029c0:	480e      	ldr	r0, [pc, #56]	; (80029fc <mpu6050_init+0x114>)
 80029c2:	f008 fff3 	bl	800b9ac <iprintf>
    }
    else {
  	  printf("Gyro scale not ready \n\r");
    }

}
 80029c6:	e002      	b.n	80029ce <mpu6050_init+0xe6>
  	  printf("Gyro scale not ready \n\r");
 80029c8:	480d      	ldr	r0, [pc, #52]	; (8002a00 <mpu6050_init+0x118>)
 80029ca:	f008 ffef 	bl	800b9ac <iprintf>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	240006e8 	.word	0x240006e8
 80029dc:	240006f0 	.word	0x240006f0
 80029e0:	240006ec 	.word	0x240006ec
 80029e4:	0800eb24 	.word	0x0800eb24
 80029e8:	0800eb38 	.word	0x0800eb38
 80029ec:	0800eb54 	.word	0x0800eb54
 80029f0:	0800eb84 	.word	0x0800eb84
 80029f4:	0800eba8 	.word	0x0800eba8
 80029f8:	0800ebbc 	.word	0x0800ebbc
 80029fc:	0800ebd4 	.word	0x0800ebd4
 8002a00:	0800ebe8 	.word	0x0800ebe8

08002a04 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.

HAL_StatusTypeDef MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (aScale) {
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d86e      	bhi.n	8002af8 <MPU_writeAccFullScaleRange+0xf4>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <MPU_writeAccFullScaleRange+0x1c>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a63 	.word	0x08002a63
 8002a28:	08002a95 	.word	0x08002a95
 8002a2c:	08002ac7 	.word	0x08002ac7
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8002a30:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <MPU_writeAccFullScaleRange+0x130>)
 8002a32:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002a36:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <MPU_writeAccFullScaleRange+0x134>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b299      	uxth	r1, r3
 8002a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	f107 030e 	add.w	r3, r7, #14
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	221c      	movs	r2, #28
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f001 ff7e 	bl	8004958 <HAL_I2C_Mem_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002a60:	e063      	b.n	8002b2a <MPU_writeAccFullScaleRange+0x126>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <MPU_writeAccFullScaleRange+0x130>)
 8002a64:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002a68:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <MPU_writeAccFullScaleRange+0x134>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b299      	uxth	r1, r3
 8002a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f107 030e 	add.w	r3, r7, #14
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	221c      	movs	r2, #28
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f001 ff65 	bl	8004958 <HAL_I2C_Mem_Write>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]
        break;
 8002a92:	e04a      	b.n	8002b2a <MPU_writeAccFullScaleRange+0x126>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <MPU_writeAccFullScaleRange+0x130>)
 8002a96:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002a9a:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <MPU_writeAccFullScaleRange+0x134>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b299      	uxth	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	2301      	movs	r3, #1
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f107 030e 	add.w	r3, r7, #14
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	221c      	movs	r2, #28
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f001 ff4c 	bl	8004958 <HAL_I2C_Mem_Write>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac4:	e031      	b.n	8002b2a <MPU_writeAccFullScaleRange+0x126>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <MPU_writeAccFullScaleRange+0x130>)
 8002ac8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002acc:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8002ace:	2318      	movs	r3, #24
 8002ad0:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MPU_writeAccFullScaleRange+0x134>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b299      	uxth	r1, r3
 8002ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	f107 030e 	add.w	r3, r7, #14
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	221c      	movs	r2, #28
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 ff33 	bl	8004958 <HAL_I2C_Mem_Write>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]
        break;
 8002af6:	e018      	b.n	8002b2a <MPU_writeAccFullScaleRange+0x126>
    default:
        aScaleFactor = 8192.0;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MPU_writeAccFullScaleRange+0x130>)
 8002afa:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002afe:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002b00:	2308      	movs	r3, #8
 8002b02:	73bb      	strb	r3, [r7, #14]
        ret =  HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MPU_writeAccFullScaleRange+0x134>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	2301      	movs	r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	f107 030e 	add.w	r3, r7, #14
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	221c      	movs	r2, #28
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f001 ff1a 	bl	8004958 <HAL_I2C_Mem_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
        break;
 8002b28:	bf00      	nop
    }
    return ret;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	240006f4 	.word	0x240006f4
 8002b38:	240006e8 	.word	0x240006e8

08002b3c <MPU_writeGyroFullScaleRange>:
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.


HAL_StatusTypeDef MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af04      	add	r7, sp, #16
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (gScale)
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d86a      	bhi.n	8002c28 <MPU_writeGyroFullScaleRange+0xec>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <MPU_writeGyroFullScaleRange+0x1c>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b99 	.word	0x08002b99
 8002b60:	08002bc9 	.word	0x08002bc9
 8002b64:	08002bf9 	.word	0x08002bf9
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 8002b68:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <MPU_writeGyroFullScaleRange+0x128>)
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <MPU_writeGyroFullScaleRange+0x12c>)
 8002b6c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <MPU_writeGyroFullScaleRange+0x130>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b299      	uxth	r1, r3
 8002b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7c:	9302      	str	r3, [sp, #8]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	f107 030e 	add.w	r3, r7, #14
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	221b      	movs	r2, #27
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f001 fee3 	bl	8004958 <HAL_I2C_Mem_Write>
 8002b92:	4603      	mov	r3, r0
 8002b94:	73fb      	strb	r3, [r7, #15]
        break;
 8002b96:	e05f      	b.n	8002c58 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <MPU_writeGyroFullScaleRange+0x128>)
 8002b9a:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <MPU_writeGyroFullScaleRange+0x134>)
 8002b9c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <MPU_writeGyroFullScaleRange+0x130>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b299      	uxth	r1, r3
 8002ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	f107 030e 	add.w	r3, r7, #14
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	221b      	movs	r2, #27
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f001 fecb 	bl	8004958 <HAL_I2C_Mem_Write>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bc6:	e047      	b.n	8002c58 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <MPU_writeGyroFullScaleRange+0x128>)
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <MPU_writeGyroFullScaleRange+0x138>)
 8002bcc:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8002bce:	2310      	movs	r3, #16
 8002bd0:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <MPU_writeGyroFullScaleRange+0x130>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bdc:	9302      	str	r3, [sp, #8]
 8002bde:	2301      	movs	r3, #1
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	f107 030e 	add.w	r3, r7, #14
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2301      	movs	r3, #1
 8002bea:	221b      	movs	r2, #27
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f001 feb3 	bl	8004958 <HAL_I2C_Mem_Write>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf6:	e02f      	b.n	8002c58 <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MPU_writeGyroFullScaleRange+0x128>)
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <MPU_writeGyroFullScaleRange+0x13c>)
 8002bfc:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8002bfe:	2318      	movs	r3, #24
 8002c00:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MPU_writeGyroFullScaleRange+0x130>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b299      	uxth	r1, r3
 8002c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f107 030e 	add.w	r3, r7, #14
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	221b      	movs	r2, #27
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f001 fe9b 	bl	8004958 <HAL_I2C_Mem_Write>
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e017      	b.n	8002c58 <MPU_writeGyroFullScaleRange+0x11c>
    default:
        gScaleFactor = 65.5;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MPU_writeGyroFullScaleRange+0x128>)
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <MPU_writeGyroFullScaleRange+0x134>)
 8002c2c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002c2e:	2308      	movs	r3, #8
 8002c30:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MPU_writeGyroFullScaleRange+0x130>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b299      	uxth	r1, r3
 8002c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	f107 030e 	add.w	r3, r7, #14
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	221b      	movs	r2, #27
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 fe83 	bl	8004958 <HAL_I2C_Mem_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
        break;
 8002c56:	bf00      	nop
    }

  return ret;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	240006f8 	.word	0x240006f8
 8002c68:	43030000 	.word	0x43030000
 8002c6c:	240006e8 	.word	0x240006e8
 8002c70:	42830000 	.word	0x42830000
 8002c74:	42033333 	.word	0x42033333
 8002c78:	41833333 	.word	0x41833333

08002c7c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002c84:	1d39      	adds	r1, r7, #4
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <__io_putchar+0x20>)
 8002c8e:	f007 f953 	bl	8009f38 <HAL_UART_Transmit>
  return ch;
 8002c92:	687b      	ldr	r3, [r7, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	240005e8 	.word	0x240005e8

08002ca0 <PathHardCodeUpdateState>:
static const uint32_t intCurv = 3000;

static uint32_t prevTim  = 0;
static uint32_t stateId = 0;

uint32_t PathHardCodeUpdateState(uint64_t cntMilisec) { // run periodically from main loop
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b08e      	sub	sp, #56	; 0x38
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
switch (CurrState) {
 8002cac:	4b71      	ldr	r3, [pc, #452]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	f200 80ca 	bhi.w	8002e4a <PathHardCodeUpdateState+0x1aa>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <PathHardCodeUpdateState+0x1c>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cd1 	.word	0x08002cd1
 8002cc0:	08002d09 	.word	0x08002d09
 8002cc4:	08002d73 	.word	0x08002d73
 8002cc8:	08002ddd 	.word	0x08002ddd
 8002ccc:	08002e3d 	.word	0x08002e3d
   case START:
	  stopCar();
 8002cd0:	f000 f960 	bl	8002f94 <stopCar>
      setServoAngle(AngleFwd);   // Set the target steering angle
 8002cd4:	233c      	movs	r3, #60	; 0x3c
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f925 	bl	8002f28 <setServoAngle>
      CurrState = PathFwd1;
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
      prevTim = cntMilisec;
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002ce8:	6013      	str	r3, [r2, #0]
      stateId = 1;
 8002cea:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
      setServoAngle(AngleFwd);   // Set the target steering angle
 8002cf0:	233c      	movs	r3, #60	; 0x3c
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f917 	bl	8002f28 <setServoAngle>
      setEscSpeed(SpdFwd1);      // Low forward speed
 8002cfa:	f240 4301 	movw	r3, #1025	; 0x401
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f935 	bl	8002f70 <setEscSpeed>
      break;
 8002d06:	e0ae      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>

   case PathFwd1:

      if((cntMilisec - prevTim) >= intFwd) {
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d16:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623a      	str	r2, [r7, #32]
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002d34:	460b      	mov	r3, r1
 8002d36:	459a      	cmp	sl, r3
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb7b 0303 	sbcs.w	r3, fp, r3
 8002d3e:	d314      	bcc.n	8002d6a <PathHardCodeUpdateState+0xca>
         prevTim = cntMilisec;
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	4a4d      	ldr	r2, [pc, #308]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002d44:	6013      	str	r3, [r2, #0]
         CurrState = PathCurv;
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	701a      	strb	r2, [r3, #0]
         stateId = 2;
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleCurv);   // Target steering angle for curv
 8002d52:	238c      	movs	r3, #140	; 0x8c
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f8e6 	bl	8002f28 <setServoAngle>
         setEscSpeed(SpdCurv);       // Low Curv speed
 8002d5c:	f240 4301 	movw	r3, #1025	; 0x401
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f904 	bl	8002f70 <setEscSpeed>
      }
      else {
         CurrState = PathFwd1;
      }
      break;
 8002d68:	e07d      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>
         CurrState = PathFwd1;
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
      break;
 8002d70:	e079      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>

   case PathCurv:
      if((cntMilisec - prevTim) >= intCurv) {
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	61fa      	str	r2, [r7, #28]
 8002d7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d80:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002d84:	4621      	mov	r1, r4
 8002d86:	ebb2 0801 	subs.w	r8, r2, r1
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d94:	2300      	movs	r3, #0
 8002d96:	613a      	str	r2, [r7, #16]
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4598      	cmp	r8, r3
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb79 0303 	sbcs.w	r3, r9, r3
 8002da8:	d314      	bcc.n	8002dd4 <PathHardCodeUpdateState+0x134>
         prevTim = cntMilisec;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002dae:	6013      	str	r3, [r2, #0]
         CurrState = PathFwd2;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002db2:	2203      	movs	r2, #3
 8002db4:	701a      	strb	r2, [r3, #0]
         stateId = 3;
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002db8:	2203      	movs	r2, #3
 8002dba:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleFwd);   // Set the target steering angle
 8002dbc:	233c      	movs	r3, #60	; 0x3c
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f8b1 	bl	8002f28 <setServoAngle>
         setEscSpeed(SpdFwd1);      // Low forward speed
 8002dc6:	f240 4301 	movw	r3, #1025	; 0x401
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f8cf 	bl	8002f70 <setEscSpeed>
      }
      else {
         CurrState = PathCurv;
      }
      break;
 8002dd2:	e048      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>
         CurrState = PathCurv;
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e044      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>

   case PathFwd2:


      if((cntMilisec - prevTim) >= intFwd1) {
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	60fa      	str	r2, [r7, #12]
 8002de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dea:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002dee:	4641      	mov	r1, r8
 8002df0:	1a54      	subs	r4, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb63 0501 	sbc.w	r5, r3, r1
 8002df8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	603a      	str	r2, [r7, #0]
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e06:	460b      	mov	r3, r1
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	eb75 0303 	sbcs.w	r3, r5, r3
 8002e10:	d310      	bcc.n	8002e34 <PathHardCodeUpdateState+0x194>
         prevTim = cntMilisec;
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <PathHardCodeUpdateState+0x1d8>)
 8002e16:	6013      	str	r3, [r2, #0]
         CurrState = OFF;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]
         stateId = 4;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002e20:	2204      	movs	r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleFwd);   // Set the target steering angle
 8002e24:	233c      	movs	r3, #60	; 0x3c
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f87d 	bl	8002f28 <setServoAngle>
         stopCar();
 8002e2e:	f000 f8b1 	bl	8002f94 <stopCar>
      }
      else {
         CurrState = PathFwd2;
      }
      break;
 8002e32:	e018      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>
         CurrState = PathFwd2;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002e36:	2203      	movs	r2, #3
 8002e38:	701a      	strb	r2, [r3, #0]
      break;
 8002e3a:	e014      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>

   case OFF:
      stateId = 4;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002e3e:	2204      	movs	r2, #4
 8002e40:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002e44:	2204      	movs	r2, #4
 8002e46:	701a      	strb	r2, [r3, #0]
      break;
 8002e48:	e00d      	b.n	8002e66 <PathHardCodeUpdateState+0x1c6>

   default: // Error: invalid state
      stateId = 5;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <PathHardCodeUpdateState+0x1d4>)
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]
      setServoAngle(AngleFwd);   // Set the target steering angle
 8002e56:	233c      	movs	r3, #60	; 0x3c
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f864 	bl	8002f28 <setServoAngle>
      stopCar();
 8002e60:	f000 f898 	bl	8002f94 <stopCar>
      break;
 8002e64:	bf00      	nop
    }

   return(stateId);
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <PathHardCodeUpdateState+0x1dc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	; 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e74:	24000794 	.word	0x24000794
 8002e78:	24000798 	.word	0x24000798
 8002e7c:	2400079c 	.word	0x2400079c

08002e80 <initServoTim>:

void initServoTim(TIM_HandleTypeDef hTimServo){
 8002e80:	b084      	sub	sp, #16
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	f107 0c08 	add.w	ip, r7, #8
 8002e8a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimServo = hTimServo;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <initServoTim+0x50>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f107 0308 	add.w	r3, r7, #8
 8002e96:	224c      	movs	r2, #76	; 0x4c
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f008 f92d 	bl	800b0f8 <memcpy>

	if (HAL_TIM_PWM_Start(&HTimServo, TIM_CHANNEL_1) != HAL_OK) {
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	480b      	ldr	r0, [pc, #44]	; (8002ed0 <initServoTim+0x50>)
 8002ea2:	f005 fe2f 	bl	8008b04 <HAL_TIM_PWM_Start>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <initServoTim+0x30>
		  Error_Handler();
 8002eac:	f7ff fd16 	bl	80028dc <Error_Handler>
	}
	__HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <initServoTim+0x50>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8002eba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ebe:	f000 fcbd 	bl	800383c <HAL_Delay>
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eca:	b004      	add	sp, #16
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	24000748 	.word	0x24000748

08002ed4 <initESCTim>:

void initESCTim(TIM_HandleTypeDef hTimESC){
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	f107 0c08 	add.w	ip, r7, #8
 8002ede:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimESC = hTimESC;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <initESCTim+0x50>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	224c      	movs	r2, #76	; 0x4c
 8002eec:	4619      	mov	r1, r3
 8002eee:	f008 f903 	bl	800b0f8 <memcpy>

	if (HAL_TIM_PWM_Start(&HTimESC, TIM_CHANNEL_1) != HAL_OK) {
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	480b      	ldr	r0, [pc, #44]	; (8002f24 <initESCTim+0x50>)
 8002ef6:	f005 fe05 	bl	8008b04 <HAL_TIM_PWM_Start>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <initESCTim+0x30>
		  Error_Handler();
 8002f00:	f7ff fcec 	bl	80028dc <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <initESCTim+0x50>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8002f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f12:	f000 fc93 	bl	800383c <HAL_Delay>
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f1e:	b004      	add	sp, #16
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	240006fc 	.word	0x240006fc

08002f28 <setServoAngle>:

void setServoAngle(uint16_t angle) {
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
    // Map angle (0° to 180°) to pulse width (1 ms to 2 ms)
    uint16_t pulse_width = 1000 + (angle * 1000) / 180; // Scale angle to 1000-2000 μs
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <setServoAngle+0x40>)
 8002f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f42:	441a      	add	r2, r3
 8002f44:	11d2      	asrs	r2, r2, #7
 8002f46:	17db      	asrs	r3, r3, #31
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002f50:	81fb      	strh	r3, [r7, #14]

    // Update PWM duty cycle
    __HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, pulse_width);
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <setServoAngle+0x44>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	89fa      	ldrh	r2, [r7, #14]
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	b60b60b7 	.word	0xb60b60b7
 8002f6c:	24000748 	.word	0x24000748

08002f70 <setEscSpeed>:


void setEscSpeed(uint16_t pulse_width) {
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
    // Update PWM duty cycle for ESC
    __HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, pulse_width);
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <setEscSpeed+0x20>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	240006fc 	.word	0x240006fc

08002f94 <stopCar>:

// Function to stop the car
void stopCar() {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    setEscSpeed(1500); // Neutral position (no movement)
 8002f98:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002f9c:	f7ff ffe8 	bl	8002f70 <setEscSpeed>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_MspInit+0x30>)
 8002fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_MspInit+0x30>)
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_MspInit+0x30>)
 8002fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	58024400 	.word	0x58024400

08002fd8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0b8      	sub	sp, #224	; 0xe0
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	22bc      	movs	r2, #188	; 0xbc
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f008 f88b 	bl	800b114 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_FDCAN_MspInit+0xc0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d142      	bne.n	800308e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800300e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003012:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f003 f9b7 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003024:	f7ff fc5a 	bl	80028dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003028:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 800302a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 800303a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 800304e:	f043 0308 	orr.w	r3, r3, #8
 8003052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003056:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_FDCAN_MspInit+0xc4>)
 8003058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003064:	2303      	movs	r3, #3
 8003066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800307c:	2309      	movs	r3, #9
 800307e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003082:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003086:	4619      	mov	r1, r3
 8003088:	4805      	ldr	r0, [pc, #20]	; (80030a0 <HAL_FDCAN_MspInit+0xc8>)
 800308a:	f001 f9c3 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800308e:	bf00      	nop
 8003090:	37e0      	adds	r7, #224	; 0xe0
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	4000a000 	.word	0x4000a000
 800309c:	58024400 	.word	0x58024400
 80030a0:	58020c00 	.word	0x58020c00

080030a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b0b8      	sub	sp, #224	; 0xe0
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	22bc      	movs	r2, #188	; 0xbc
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f008 f825 	bl	800b114 <memset>
  if(hi2c->Instance==I2C4)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_I2C_MspInit+0xe4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d154      	bne.n	800317e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80030d4:	2310      	movs	r3, #16
 80030d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80030d8:	2304      	movs	r3, #4
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 80030dc:	2378      	movs	r3, #120	; 0x78
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80030e0:	2302      	movs	r3, #2
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80030e4:	2302      	movs	r3, #2
 80030e6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 80030e8:	230c      	movs	r3, #12
 80030ea:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80030ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f003 f940 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 8003112:	f7ff fbe3 	bl	80028dc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_I2C_MspInit+0xe8>)
 8003118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_I2C_MspInit+0xe8>)
 800311e:	f043 0320 	orr.w	r3, r3, #32
 8003122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_I2C_MspInit+0xe8>)
 8003128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003134:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313c:	2312      	movs	r3, #18
 800313e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800314e:	2304      	movs	r3, #4
 8003150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003158:	4619      	mov	r1, r3
 800315a:	480d      	ldr	r0, [pc, #52]	; (8003190 <HAL_I2C_MspInit+0xec>)
 800315c:	f001 f95a 	bl	8004414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_I2C_MspInit+0xe8>)
 8003162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_I2C_MspInit+0xe8>)
 8003168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_I2C_MspInit+0xe8>)
 8003172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800317e:	bf00      	nop
 8003180:	37e0      	adds	r7, #224	; 0xe0
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	58001c00 	.word	0x58001c00
 800318c:	58024400 	.word	0x58024400
 8003190:	58021400 	.word	0x58021400

08003194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0b8      	sub	sp, #224	; 0xe0
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	22bc      	movs	r2, #188	; 0xbc
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f007 ffad 	bl	800b114 <memset>
  if(hspi->Instance==SPI5)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <HAL_SPI_MspInit+0xc0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d143      	bne.n	800324c <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80031c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80031ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80031ce:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f8d9 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80031e0:	f7ff fb7c 	bl	80028dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 80031ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031f4:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 80031f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 8003204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 800320a:	f043 0320 	orr.w	r3, r3, #32
 800320e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_SPI_MspInit+0xc4>)
 8003214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003220:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800323a:	2305      	movs	r3, #5
 800323c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003240:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_SPI_MspInit+0xc8>)
 8003248:	f001 f8e4 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	37e0      	adds	r7, #224	; 0xe0
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40015000 	.word	0x40015000
 8003258:	58024400 	.word	0x58024400
 800325c:	58021400 	.word	0x58021400

08003260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_TIM_Base_MspInit+0x74>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d117      	bne.n	80032a2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 8003274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 800327a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 8003284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	202b      	movs	r0, #43	; 0x2b
 8003296:	f000 fbdc 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800329a:	202b      	movs	r0, #43	; 0x2b
 800329c:	f000 fbf3 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80032a0:	e013      	b.n	80032ca <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_TIM_Base_MspInit+0x7c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10e      	bne.n	80032ca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 80032ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_TIM_Base_MspInit+0x78>)
 80032be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40001800 	.word	0x40001800
 80032d8:	58024400 	.word	0x58024400
 80032dc:	40014400 	.word	0x40014400

080032e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HAL_TIM_PWM_MspInit+0x3c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_TIM_PWM_MspInit+0x40>)
 80032f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_TIM_PWM_MspInit+0x40>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_TIM_PWM_MspInit+0x40>)
 8003304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40014000 	.word	0x40014000
 8003320:	58024400 	.word	0x58024400

08003324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <HAL_TIM_MspPostInit+0xb4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d11f      	bne.n	8003386 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 8003348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 8003358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003364:	2320      	movs	r3, #32
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003374:	2304      	movs	r3, #4
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <HAL_TIM_MspPostInit+0xbc>)
 8003380:	f001 f848 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003384:	e023      	b.n	80033ce <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM16)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_TIM_MspPostInit+0xc0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d11e      	bne.n	80033ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 8003392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003396:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_TIM_MspPostInit+0xb8>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80033be:	2301      	movs	r3, #1
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <HAL_TIM_MspPostInit+0xc4>)
 80033ca:	f001 f823 	bl	8004414 <HAL_GPIO_Init>
}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40014000 	.word	0x40014000
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58021000 	.word	0x58021000
 80033e4:	40014400 	.word	0x40014400
 80033e8:	58021400 	.word	0x58021400

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0b8      	sub	sp, #224	; 0xe0
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003404:	f107 0310 	add.w	r3, r7, #16
 8003408:	22bc      	movs	r2, #188	; 0xbc
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f007 fe81 	bl	800b114 <memset>
  if(huart->Instance==USART3)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_UART_MspInit+0xc0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d142      	bne.n	80034a2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800341c:	2302      	movs	r3, #2
 800341e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003426:	f107 0310 	add.w	r3, r7, #16
 800342a:	4618      	mov	r0, r3
 800342c:	f002 ffae 	bl	800638c <HAL_RCCEx_PeriphCLKConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003436:	f7ff fa51 	bl	80028dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 800343c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 8003442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 800344c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_UART_MspInit+0xc4>)
 800346a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800347a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003490:	2307      	movs	r3, #7
 8003492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800349a:	4619      	mov	r1, r3
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <HAL_UART_MspInit+0xc8>)
 800349e:	f000 ffb9 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034a2:	bf00      	nop
 80034a4:	37e0      	adds	r7, #224	; 0xe0
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40004800 	.word	0x40004800
 80034b0:	58024400 	.word	0x58024400
 80034b4:	58020c00 	.word	0x58020c00

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler+0x4>

080034be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <HardFault_Handler+0x4>

080034c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <MemManage_Handler+0x4>

080034ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003504:	f000 f97a 	bl	80037fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  cntMilisec++;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Handler+0x20>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	1c54      	adds	r4, r2, #1
 8003510:	f143 0500 	adc.w	r5, r3, #0
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <SysTick_Handler+0x20>)
 8003516:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bdb0      	pop	{r4, r5, r7, pc}
 800351e:	bf00      	nop
 8003520:	240006d0 	.word	0x240006d0

08003524 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800352a:	f005 fbf9 	bl	8008d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	24000504 	.word	0x24000504

08003538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	return 1;
 800353c:	2301      	movs	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_kill>:

int _kill(int pid, int sig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003552:	f007 fda7 	bl	800b0a4 <__errno>
 8003556:	4603      	mov	r3, r0
 8003558:	2216      	movs	r2, #22
 800355a:	601a      	str	r2, [r3, #0]
	return -1;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_exit>:

void _exit (int status)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ffe7 	bl	8003548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800357a:	e7fe      	b.n	800357a <_exit+0x12>

0800357c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e00a      	b.n	80035a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800358e:	f3af 8000 	nop.w
 8003592:	4601      	mov	r1, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	60ba      	str	r2, [r7, #8]
 800359a:	b2ca      	uxtb	r2, r1
 800359c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbf0      	blt.n	800358e <_read+0x12>
	}

return len;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e009      	b.n	80035dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	60ba      	str	r2, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fb53 	bl	8002c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dbf1      	blt.n	80035c8 <_write+0x12>
	}
	return len;
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_close>:

int _close(int file)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	return -1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003616:	605a      	str	r2, [r3, #4]
	return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_isatty>:

int _isatty(int file)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	return 1;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <_sbrk+0x5c>)
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <_sbrk+0x60>)
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_sbrk+0x64>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <_sbrk+0x68>)
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003688:	f007 fd0c 	bl	800b0a4 <__errno>
 800368c:	4603      	mov	r3, r0
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	e009      	b.n	80036ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <_sbrk+0x64>)
 80036a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	24080000 	.word	0x24080000
 80036b8:	00000400 	.word	0x00000400
 80036bc:	240007a0 	.word	0x240007a0
 80036c0:	240007b8 	.word	0x240007b8

080036c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036c8:	f7fc ffe4 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036cc:	480c      	ldr	r0, [pc, #48]	; (8003700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ce:	490d      	ldr	r1, [pc, #52]	; (8003704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d4:	e002      	b.n	80036dc <LoopCopyDataInit>

080036d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036da:	3304      	adds	r3, #4

080036dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e0:	d3f9      	bcc.n	80036d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036e4:	4c0a      	ldr	r4, [pc, #40]	; (8003710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e8:	e001      	b.n	80036ee <LoopFillZerobss>

080036ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036ec:	3204      	adds	r2, #4

080036ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f0:	d3fb      	bcc.n	80036ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036f2:	f007 fcdd 	bl	800b0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f6:	f7fe fa9b 	bl	8001c30 <main>
  bx  lr
 80036fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003704:	24000228 	.word	0x24000228
  ldr r2, =_sidata
 8003708:	080109a0 	.word	0x080109a0
  ldr r2, =_sbss
 800370c:	24000228 	.word	0x24000228
  ldr r4, =_ebss
 8003710:	240007b8 	.word	0x240007b8

08003714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC3_IRQHandler>
	...

08003718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371e:	2003      	movs	r0, #3
 8003720:	f000 f98c 	bl	8003a3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003724:	f002 fc5c 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_Init+0x68>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4913      	ldr	r1, [pc, #76]	; (8003784 <HAL_Init+0x6c>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_Init+0x68>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <HAL_Init+0x6c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <HAL_Init+0x70>)
 800375a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_Init+0x74>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003762:	200f      	movs	r0, #15
 8003764:	f000 f814 	bl	8003790 <HAL_InitTick>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e002      	b.n	8003778 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003772:	f7ff fc17 	bl	8002fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	58024400 	.word	0x58024400
 8003784:	0800ecb4 	.word	0x0800ecb4
 8003788:	24000004 	.word	0x24000004
 800378c:	24000000 	.word	0x24000000

08003790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_InitTick+0x60>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e021      	b.n	80037e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_InitTick+0x64>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_InitTick+0x60>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f971 	bl	8003aa2 <HAL_SYSTICK_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00e      	b.n	80037e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d80a      	bhi.n	80037e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d0:	2200      	movs	r2, #0
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f000 f93b 	bl	8003a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <HAL_InitTick+0x68>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	24000054 	.word	0x24000054
 80037f4:	24000000 	.word	0x24000000
 80037f8:	24000050 	.word	0x24000050

080037fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_IncTick+0x20>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_IncTick+0x24>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4413      	add	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_IncTick+0x24>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	24000054 	.word	0x24000054
 8003820:	240007a4 	.word	0x240007a4

08003824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return uwTick;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_GetTick+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	240007a4 	.word	0x240007a4

0800383c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff ffee 	bl	8003824 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d005      	beq.n	8003862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_Delay+0x44>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003862:	bf00      	nop
 8003864:	f7ff ffde 	bl	8003824 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d8f7      	bhi.n	8003864 <HAL_Delay+0x28>
  {
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	24000054 	.word	0x24000054

08003884 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_GetREVID+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0c1b      	lsrs	r3, r3, #16
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	5c001000 	.word	0x5c001000

0800389c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <__NVIC_SetPriorityGrouping+0x40>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x40>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00
 80038e0:	05fa0000 	.word	0x05fa0000

080038e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__NVIC_GetPriorityGrouping+0x18>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0307 	and.w	r3, r3, #7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0b      	blt.n	800392a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <__NVIC_EnableIRQ+0x38>)
 800391a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db0a      	blt.n	8003966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <__NVIC_SetPriority+0x4c>)
 8003956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395a:	0112      	lsls	r2, r2, #4
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	440b      	add	r3, r1
 8003960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003964:	e00a      	b.n	800397c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4908      	ldr	r1, [pc, #32]	; (800398c <__NVIC_SetPriority+0x50>)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3b04      	subs	r3, #4
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	440b      	add	r3, r1
 800397a:	761a      	strb	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f1c3 0307 	rsb	r3, r3, #7
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf28      	it	cs
 80039ae:	2304      	movcs	r3, #4
 80039b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d902      	bls.n	80039c0 <NVIC_EncodePriority+0x30>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3b03      	subs	r3, #3
 80039be:	e000      	b.n	80039c2 <NVIC_EncodePriority+0x32>
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	f04f 31ff 	mov.w	r1, #4294967295
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	4313      	orrs	r3, r2
         );
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a08:	d301      	bcc.n	8003a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00f      	b.n	8003a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <SysTick_Config+0x40>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a16:	210f      	movs	r1, #15
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f7ff ff8e 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <SysTick_Config+0x40>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <SysTick_Config+0x40>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	e000e010 	.word	0xe000e010

08003a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff29 	bl	800389c <__NVIC_SetPriorityGrouping>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff40 	bl	80038e4 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff90 	bl	8003990 <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5f 	bl	800393c <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff33 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa4 	bl	80039f8 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b098      	sub	sp, #96	; 0x60
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003ac4:	4a84      	ldr	r2, [pc, #528]	; (8003cd8 <HAL_FDCAN_Init+0x21c>)
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	4611      	mov	r1, r2
 8003acc:	224c      	movs	r2, #76	; 0x4c
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f007 fb12 	bl	800b0f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e1c6      	b.n	8003e6c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	; (8003cdc <HAL_FDCAN_Init+0x220>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d106      	bne.n	8003af6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003af0:	461a      	mov	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fa64 	bl	8002fd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0210 	bic.w	r2, r2, #16
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b20:	f7ff fe80 	bl	8003824 <HAL_GetTick>
 8003b24:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b26:	e014      	b.n	8003b52 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b28:	f7ff fe7c 	bl	8003824 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b0a      	cmp	r3, #10
 8003b34:	d90d      	bls.n	8003b52 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e18c      	b.n	8003e6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d0e3      	beq.n	8003b28 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b70:	f7ff fe58 	bl	8003824 <HAL_GetTick>
 8003b74:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b76:	e014      	b.n	8003ba2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b78:	f7ff fe54 	bl	8003824 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b0a      	cmp	r3, #10
 8003b84:	d90d      	bls.n	8003ba2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e164      	b.n	8003e6c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0e3      	beq.n	8003b78 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0202 	orr.w	r2, r2, #2
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7c1b      	ldrb	r3, [r3, #16]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd6:	619a      	str	r2, [r3, #24]
 8003bd8:	e007      	b.n	8003bea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7c5b      	ldrb	r3, [r3, #17]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c00:	619a      	str	r2, [r3, #24]
 8003c02:	e007      	b.n	8003c14 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c12:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7c9b      	ldrb	r3, [r3, #18]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d108      	bne.n	8003c2e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c2a:	619a      	str	r2, [r3, #24]
 8003c2c:	e007      	b.n	8003c3e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c3c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003c62:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0210 	bic.w	r2, r2, #16
 8003c72:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d108      	bne.n	8003c8e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0204 	orr.w	r2, r2, #4
 8003c8a:	619a      	str	r2, [r3, #24]
 8003c8c:	e030      	b.n	8003cf0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02c      	beq.n	8003cf0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d020      	beq.n	8003ce0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0210 	orr.w	r2, r2, #16
 8003cbc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d114      	bne.n	8003cf0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0220 	orr.w	r2, r2, #32
 8003cd4:	619a      	str	r2, [r3, #24]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_FDCAN_Init+0x234>
 8003cd8:	0800ec68 	.word	0x0800ec68
 8003cdc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0220 	orr.w	r2, r2, #32
 8003cee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d00:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d08:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d18:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d1a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d24:	d115      	bne.n	8003d52 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	3b01      	subs	r3, #1
 8003d32:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003d34:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003d4e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003d50:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	4413      	add	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d011      	beq.n	8003da2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003d86:	f023 0107 	bic.w	r1, r3, #7
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	443b      	add	r3, r7
 8003d94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003db2:	f023 0107 	bic.w	r1, r3, #7
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	3360      	adds	r3, #96	; 0x60
 8003dbe:	443b      	add	r3, r7
 8003dc0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dde:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3360      	adds	r3, #96	; 0x60
 8003dea:	443b      	add	r3, r7
 8003dec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e0c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	3360      	adds	r3, #96	; 0x60
 8003e18:	443b      	add	r3, r7
 8003e1a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <HAL_FDCAN_Init+0x3b8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d107      	bne.n	8003e44 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f022 0203 	bic.w	r2, r2, #3
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f953 	bl	8004108 <FDCAN_CalcultateRamBlockAddresses>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003e68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3760      	adds	r7, #96	; 0x60
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	4000a000 	.word	0x4000a000

08003e78 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003e88:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <HAL_FDCAN_ConfigFilter+0x1e>
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d157      	bne.n	8003f46 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d12b      	bne.n	8003ef6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003eb2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003eb8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003eba:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e00e      	b.n	8003ee0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ece:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003ed6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e025      	b.n	8003f42 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	075a      	lsls	r2, r3, #29
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b07      	cmp	r3, #7
 8003f0a:	d103      	bne.n	8003f14 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	e006      	b.n	8003f22 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	079a      	lsls	r2, r3, #30
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e008      	b.n	8003f58 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d110      	bne.n	8003fa0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003f86:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003f8c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e008      	b.n	8003fb2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fa6:	f043 0204 	orr.w	r2, r3, #4
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d111      	bne.n	8003ff6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e008      	b.n	8004008 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004026:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d002      	beq.n	8004034 <HAL_FDCAN_ActivateNotification+0x20>
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d155      	bne.n	80040e0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	65da      	str	r2, [r3, #92]	; 0x5c
 8004052:	e014      	b.n	800407e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d108      	bne.n	8004076 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0202 	orr.w	r2, r2, #2
 8004072:	65da      	str	r2, [r3, #92]	; 0x5c
 8004074:	e003      	b.n	800407e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2203      	movs	r2, #3
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	430a      	orrs	r2, r1
 8004098:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_FDCAN_ActivateNotification+0xec>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	430b      	orrs	r3, r1
 80040cc:	6553      	str	r3, [r2, #84]	; 0x54
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_FDCAN_ActivateNotification+0xf0>)
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	0f9b      	lsrs	r3, r3, #30
 80040d6:	490b      	ldr	r1, [pc, #44]	; (8004104 <HAL_FDCAN_ActivateNotification+0xf0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e008      	b.n	80040f2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	3fcfffff 	.word	0x3fcfffff
 8004104:	4000a800 	.word	0x4000a800

08004108 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800411e:	4ba7      	ldr	r3, [pc, #668]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004120:	4013      	ands	r3, r2
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	0091      	lsls	r1, r2, #2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4413      	add	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800415e:	4b97      	ldr	r3, [pc, #604]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004160:	4013      	ands	r3, r2
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	0091      	lsls	r1, r2, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	430b      	orrs	r3, r1
 800416c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041a0:	4b86      	ldr	r3, [pc, #536]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	0091      	lsls	r1, r2, #2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	041a      	lsls	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	4413      	add	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041e8:	4b74      	ldr	r3, [pc, #464]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	0091      	lsls	r1, r2, #2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004202:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	041a      	lsls	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	4413      	add	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004230:	4b62      	ldr	r3, [pc, #392]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	0091      	lsls	r1, r2, #2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	430b      	orrs	r3, r1
 800423e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800425c:	4b57      	ldr	r3, [pc, #348]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	0091      	lsls	r1, r2, #2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	430b      	orrs	r3, r1
 800426a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004276:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	041a      	lsls	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	4413      	add	r3, r2
 8004294:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	0091      	lsls	r1, r2, #2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	041a      	lsls	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	061a      	lsls	r2, r3, #24
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80042ee:	4413      	add	r3, r2
 80042f0:	009a      	lsls	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	441a      	add	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d915      	bls.n	80043e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80043b8:	e006      	b.n	80043c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80043ba:	bf00      	nop
 80043bc:	ffff0003 	.word	0xffff0003
 80043c0:	10002b00 	.word	0x10002b00
 80043c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2203      	movs	r2, #3
 80043dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e010      	b.n	8004406 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e005      	b.n	80043f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3f3      	bcc.n	80043ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop

08004414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	; 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004422:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_GPIO_Init+0x234>)
 8004424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004426:	e194      	b.n	8004752 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8186 	beq.w	800474c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d005      	beq.n	8004458 <HAL_GPIO_Init+0x44>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d130      	bne.n	80044ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800448e:	2201      	movs	r2, #1
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0201 	and.w	r2, r3, #1
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d017      	beq.n	80044f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	2203      	movs	r2, #3
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d123      	bne.n	800454a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	08da      	lsrs	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3208      	adds	r2, #8
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	08da      	lsrs	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3208      	adds	r2, #8
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0203 	and.w	r2, r3, #3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80e0 	beq.w	800474c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458c:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_GPIO_Init+0x238>)
 800458e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004592:	4a2e      	ldr	r2, [pc, #184]	; (800464c <HAL_GPIO_Init+0x238>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800459c:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_GPIO_Init+0x238>)
 800459e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045aa:	4a29      	ldr	r2, [pc, #164]	; (8004650 <HAL_GPIO_Init+0x23c>)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	3302      	adds	r3, #2
 80045b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	220f      	movs	r2, #15
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a20      	ldr	r2, [pc, #128]	; (8004654 <HAL_GPIO_Init+0x240>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d052      	beq.n	800467c <HAL_GPIO_Init+0x268>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_GPIO_Init+0x244>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_GPIO_Init+0x22e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1e      	ldr	r2, [pc, #120]	; (800465c <HAL_GPIO_Init+0x248>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02b      	beq.n	800463e <HAL_GPIO_Init+0x22a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_GPIO_Init+0x24c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d025      	beq.n	800463a <HAL_GPIO_Init+0x226>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <HAL_GPIO_Init+0x250>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <HAL_GPIO_Init+0x222>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_GPIO_Init+0x254>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d019      	beq.n	8004632 <HAL_GPIO_Init+0x21e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_GPIO_Init+0x258>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_GPIO_Init+0x21a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_GPIO_Init+0x25c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00d      	beq.n	800462a <HAL_GPIO_Init+0x216>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_GPIO_Init+0x260>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <HAL_GPIO_Init+0x212>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_GPIO_Init+0x264>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <HAL_GPIO_Init+0x20e>
 800461e:	2309      	movs	r3, #9
 8004620:	e02d      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004622:	230a      	movs	r3, #10
 8004624:	e02b      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004626:	2308      	movs	r3, #8
 8004628:	e029      	b.n	800467e <HAL_GPIO_Init+0x26a>
 800462a:	2307      	movs	r3, #7
 800462c:	e027      	b.n	800467e <HAL_GPIO_Init+0x26a>
 800462e:	2306      	movs	r3, #6
 8004630:	e025      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004632:	2305      	movs	r3, #5
 8004634:	e023      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004636:	2304      	movs	r3, #4
 8004638:	e021      	b.n	800467e <HAL_GPIO_Init+0x26a>
 800463a:	2303      	movs	r3, #3
 800463c:	e01f      	b.n	800467e <HAL_GPIO_Init+0x26a>
 800463e:	2302      	movs	r3, #2
 8004640:	e01d      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004642:	2301      	movs	r3, #1
 8004644:	e01b      	b.n	800467e <HAL_GPIO_Init+0x26a>
 8004646:	bf00      	nop
 8004648:	58000080 	.word	0x58000080
 800464c:	58024400 	.word	0x58024400
 8004650:	58000400 	.word	0x58000400
 8004654:	58020000 	.word	0x58020000
 8004658:	58020400 	.word	0x58020400
 800465c:	58020800 	.word	0x58020800
 8004660:	58020c00 	.word	0x58020c00
 8004664:	58021000 	.word	0x58021000
 8004668:	58021400 	.word	0x58021400
 800466c:	58021800 	.word	0x58021800
 8004670:	58021c00 	.word	0x58021c00
 8004674:	58022000 	.word	0x58022000
 8004678:	58022400 	.word	0x58022400
 800467c:	2300      	movs	r3, #0
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	f002 0203 	and.w	r2, r2, #3
 8004684:	0092      	lsls	r2, r2, #2
 8004686:	4093      	lsls	r3, r2
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468e:	4938      	ldr	r1, [pc, #224]	; (8004770 <HAL_GPIO_Init+0x35c>)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	3302      	adds	r3, #2
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f ae63 	bne.w	8004428 <HAL_GPIO_Init+0x14>
  }
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	3724      	adds	r7, #36	; 0x24
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	58000400 	.word	0x58000400

08004774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
 8004780:	4613      	mov	r3, r2
 8004782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004784:	787b      	ldrb	r3, [r7, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478a:	887a      	ldrh	r2, [r7, #2]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004790:	e003      	b.n	800479a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	041a      	lsls	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	041a      	lsls	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43d9      	mvns	r1, r3
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	400b      	ands	r3, r1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <HAL_HSEM_FastTake+0x2c>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3320      	adds	r3, #32
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <HAL_HSEM_FastTake+0x30>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	58026400 	.word	0x58026400
 800480c:	80000300 	.word	0x80000300

08004810 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800481a:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_HSEM_Release+0x24>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	58026400 	.word	0x58026400

08004838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07f      	b.n	800494a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fc20 	bl	80030a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	e006      	b.n	80048c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d104      	bne.n	80048d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6859      	ldr	r1, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_I2C_Init+0x11c>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69d9      	ldr	r1, [r3, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	02008000 	.word	0x02008000

08004958 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	f040 80f9 	bne.w	8004b72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_I2C_Mem_Write+0x34>
 8004986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004992:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0ed      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Mem_Write+0x4e>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0e6      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ae:	f7fe ff39 	bl	8003824 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2319      	movs	r3, #25
 80049ba:	2201      	movs	r2, #1
 80049bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fa5d 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0d1      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f8:	88f8      	ldrh	r0, [r7, #6]
 80049fa:	893a      	ldrh	r2, [r7, #8]
 80049fc:	8979      	ldrh	r1, [r7, #10]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4603      	mov	r3, r0
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f9c1 	bl	8004d90 <I2C_RequestMemoryWrite>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0a9      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d90e      	bls.n	8004a48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	8979      	ldrh	r1, [r7, #10]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fbc5 	bl	80051d0 <I2C_TransferConfig>
 8004a46:	e00f      	b.n	8004a68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	8979      	ldrh	r1, [r7, #10]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fbb4 	bl	80051d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fa47 	bl	8004f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e07b      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d034      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x1c8>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d130      	bne.n	8004b20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2180      	movs	r1, #128	; 0x80
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f9d9 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e04d      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2bff      	cmp	r3, #255	; 0xff
 8004ae0:	d90e      	bls.n	8004b00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fb69 	bl	80051d0 <I2C_TransferConfig>
 8004afe:	e00f      	b.n	8004b20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	8979      	ldrh	r1, [r7, #10]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fb58 	bl	80051d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d19e      	bne.n	8004a68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fa26 	bl	8004f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01a      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2220      	movs	r2, #32
 8004b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_I2C_Mem_Write+0x224>)
 8004b52:	400b      	ands	r3, r1
 8004b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	fe00e800 	.word	0xfe00e800

08004b80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	f040 80ef 	bne.w	8004d80 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e0e5      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2C_IsDeviceReady+0x44>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0de      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <HAL_I2C_IsDeviceReady+0x6e>
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004be8:	4b68      	ldr	r3, [pc, #416]	; (8004d8c <HAL_I2C_IsDeviceReady+0x20c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	e004      	b.n	8004bf8 <HAL_I2C_IsDeviceReady+0x78>
 8004bee:	897b      	ldrh	r3, [r7, #10]
 8004bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fe fe11 	bl	8003824 <HAL_GetTick>
 8004c02:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c30:	e034      	b.n	8004c9c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d01a      	beq.n	8004c70 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7fe fdf3 	bl	8003824 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <HAL_I2C_IsDeviceReady+0xd0>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e088      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <HAL_I2C_IsDeviceReady+0x128>
 8004ca2:	7fbb      	ldrb	r3, [r7, #30]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c4      	beq.n	8004c32 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d01a      	beq.n	8004cec <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2120      	movs	r1, #32
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8dd 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e058      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e04a      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2120      	movs	r1, #32
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8c2 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03d      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2220      	movs	r2, #32
 8004d14:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d118      	bne.n	8004d50 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d2c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2120      	movs	r1, #32
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f8a1 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01c      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3301      	adds	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f63f af3d 	bhi.w	8004bda <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	02002000 	.word	0x02002000

08004d90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	817b      	strh	r3, [r7, #10]
 8004da2:	460b      	mov	r3, r1
 8004da4:	813b      	strh	r3, [r7, #8]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <I2C_RequestMemoryWrite+0xa4>)
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa09 	bl	80051d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f89c 	bl	8004f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e02c      	b.n	8004e2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd8:	893b      	ldrh	r3, [r7, #8]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	629a      	str	r2, [r3, #40]	; 0x28
 8004de2:	e015      	b.n	8004e10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004de4:	893b      	ldrh	r3, [r7, #8]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	69b9      	ldr	r1, [r7, #24]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f882 	bl	8004f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e012      	b.n	8004e2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e06:	893b      	ldrh	r3, [r7, #8]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f830 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	80002000 	.word	0x80002000

08004e38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d103      	bne.n	8004e56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d007      	beq.n	8004e74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	619a      	str	r2, [r3, #24]
  }
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e90:	e022      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d01e      	beq.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fe fcc3 	bl	8003824 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d113      	bne.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e00f      	b.n	8004ef8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d0cd      	beq.n	8004e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f0c:	e02c      	b.n	8004f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f870 	bl	8004ff8 <I2C_IsErrorOccurred>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e02a      	b.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d01e      	beq.n	8004f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fe fc7b 	bl	8003824 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e007      	b.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d1cb      	bne.n	8004f0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f8c:	e028      	b.n	8004fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f830 	bl	8004ff8 <I2C_IsErrorOccurred>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e026      	b.n	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fe fc3f 	bl	8003824 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d1cf      	bne.n	8004f8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	d075      	beq.n	8005110 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2210      	movs	r2, #16
 800502a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800502c:	e056      	b.n	80050dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d052      	beq.n	80050dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fe fbf5 	bl	8003824 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <I2C_IsErrorOccurred+0x54>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d147      	bne.n	80050dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800505e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506e:	d12e      	bne.n	80050ce <I2C_IsErrorOccurred+0xd6>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005076:	d02a      	beq.n	80050ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	2b20      	cmp	r3, #32
 800507c:	d027      	beq.n	80050ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800508e:	f7fe fbc9 	bl	8003824 <HAL_GetTick>
 8005092:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005094:	e01b      	b.n	80050ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005096:	f7fe fbc5 	bl	8003824 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b19      	cmp	r3, #25
 80050a2:	d914      	bls.n	80050ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d1dc      	bne.n	8005096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d003      	beq.n	80050f2 <I2C_IsErrorOccurred+0xfa>
 80050ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d09d      	beq.n	800502e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2220      	movs	r2, #32
 8005100:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f043 0308 	orr.w	r3, r3, #8
 800514a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800517e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01c      	beq.n	80051c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fe56 	bl	8004e38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <I2C_IsErrorOccurred+0x1d4>)
 8005198:	400b      	ands	r3, r1
 800519a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	fe00e800 	.word	0xfe00e800

080051d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	817b      	strh	r3, [r7, #10]
 80051de:	4613      	mov	r3, r2
 80051e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051e8:	7a7b      	ldrb	r3, [r7, #9]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	0d5b      	lsrs	r3, r3, #21
 800520a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <I2C_TransferConfig+0x60>)
 8005210:	430b      	orrs	r3, r1
 8005212:	43db      	mvns	r3, r3
 8005214:	ea02 0103 	and.w	r1, r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	03ff63ff 	.word	0x03ff63ff

08005234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d138      	bne.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005254:	2302      	movs	r3, #2
 8005256:	e032      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d139      	bne.n	8005354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e033      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	; 0x24
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800531c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800536c:	4b29      	ldr	r3, [pc, #164]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	2b06      	cmp	r3, #6
 8005376:	d00a      	beq.n	800538e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e040      	b.n	800540c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e03e      	b.n	800540c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800538e:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005396:	491f      	ldr	r1, [pc, #124]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4313      	orrs	r3, r2
 800539c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800539e:	f7fe fa41 	bl	8003824 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053a4:	e009      	b.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053a6:	f7fe fa3d 	bl	8003824 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b4:	d901      	bls.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e028      	b.n	800540c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c6:	d1ee      	bne.n	80053a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b1e      	cmp	r3, #30
 80053cc:	d008      	beq.n	80053e0 <HAL_PWREx_ConfigSupply+0x7c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b2e      	cmp	r3, #46	; 0x2e
 80053d2:	d005      	beq.n	80053e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b1d      	cmp	r3, #29
 80053d8:	d002      	beq.n	80053e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b2d      	cmp	r3, #45	; 0x2d
 80053de:	d114      	bne.n	800540a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80053e0:	f7fe fa20 	bl	8003824 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053e6:	e009      	b.n	80053fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053e8:	f7fe fa1c 	bl	8003824 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f6:	d901      	bls.n	80053fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e007      	b.n	800540c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <HAL_PWREx_ConfigSupply+0xb0>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d1ee      	bne.n	80053e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	58024800 	.word	0x58024800

08005418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f000 bc1d 	b.w	8005c66 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8087 	beq.w	8005548 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543a:	4b99      	ldr	r3, [pc, #612]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005444:	4b96      	ldr	r3, [pc, #600]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b10      	cmp	r3, #16
 800544e:	d007      	beq.n	8005460 <HAL_RCC_OscConfig+0x48>
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b18      	cmp	r3, #24
 8005454:	d110      	bne.n	8005478 <HAL_RCC_OscConfig+0x60>
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d10b      	bne.n	8005478 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	4b8f      	ldr	r3, [pc, #572]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d06c      	beq.n	8005546 <HAL_RCC_OscConfig+0x12e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d168      	bne.n	8005546 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e3f6      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d106      	bne.n	8005490 <HAL_RCC_OscConfig+0x78>
 8005482:	4b87      	ldr	r3, [pc, #540]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a86      	ldr	r2, [pc, #536]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e02e      	b.n	80054ee <HAL_RCC_OscConfig+0xd6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10c      	bne.n	80054b2 <HAL_RCC_OscConfig+0x9a>
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a80      	ldr	r2, [pc, #512]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800549e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4b7e      	ldr	r3, [pc, #504]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a7d      	ldr	r2, [pc, #500]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e01d      	b.n	80054ee <HAL_RCC_OscConfig+0xd6>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCC_OscConfig+0xbe>
 80054bc:	4b78      	ldr	r3, [pc, #480]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a77      	ldr	r2, [pc, #476]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b75      	ldr	r3, [pc, #468]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a74      	ldr	r2, [pc, #464]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e00b      	b.n	80054ee <HAL_RCC_OscConfig+0xd6>
 80054d6:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a71      	ldr	r2, [pc, #452]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4b6f      	ldr	r3, [pc, #444]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6e      	ldr	r2, [pc, #440]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80054e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d013      	beq.n	800551e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fe f995 	bl	8003824 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fe:	f7fe f991 	bl	8003824 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b64      	cmp	r3, #100	; 0x64
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e3aa      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005510:	4b63      	ldr	r3, [pc, #396]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0xe6>
 800551c:	e014      	b.n	8005548 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fe f981 	bl	8003824 <HAL_GetTick>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005526:	f7fe f97d 	bl	8003824 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e396      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005538:	4b59      	ldr	r3, [pc, #356]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0x10e>
 8005544:	e000      	b.n	8005548 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005546:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80cb 	beq.w	80056ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005556:	4b52      	ldr	r3, [pc, #328]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005560:	4b4f      	ldr	r3, [pc, #316]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_RCC_OscConfig+0x164>
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b18      	cmp	r3, #24
 8005570:	d156      	bne.n	8005620 <HAL_RCC_OscConfig+0x208>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d151      	bne.n	8005620 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_OscConfig+0x17c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e368      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005594:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 0219 	bic.w	r2, r3, #25
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	493f      	ldr	r1, [pc, #252]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055a6:	f7fe f93d 	bl	8003824 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fe f939 	bl	8003824 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e352      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c0:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055cc:	f7fe f95a 	bl	8003884 <HAL_GetREVID>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d817      	bhi.n	800560a <HAL_RCC_OscConfig+0x1f2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d108      	bne.n	80055f4 <HAL_RCC_OscConfig+0x1dc>
 80055e2:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80055ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f2:	e07b      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	4927      	ldr	r1, [pc, #156]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005608:	e070      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	4921      	ldr	r1, [pc, #132]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800561e:	e065      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d048      	beq.n	80056ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 0219 	bic.w	r2, r3, #25
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	491a      	ldr	r1, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fe f8f3 	bl	8003824 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fe f8ef 	bl	8003824 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e308      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005660:	f7fe f910 	bl	8003884 <HAL_GetREVID>
 8005664:	4603      	mov	r3, r0
 8005666:	f241 0203 	movw	r2, #4099	; 0x1003
 800566a:	4293      	cmp	r3, r2
 800566c:	d81a      	bhi.n	80056a4 <HAL_RCC_OscConfig+0x28c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d108      	bne.n	8005688 <HAL_RCC_OscConfig+0x270>
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800567e:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005684:	6053      	str	r3, [r2, #4]
 8005686:	e031      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	4902      	ldr	r1, [pc, #8]	; (80056a0 <HAL_RCC_OscConfig+0x288>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
 800569c:	e026      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	4b9a      	ldr	r3, [pc, #616]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	4997      	ldr	r1, [pc, #604]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
 80056b8:	e018      	b.n	80056ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ba:	4b95      	ldr	r3, [pc, #596]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a94      	ldr	r2, [pc, #592]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c6:	f7fe f8ad 	bl	8003824 <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ce:	f7fe f8a9 	bl	8003824 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e2c2      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056e0:	4b8b      	ldr	r3, [pc, #556]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80a9 	beq.w	800584c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056fa:	4b85      	ldr	r3, [pc, #532]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005702:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005704:	4b82      	ldr	r3, [pc, #520]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d007      	beq.n	8005720 <HAL_RCC_OscConfig+0x308>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b18      	cmp	r3, #24
 8005714:	d13a      	bne.n	800578c <HAL_RCC_OscConfig+0x374>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d135      	bne.n	800578c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005720:	4b7b      	ldr	r3, [pc, #492]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_RCC_OscConfig+0x320>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d001      	beq.n	8005738 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e296      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005738:	f7fe f8a4 	bl	8003884 <HAL_GetREVID>
 800573c:	4603      	mov	r3, r0
 800573e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005742:	4293      	cmp	r3, r2
 8005744:	d817      	bhi.n	8005776 <HAL_RCC_OscConfig+0x35e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	2b20      	cmp	r3, #32
 800574c:	d108      	bne.n	8005760 <HAL_RCC_OscConfig+0x348>
 800574e:	4b70      	ldr	r3, [pc, #448]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005756:	4a6e      	ldr	r2, [pc, #440]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005758:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800575c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800575e:	e075      	b.n	800584c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005760:	4b6b      	ldr	r3, [pc, #428]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	069b      	lsls	r3, r3, #26
 800576e:	4968      	ldr	r1, [pc, #416]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005774:	e06a      	b.n	800584c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	4962      	ldr	r1, [pc, #392]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005786:	4313      	orrs	r3, r2
 8005788:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800578a:	e05f      	b.n	800584c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d042      	beq.n	800581a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005794:	4b5e      	ldr	r3, [pc, #376]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5d      	ldr	r2, [pc, #372]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 800579a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fe f840 	bl	8003824 <HAL_GetTick>
 80057a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057a8:	f7fe f83c 	bl	8003824 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e255      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057ba:	4b55      	ldr	r3, [pc, #340]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057c6:	f7fe f85d 	bl	8003884 <HAL_GetREVID>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d817      	bhi.n	8005804 <HAL_RCC_OscConfig+0x3ec>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d108      	bne.n	80057ee <HAL_RCC_OscConfig+0x3d6>
 80057dc:	4b4c      	ldr	r3, [pc, #304]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057e4:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80057e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ea:	6053      	str	r3, [r2, #4]
 80057ec:	e02e      	b.n	800584c <HAL_RCC_OscConfig+0x434>
 80057ee:	4b48      	ldr	r3, [pc, #288]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	069b      	lsls	r3, r3, #26
 80057fc:	4944      	ldr	r1, [pc, #272]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	604b      	str	r3, [r1, #4]
 8005802:	e023      	b.n	800584c <HAL_RCC_OscConfig+0x434>
 8005804:	4b42      	ldr	r3, [pc, #264]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	493f      	ldr	r1, [pc, #252]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	60cb      	str	r3, [r1, #12]
 8005818:	e018      	b.n	800584c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800581a:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fd fffd 	bl	8003824 <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800582e:	f7fd fff9 	bl	8003824 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e212      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d036      	beq.n	80058c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d019      	beq.n	8005894 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fd ffda 	bl	8003824 <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005874:	f7fd ffd6 	bl	8003824 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1ef      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005886:	4b22      	ldr	r3, [pc, #136]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x45c>
 8005892:	e018      	b.n	80058c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fd ffc0 	bl	8003824 <HAL_GetTick>
 80058a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a8:	f7fd ffbc 	bl	8003824 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e1d5      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d039      	beq.n	8005946 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01c      	beq.n	8005914 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a0c      	ldr	r2, [pc, #48]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 80058e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058e6:	f7fd ff9d 	bl	8003824 <HAL_GetTick>
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058ee:	f7fd ff99 	bl	8003824 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e1b2      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_RCC_OscConfig+0x4f8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x4d6>
 800590c:	e01b      	b.n	8005946 <HAL_RCC_OscConfig+0x52e>
 800590e:	bf00      	nop
 8005910:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005914:	4b9b      	ldr	r3, [pc, #620]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a9a      	ldr	r2, [pc, #616]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 800591a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005920:	f7fd ff80 	bl	8003824 <HAL_GetTick>
 8005924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005928:	f7fd ff7c 	bl	8003824 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e195      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800593a:	4b92      	ldr	r3, [pc, #584]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8081 	beq.w	8005a56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005954:	4b8c      	ldr	r3, [pc, #560]	; (8005b88 <HAL_RCC_OscConfig+0x770>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a8b      	ldr	r2, [pc, #556]	; (8005b88 <HAL_RCC_OscConfig+0x770>)
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005960:	f7fd ff60 	bl	8003824 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005968:	f7fd ff5c 	bl	8003824 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e175      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800597a:	4b83      	ldr	r3, [pc, #524]	; (8005b88 <HAL_RCC_OscConfig+0x770>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d106      	bne.n	800599c <HAL_RCC_OscConfig+0x584>
 800598e:	4b7d      	ldr	r3, [pc, #500]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	4a7c      	ldr	r2, [pc, #496]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6713      	str	r3, [r2, #112]	; 0x70
 800599a:	e02d      	b.n	80059f8 <HAL_RCC_OscConfig+0x5e0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10c      	bne.n	80059be <HAL_RCC_OscConfig+0x5a6>
 80059a4:	4b77      	ldr	r3, [pc, #476]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a76      	ldr	r2, [pc, #472]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
 80059b0:	4b74      	ldr	r3, [pc, #464]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a73      	ldr	r2, [pc, #460]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059b6:	f023 0304 	bic.w	r3, r3, #4
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
 80059bc:	e01c      	b.n	80059f8 <HAL_RCC_OscConfig+0x5e0>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5c8>
 80059c6:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4a6e      	ldr	r2, [pc, #440]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059cc:	f043 0304 	orr.w	r3, r3, #4
 80059d0:	6713      	str	r3, [r2, #112]	; 0x70
 80059d2:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	4a6b      	ldr	r2, [pc, #428]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6713      	str	r3, [r2, #112]	; 0x70
 80059de:	e00b      	b.n	80059f8 <HAL_RCC_OscConfig+0x5e0>
 80059e0:	4b68      	ldr	r3, [pc, #416]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	4a67      	ldr	r2, [pc, #412]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	6713      	str	r3, [r2, #112]	; 0x70
 80059ec:	4b65      	ldr	r3, [pc, #404]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a64      	ldr	r2, [pc, #400]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 80059f2:	f023 0304 	bic.w	r3, r3, #4
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d015      	beq.n	8005a2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fd ff10 	bl	8003824 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7fd ff0c 	bl	8003824 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e123      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a1e:	4b59      	ldr	r3, [pc, #356]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ee      	beq.n	8005a08 <HAL_RCC_OscConfig+0x5f0>
 8005a2a:	e014      	b.n	8005a56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2c:	f7fd fefa 	bl	8003824 <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fd fef6 	bl	8003824 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e10d      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a4a:	4b4e      	ldr	r3, [pc, #312]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ee      	bne.n	8005a34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8102 	beq.w	8005c64 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a60:	4b48      	ldr	r3, [pc, #288]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a68:	2b18      	cmp	r3, #24
 8005a6a:	f000 80bd 	beq.w	8005be8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f040 809e 	bne.w	8005bb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a41      	ldr	r2, [pc, #260]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fece 	bl	8003824 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fd feca 	bl	8003824 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0e3      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a9e:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aaa:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0x774>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aba:	0112      	lsls	r2, r2, #4
 8005abc:	430a      	orrs	r2, r1
 8005abe:	4931      	ldr	r1, [pc, #196]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	025b      	lsls	r3, r3, #9
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	3b01      	subs	r3, #1
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005af4:	4923      	ldr	r1, [pc, #140]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005afa:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b06:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <HAL_RCC_OscConfig+0x778>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b12:	00d2      	lsls	r2, r2, #3
 8005b14:	491b      	ldr	r1, [pc, #108]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b1a:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f023 020c 	bic.w	r2, r3, #12
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4917      	ldr	r1, [pc, #92]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b2c:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f023 0202 	bic.w	r2, r3, #2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	4912      	ldr	r1, [pc, #72]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	4a07      	ldr	r2, [pc, #28]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <HAL_RCC_OscConfig+0x76c>)
 8005b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fd fe53 	bl	8003824 <HAL_GetTick>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b80:	e011      	b.n	8005ba6 <HAL_RCC_OscConfig+0x78e>
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
 8005b88:	58024800 	.word	0x58024800
 8005b8c:	fffffc0c 	.word	0xfffffc0c
 8005b90:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fd fe46 	bl	8003824 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e05f      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ba6:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x77c>
 8005bb2:	e057      	b.n	8005c64 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2d      	ldr	r2, [pc, #180]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fe30 	bl	8003824 <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fd fe2c 	bl	8003824 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e045      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x7b0>
 8005be6:	e03d      	b.n	8005c64 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005be8:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_OscConfig+0x858>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d031      	beq.n	8005c60 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f003 0203 	and.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d12a      	bne.n	8005c60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d122      	bne.n	8005c60 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d11a      	bne.n	8005c60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	0a5b      	lsrs	r3, r3, #9
 8005c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d108      	bne.n	8005c60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	0e1b      	lsrs	r3, r3, #24
 8005c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3730      	adds	r7, #48	; 0x30
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400

08005c74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e19c      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b8a      	ldr	r3, [pc, #552]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d910      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b87      	ldr	r3, [pc, #540]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 020f 	bic.w	r2, r3, #15
 8005c9e:	4985      	ldr	r1, [pc, #532]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca6:	4b83      	ldr	r3, [pc, #524]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e184      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	4b7b      	ldr	r3, [pc, #492]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d908      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cd4:	4b78      	ldr	r3, [pc, #480]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	4975      	ldr	r1, [pc, #468]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	4b70      	ldr	r3, [pc, #448]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d908      	bls.n	8005d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d02:	4b6d      	ldr	r3, [pc, #436]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	496a      	ldr	r1, [pc, #424]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	4b64      	ldr	r3, [pc, #400]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d908      	bls.n	8005d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d30:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	495e      	ldr	r1, [pc, #376]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69da      	ldr	r2, [r3, #28]
 8005d52:	4b59      	ldr	r3, [pc, #356]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d908      	bls.n	8005d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d5e:	4b56      	ldr	r3, [pc, #344]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	4953      	ldr	r1, [pc, #332]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	4b4d      	ldr	r3, [pc, #308]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d908      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8c:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f023 020f 	bic.w	r2, r3, #15
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4947      	ldr	r1, [pc, #284]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d055      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005daa:	4b43      	ldr	r3, [pc, #268]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4940      	ldr	r1, [pc, #256]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d121      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0f6      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ddc:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0ea      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005df4:	4b30      	ldr	r3, [pc, #192]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0de      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e04:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0d6      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f023 0207 	bic.w	r2, r3, #7
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4925      	ldr	r1, [pc, #148]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e26:	f7fd fcfd 	bl	8003824 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2e:	f7fd fcf9 	bl	8003824 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e0be      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d1eb      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d208      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f023 020f 	bic.w	r2, r3, #15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	490e      	ldr	r1, [pc, #56]	; (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d214      	bcs.n	8005ebc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 020f 	bic.w	r2, r3, #15
 8005e9a:	4906      	ldr	r1, [pc, #24]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e086      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x34e>
 8005eb4:	52002000 	.word	0x52002000
 8005eb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	4b3f      	ldr	r3, [pc, #252]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d208      	bcs.n	8005eea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ed8:	4b3c      	ldr	r3, [pc, #240]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	4939      	ldr	r1, [pc, #228]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d208      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f06:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	492e      	ldr	r1, [pc, #184]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d010      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d208      	bcs.n	8005f46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	4922      	ldr	r1, [pc, #136]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d010      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d208      	bcs.n	8005f74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	4917      	ldr	r1, [pc, #92]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f74:	f000 f834 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	4912      	ldr	r1, [pc, #72]	; (8005fd0 <HAL_RCC_ClockConfig+0x35c>)
 8005f86:	5ccb      	ldrb	r3, [r1, r3]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <HAL_RCC_ClockConfig+0x358>)
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <HAL_RCC_ClockConfig+0x35c>)
 8005f9c:	5cd3      	ldrb	r3, [r2, r3]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <HAL_RCC_ClockConfig+0x360>)
 8005faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fac:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_RCC_ClockConfig+0x364>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <HAL_RCC_ClockConfig+0x368>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd fbea 	bl	8003790 <HAL_InitTick>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	0800ecb4 	.word	0x0800ecb4
 8005fd4:	24000004 	.word	0x24000004
 8005fd8:	24000000 	.word	0x24000000
 8005fdc:	24000050 	.word	0x24000050

08005fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe6:	4bb3      	ldr	r3, [pc, #716]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fee:	2b18      	cmp	r3, #24
 8005ff0:	f200 8155 	bhi.w	800629e <HAL_RCC_GetSysClockFreq+0x2be>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006061 	.word	0x08006061
 8006000:	0800629f 	.word	0x0800629f
 8006004:	0800629f 	.word	0x0800629f
 8006008:	0800629f 	.word	0x0800629f
 800600c:	0800629f 	.word	0x0800629f
 8006010:	0800629f 	.word	0x0800629f
 8006014:	0800629f 	.word	0x0800629f
 8006018:	0800629f 	.word	0x0800629f
 800601c:	08006087 	.word	0x08006087
 8006020:	0800629f 	.word	0x0800629f
 8006024:	0800629f 	.word	0x0800629f
 8006028:	0800629f 	.word	0x0800629f
 800602c:	0800629f 	.word	0x0800629f
 8006030:	0800629f 	.word	0x0800629f
 8006034:	0800629f 	.word	0x0800629f
 8006038:	0800629f 	.word	0x0800629f
 800603c:	0800608d 	.word	0x0800608d
 8006040:	0800629f 	.word	0x0800629f
 8006044:	0800629f 	.word	0x0800629f
 8006048:	0800629f 	.word	0x0800629f
 800604c:	0800629f 	.word	0x0800629f
 8006050:	0800629f 	.word	0x0800629f
 8006054:	0800629f 	.word	0x0800629f
 8006058:	0800629f 	.word	0x0800629f
 800605c:	08006093 	.word	0x08006093
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006060:	4b94      	ldr	r3, [pc, #592]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800606c:	4b91      	ldr	r3, [pc, #580]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	4a90      	ldr	r2, [pc, #576]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
 800607c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800607e:	e111      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006080:	4b8d      	ldr	r3, [pc, #564]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006082:	61bb      	str	r3, [r7, #24]
    break;
 8006084:	e10e      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006086:	4b8d      	ldr	r3, [pc, #564]	; (80062bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006088:	61bb      	str	r3, [r7, #24]
    break;
 800608a:	e10b      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800608c:	4b8c      	ldr	r3, [pc, #560]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800608e:	61bb      	str	r3, [r7, #24]
    break;
 8006090:	e108      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006092:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800609c:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060a8:	4b82      	ldr	r3, [pc, #520]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80060b2:	4b80      	ldr	r3, [pc, #512]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	08db      	lsrs	r3, r3, #3
 80060b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80e1 	beq.w	8006298 <HAL_RCC_GetSysClockFreq+0x2b8>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	f000 8083 	beq.w	80061e4 <HAL_RCC_GetSysClockFreq+0x204>
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f200 80a1 	bhi.w	8006228 <HAL_RCC_GetSysClockFreq+0x248>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x114>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d056      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80060f2:	e099      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02d      	beq.n	800615c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006100:	4b6c      	ldr	r3, [pc, #432]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	4a6b      	ldr	r2, [pc, #428]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b62      	ldr	r3, [pc, #392]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800615a:	e087      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a58 	vldr	s13, [pc, #352]	; 80062c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b51      	ldr	r3, [pc, #324]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006182:	eddf 5a50 	vldr	s11, [pc, #320]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	e065      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80062cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b40      	ldr	r3, [pc, #256]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e2:	e043      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80062d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	ed97 6a02 	vldr	s12, [r7, #8]
 800620a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006226:	e021      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eddf 6a26 	vldr	s13, [pc, #152]	; 80062cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624a:	ed97 6a02 	vldr	s12, [r7, #8]
 800624e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800626a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	0a5b      	lsrs	r3, r3, #9
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	3301      	adds	r3, #1
 8006278:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006284:	edd7 6a07 	vldr	s13, [r7, #28]
 8006288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006290:	ee17 3a90 	vmov	r3, s15
 8006294:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006296:	e005      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
    break;
 800629c:	e002      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062a0:	61bb      	str	r3, [r7, #24]
    break;
 80062a2:	bf00      	nop
  }

  return sysclockfreq;
 80062a4:	69bb      	ldr	r3, [r7, #24]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400
 80062b8:	03d09000 	.word	0x03d09000
 80062bc:	003d0900 	.word	0x003d0900
 80062c0:	007a1200 	.word	0x007a1200
 80062c4:	46000000 	.word	0x46000000
 80062c8:	4c742400 	.word	0x4c742400
 80062cc:	4a742400 	.word	0x4a742400
 80062d0:	4af42400 	.word	0x4af42400

080062d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80062da:	f7ff fe81 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_RCC_GetHCLKFreq+0x50>)
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	490f      	ldr	r1, [pc, #60]	; (8006328 <HAL_RCC_GetHCLKFreq+0x54>)
 80062ec:	5ccb      	ldrb	r3, [r1, r3]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <HAL_RCC_GetHCLKFreq+0x50>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	4a09      	ldr	r2, [pc, #36]	; (8006328 <HAL_RCC_GetHCLKFreq+0x54>)
 8006302:	5cd3      	ldrb	r3, [r2, r3]
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <HAL_RCC_GetHCLKFreq+0x58>)
 8006310:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006312:	4a07      	ldr	r2, [pc, #28]	; (8006330 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <HAL_RCC_GetHCLKFreq+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	58024400 	.word	0x58024400
 8006328:	0800ecb4 	.word	0x0800ecb4
 800632c:	24000004 	.word	0x24000004
 8006330:	24000000 	.word	0x24000000

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006338:	f7ff ffcc 	bl	80062d4 <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	091b      	lsrs	r3, r3, #4
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4904      	ldr	r1, [pc, #16]	; (800635c <HAL_RCC_GetPCLK1Freq+0x28>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	58024400 	.word	0x58024400
 800635c:	0800ecb4 	.word	0x0800ecb4

08006360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006364:	f7ff ffb6 	bl	80062d4 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b06      	ldr	r3, [pc, #24]	; (8006384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4904      	ldr	r1, [pc, #16]	; (8006388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	58024400 	.word	0x58024400
 8006388:	0800ecb4 	.word	0x0800ecb4

0800638c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006398:	2300      	movs	r3, #0
 800639a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d03f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063b0:	d02a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80063b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063b6:	d824      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063bc:	d018      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063c2:	d81e      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063cc:	d007      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80063ce:	e018      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4ba3      	ldr	r3, [pc, #652]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4aa2      	ldr	r2, [pc, #648]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063dc:	e015      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f9d5 	bl	8007794 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3324      	adds	r3, #36	; 0x24
 80063f4:	2102      	movs	r1, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 fa7e 	bl	80078f8 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006410:	4b93      	ldr	r3, [pc, #588]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800641c:	4990      	ldr	r1, [pc, #576]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	650b      	str	r3, [r1, #80]	; 0x50
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d03d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	2b04      	cmp	r3, #4
 800643a:	d826      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006459 	.word	0x08006459
 8006448:	08006467 	.word	0x08006467
 800644c:	08006479 	.word	0x08006479
 8006450:	08006491 	.word	0x08006491
 8006454:	08006491 	.word	0x08006491
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b81      	ldr	r3, [pc, #516]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a80      	ldr	r2, [pc, #512]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006464:	e015      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f001 f991 	bl	8007794 <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006476:	e00c      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3324      	adds	r3, #36	; 0x24
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f001 fa3a 	bl	80078f8 <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006488:	e003      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
      break;
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006498:	4b71      	ldr	r3, [pc, #452]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	f023 0207 	bic.w	r2, r3, #7
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	496e      	ldr	r1, [pc, #440]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	650b      	str	r3, [r1, #80]	; 0x50
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d042      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c4:	d02b      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ca:	d825      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064cc:	2bc0      	cmp	r3, #192	; 0xc0
 80064ce:	d028      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064d0:	2bc0      	cmp	r3, #192	; 0xc0
 80064d2:	d821      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d016      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d81d      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d007      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80064e4:	e018      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e6:	4b5e      	ldr	r3, [pc, #376]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	4a5d      	ldr	r2, [pc, #372]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80064f2:	e017      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f94a 	bl	8007794 <RCCEx_PLL2_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006504:	e00e      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3324      	adds	r3, #36	; 0x24
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f9f3 	bl	80078f8 <RCCEx_PLL3_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006516:	e005      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
      break;
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800652a:	4b4d      	ldr	r3, [pc, #308]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800652c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006536:	494a      	ldr	r1, [pc, #296]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006538:	4313      	orrs	r3, r2
 800653a:	650b      	str	r3, [r1, #80]	; 0x50
 800653c:	e001      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654a:	2b00      	cmp	r3, #0
 800654c:	d049      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006558:	d030      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800655a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800655e:	d82a      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006560:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006564:	d02c      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006566:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800656a:	d824      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800656c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006570:	d018      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006576:	d81e      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800657c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006580:	d007      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006582:	e018      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006584:	4b36      	ldr	r3, [pc, #216]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	4a35      	ldr	r2, [pc, #212]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800658a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006590:	e017      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f8fb 	bl	8007794 <RCCEx_PLL2_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065a2:	e00e      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3324      	adds	r3, #36	; 0x24
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 f9a4 	bl	80078f8 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065b4:	e005      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ba:	e002      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80065c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065d6:	4922      	ldr	r1, [pc, #136]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	658b      	str	r3, [r1, #88]	; 0x58
 80065dc:	e001      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04b      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065f8:	d030      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80065fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065fe:	d82a      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006600:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006604:	d02e      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006606:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800660a:	d824      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800660c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006610:	d018      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006616:	d81e      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800661c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006620:	d007      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006622:	e018      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006630:	e019      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f8ab 	bl	8007794 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006642:	e010      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f954 	bl	80078f8 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006654:	e007      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006660:	58024400 	.word	0x58024400
      break;
 8006664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800666c:	4b99      	ldr	r3, [pc, #612]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800667a:	4996      	ldr	r1, [pc, #600]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800667c:	4313      	orrs	r3, r2
 800667e:	658b      	str	r3, [r1, #88]	; 0x58
 8006680:	e001      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d032      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	2b30      	cmp	r3, #48	; 0x30
 8006698:	d01c      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800669a:	2b30      	cmp	r3, #48	; 0x30
 800669c:	d817      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d00c      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d813      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80066aa:	2b10      	cmp	r3, #16
 80066ac:	d10f      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ae:	4b89      	ldr	r3, [pc, #548]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a88      	ldr	r2, [pc, #544]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80066ba:	e00e      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f866 	bl	8007794 <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80066cc:	e005      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
      break;
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80066d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066e0:	4b7c      	ldr	r3, [pc, #496]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ec:	4979      	ldr	r1, [pc, #484]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066f2:	e001      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d047      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800670c:	d030      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800670e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006712:	d82a      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006718:	d02c      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800671a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800671e:	d824      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006724:	d018      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672a:	d81e      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d007      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006736:	e018      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006738:	4b66      	ldr	r3, [pc, #408]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	4a65      	ldr	r2, [pc, #404]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800673e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006744:	e017      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f821 	bl	8007794 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006756:	e00e      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3324      	adds	r3, #36	; 0x24
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f8ca 	bl	80078f8 <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006768:	e005      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	75fb      	strb	r3, [r7, #23]
      break;
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800677c:	4b55      	ldr	r3, [pc, #340]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006788:	4952      	ldr	r1, [pc, #328]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800678a:	4313      	orrs	r3, r2
 800678c:	650b      	str	r3, [r1, #80]	; 0x50
 800678e:	e001      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d049      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a8:	d02e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80067aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067ae:	d828      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80067b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067b4:	d02a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80067b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ba:	d822      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80067bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067c0:	d026      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80067c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067c6:	d81c      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80067c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067cc:	d010      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80067ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d2:	d816      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01d      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067dc:	d111      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2101      	movs	r1, #1
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 ffd5 	bl	8007794 <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80067ee:	e012      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	2101      	movs	r1, #1
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f87e 	bl	80078f8 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006800:	e009      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	e006      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006828:	492a      	ldr	r1, [pc, #168]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800682a:	4313      	orrs	r3, r2
 800682c:	650b      	str	r3, [r1, #80]	; 0x50
 800682e:	e001      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d04d      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800684a:	d02e      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800684c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006850:	d828      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006856:	d02a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d822      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800685e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006862:	d026      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006868:	d81c      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800686a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686e:	d010      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006874:	d816      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01d      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800687a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800687e:	d111      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f000 ff84 	bl	8007794 <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006890:	e012      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	2101      	movs	r1, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f001 f82d 	bl	80078f8 <RCCEx_PLL3_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068a2:	e009      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e006      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80068aa:	bf00      	nop
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80068b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068cc:	4901      	ldr	r1, [pc, #4]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	658b      	str	r3, [r1, #88]	; 0x58
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80068d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02f      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f0:	d00e      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d814      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d015      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80068fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006900:	d10f      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006902:	4baf      	ldr	r3, [pc, #700]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4aae      	ldr	r2, [pc, #696]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800690e:	e00c      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff3c 	bl	8007794 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006920:	e003      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	75fb      	strb	r3, [r7, #23]
      break;
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006930:	4ba3      	ldr	r3, [pc, #652]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693c:	49a0      	ldr	r1, [pc, #640]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800693e:	4313      	orrs	r3, r2
 8006940:	650b      	str	r3, [r1, #80]	; 0x50
 8006942:	e001      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d032      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	2b03      	cmp	r3, #3
 800695a:	d81b      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	0800699b 	.word	0x0800699b
 8006968:	08006975 	.word	0x08006975
 800696c:	08006983 	.word	0x08006983
 8006970:	0800699b 	.word	0x0800699b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b92      	ldr	r3, [pc, #584]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	4a91      	ldr	r2, [pc, #580]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006980:	e00c      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	2102      	movs	r1, #2
 8006988:	4618      	mov	r0, r3
 800698a:	f000 ff03 	bl	8007794 <RCCEx_PLL2_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006992:	e003      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
      break;
 8006998:	e000      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800699a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069a2:	4b87      	ldr	r3, [pc, #540]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a6:	f023 0203 	bic.w	r2, r3, #3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	4984      	ldr	r1, [pc, #528]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069b4:	e001      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8086 	beq.w	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c8:	4b7e      	ldr	r3, [pc, #504]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7d      	ldr	r2, [pc, #500]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80069ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069d4:	f7fc ff26 	bl	8003824 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069da:	e009      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fc ff22 	bl	8003824 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	; 0x64
 80069e8:	d902      	bls.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	75fb      	strb	r3, [r7, #23]
        break;
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069f0:	4b74      	ldr	r3, [pc, #464]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0ef      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d166      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a02:	4b6f      	ldr	r3, [pc, #444]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0c:	4053      	eors	r3, r2
 8006a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a16:	4b6a      	ldr	r3, [pc, #424]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a20:	4b67      	ldr	r3, [pc, #412]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	4a66      	ldr	r2, [pc, #408]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a2c:	4b64      	ldr	r3, [pc, #400]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	4a63      	ldr	r2, [pc, #396]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a38:	4a61      	ldr	r2, [pc, #388]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d115      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4a:	f7fc feeb 	bl	8003824 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a50:	e00b      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a52:	f7fc fee7 	bl	8003824 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d902      	bls.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	75fb      	strb	r3, [r7, #23]
            break;
 8006a68:	e005      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a6a:	4b55      	ldr	r3, [pc, #340]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ed      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d126      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a8a:	d10d      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006a8c:	4b4c      	ldr	r3, [pc, #304]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a9a:	0919      	lsrs	r1, r3, #4
 8006a9c:	4b4a      	ldr	r3, [pc, #296]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006a9e:	400b      	ands	r3, r1
 8006aa0:	4947      	ldr	r1, [pc, #284]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	610b      	str	r3, [r1, #16]
 8006aa6:	e005      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006aa8:	4b45      	ldr	r3, [pc, #276]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4a44      	ldr	r2, [pc, #272]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006aae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ab2:	6113      	str	r3, [r2, #16]
 8006ab4:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac2:	493f      	ldr	r1, [pc, #252]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	670b      	str	r3, [r1, #112]	; 0x70
 8006ac8:	e004      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	75bb      	strb	r3, [r7, #22]
 8006ace:	e001      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8085 	beq.w	8006bec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae6:	2b28      	cmp	r3, #40	; 0x28
 8006ae8:	d866      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006bcd 	.word	0x08006bcd
 8006af4:	08006bb9 	.word	0x08006bb9
 8006af8:	08006bb9 	.word	0x08006bb9
 8006afc:	08006bb9 	.word	0x08006bb9
 8006b00:	08006bb9 	.word	0x08006bb9
 8006b04:	08006bb9 	.word	0x08006bb9
 8006b08:	08006bb9 	.word	0x08006bb9
 8006b0c:	08006bb9 	.word	0x08006bb9
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006bb9 	.word	0x08006bb9
 8006b1c:	08006bb9 	.word	0x08006bb9
 8006b20:	08006bb9 	.word	0x08006bb9
 8006b24:	08006bb9 	.word	0x08006bb9
 8006b28:	08006bb9 	.word	0x08006bb9
 8006b2c:	08006bb9 	.word	0x08006bb9
 8006b30:	08006ba7 	.word	0x08006ba7
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006bb9 	.word	0x08006bb9
 8006b3c:	08006bb9 	.word	0x08006bb9
 8006b40:	08006bb9 	.word	0x08006bb9
 8006b44:	08006bb9 	.word	0x08006bb9
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006bcd 	.word	0x08006bcd
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006bb9 	.word	0x08006bb9
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006bb9 	.word	0x08006bb9
 8006b64:	08006bb9 	.word	0x08006bb9
 8006b68:	08006bb9 	.word	0x08006bb9
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006bb9 	.word	0x08006bb9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bb9 	.word	0x08006bb9
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	08006bcd 	.word	0x08006bcd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fdfa 	bl	8007794 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ba4:	e013      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2101      	movs	r1, #1
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fea3 	bl	80078f8 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bb6:	e00a      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e007      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	58024800 	.word	0x58024800
 8006bc8:	00ffffcf 	.word	0x00ffffcf
      break;
 8006bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bd4:	4b96      	ldr	r3, [pc, #600]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be0:	4993      	ldr	r1, [pc, #588]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	654b      	str	r3, [r1, #84]	; 0x54
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d038      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d821      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c4b 	.word	0x08006c4b
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c33 	.word	0x08006c33
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c4b 	.word	0x08006c4b
 8006c1c:	08006c4b 	.word	0x08006c4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	2101      	movs	r1, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fdb4 	bl	8007794 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c30:	e00c      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3324      	adds	r3, #36	; 0x24
 8006c36:	2101      	movs	r1, #1
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fe5d 	bl	80078f8 <RCCEx_PLL3_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c42:	e003      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
      break;
 8006c48:	e000      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c52:	4b77      	ldr	r3, [pc, #476]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5e:	4974      	ldr	r1, [pc, #464]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	654b      	str	r3, [r1, #84]	; 0x54
 8006c64:	e001      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d03a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	d821      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006ccb 	.word	0x08006ccb
 8006c8c:	08006ca1 	.word	0x08006ca1
 8006c90:	08006cb3 	.word	0x08006cb3
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	08006ccb 	.word	0x08006ccb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fd74 	bl	8007794 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cb0:	e00c      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fe1d 	bl	80078f8 <RCCEx_PLL3_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cd2:	4b57      	ldr	r3, [pc, #348]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	f023 0207 	bic.w	r2, r3, #7
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce0:	4953      	ldr	r1, [pc, #332]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce6:	e001      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d04b      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d02:	d02e      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d08:	d828      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d02a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d822      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d1a:	d026      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d20:	d81c      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d26:	d010      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2c:	d816      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01d      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d36:	d111      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fd28 	bl	8007794 <RCCEx_PLL2_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d48:	e012      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3324      	adds	r3, #36	; 0x24
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fdd1 	bl	80078f8 <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d5a:	e009      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d76:	4b2e      	ldr	r3, [pc, #184]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d84:	492a      	ldr	r1, [pc, #168]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	654b      	str	r3, [r1, #84]	; 0x54
 8006d8a:	e001      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d04d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006da6:	d02e      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006da8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dac:	d828      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db2:	d02a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db8:	d822      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbe:	d026      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc4:	d81c      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dca:	d010      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	d816      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01d      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dda:	d111      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fcd6 	bl	8007794 <RCCEx_PLL2_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006dec:	e012      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3324      	adds	r3, #36	; 0x24
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fd7f 	bl	80078f8 <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006dfe:	e009      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	e006      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006e06:	bf00      	nop
 8006e08:	e004      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10c      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e1a:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e28:	4901      	ldr	r1, [pc, #4]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e2e:	e003      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d04b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e4e:	d02e      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006e50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e54:	d828      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5a:	d02a      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e60:	d822      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006e62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e66:	d026      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006e68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e6c:	d81c      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e72:	d010      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e78:	d816      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01d      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e82:	d111      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fc82 	bl	8007794 <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e94:	e012      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fd2b 	bl	80078f8 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ea6:	e009      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e006      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e004      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ec2:	4b9d      	ldr	r3, [pc, #628]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ed0:	4999      	ldr	r1, [pc, #612]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ed6:	e001      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d10a      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fcfc 	bl	80078f8 <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f0a:	4b8b      	ldr	r3, [pc, #556]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f18:	4987      	ldr	r1, [pc, #540]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f34:	d10a      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3324      	adds	r3, #36	; 0x24
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fcdb 	bl	80078f8 <RCCEx_PLL3_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f4c:	4b7a      	ldr	r3, [pc, #488]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f5a:	4977      	ldr	r1, [pc, #476]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d034      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f76:	d01d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f7c:	d817      	bhi.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d009      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006f88:	e011      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fbff 	bl	8007794 <RCCEx_PLL2_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f9a:	e00c      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3324      	adds	r3, #36	; 0x24
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fca8 	bl	80078f8 <RCCEx_PLL3_Config>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fac:	e003      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fbc:	4b5e      	ldr	r3, [pc, #376]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fca:	495b      	ldr	r1, [pc, #364]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	658b      	str	r3, [r1, #88]	; 0x58
 8006fd0:	e001      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d033      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fec:	d01c      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ff2:	d816      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff8:	d003      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ffe:	d007      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007000:	e00f      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007002:	4b4d      	ldr	r3, [pc, #308]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	4a4c      	ldr	r2, [pc, #304]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800700e:	e00c      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3324      	adds	r3, #36	; 0x24
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fc6e 	bl	80078f8 <RCCEx_PLL3_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
      break;
 8007026:	e000      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007030:	4b41      	ldr	r3, [pc, #260]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703e:	493e      	ldr	r1, [pc, #248]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007040:	4313      	orrs	r3, r2
 8007042:	654b      	str	r3, [r1, #84]	; 0x54
 8007044:	e001      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d029      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800705e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007062:	d007      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007064:	e00f      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007066:	4b34      	ldr	r3, [pc, #208]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	4a33      	ldr	r2, [pc, #204]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800706c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007072:	e00b      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	2102      	movs	r1, #2
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fb8a 	bl	8007794 <RCCEx_PLL2_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007084:	e002      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
      break;
 800708a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007092:	4b29      	ldr	r3, [pc, #164]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	4926      	ldr	r1, [pc, #152]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070a4:	e001      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3324      	adds	r3, #36	; 0x24
 80070ba:	2102      	movs	r1, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fc1b 	bl	80078f8 <RCCEx_PLL3_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d033      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e0:	d017      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80070e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e6:	d811      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ec:	d013      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f2:	d80b      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d010      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	d106      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fe:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800710a:	e007      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800711a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712e:	4902      	ldr	r1, [pc, #8]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007130:	4313      	orrs	r3, r2
 8007132:	654b      	str	r3, [r1, #84]	; 0x54
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800714c:	4b31      	ldr	r3, [pc, #196]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	492e      	ldr	r1, [pc, #184]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800715a:	4313      	orrs	r3, r2
 800715c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007178:	4926      	ldr	r1, [pc, #152]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800717a:	4313      	orrs	r3, r2
 800717c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800718a:	4b22      	ldr	r3, [pc, #136]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007196:	491f      	ldr	r1, [pc, #124]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007198:	4313      	orrs	r3, r2
 800719a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071b2:	6113      	str	r3, [r2, #16]
 80071b4:	4b17      	ldr	r3, [pc, #92]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071be:	4915      	ldr	r1, [pc, #84]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da08      	bge.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071cc:	4b11      	ldr	r3, [pc, #68]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	490e      	ldr	r1, [pc, #56]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d009      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071ea:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f8:	4906      	ldr	r1, [pc, #24]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80071fe:	7dbb      	ldrb	r3, [r7, #22]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	58024400 	.word	0x58024400

08007218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800721c:	f7ff f85a 	bl	80062d4 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b06      	ldr	r3, [pc, #24]	; (800723c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	58024400 	.word	0x58024400
 8007240:	0800ecb4 	.word	0x0800ecb4

08007244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800724c:	4ba1      	ldr	r3, [pc, #644]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007256:	4b9f      	ldr	r3, [pc, #636]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	0b1b      	lsrs	r3, r3, #12
 800725c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007262:	4b9c      	ldr	r3, [pc, #624]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800726e:	4b99      	ldr	r3, [pc, #612]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	08db      	lsrs	r3, r3, #3
 8007274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8111 	beq.w	80074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f000 8083 	beq.w	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b02      	cmp	r3, #2
 800729e:	f200 80a1 	bhi.w	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d056      	beq.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ae:	e099      	b.n	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b0:	4b88      	ldr	r3, [pc, #544]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02d      	beq.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072bc:	4b85      	ldr	r3, [pc, #532]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	4a84      	ldr	r2, [pc, #528]	; (80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b7b      	ldr	r3, [pc, #492]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007316:	e087      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732a:	4b6a      	ldr	r3, [pc, #424]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733a:	ed97 6a03 	vldr	s12, [r7, #12]
 800733e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800735a:	e065      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736e:	4b59      	ldr	r3, [pc, #356]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007382:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800739e:	e043      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	4b48      	ldr	r3, [pc, #288]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073e2:	e021      	b.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f6:	4b37      	ldr	r3, [pc, #220]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a03 	vldr	s12, [r7, #12]
 800740a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007428:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	0a5b      	lsrs	r3, r3, #9
 800742e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800743e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007442:	edd7 6a07 	vldr	s13, [r7, #28]
 8007446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744e:	ee17 2a90 	vmov	r2, s15
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007456:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800746c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007470:	edd7 6a07 	vldr	s13, [r7, #28]
 8007474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747c:	ee17 2a90 	vmov	r2, s15
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800749a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749e:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074aa:	ee17 2a90 	vmov	r2, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074b2:	e008      	b.n	80074c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	bf00      	nop
 80074c8:	3724      	adds	r7, #36	; 0x24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	03d09000 	.word	0x03d09000
 80074dc:	46000000 	.word	0x46000000
 80074e0:	4c742400 	.word	0x4c742400
 80074e4:	4a742400 	.word	0x4a742400
 80074e8:	4af42400 	.word	0x4af42400

080074ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b089      	sub	sp, #36	; 0x24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074f4:	4ba1      	ldr	r3, [pc, #644]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80074fe:	4b9f      	ldr	r3, [pc, #636]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	0d1b      	lsrs	r3, r3, #20
 8007504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800750a:	4b9c      	ldr	r3, [pc, #624]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007516:	4b99      	ldr	r3, [pc, #612]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	08db      	lsrs	r3, r3, #3
 800751c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8111 	beq.w	800775c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b02      	cmp	r3, #2
 800753e:	f000 8083 	beq.w	8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b02      	cmp	r3, #2
 8007546:	f200 80a1 	bhi.w	800768c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d056      	beq.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007556:	e099      	b.n	800768c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007558:	4b88      	ldr	r3, [pc, #544]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02d      	beq.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007564:	4b85      	ldr	r3, [pc, #532]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	4a84      	ldr	r2, [pc, #528]	; (8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	4b7b      	ldr	r3, [pc, #492]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759e:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075be:	e087      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d2:	4b6a      	ldr	r3, [pc, #424]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007602:	e065      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007616:	4b59      	ldr	r3, [pc, #356]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	ed97 6a03 	vldr	s12, [r7, #12]
 800762a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007646:	e043      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	ed97 6a03 	vldr	s12, [r7, #12]
 800766e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800768a:	e021      	b.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800769a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769e:	4b37      	ldr	r3, [pc, #220]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	0a5b      	lsrs	r3, r3, #9
 80076d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f6:	ee17 2a90 	vmov	r2, s15
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007718:	edd7 6a07 	vldr	s13, [r7, #28]
 800771c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007724:	ee17 2a90 	vmov	r2, s15
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	0e1b      	lsrs	r3, r3, #24
 8007732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007746:	edd7 6a07 	vldr	s13, [r7, #28]
 800774a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007752:	ee17 2a90 	vmov	r2, s15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800775a:	e008      	b.n	800776e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	609a      	str	r2, [r3, #8]
}
 800776e:	bf00      	nop
 8007770:	3724      	adds	r7, #36	; 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
 8007780:	03d09000 	.word	0x03d09000
 8007784:	46000000 	.word	0x46000000
 8007788:	4c742400 	.word	0x4c742400
 800778c:	4a742400 	.word	0x4a742400
 8007790:	4af42400 	.word	0x4af42400

08007794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077a2:	4b53      	ldr	r3, [pc, #332]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d101      	bne.n	80077b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e099      	b.n	80078e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077b2:	4b4f      	ldr	r3, [pc, #316]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a4e      	ldr	r2, [pc, #312]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077be:	f7fc f831 	bl	8003824 <HAL_GetTick>
 80077c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077c4:	e008      	b.n	80077d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077c6:	f7fc f82d 	bl	8003824 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e086      	b.n	80078e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077d8:	4b45      	ldr	r3, [pc, #276]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1f0      	bne.n	80077c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	031b      	lsls	r3, r3, #12
 80077f2:	493f      	ldr	r1, [pc, #252]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	628b      	str	r3, [r1, #40]	; 0x28
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	3b01      	subs	r3, #1
 8007808:	025b      	lsls	r3, r3, #9
 800780a:	b29b      	uxth	r3, r3
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	3b01      	subs	r3, #1
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	3b01      	subs	r3, #1
 8007822:	061b      	lsls	r3, r3, #24
 8007824:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007828:	4931      	ldr	r1, [pc, #196]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800782a:	4313      	orrs	r3, r2
 800782c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800782e:	4b30      	ldr	r3, [pc, #192]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	492d      	ldr	r1, [pc, #180]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800783c:	4313      	orrs	r3, r2
 800783e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	f023 0220 	bic.w	r2, r3, #32
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	4928      	ldr	r1, [pc, #160]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007852:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007858:	f023 0310 	bic.w	r3, r3, #16
 800785c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800785e:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <RCCEx_PLL2_Config+0x160>)
 8007864:	4013      	ands	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	69d2      	ldr	r2, [r2, #28]
 800786a:	00d2      	lsls	r2, r2, #3
 800786c:	4920      	ldr	r1, [pc, #128]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800786e:	4313      	orrs	r3, r2
 8007870:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007872:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007878:	f043 0310 	orr.w	r3, r3, #16
 800787c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800788a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007890:	e00f      	b.n	80078b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d106      	bne.n	80078a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007898:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a14      	ldr	r2, [pc, #80]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 800789e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a4:	e005      	b.n	80078b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078b2:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078be:	f7fb ffb1 	bl	8003824 <HAL_GetTick>
 80078c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c4:	e008      	b.n	80078d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078c6:	f7fb ffad 	bl	8003824 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e006      	b.n	80078e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <RCCEx_PLL2_Config+0x15c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0f0      	beq.n	80078c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	58024400 	.word	0x58024400
 80078f4:	ffff0007 	.word	0xffff0007

080078f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007906:	4b53      	ldr	r3, [pc, #332]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d101      	bne.n	8007916 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e099      	b.n	8007a4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007916:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 800791c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007922:	f7fb ff7f 	bl	8003824 <HAL_GetTick>
 8007926:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007928:	e008      	b.n	800793c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800792a:	f7fb ff7b 	bl	8003824 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e086      	b.n	8007a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800793c:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007948:	4b42      	ldr	r3, [pc, #264]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	051b      	lsls	r3, r3, #20
 8007956:	493f      	ldr	r1, [pc, #252]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007958:	4313      	orrs	r3, r2
 800795a:	628b      	str	r3, [r1, #40]	; 0x28
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	3b01      	subs	r3, #1
 800796c:	025b      	lsls	r3, r3, #9
 800796e:	b29b      	uxth	r3, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	3b01      	subs	r3, #1
 8007978:	041b      	lsls	r3, r3, #16
 800797a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	3b01      	subs	r3, #1
 8007986:	061b      	lsls	r3, r3, #24
 8007988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800798c:	4931      	ldr	r1, [pc, #196]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007992:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	492d      	ldr	r1, [pc, #180]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079a4:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	4928      	ldr	r1, [pc, #160]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a26      	ldr	r2, [pc, #152]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079c2:	4b24      	ldr	r3, [pc, #144]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <RCCEx_PLL3_Config+0x160>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	69d2      	ldr	r2, [r2, #28]
 80079ce:	00d2      	lsls	r2, r2, #3
 80079d0:	4920      	ldr	r1, [pc, #128]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079d6:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079f4:	e00f      	b.n	8007a16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d106      	bne.n	8007a0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a08:	e005      	b.n	8007a16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a22:	f7fb feff 	bl	8003824 <HAL_GetTick>
 8007a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a28:	e008      	b.n	8007a3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a2a:	f7fb fefb 	bl	8003824 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e006      	b.n	8007a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f0      	beq.n	8007a2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	ffff0007 	.word	0xffff0007

08007a5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e0f1      	b.n	8007c52 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a78      	ldr	r2, [pc, #480]	; (8007c5c <HAL_SPI_Init+0x200>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <HAL_SPI_Init+0x42>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a77      	ldr	r2, [pc, #476]	; (8007c60 <HAL_SPI_Init+0x204>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00a      	beq.n	8007a9e <HAL_SPI_Init+0x42>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a75      	ldr	r2, [pc, #468]	; (8007c64 <HAL_SPI_Init+0x208>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d005      	beq.n	8007a9e <HAL_SPI_Init+0x42>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d901      	bls.n	8007a9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e0d9      	b.n	8007c52 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 ff66 	bl	8008970 <SPI_GetPacketSize>
 8007aa4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6c      	ldr	r2, [pc, #432]	; (8007c5c <HAL_SPI_Init+0x200>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00c      	beq.n	8007aca <HAL_SPI_Init+0x6e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6a      	ldr	r2, [pc, #424]	; (8007c60 <HAL_SPI_Init+0x204>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <HAL_SPI_Init+0x6e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a69      	ldr	r2, [pc, #420]	; (8007c64 <HAL_SPI_Init+0x208>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d002      	beq.n	8007aca <HAL_SPI_Init+0x6e>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d811      	bhi.n	8007aee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ace:	4a63      	ldr	r2, [pc, #396]	; (8007c5c <HAL_SPI_Init+0x200>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d009      	beq.n	8007ae8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a61      	ldr	r2, [pc, #388]	; (8007c60 <HAL_SPI_Init+0x204>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_SPI_Init+0x8c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a60      	ldr	r2, [pc, #384]	; (8007c64 <HAL_SPI_Init+0x208>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d104      	bne.n	8007af2 <HAL_SPI_Init+0x96>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d901      	bls.n	8007af2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e0af      	b.n	8007c52 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fb fb44 	bl	8003194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007b2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b38:	d119      	bne.n	8007b6e <HAL_SPI_Init+0x112>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b42:	d103      	bne.n	8007b4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5c:	d107      	bne.n	8007b6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69da      	ldr	r2, [r3, #28]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	431a      	orrs	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	ea42 0103 	orr.w	r1, r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	ea42 0103 	orr.w	r1, r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d113      	bne.n	8007c0e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40013000 	.word	0x40013000
 8007c60:	40003800 	.word	0x40003800
 8007c64:	40003c00 	.word	0x40003c00

08007c68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	4613      	mov	r3, r2
 8007c76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3320      	adds	r3, #32
 8007c7e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_SPI_Transmit+0x2a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e1d7      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c9a:	f7fb fdc3 	bl	8003824 <HAL_GetTick>
 8007c9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d007      	beq.n	8007cbc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007cac:	2302      	movs	r3, #2
 8007cae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007cb8:	7efb      	ldrb	r3, [r7, #27]
 8007cba:	e1c2      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_SPI_Transmit+0x60>
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007cd4:	7efb      	ldrb	r3, [r7, #27]
 8007cd6:	e1b4      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2203      	movs	r2, #3
 8007cdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	88fa      	ldrh	r2, [r7, #6]
 8007cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007d28:	d107      	bne.n	8007d3a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b96      	ldr	r3, [pc, #600]	; (8007f9c <HAL_SPI_Transmit+0x334>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	88f9      	ldrh	r1, [r7, #6]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0201 	orr.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d66:	d107      	bne.n	8007d78 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	2b0f      	cmp	r3, #15
 8007d7e:	d947      	bls.n	8007e10 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d80:	e03f      	b.n	8007e02 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d114      	bne.n	8007dba <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	1d1a      	adds	r2, r3, #4
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007db8:	e023      	b.n	8007e02 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dba:	f7fb fd33 	bl	8003824 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d803      	bhi.n	8007dd2 <HAL_SPI_Transmit+0x16a>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d102      	bne.n	8007dd8 <HAL_SPI_Transmit+0x170>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d114      	bne.n	8007e02 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fcfb 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e11f      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1b9      	bne.n	8007d82 <HAL_SPI_Transmit+0x11a>
 8007e0e:	e0f2      	b.n	8007ff6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b07      	cmp	r3, #7
 8007e16:	f240 80e7 	bls.w	8007fe8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007e1a:	e05d      	b.n	8007ed8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d132      	bne.n	8007e90 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d918      	bls.n	8007e68 <HAL_SPI_Transmit+0x200>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d014      	beq.n	8007e68 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b02      	subs	r3, #2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e66:	e037      	b.n	8007ed8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e8e:	e023      	b.n	8007ed8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e90:	f7fb fcc8 	bl	8003824 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d803      	bhi.n	8007ea8 <HAL_SPI_Transmit+0x240>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d102      	bne.n	8007eae <HAL_SPI_Transmit+0x246>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d114      	bne.n	8007ed8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fc90 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e0b4      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d19b      	bne.n	8007e1c <HAL_SPI_Transmit+0x1b4>
 8007ee4:	e087      	b.n	8007ff6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d155      	bne.n	8007fa0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d918      	bls.n	8007f32 <HAL_SPI_Transmit+0x2ca>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d914      	bls.n	8007f32 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6812      	ldr	r2, [r2, #0]
 8007f12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b04      	subs	r3, #4
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f30:	e05a      	b.n	8007fe8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d917      	bls.n	8007f6e <HAL_SPI_Transmit+0x306>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d013      	beq.n	8007f6e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f54:	1c9a      	adds	r2, r3, #2
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b02      	subs	r3, #2
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f6c:	e03c      	b.n	8007fe8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3320      	adds	r3, #32
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f98:	e026      	b.n	8007fe8 <HAL_SPI_Transmit+0x380>
 8007f9a:	bf00      	nop
 8007f9c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fa0:	f7fb fc40 	bl	8003824 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d803      	bhi.n	8007fb8 <HAL_SPI_Transmit+0x350>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb6:	d102      	bne.n	8007fbe <HAL_SPI_Transmit+0x356>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d114      	bne.n	8007fe8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fc08 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e02c      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f47f af78 	bne.w	8007ee6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2108      	movs	r1, #8
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fc87 	bl	8008914 <SPI_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fbd9 	bl	80087d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008040:	7efb      	ldrb	r3, [r7, #27]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop

0800804c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	; 0x28
 8008050:	af02      	add	r7, sp, #8
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3330      	adds	r3, #48	; 0x30
 8008066:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008070:	d112      	bne.n	8008098 <HAL_SPI_Receive+0x4c>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10e      	bne.n	8008098 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2204      	movs	r2, #4
 800807e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 f978 	bl	8008384 <HAL_SPI_TransmitReceive>
 8008094:	4603      	mov	r3, r0
 8008096:	e16f      	b.n	8008378 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_SPI_Receive+0x5a>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e168      	b.n	8008378 <HAL_SPI_Receive+0x32c>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080ae:	f7fb fbb9 	bl	8003824 <HAL_GetTick>
 80080b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d007      	beq.n	80080d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
 80080c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80080cc:	7ffb      	ldrb	r3, [r7, #31]
 80080ce:	e153      	b.n	8008378 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_SPI_Receive+0x90>
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80080e8:	7ffb      	ldrb	r3, [r7, #31]
 80080ea:	e145      	b.n	8008378 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	88fa      	ldrh	r2, [r7, #6]
 8008106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800813c:	d107      	bne.n	800814e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800814c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b8a      	ldr	r3, [pc, #552]	; (8008380 <HAL_SPI_Receive+0x334>)
 8008156:	4013      	ands	r3, r2
 8008158:	88f9      	ldrh	r1, [r7, #6]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	430b      	orrs	r3, r1
 8008160:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800817a:	d107      	bne.n	800818c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800818a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b0f      	cmp	r3, #15
 8008192:	d948      	bls.n	8008226 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008194:	e040      	b.n	8008218 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695a      	ldr	r2, [r3, #20]
 800819c:	f248 0308 	movw	r3, #32776	; 0x8008
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d014      	beq.n	80081d0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b6:	1d1a      	adds	r2, r3, #4
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081ce:	e023      	b.n	8008218 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081d0:	f7fb fb28 	bl	8003824 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d803      	bhi.n	80081e8 <HAL_SPI_Receive+0x19c>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d102      	bne.n	80081ee <HAL_SPI_Receive+0x1a2>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d114      	bne.n	8008218 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 faf0 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e0af      	b.n	8008378 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1b8      	bne.n	8008196 <HAL_SPI_Receive+0x14a>
 8008224:	e095      	b.n	8008352 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	2b07      	cmp	r3, #7
 800822c:	f240 808b 	bls.w	8008346 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008230:	e03f      	b.n	80082b2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d114      	bne.n	800826a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	8812      	ldrh	r2, [r2, #0]
 8008248:	b292      	uxth	r2, r2
 800824a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008250:	1c9a      	adds	r2, r3, #2
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008268:	e023      	b.n	80082b2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800826a:	f7fb fadb 	bl	8003824 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d803      	bhi.n	8008282 <HAL_SPI_Receive+0x236>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008280:	d102      	bne.n	8008288 <HAL_SPI_Receive+0x23c>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d114      	bne.n	80082b2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 faa3 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e062      	b.n	8008378 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1b9      	bne.n	8008232 <HAL_SPI_Receive+0x1e6>
 80082be:	e048      	b.n	8008352 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d117      	bne.n	80082fe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082fc:	e023      	b.n	8008346 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082fe:	f7fb fa91 	bl	8003824 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d803      	bhi.n	8008316 <HAL_SPI_Receive+0x2ca>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d102      	bne.n	800831c <HAL_SPI_Receive+0x2d0>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d114      	bne.n	8008346 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fa59 	bl	80087d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e018      	b.n	8008378 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1b6      	bne.n	80082c0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fa3e 	bl	80087d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8008376:	7ffb      	ldrb	r3, [r7, #31]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	ffff0000 	.word	0xffff0000

08008384 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	; 0x38
 8008388:	af02      	add	r7, sp, #8
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3320      	adds	r3, #32
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3330      	adds	r3, #48	; 0x30
 80083a6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_SPI_TransmitReceive+0x32>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e209      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083be:	f7fb fa31 	bl	8003824 <HAL_GetTick>
 80083c2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80083c4:	887b      	ldrh	r3, [r7, #2]
 80083c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80083c8:	887b      	ldrh	r3, [r7, #2]
 80083ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083da:	7efb      	ldrb	r3, [r7, #27]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d014      	beq.n	800840a <HAL_SPI_TransmitReceive+0x86>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e6:	d106      	bne.n	80083f6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80083f0:	7efb      	ldrb	r3, [r7, #27]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d009      	beq.n	800840a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80083f6:	2302      	movs	r3, #2
 80083f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008408:	e1df      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_SPI_TransmitReceive+0x98>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_SPI_TransmitReceive+0x98>
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d109      	bne.n	8008430 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800842a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800842e:	e1cc      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b04      	cmp	r3, #4
 800843a:	d003      	beq.n	8008444 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2205      	movs	r2, #5
 8008440:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	887a      	ldrh	r2, [r7, #2]
 8008456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	887a      	ldrh	r2, [r7, #2]
 800845e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	887a      	ldrh	r2, [r7, #2]
 800846c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	887a      	ldrh	r2, [r7, #2]
 8008474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	4b82      	ldr	r3, [pc, #520]	; (8008694 <HAL_SPI_TransmitReceive+0x310>)
 800848c:	4013      	ands	r3, r2
 800848e:	8879      	ldrh	r1, [r7, #2]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	430b      	orrs	r3, r1
 8008496:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b0:	d107      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d970      	bls.n	80085ac <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084ca:	e068      	b.n	800859e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d11a      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x18c>
 80084da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d017      	beq.n	8008510 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800850e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	f248 0308 	movw	r3, #32776	; 0x8008
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x1d2>
 8008520:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008530:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008542:	b29b      	uxth	r3, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008554:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008556:	f7fb f965 	bl	8003824 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008562:	429a      	cmp	r2, r3
 8008564:	d803      	bhi.n	800856e <HAL_SPI_TransmitReceive+0x1ea>
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d102      	bne.n	8008574 <HAL_SPI_TransmitReceive+0x1f0>
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d114      	bne.n	800859e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f92d 	bl	80087d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e115      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800859e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d193      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x148>
 80085a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d190      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x148>
 80085aa:	e0e7      	b.n	800877c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	f240 80dd 	bls.w	8008770 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80085b6:	e066      	b.n	8008686 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d119      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x276>
 80085c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d016      	beq.n	80085fa <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085da:	1c9a      	adds	r2, r3, #2
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b01      	cmp	r3, #1
 8008606:	d11a      	bne.n	800863e <HAL_SPI_TransmitReceive+0x2ba>
 8008608:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d017      	beq.n	800863e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008612:	6a3a      	ldr	r2, [r7, #32]
 8008614:	8812      	ldrh	r2, [r2, #0]
 8008616:	b292      	uxth	r2, r2
 8008618:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800861e:	1c9a      	adds	r2, r3, #2
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800863c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800863e:	f7fb f8f1 	bl	8003824 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800864a:	429a      	cmp	r2, r3
 800864c:	d803      	bhi.n	8008656 <HAL_SPI_TransmitReceive+0x2d2>
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d102      	bne.n	800865c <HAL_SPI_TransmitReceive+0x2d8>
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d114      	bne.n	8008686 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f8b9 	bl	80087d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e0a1      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008688:	2b00      	cmp	r3, #0
 800868a:	d195      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x234>
 800868c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d192      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x234>
 8008692:	e073      	b.n	800877c <HAL_SPI_TransmitReceive+0x3f8>
 8008694:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d11b      	bne.n	80086de <HAL_SPI_TransmitReceive+0x35a>
 80086a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d018      	beq.n	80086de <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3320      	adds	r3, #32
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d11d      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x3a4>
 80086ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01a      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29a      	uxth	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008726:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008728:	f7fb f87c 	bl	8003824 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008734:	429a      	cmp	r2, r3
 8008736:	d803      	bhi.n	8008740 <HAL_SPI_TransmitReceive+0x3bc>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d102      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x3c2>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	d114      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 f844 	bl	80087d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800875a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e02c      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008772:	2b00      	cmp	r3, #0
 8008774:	d190      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x314>
 8008776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d18d      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2200      	movs	r2, #0
 8008784:	2108      	movs	r1, #8
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f8c4 	bl	8008914 <SPI_WaitOnFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f816 	bl	80087d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e001      	b.n	80087ca <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80087c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3730      	adds	r7, #48	; 0x30
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop

080087d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0208 	orr.w	r2, r2, #8
 80087f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0210 	orr.w	r2, r2, #16
 8008802:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0201 	bic.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6919      	ldr	r1, [r3, #16]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b3c      	ldr	r3, [pc, #240]	; (8008910 <SPI_CloseTransfer+0x13c>)
 8008820:	400b      	ands	r3, r1
 8008822:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008832:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b04      	cmp	r3, #4
 800883e:	d014      	beq.n	800886a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00f      	beq.n	800886a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008850:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0220 	orr.w	r2, r2, #32
 8008868:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d014      	beq.n	80088a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00f      	beq.n	80088a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008886:	f043 0204 	orr.w	r2, r3, #4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800889e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00f      	beq.n	80088ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b0:	f043 0201 	orr.w	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00f      	beq.n	80088f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088da:	f043 0208 	orr.w	r2, r3, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008904:	bf00      	nop
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	fffffc90 	.word	0xfffffc90

08008914 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008924:	e010      	b.n	8008948 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008926:	f7fa ff7d 	bl	8003824 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	429a      	cmp	r2, r3
 8008934:	d803      	bhi.n	800893e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d102      	bne.n	8008944 <SPI_WaitOnFlagUntilTimeout+0x30>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e00f      	b.n	8008968 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695a      	ldr	r2, [r3, #20]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4013      	ands	r3, r2
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	bf0c      	ite	eq
 8008958:	2301      	moveq	r3, #1
 800895a:	2300      	movne	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	429a      	cmp	r2, r3
 8008964:	d0df      	beq.n	8008926 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	3301      	adds	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	3301      	adds	r3, #1
 8008988:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3307      	adds	r3, #7
 800898e:	08db      	lsrs	r3, r3, #3
 8008990:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	fb02 f303 	mul.w	r3, r2, r3
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e049      	b.n	8008a4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fa fc47 	bl	8003260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f000 fcf9 	bl	80093dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e049      	b.n	8008afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fa fc30 	bl	80032e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f000 fca2 	bl	80093dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <HAL_TIM_PWM_Start+0x24>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	bf14      	ite	ne
 8008b20:	2301      	movne	r3, #1
 8008b22:	2300      	moveq	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e03c      	b.n	8008ba2 <HAL_TIM_PWM_Start+0x9e>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d109      	bne.n	8008b42 <HAL_TIM_PWM_Start+0x3e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	e02f      	b.n	8008ba2 <HAL_TIM_PWM_Start+0x9e>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d109      	bne.n	8008b5c <HAL_TIM_PWM_Start+0x58>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	bf14      	ite	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	2300      	moveq	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	e022      	b.n	8008ba2 <HAL_TIM_PWM_Start+0x9e>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b0c      	cmp	r3, #12
 8008b60:	d109      	bne.n	8008b76 <HAL_TIM_PWM_Start+0x72>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	bf14      	ite	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	2300      	moveq	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	e015      	b.n	8008ba2 <HAL_TIM_PWM_Start+0x9e>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d109      	bne.n	8008b90 <HAL_TIM_PWM_Start+0x8c>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	bf14      	ite	ne
 8008b88:	2301      	movne	r3, #1
 8008b8a:	2300      	moveq	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	e008      	b.n	8008ba2 <HAL_TIM_PWM_Start+0x9e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	bf14      	ite	ne
 8008b9c:	2301      	movne	r3, #1
 8008b9e:	2300      	moveq	r3, #0
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e0a1      	b.n	8008cee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <HAL_TIM_PWM_Start+0xb6>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb8:	e023      	b.n	8008c02 <HAL_TIM_PWM_Start+0xfe>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d104      	bne.n	8008bca <HAL_TIM_PWM_Start+0xc6>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bc8:	e01b      	b.n	8008c02 <HAL_TIM_PWM_Start+0xfe>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_PWM_Start+0xd6>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd8:	e013      	b.n	8008c02 <HAL_TIM_PWM_Start+0xfe>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b0c      	cmp	r3, #12
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Start+0xe6>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008be8:	e00b      	b.n	8008c02 <HAL_TIM_PWM_Start+0xfe>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b10      	cmp	r3, #16
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start+0xf6>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bf8:	e003      	b.n	8008c02 <HAL_TIM_PWM_Start+0xfe>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2201      	movs	r2, #1
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fff4 	bl	8009bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a38      	ldr	r2, [pc, #224]	; (8008cf8 <HAL_TIM_PWM_Start+0x1f4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x13e>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a37      	ldr	r2, [pc, #220]	; (8008cfc <HAL_TIM_PWM_Start+0x1f8>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00e      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x13e>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a35      	ldr	r2, [pc, #212]	; (8008d00 <HAL_TIM_PWM_Start+0x1fc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d009      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x13e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a34      	ldr	r2, [pc, #208]	; (8008d04 <HAL_TIM_PWM_Start+0x200>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d004      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x13e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a32      	ldr	r2, [pc, #200]	; (8008d08 <HAL_TIM_PWM_Start+0x204>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_PWM_Start+0x142>
 8008c42:	2301      	movs	r3, #1
 8008c44:	e000      	b.n	8008c48 <HAL_TIM_PWM_Start+0x144>
 8008c46:	2300      	movs	r3, #0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a25      	ldr	r2, [pc, #148]	; (8008cf8 <HAL_TIM_PWM_Start+0x1f4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d022      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6e:	d01d      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a25      	ldr	r2, [pc, #148]	; (8008d0c <HAL_TIM_PWM_Start+0x208>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d018      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a24      	ldr	r2, [pc, #144]	; (8008d10 <HAL_TIM_PWM_Start+0x20c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d013      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a22      	ldr	r2, [pc, #136]	; (8008d14 <HAL_TIM_PWM_Start+0x210>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00e      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <HAL_TIM_PWM_Start+0x1f8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d009      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <HAL_TIM_PWM_Start+0x214>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d004      	beq.n	8008cac <HAL_TIM_PWM_Start+0x1a8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <HAL_TIM_PWM_Start+0x1fc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d115      	bne.n	8008cd8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <HAL_TIM_PWM_Start+0x218>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b06      	cmp	r3, #6
 8008cbc:	d015      	beq.n	8008cea <HAL_TIM_PWM_Start+0x1e6>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc4:	d011      	beq.n	8008cea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 0201 	orr.w	r2, r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd6:	e008      	b.n	8008cea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0201 	orr.w	r2, r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e000      	b.n	8008cec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	40010000 	.word	0x40010000
 8008cfc:	40010400 	.word	0x40010400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40001800 	.word	0x40001800
 8008d1c:	00010007 	.word	0x00010007

08008d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d122      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d11b      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0202 	mvn.w	r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fb1c 	bl	80093a0 <HAL_TIM_IC_CaptureCallback>
 8008d68:	e005      	b.n	8008d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fb0e 	bl	800938c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb1f 	bl	80093b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d122      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d11b      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0204 	mvn.w	r2, #4
 8008da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2202      	movs	r2, #2
 8008da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 faf2 	bl	80093a0 <HAL_TIM_IC_CaptureCallback>
 8008dbc:	e005      	b.n	8008dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fae4 	bl	800938c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 faf5 	bl	80093b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d122      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d11b      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0208 	mvn.w	r2, #8
 8008df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fac8 	bl	80093a0 <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 faba 	bl	800938c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 facb 	bl	80093b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0210 	mvn.w	r2, #16
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa9e 	bl	80093a0 <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa90 	bl	800938c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 faa1 	bl	80093b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10e      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d107      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0201 	mvn.w	r2, #1
 8008e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa6a 	bl	8009378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b80      	cmp	r3, #128	; 0x80
 8008eb0:	d10e      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b80      	cmp	r3, #128	; 0x80
 8008ebe:	d107      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 ffd0 	bl	8009e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ede:	d10e      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b80      	cmp	r3, #128	; 0x80
 8008eec:	d107      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 ffc3 	bl	8009e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d10e      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa4f 	bl	80093c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0220 	mvn.w	r2, #32
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 ff83 	bl	8009e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e0ff      	b.n	800917e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b14      	cmp	r3, #20
 8008f8a:	f200 80f0 	bhi.w	800916e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fe9 	.word	0x08008fe9
 8008f98:	0800916f 	.word	0x0800916f
 8008f9c:	0800916f 	.word	0x0800916f
 8008fa0:	0800916f 	.word	0x0800916f
 8008fa4:	08009029 	.word	0x08009029
 8008fa8:	0800916f 	.word	0x0800916f
 8008fac:	0800916f 	.word	0x0800916f
 8008fb0:	0800916f 	.word	0x0800916f
 8008fb4:	0800906b 	.word	0x0800906b
 8008fb8:	0800916f 	.word	0x0800916f
 8008fbc:	0800916f 	.word	0x0800916f
 8008fc0:	0800916f 	.word	0x0800916f
 8008fc4:	080090ab 	.word	0x080090ab
 8008fc8:	0800916f 	.word	0x0800916f
 8008fcc:	0800916f 	.word	0x0800916f
 8008fd0:	0800916f 	.word	0x0800916f
 8008fd4:	080090ed 	.word	0x080090ed
 8008fd8:	0800916f 	.word	0x0800916f
 8008fdc:	0800916f 	.word	0x0800916f
 8008fe0:	0800916f 	.word	0x0800916f
 8008fe4:	0800912d 	.word	0x0800912d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fa8e 	bl	8009510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0208 	orr.w	r2, r2, #8
 8009002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0204 	bic.w	r2, r2, #4
 8009012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6999      	ldr	r1, [r3, #24]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	619a      	str	r2, [r3, #24]
      break;
 8009026:	e0a5      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68b9      	ldr	r1, [r7, #8]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fafe 	bl	8009630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6999      	ldr	r1, [r3, #24]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	021a      	lsls	r2, r3, #8
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	619a      	str	r2, [r3, #24]
      break;
 8009068:	e084      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fb67 	bl	8009744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69da      	ldr	r2, [r3, #28]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f042 0208 	orr.w	r2, r2, #8
 8009084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0204 	bic.w	r2, r2, #4
 8009094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69d9      	ldr	r1, [r3, #28]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	61da      	str	r2, [r3, #28]
      break;
 80090a8:	e064      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fbcf 	bl	8009854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69d9      	ldr	r1, [r3, #28]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	021a      	lsls	r2, r3, #8
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	61da      	str	r2, [r3, #28]
      break;
 80090ea:	e043      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fc18 	bl	8009928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0208 	orr.w	r2, r2, #8
 8009106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0204 	bic.w	r2, r2, #4
 8009116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800912a:	e023      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fc5c 	bl	80099f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	021a      	lsls	r2, r3, #8
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800916c:	e002      	b.n	8009174 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
      break;
 8009172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop

08009188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_TIM_ConfigClockSource+0x1c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e0dc      	b.n	800935e <HAL_TIM_ConfigClockSource+0x1d6>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	4b6a      	ldr	r3, [pc, #424]	; (8009368 <HAL_TIM_ConfigClockSource+0x1e0>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a64      	ldr	r2, [pc, #400]	; (800936c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	f000 80a9 	beq.w	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 80091e0:	4a62      	ldr	r2, [pc, #392]	; (800936c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	f200 80ae 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 80091e8:	4a61      	ldr	r2, [pc, #388]	; (8009370 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	f000 80a1 	beq.w	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 80091f0:	4a5f      	ldr	r2, [pc, #380]	; (8009370 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f200 80a6 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 80091f8:	4a5e      	ldr	r2, [pc, #376]	; (8009374 <HAL_TIM_ConfigClockSource+0x1ec>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	f000 8099 	beq.w	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009200:	4a5c      	ldr	r2, [pc, #368]	; (8009374 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009202:	4293      	cmp	r3, r2
 8009204:	f200 809e 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009208:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800920c:	f000 8091 	beq.w	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009214:	f200 8096 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800921c:	f000 8089 	beq.w	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009224:	f200 808e 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800922c:	d03e      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x124>
 800922e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009232:	f200 8087 	bhi.w	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923a:	f000 8086 	beq.w	800934a <HAL_TIM_ConfigClockSource+0x1c2>
 800923e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009242:	d87f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009244:	2b70      	cmp	r3, #112	; 0x70
 8009246:	d01a      	beq.n	800927e <HAL_TIM_ConfigClockSource+0xf6>
 8009248:	2b70      	cmp	r3, #112	; 0x70
 800924a:	d87b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 800924c:	2b60      	cmp	r3, #96	; 0x60
 800924e:	d050      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x16a>
 8009250:	2b60      	cmp	r3, #96	; 0x60
 8009252:	d877      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009254:	2b50      	cmp	r3, #80	; 0x50
 8009256:	d03c      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x14a>
 8009258:	2b50      	cmp	r3, #80	; 0x50
 800925a:	d873      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d058      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x18a>
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d86f      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009264:	2b30      	cmp	r3, #48	; 0x30
 8009266:	d064      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009268:	2b30      	cmp	r3, #48	; 0x30
 800926a:	d86b      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 800926c:	2b20      	cmp	r3, #32
 800926e:	d060      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009270:	2b20      	cmp	r3, #32
 8009272:	d867      	bhi.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d05c      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 8009278:	2b10      	cmp	r3, #16
 800927a:	d05a      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x1aa>
 800927c:	e062      	b.n	8009344 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6899      	ldr	r1, [r3, #8]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f000 fc93 	bl	8009bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	609a      	str	r2, [r3, #8]
      break;
 80092aa:	e04f      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f000 fc7c 	bl	8009bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ce:	609a      	str	r2, [r3, #8]
      break;
 80092d0:	e03c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	461a      	mov	r2, r3
 80092e0:	f000 fbec 	bl	8009abc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2150      	movs	r1, #80	; 0x50
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fc46 	bl	8009b7c <TIM_ITRx_SetConfig>
      break;
 80092f0:	e02c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	461a      	mov	r2, r3
 8009300:	f000 fc0b 	bl	8009b1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2160      	movs	r1, #96	; 0x60
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fc36 	bl	8009b7c <TIM_ITRx_SetConfig>
      break;
 8009310:	e01c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	461a      	mov	r2, r3
 8009320:	f000 fbcc 	bl	8009abc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2140      	movs	r1, #64	; 0x40
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fc26 	bl	8009b7c <TIM_ITRx_SetConfig>
      break;
 8009330:	e00c      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f000 fc1d 	bl	8009b7c <TIM_ITRx_SetConfig>
      break;
 8009342:	e003      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
      break;
 8009348:	e000      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800934a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	ffceff88 	.word	0xffceff88
 800936c:	00100040 	.word	0x00100040
 8009370:	00100030 	.word	0x00100030
 8009374:	00100020 	.word	0x00100020

08009378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a40      	ldr	r2, [pc, #256]	; (80094f0 <TIM_Base_SetConfig+0x114>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d013      	beq.n	800941c <TIM_Base_SetConfig+0x40>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fa:	d00f      	beq.n	800941c <TIM_Base_SetConfig+0x40>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a3d      	ldr	r2, [pc, #244]	; (80094f4 <TIM_Base_SetConfig+0x118>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00b      	beq.n	800941c <TIM_Base_SetConfig+0x40>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a3c      	ldr	r2, [pc, #240]	; (80094f8 <TIM_Base_SetConfig+0x11c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d007      	beq.n	800941c <TIM_Base_SetConfig+0x40>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a3b      	ldr	r2, [pc, #236]	; (80094fc <TIM_Base_SetConfig+0x120>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d003      	beq.n	800941c <TIM_Base_SetConfig+0x40>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a3a      	ldr	r2, [pc, #232]	; (8009500 <TIM_Base_SetConfig+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d108      	bne.n	800942e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a2f      	ldr	r2, [pc, #188]	; (80094f0 <TIM_Base_SetConfig+0x114>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01f      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943c:	d01b      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2c      	ldr	r2, [pc, #176]	; (80094f4 <TIM_Base_SetConfig+0x118>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d017      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2b      	ldr	r2, [pc, #172]	; (80094f8 <TIM_Base_SetConfig+0x11c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <TIM_Base_SetConfig+0x120>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00f      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a29      	ldr	r2, [pc, #164]	; (8009500 <TIM_Base_SetConfig+0x124>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00b      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a28      	ldr	r2, [pc, #160]	; (8009504 <TIM_Base_SetConfig+0x128>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d007      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a27      	ldr	r2, [pc, #156]	; (8009508 <TIM_Base_SetConfig+0x12c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d003      	beq.n	8009476 <TIM_Base_SetConfig+0x9a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a26      	ldr	r2, [pc, #152]	; (800950c <TIM_Base_SetConfig+0x130>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d108      	bne.n	8009488 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a10      	ldr	r2, [pc, #64]	; (80094f0 <TIM_Base_SetConfig+0x114>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00f      	beq.n	80094d4 <TIM_Base_SetConfig+0xf8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a12      	ldr	r2, [pc, #72]	; (8009500 <TIM_Base_SetConfig+0x124>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00b      	beq.n	80094d4 <TIM_Base_SetConfig+0xf8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a11      	ldr	r2, [pc, #68]	; (8009504 <TIM_Base_SetConfig+0x128>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d007      	beq.n	80094d4 <TIM_Base_SetConfig+0xf8>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a10      	ldr	r2, [pc, #64]	; (8009508 <TIM_Base_SetConfig+0x12c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d003      	beq.n	80094d4 <TIM_Base_SetConfig+0xf8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a0f      	ldr	r2, [pc, #60]	; (800950c <TIM_Base_SetConfig+0x130>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d103      	bne.n	80094dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	615a      	str	r2, [r3, #20]
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	40010000 	.word	0x40010000
 80094f4:	40000400 	.word	0x40000400
 80094f8:	40000800 	.word	0x40000800
 80094fc:	40000c00 	.word	0x40000c00
 8009500:	40010400 	.word	0x40010400
 8009504:	40014000 	.word	0x40014000
 8009508:	40014400 	.word	0x40014400
 800950c:	40014800 	.word	0x40014800

08009510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4b37      	ldr	r3, [pc, #220]	; (8009618 <TIM_OC1_SetConfig+0x108>)
 800953c:	4013      	ands	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 0302 	bic.w	r3, r3, #2
 8009558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a2d      	ldr	r2, [pc, #180]	; (800961c <TIM_OC1_SetConfig+0x10c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00f      	beq.n	800958c <TIM_OC1_SetConfig+0x7c>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a2c      	ldr	r2, [pc, #176]	; (8009620 <TIM_OC1_SetConfig+0x110>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00b      	beq.n	800958c <TIM_OC1_SetConfig+0x7c>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a2b      	ldr	r2, [pc, #172]	; (8009624 <TIM_OC1_SetConfig+0x114>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d007      	beq.n	800958c <TIM_OC1_SetConfig+0x7c>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a2a      	ldr	r2, [pc, #168]	; (8009628 <TIM_OC1_SetConfig+0x118>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_OC1_SetConfig+0x7c>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a29      	ldr	r2, [pc, #164]	; (800962c <TIM_OC1_SetConfig+0x11c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10c      	bne.n	80095a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 0308 	bic.w	r3, r3, #8
 8009592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	4313      	orrs	r3, r2
 800959c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f023 0304 	bic.w	r3, r3, #4
 80095a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a1c      	ldr	r2, [pc, #112]	; (800961c <TIM_OC1_SetConfig+0x10c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00f      	beq.n	80095ce <TIM_OC1_SetConfig+0xbe>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a1b      	ldr	r2, [pc, #108]	; (8009620 <TIM_OC1_SetConfig+0x110>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00b      	beq.n	80095ce <TIM_OC1_SetConfig+0xbe>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a1a      	ldr	r2, [pc, #104]	; (8009624 <TIM_OC1_SetConfig+0x114>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d007      	beq.n	80095ce <TIM_OC1_SetConfig+0xbe>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a19      	ldr	r2, [pc, #100]	; (8009628 <TIM_OC1_SetConfig+0x118>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d003      	beq.n	80095ce <TIM_OC1_SetConfig+0xbe>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a18      	ldr	r2, [pc, #96]	; (800962c <TIM_OC1_SetConfig+0x11c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d111      	bne.n	80095f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	621a      	str	r2, [r3, #32]
}
 800960c:	bf00      	nop
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	fffeff8f 	.word	0xfffeff8f
 800961c:	40010000 	.word	0x40010000
 8009620:	40010400 	.word	0x40010400
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0210 	bic.w	r2, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4b34      	ldr	r3, [pc, #208]	; (800972c <TIM_OC2_SetConfig+0xfc>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0320 	bic.w	r3, r3, #32
 800967a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a29      	ldr	r2, [pc, #164]	; (8009730 <TIM_OC2_SetConfig+0x100>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d003      	beq.n	8009698 <TIM_OC2_SetConfig+0x68>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a28      	ldr	r2, [pc, #160]	; (8009734 <TIM_OC2_SetConfig+0x104>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d10d      	bne.n	80096b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800969e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	011b      	lsls	r3, r3, #4
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a1e      	ldr	r2, [pc, #120]	; (8009730 <TIM_OC2_SetConfig+0x100>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00f      	beq.n	80096dc <TIM_OC2_SetConfig+0xac>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a1d      	ldr	r2, [pc, #116]	; (8009734 <TIM_OC2_SetConfig+0x104>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d00b      	beq.n	80096dc <TIM_OC2_SetConfig+0xac>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a1c      	ldr	r2, [pc, #112]	; (8009738 <TIM_OC2_SetConfig+0x108>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d007      	beq.n	80096dc <TIM_OC2_SetConfig+0xac>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a1b      	ldr	r2, [pc, #108]	; (800973c <TIM_OC2_SetConfig+0x10c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_OC2_SetConfig+0xac>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a1a      	ldr	r2, [pc, #104]	; (8009740 <TIM_OC2_SetConfig+0x110>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d113      	bne.n	8009704 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	621a      	str	r2, [r3, #32]
}
 800971e:	bf00      	nop
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	feff8fff 	.word	0xfeff8fff
 8009730:	40010000 	.word	0x40010000
 8009734:	40010400 	.word	0x40010400
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800

08009744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4b33      	ldr	r3, [pc, #204]	; (800983c <TIM_OC3_SetConfig+0xf8>)
 8009770:	4013      	ands	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800978c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a28      	ldr	r2, [pc, #160]	; (8009840 <TIM_OC3_SetConfig+0xfc>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_OC3_SetConfig+0x66>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a27      	ldr	r2, [pc, #156]	; (8009844 <TIM_OC3_SetConfig+0x100>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d10d      	bne.n	80097c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a1d      	ldr	r2, [pc, #116]	; (8009840 <TIM_OC3_SetConfig+0xfc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00f      	beq.n	80097ee <TIM_OC3_SetConfig+0xaa>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a1c      	ldr	r2, [pc, #112]	; (8009844 <TIM_OC3_SetConfig+0x100>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00b      	beq.n	80097ee <TIM_OC3_SetConfig+0xaa>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <TIM_OC3_SetConfig+0x104>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d007      	beq.n	80097ee <TIM_OC3_SetConfig+0xaa>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a1a      	ldr	r2, [pc, #104]	; (800984c <TIM_OC3_SetConfig+0x108>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_OC3_SetConfig+0xaa>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a19      	ldr	r2, [pc, #100]	; (8009850 <TIM_OC3_SetConfig+0x10c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d113      	bne.n	8009816 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	fffeff8f 	.word	0xfffeff8f
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400
 8009848:	40014000 	.word	0x40014000
 800984c:	40014400 	.word	0x40014400
 8009850:	40014800 	.word	0x40014800

08009854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4b24      	ldr	r3, [pc, #144]	; (8009910 <TIM_OC4_SetConfig+0xbc>)
 8009880:	4013      	ands	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800988a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	021b      	lsls	r3, r3, #8
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	4313      	orrs	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800989e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	031b      	lsls	r3, r3, #12
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a19      	ldr	r2, [pc, #100]	; (8009914 <TIM_OC4_SetConfig+0xc0>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00f      	beq.n	80098d4 <TIM_OC4_SetConfig+0x80>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <TIM_OC4_SetConfig+0xc4>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00b      	beq.n	80098d4 <TIM_OC4_SetConfig+0x80>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a17      	ldr	r2, [pc, #92]	; (800991c <TIM_OC4_SetConfig+0xc8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d007      	beq.n	80098d4 <TIM_OC4_SetConfig+0x80>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a16      	ldr	r2, [pc, #88]	; (8009920 <TIM_OC4_SetConfig+0xcc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC4_SetConfig+0x80>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a15      	ldr	r2, [pc, #84]	; (8009924 <TIM_OC4_SetConfig+0xd0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d109      	bne.n	80098e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	019b      	lsls	r3, r3, #6
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	621a      	str	r2, [r3, #32]
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	feff8fff 	.word	0xfeff8fff
 8009914:	40010000 	.word	0x40010000
 8009918:	40010400 	.word	0x40010400
 800991c:	40014000 	.word	0x40014000
 8009920:	40014400 	.word	0x40014400
 8009924:	40014800 	.word	0x40014800

08009928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4b21      	ldr	r3, [pc, #132]	; (80099d8 <TIM_OC5_SetConfig+0xb0>)
 8009954:	4013      	ands	r3, r2
 8009956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009968:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a18      	ldr	r2, [pc, #96]	; (80099dc <TIM_OC5_SetConfig+0xb4>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d00f      	beq.n	800999e <TIM_OC5_SetConfig+0x76>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a17      	ldr	r2, [pc, #92]	; (80099e0 <TIM_OC5_SetConfig+0xb8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00b      	beq.n	800999e <TIM_OC5_SetConfig+0x76>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a16      	ldr	r2, [pc, #88]	; (80099e4 <TIM_OC5_SetConfig+0xbc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d007      	beq.n	800999e <TIM_OC5_SetConfig+0x76>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a15      	ldr	r2, [pc, #84]	; (80099e8 <TIM_OC5_SetConfig+0xc0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d003      	beq.n	800999e <TIM_OC5_SetConfig+0x76>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a14      	ldr	r2, [pc, #80]	; (80099ec <TIM_OC5_SetConfig+0xc4>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d109      	bne.n	80099b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	621a      	str	r2, [r3, #32]
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	fffeff8f 	.word	0xfffeff8f
 80099dc:	40010000 	.word	0x40010000
 80099e0:	40010400 	.word	0x40010400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40014400 	.word	0x40014400
 80099ec:	40014800 	.word	0x40014800

080099f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <TIM_OC6_SetConfig+0xb4>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	051b      	lsls	r3, r3, #20
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a19      	ldr	r2, [pc, #100]	; (8009aa8 <TIM_OC6_SetConfig+0xb8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00f      	beq.n	8009a68 <TIM_OC6_SetConfig+0x78>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a18      	ldr	r2, [pc, #96]	; (8009aac <TIM_OC6_SetConfig+0xbc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00b      	beq.n	8009a68 <TIM_OC6_SetConfig+0x78>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a17      	ldr	r2, [pc, #92]	; (8009ab0 <TIM_OC6_SetConfig+0xc0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d007      	beq.n	8009a68 <TIM_OC6_SetConfig+0x78>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a16      	ldr	r2, [pc, #88]	; (8009ab4 <TIM_OC6_SetConfig+0xc4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d003      	beq.n	8009a68 <TIM_OC6_SetConfig+0x78>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <TIM_OC6_SetConfig+0xc8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d109      	bne.n	8009a7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	029b      	lsls	r3, r3, #10
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	621a      	str	r2, [r3, #32]
}
 8009a96:	bf00      	nop
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	feff8fff 	.word	0xfeff8fff
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40014000 	.word	0x40014000
 8009ab4:	40014400 	.word	0x40014400
 8009ab8:	40014800 	.word	0x40014800

08009abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	f023 0201 	bic.w	r2, r3, #1
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f023 030a 	bic.w	r3, r3, #10
 8009af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	621a      	str	r2, [r3, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b087      	sub	sp, #28
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f023 0210 	bic.w	r2, r3, #16
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	031b      	lsls	r3, r3, #12
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	621a      	str	r2, [r3, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
	...

08009b7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <TIM_ITRx_SetConfig+0x38>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	f043 0307 	orr.w	r3, r3, #7
 8009b9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	609a      	str	r2, [r3, #8]
}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	ffcfff8f 	.word	0xffcfff8f

08009bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	609a      	str	r2, [r3, #8]
}
 8009bec:	bf00      	nop
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a1a      	ldr	r2, [r3, #32]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	401a      	ands	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 031f 	and.w	r3, r3, #31
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c30:	431a      	orrs	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e06d      	b.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a30      	ldr	r2, [pc, #192]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d004      	beq.n	8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a2f      	ldr	r2, [pc, #188]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d108      	bne.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d022      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d01d      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1d      	ldr	r2, [pc, #116]	; (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a1c      	ldr	r2, [pc, #112]	; (8009d50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1a      	ldr	r2, [pc, #104]	; (8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a16      	ldr	r2, [pc, #88]	; (8009d58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a15      	ldr	r2, [pc, #84]	; (8009d5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d10c      	bne.n	8009d26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40010400 	.word	0x40010400
 8009d4c:	40000400 	.word	0x40000400
 8009d50:	40000800 	.word	0x40000800
 8009d54:	40000c00 	.word	0x40000c00
 8009d58:	40001800 	.word	0x40001800
 8009d5c:	40014000 	.word	0x40014000

08009d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e065      	b.n	8009e48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a16      	ldr	r2, [pc, #88]	; (8009e54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d004      	beq.n	8009e0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a14      	ldr	r2, [pc, #80]	; (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d115      	bne.n	8009e36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	051b      	lsls	r3, r3, #20
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	40010000 	.word	0x40010000
 8009e58:	40010400 	.word	0x40010400

08009e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e042      	b.n	8009f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7f9 fa95 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2224      	movs	r2, #36	; 0x24
 8009ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f8c2 	bl	800a064 <UART_SetConfig>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d101      	bne.n	8009eea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e022      	b.n	8009f30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fe1e 	bl	800ab34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fea5 	bl	800ac78 <UART_CheckIdleState>
 8009f2e:	4603      	mov	r3, r0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	; 0x28
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	4613      	mov	r3, r2
 8009f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	f040 8083 	bne.w	800a05a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <HAL_UART_Transmit+0x28>
 8009f5a:	88fb      	ldrh	r3, [r7, #6]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e07b      	b.n	800a05c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_UART_Transmit+0x3a>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e074      	b.n	800a05c <HAL_UART_Transmit+0x124>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2221      	movs	r2, #33	; 0x21
 8009f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f8a:	f7f9 fc4b 	bl	8003824 <HAL_GetTick>
 8009f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	88fa      	ldrh	r2, [r7, #6]
 8009f9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa8:	d108      	bne.n	8009fbc <HAL_UART_Transmit+0x84>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	e003      	b.n	8009fc4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009fcc:	e02c      	b.n	800a028 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2180      	movs	r1, #128	; 0x80
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fe98 	bl	800ad0e <UART_WaitOnFlagUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e039      	b.n	800a05c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ffc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	3302      	adds	r3, #2
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	e007      	b.n	800a016 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	3301      	adds	r3, #1
 800a014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	b29a      	uxth	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1cc      	bne.n	8009fce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2200      	movs	r2, #0
 800a03c:	2140      	movs	r1, #64	; 0x40
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fe65 	bl	800ad0e <UART_WaitOnFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e006      	b.n	800a05c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	e000      	b.n	800a05c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a05a:	2302      	movs	r3, #2
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3720      	adds	r7, #32
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a068:	b092      	sub	sp, #72	; 0x48
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	431a      	orrs	r2, r3
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	431a      	orrs	r2, r3
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	4313      	orrs	r3, r2
 800a08a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4bbe      	ldr	r3, [pc, #760]	; (800a38c <UART_SetConfig+0x328>)
 800a094:	4013      	ands	r3, r2
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a09c:	430b      	orrs	r3, r1
 800a09e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4ab3      	ldr	r2, [pc, #716]	; (800a390 <UART_SetConfig+0x32c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d004      	beq.n	800a0d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	4baf      	ldr	r3, [pc, #700]	; (800a394 <UART_SetConfig+0x330>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	f023 010f 	bic.w	r1, r3, #15
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4aa6      	ldr	r2, [pc, #664]	; (800a398 <UART_SetConfig+0x334>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d177      	bne.n	800a1f4 <UART_SetConfig+0x190>
 800a104:	4ba5      	ldr	r3, [pc, #660]	; (800a39c <UART_SetConfig+0x338>)
 800a106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10c:	2b28      	cmp	r3, #40	; 0x28
 800a10e:	d86d      	bhi.n	800a1ec <UART_SetConfig+0x188>
 800a110:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <UART_SetConfig+0xb4>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800a1bd 	.word	0x0800a1bd
 800a11c:	0800a1ed 	.word	0x0800a1ed
 800a120:	0800a1ed 	.word	0x0800a1ed
 800a124:	0800a1ed 	.word	0x0800a1ed
 800a128:	0800a1ed 	.word	0x0800a1ed
 800a12c:	0800a1ed 	.word	0x0800a1ed
 800a130:	0800a1ed 	.word	0x0800a1ed
 800a134:	0800a1ed 	.word	0x0800a1ed
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1ed 	.word	0x0800a1ed
 800a140:	0800a1ed 	.word	0x0800a1ed
 800a144:	0800a1ed 	.word	0x0800a1ed
 800a148:	0800a1ed 	.word	0x0800a1ed
 800a14c:	0800a1ed 	.word	0x0800a1ed
 800a150:	0800a1ed 	.word	0x0800a1ed
 800a154:	0800a1ed 	.word	0x0800a1ed
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1ed 	.word	0x0800a1ed
 800a160:	0800a1ed 	.word	0x0800a1ed
 800a164:	0800a1ed 	.word	0x0800a1ed
 800a168:	0800a1ed 	.word	0x0800a1ed
 800a16c:	0800a1ed 	.word	0x0800a1ed
 800a170:	0800a1ed 	.word	0x0800a1ed
 800a174:	0800a1ed 	.word	0x0800a1ed
 800a178:	0800a1d5 	.word	0x0800a1d5
 800a17c:	0800a1ed 	.word	0x0800a1ed
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a1ed 	.word	0x0800a1ed
 800a18c:	0800a1ed 	.word	0x0800a1ed
 800a190:	0800a1ed 	.word	0x0800a1ed
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1ed 	.word	0x0800a1ed
 800a1a8:	0800a1ed 	.word	0x0800a1ed
 800a1ac:	0800a1ed 	.word	0x0800a1ed
 800a1b0:	0800a1ed 	.word	0x0800a1ed
 800a1b4:	0800a1ed 	.word	0x0800a1ed
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c2:	e222      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ca:	e21e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d2:	e21a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1da:	e216      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e2:	e212      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ea:	e20e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1ec:	2380      	movs	r3, #128	; 0x80
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f2:	e20a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a69      	ldr	r2, [pc, #420]	; (800a3a0 <UART_SetConfig+0x33c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d130      	bne.n	800a260 <UART_SetConfig+0x1fc>
 800a1fe:	4b67      	ldr	r3, [pc, #412]	; (800a39c <UART_SetConfig+0x338>)
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	2b05      	cmp	r3, #5
 800a208:	d826      	bhi.n	800a258 <UART_SetConfig+0x1f4>
 800a20a:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <UART_SetConfig+0x1ac>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22e:	e1ec      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a236:	e1e8      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23e:	e1e4      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a246:	e1e0      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24e:	e1dc      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a256:	e1d8      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25e:	e1d4      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a4f      	ldr	r2, [pc, #316]	; (800a3a4 <UART_SetConfig+0x340>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d130      	bne.n	800a2cc <UART_SetConfig+0x268>
 800a26a:	4b4c      	ldr	r3, [pc, #304]	; (800a39c <UART_SetConfig+0x338>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b05      	cmp	r3, #5
 800a274:	d826      	bhi.n	800a2c4 <UART_SetConfig+0x260>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <UART_SetConfig+0x218>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a295 	.word	0x0800a295
 800a280:	0800a29d 	.word	0x0800a29d
 800a284:	0800a2a5 	.word	0x0800a2a5
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2bd 	.word	0x0800a2bd
 800a294:	2300      	movs	r3, #0
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e1b6      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a29c:	2304      	movs	r3, #4
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e1b2      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e1ae      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e1aa      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e1a6      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e1a2      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ca:	e19e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a35      	ldr	r2, [pc, #212]	; (800a3a8 <UART_SetConfig+0x344>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d130      	bne.n	800a338 <UART_SetConfig+0x2d4>
 800a2d6:	4b31      	ldr	r3, [pc, #196]	; (800a39c <UART_SetConfig+0x338>)
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d826      	bhi.n	800a330 <UART_SetConfig+0x2cc>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <UART_SetConfig+0x284>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a301 	.word	0x0800a301
 800a2ec:	0800a309 	.word	0x0800a309
 800a2f0:	0800a311 	.word	0x0800a311
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a329 	.word	0x0800a329
 800a300:	2300      	movs	r3, #0
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e180      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a308:	2304      	movs	r3, #4
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e17c      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a310:	2308      	movs	r3, #8
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e178      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a318:	2310      	movs	r3, #16
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e174      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a320:	2320      	movs	r3, #32
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e170      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a328:	2340      	movs	r3, #64	; 0x40
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32e:	e16c      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a330:	2380      	movs	r3, #128	; 0x80
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a336:	e168      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1b      	ldr	r2, [pc, #108]	; (800a3ac <UART_SetConfig+0x348>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d142      	bne.n	800a3c8 <UART_SetConfig+0x364>
 800a342:	4b16      	ldr	r3, [pc, #88]	; (800a39c <UART_SetConfig+0x338>)
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d838      	bhi.n	800a3c0 <UART_SetConfig+0x35c>
 800a34e:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0x2f0>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a36d 	.word	0x0800a36d
 800a358:	0800a375 	.word	0x0800a375
 800a35c:	0800a37d 	.word	0x0800a37d
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a3b1 	.word	0x0800a3b1
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e14a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a374:	2304      	movs	r3, #4
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e146      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a37c:	2308      	movs	r3, #8
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e142      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a384:	2310      	movs	r3, #16
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e13e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a38c:	cfff69f3 	.word	0xcfff69f3
 800a390:	58000c00 	.word	0x58000c00
 800a394:	11fff4ff 	.word	0x11fff4ff
 800a398:	40011000 	.word	0x40011000
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	40004400 	.word	0x40004400
 800a3a4:	40004800 	.word	0x40004800
 800a3a8:	40004c00 	.word	0x40004c00
 800a3ac:	40005000 	.word	0x40005000
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e128      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3be:	e124      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c6:	e120      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4acb      	ldr	r2, [pc, #812]	; (800a6fc <UART_SetConfig+0x698>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d176      	bne.n	800a4c0 <UART_SetConfig+0x45c>
 800a3d2:	4bcb      	ldr	r3, [pc, #812]	; (800a700 <UART_SetConfig+0x69c>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3da:	2b28      	cmp	r3, #40	; 0x28
 800a3dc:	d86c      	bhi.n	800a4b8 <UART_SetConfig+0x454>
 800a3de:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <UART_SetConfig+0x380>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a489 	.word	0x0800a489
 800a3e8:	0800a4b9 	.word	0x0800a4b9
 800a3ec:	0800a4b9 	.word	0x0800a4b9
 800a3f0:	0800a4b9 	.word	0x0800a4b9
 800a3f4:	0800a4b9 	.word	0x0800a4b9
 800a3f8:	0800a4b9 	.word	0x0800a4b9
 800a3fc:	0800a4b9 	.word	0x0800a4b9
 800a400:	0800a4b9 	.word	0x0800a4b9
 800a404:	0800a491 	.word	0x0800a491
 800a408:	0800a4b9 	.word	0x0800a4b9
 800a40c:	0800a4b9 	.word	0x0800a4b9
 800a410:	0800a4b9 	.word	0x0800a4b9
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4b9 	.word	0x0800a4b9
 800a41c:	0800a4b9 	.word	0x0800a4b9
 800a420:	0800a4b9 	.word	0x0800a4b9
 800a424:	0800a499 	.word	0x0800a499
 800a428:	0800a4b9 	.word	0x0800a4b9
 800a42c:	0800a4b9 	.word	0x0800a4b9
 800a430:	0800a4b9 	.word	0x0800a4b9
 800a434:	0800a4b9 	.word	0x0800a4b9
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4b9 	.word	0x0800a4b9
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4a1 	.word	0x0800a4a1
 800a448:	0800a4b9 	.word	0x0800a4b9
 800a44c:	0800a4b9 	.word	0x0800a4b9
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a4b9 	.word	0x0800a4b9
 800a458:	0800a4b9 	.word	0x0800a4b9
 800a45c:	0800a4b9 	.word	0x0800a4b9
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a4b9 	.word	0x0800a4b9
 800a470:	0800a4b9 	.word	0x0800a4b9
 800a474:	0800a4b9 	.word	0x0800a4b9
 800a478:	0800a4b9 	.word	0x0800a4b9
 800a47c:	0800a4b9 	.word	0x0800a4b9
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e0bc      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a496:	e0b8      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49e:	e0b4      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a6:	e0b0      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ae:	e0ac      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e0a8      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4be:	e0a4      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a8f      	ldr	r2, [pc, #572]	; (800a704 <UART_SetConfig+0x6a0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d130      	bne.n	800a52c <UART_SetConfig+0x4c8>
 800a4ca:	4b8d      	ldr	r3, [pc, #564]	; (800a700 <UART_SetConfig+0x69c>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d826      	bhi.n	800a524 <UART_SetConfig+0x4c0>
 800a4d6:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <UART_SetConfig+0x478>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a50d 	.word	0x0800a50d
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fa:	e086      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a502:	e082      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a504:	2308      	movs	r3, #8
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50a:	e07e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a512:	e07a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a514:	2320      	movs	r3, #32
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e076      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a522:	e072      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52a:	e06e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a75      	ldr	r2, [pc, #468]	; (800a708 <UART_SetConfig+0x6a4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d130      	bne.n	800a598 <UART_SetConfig+0x534>
 800a536:	4b72      	ldr	r3, [pc, #456]	; (800a700 <UART_SetConfig+0x69c>)
 800a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d826      	bhi.n	800a590 <UART_SetConfig+0x52c>
 800a542:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <UART_SetConfig+0x4e4>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a569 	.word	0x0800a569
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e050      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e04c      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e048      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e044      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a580:	2320      	movs	r3, #32
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e040      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58e:	e03c      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a596:	e038      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a5b      	ldr	r2, [pc, #364]	; (800a70c <UART_SetConfig+0x6a8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d130      	bne.n	800a604 <UART_SetConfig+0x5a0>
 800a5a2:	4b57      	ldr	r3, [pc, #348]	; (800a700 <UART_SetConfig+0x69c>)
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d826      	bhi.n	800a5fc <UART_SetConfig+0x598>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <UART_SetConfig+0x550>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5d5 	.word	0x0800a5d5
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a5e5 	.word	0x0800a5e5
 800a5c4:	0800a5ed 	.word	0x0800a5ed
 800a5c8:	0800a5f5 	.word	0x0800a5f5
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e01a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e016      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e012      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e00e      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5ec:	2320      	movs	r3, #32
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e00a      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e006      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e002      	b.n	800a60a <UART_SetConfig+0x5a6>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a3f      	ldr	r2, [pc, #252]	; (800a70c <UART_SetConfig+0x6a8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	f040 80f8 	bne.w	800a806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a616:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	dc46      	bgt.n	800a6ac <UART_SetConfig+0x648>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	f2c0 8082 	blt.w	800a728 <UART_SetConfig+0x6c4>
 800a624:	3b02      	subs	r3, #2
 800a626:	2b1e      	cmp	r3, #30
 800a628:	d87e      	bhi.n	800a728 <UART_SetConfig+0x6c4>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <UART_SetConfig+0x5cc>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6b3 	.word	0x0800a6b3
 800a634:	0800a729 	.word	0x0800a729
 800a638:	0800a6bb 	.word	0x0800a6bb
 800a63c:	0800a729 	.word	0x0800a729
 800a640:	0800a729 	.word	0x0800a729
 800a644:	0800a729 	.word	0x0800a729
 800a648:	0800a6cb 	.word	0x0800a6cb
 800a64c:	0800a729 	.word	0x0800a729
 800a650:	0800a729 	.word	0x0800a729
 800a654:	0800a729 	.word	0x0800a729
 800a658:	0800a729 	.word	0x0800a729
 800a65c:	0800a729 	.word	0x0800a729
 800a660:	0800a729 	.word	0x0800a729
 800a664:	0800a729 	.word	0x0800a729
 800a668:	0800a6db 	.word	0x0800a6db
 800a66c:	0800a729 	.word	0x0800a729
 800a670:	0800a729 	.word	0x0800a729
 800a674:	0800a729 	.word	0x0800a729
 800a678:	0800a729 	.word	0x0800a729
 800a67c:	0800a729 	.word	0x0800a729
 800a680:	0800a729 	.word	0x0800a729
 800a684:	0800a729 	.word	0x0800a729
 800a688:	0800a729 	.word	0x0800a729
 800a68c:	0800a729 	.word	0x0800a729
 800a690:	0800a729 	.word	0x0800a729
 800a694:	0800a729 	.word	0x0800a729
 800a698:	0800a729 	.word	0x0800a729
 800a69c:	0800a729 	.word	0x0800a729
 800a6a0:	0800a729 	.word	0x0800a729
 800a6a4:	0800a729 	.word	0x0800a729
 800a6a8:	0800a71b 	.word	0x0800a71b
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d037      	beq.n	800a720 <UART_SetConfig+0x6bc>
 800a6b0:	e03a      	b.n	800a728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6b2:	f7fc fdb1 	bl	8007218 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6b8:	e03c      	b.n	800a734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fc fdc0 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c8:	e034      	b.n	800a734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 0318 	add.w	r3, r7, #24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fc ff0c 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d8:	e02c      	b.n	800a734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6da:	4b09      	ldr	r3, [pc, #36]	; (800a700 <UART_SetConfig+0x69c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d016      	beq.n	800a714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e6:	4b06      	ldr	r3, [pc, #24]	; (800a700 <UART_SetConfig+0x69c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	4a07      	ldr	r2, [pc, #28]	; (800a710 <UART_SetConfig+0x6ac>)
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f8:	e01c      	b.n	800a734 <UART_SetConfig+0x6d0>
 800a6fa:	bf00      	nop
 800a6fc:	40011400 	.word	0x40011400
 800a700:	58024400 	.word	0x58024400
 800a704:	40007800 	.word	0x40007800
 800a708:	40007c00 	.word	0x40007c00
 800a70c:	58000c00 	.word	0x58000c00
 800a710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a714:	4b9d      	ldr	r3, [pc, #628]	; (800a98c <UART_SetConfig+0x928>)
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a718:	e00c      	b.n	800a734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a71a:	4b9d      	ldr	r3, [pc, #628]	; (800a990 <UART_SetConfig+0x92c>)
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71e:	e009      	b.n	800a734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a726:	e005      	b.n	800a734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 81de 	beq.w	800aaf8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	4a94      	ldr	r2, [pc, #592]	; (800a994 <UART_SetConfig+0x930>)
 800a742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a746:	461a      	mov	r2, r3
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	4613      	mov	r3, r2
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	4413      	add	r3, r2
 800a75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d305      	bcc.n	800a76c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	429a      	cmp	r2, r3
 800a76a:	d903      	bls.n	800a774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a772:	e1c1      	b.n	800aaf8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a776:	2200      	movs	r2, #0
 800a778:	60bb      	str	r3, [r7, #8]
 800a77a:	60fa      	str	r2, [r7, #12]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	4a84      	ldr	r2, [pc, #528]	; (800a994 <UART_SetConfig+0x930>)
 800a782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a786:	b29b      	uxth	r3, r3
 800a788:	2200      	movs	r2, #0
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a796:	f7f5 fdfb 	bl	8000390 <__aeabi_uldivmod>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4610      	mov	r0, r2
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	f04f 0200 	mov.w	r2, #0
 800a7a6:	f04f 0300 	mov.w	r3, #0
 800a7aa:	020b      	lsls	r3, r1, #8
 800a7ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7b0:	0202      	lsls	r2, r0, #8
 800a7b2:	6979      	ldr	r1, [r7, #20]
 800a7b4:	6849      	ldr	r1, [r1, #4]
 800a7b6:	0849      	lsrs	r1, r1, #1
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4605      	mov	r5, r0
 800a7be:	eb12 0804 	adds.w	r8, r2, r4
 800a7c2:	eb43 0905 	adc.w	r9, r3, r5
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	469a      	mov	sl, r3
 800a7ce:	4693      	mov	fp, r2
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	f7f5 fdda 	bl	8000390 <__aeabi_uldivmod>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ea:	d308      	bcc.n	800a7fe <UART_SetConfig+0x79a>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f2:	d204      	bcs.n	800a7fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7fa:	60da      	str	r2, [r3, #12]
 800a7fc:	e17c      	b.n	800aaf8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a804:	e178      	b.n	800aaf8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a80e:	f040 80c5 	bne.w	800a99c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a816:	2b20      	cmp	r3, #32
 800a818:	dc48      	bgt.n	800a8ac <UART_SetConfig+0x848>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	db7b      	blt.n	800a916 <UART_SetConfig+0x8b2>
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d879      	bhi.n	800a916 <UART_SetConfig+0x8b2>
 800a822:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <UART_SetConfig+0x7c4>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a8bb 	.word	0x0800a8bb
 800a830:	0800a917 	.word	0x0800a917
 800a834:	0800a917 	.word	0x0800a917
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a917 	.word	0x0800a917
 800a840:	0800a917 	.word	0x0800a917
 800a844:	0800a917 	.word	0x0800a917
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a917 	.word	0x0800a917
 800a850:	0800a917 	.word	0x0800a917
 800a854:	0800a917 	.word	0x0800a917
 800a858:	0800a917 	.word	0x0800a917
 800a85c:	0800a917 	.word	0x0800a917
 800a860:	0800a917 	.word	0x0800a917
 800a864:	0800a917 	.word	0x0800a917
 800a868:	0800a8e3 	.word	0x0800a8e3
 800a86c:	0800a917 	.word	0x0800a917
 800a870:	0800a917 	.word	0x0800a917
 800a874:	0800a917 	.word	0x0800a917
 800a878:	0800a917 	.word	0x0800a917
 800a87c:	0800a917 	.word	0x0800a917
 800a880:	0800a917 	.word	0x0800a917
 800a884:	0800a917 	.word	0x0800a917
 800a888:	0800a917 	.word	0x0800a917
 800a88c:	0800a917 	.word	0x0800a917
 800a890:	0800a917 	.word	0x0800a917
 800a894:	0800a917 	.word	0x0800a917
 800a898:	0800a917 	.word	0x0800a917
 800a89c:	0800a917 	.word	0x0800a917
 800a8a0:	0800a917 	.word	0x0800a917
 800a8a4:	0800a917 	.word	0x0800a917
 800a8a8:	0800a909 	.word	0x0800a909
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d02e      	beq.n	800a90e <UART_SetConfig+0x8aa>
 800a8b0:	e031      	b.n	800a916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b2:	f7fb fd3f 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 800a8b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8b8:	e033      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ba:	f7fb fd51 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 800a8be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c0:	e02f      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fc fcbc 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d0:	e027      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fc fe08 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e01f      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e2:	4b2d      	ldr	r3, [pc, #180]	; (800a998 <UART_SetConfig+0x934>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ee:	4b2a      	ldr	r3, [pc, #168]	; (800a998 <UART_SetConfig+0x934>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	08db      	lsrs	r3, r3, #3
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	4a24      	ldr	r2, [pc, #144]	; (800a98c <UART_SetConfig+0x928>)
 800a8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a900:	e00f      	b.n	800a922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a902:	4b22      	ldr	r3, [pc, #136]	; (800a98c <UART_SetConfig+0x928>)
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a906:	e00c      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a908:	4b21      	ldr	r3, [pc, #132]	; (800a990 <UART_SetConfig+0x92c>)
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a90c:	e009      	b.n	800a922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a914:	e005      	b.n	800a922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80e7 	beq.w	800aaf8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	4a19      	ldr	r2, [pc, #100]	; (800a994 <UART_SetConfig+0x930>)
 800a930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a934:	461a      	mov	r2, r3
 800a936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a938:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93c:	005a      	lsls	r2, r3, #1
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	441a      	add	r2, r3
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	2b0f      	cmp	r3, #15
 800a954:	d916      	bls.n	800a984 <UART_SetConfig+0x920>
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95c:	d212      	bcs.n	800a984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	b29b      	uxth	r3, r3
 800a962:	f023 030f 	bic.w	r3, r3, #15
 800a966:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	085b      	lsrs	r3, r3, #1
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f003 0307 	and.w	r3, r3, #7
 800a972:	b29a      	uxth	r2, r3
 800a974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a976:	4313      	orrs	r3, r2
 800a978:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	e0b9      	b.n	800aaf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a98a:	e0b5      	b.n	800aaf8 <UART_SetConfig+0xa94>
 800a98c:	03d09000 	.word	0x03d09000
 800a990:	003d0900 	.word	0x003d0900
 800a994:	0800ecd4 	.word	0x0800ecd4
 800a998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a99c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	dc49      	bgt.n	800aa38 <UART_SetConfig+0x9d4>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	db7c      	blt.n	800aaa2 <UART_SetConfig+0xa3e>
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d87a      	bhi.n	800aaa2 <UART_SetConfig+0xa3e>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <UART_SetConfig+0x950>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800aa3f 	.word	0x0800aa3f
 800a9b8:	0800aa47 	.word	0x0800aa47
 800a9bc:	0800aaa3 	.word	0x0800aaa3
 800a9c0:	0800aaa3 	.word	0x0800aaa3
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aaa3 	.word	0x0800aaa3
 800a9cc:	0800aaa3 	.word	0x0800aaa3
 800a9d0:	0800aaa3 	.word	0x0800aaa3
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aaa3 	.word	0x0800aaa3
 800a9dc:	0800aaa3 	.word	0x0800aaa3
 800a9e0:	0800aaa3 	.word	0x0800aaa3
 800a9e4:	0800aaa3 	.word	0x0800aaa3
 800a9e8:	0800aaa3 	.word	0x0800aaa3
 800a9ec:	0800aaa3 	.word	0x0800aaa3
 800a9f0:	0800aaa3 	.word	0x0800aaa3
 800a9f4:	0800aa6f 	.word	0x0800aa6f
 800a9f8:	0800aaa3 	.word	0x0800aaa3
 800a9fc:	0800aaa3 	.word	0x0800aaa3
 800aa00:	0800aaa3 	.word	0x0800aaa3
 800aa04:	0800aaa3 	.word	0x0800aaa3
 800aa08:	0800aaa3 	.word	0x0800aaa3
 800aa0c:	0800aaa3 	.word	0x0800aaa3
 800aa10:	0800aaa3 	.word	0x0800aaa3
 800aa14:	0800aaa3 	.word	0x0800aaa3
 800aa18:	0800aaa3 	.word	0x0800aaa3
 800aa1c:	0800aaa3 	.word	0x0800aaa3
 800aa20:	0800aaa3 	.word	0x0800aaa3
 800aa24:	0800aaa3 	.word	0x0800aaa3
 800aa28:	0800aaa3 	.word	0x0800aaa3
 800aa2c:	0800aaa3 	.word	0x0800aaa3
 800aa30:	0800aaa3 	.word	0x0800aaa3
 800aa34:	0800aa95 	.word	0x0800aa95
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d02e      	beq.n	800aa9a <UART_SetConfig+0xa36>
 800aa3c:	e031      	b.n	800aaa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa3e:	f7fb fc79 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 800aa42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa44:	e033      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa46:	f7fb fc8b 	bl	8006360 <HAL_RCC_GetPCLK2Freq>
 800aa4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa4c:	e02f      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fc fbf6 	bl	8007244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa5c:	e027      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa5e:	f107 0318 	add.w	r3, r7, #24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fc fd42 	bl	80074ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa6c:	e01f      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa6e:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <UART_SetConfig+0xac0>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	; (800ab24 <UART_SetConfig+0xac0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	4a28      	ldr	r2, [pc, #160]	; (800ab28 <UART_SetConfig+0xac4>)
 800aa86:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa8c:	e00f      	b.n	800aaae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa8e:	4b26      	ldr	r3, [pc, #152]	; (800ab28 <UART_SetConfig+0xac4>)
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa92:	e00c      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <UART_SetConfig+0xac8>)
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa98:	e009      	b.n	800aaae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa0:	e005      	b.n	800aaae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aaac:	bf00      	nop
    }

    if (pclk != 0U)
 800aaae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d021      	beq.n	800aaf8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	4a1d      	ldr	r2, [pc, #116]	; (800ab30 <UART_SetConfig+0xacc>)
 800aaba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aabe:	461a      	mov	r2, r3
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	085b      	lsrs	r3, r3, #1
 800aacc:	441a      	add	r2, r3
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	2b0f      	cmp	r3, #15
 800aadc:	d909      	bls.n	800aaf2 <UART_SetConfig+0xa8e>
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae4:	d205      	bcs.n	800aaf2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	60da      	str	r2, [r3, #12]
 800aaf0:	e002      	b.n	800aaf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2200      	movs	r2, #0
 800ab12:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3748      	adds	r7, #72	; 0x48
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab22:	bf00      	nop
 800ab24:	58024400 	.word	0x58024400
 800ab28:	03d09000 	.word	0x03d09000
 800ab2c:	003d0900 	.word	0x003d0900
 800ab30:	0800ecd4 	.word	0x0800ecd4

0800ab34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab62:	f003 0302 	and.w	r3, r3, #2
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00a      	beq.n	800aba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba6:	f003 0308 	and.w	r3, r3, #8
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00a      	beq.n	800abe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d01a      	beq.n	800ac4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac32:	d10a      	bne.n	800ac4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	605a      	str	r2, [r3, #4]
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac88:	f7f8 fdcc 	bl	8003824 <HAL_GetTick>
 800ac8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d10e      	bne.n	800acba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f82f 	bl	800ad0e <UART_WaitOnFlagUntilTimeout>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e025      	b.n	800ad06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d10e      	bne.n	800ace6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f819 	bl	800ad0e <UART_WaitOnFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e00f      	b.n	800ad06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b09c      	sub	sp, #112	; 0x70
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	603b      	str	r3, [r7, #0]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad1e:	e0a9      	b.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	f000 80a5 	beq.w	800ae74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad2a:	f7f8 fd7b 	bl	8003824 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d302      	bcc.n	800ad40 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d140      	bne.n	800adc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad54:	667b      	str	r3, [r7, #100]	; 0x64
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad66:	e841 2300 	strex	r3, r2, [r1]
 800ad6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e6      	bne.n	800ad40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3308      	adds	r3, #8
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7c:	e853 3f00 	ldrex	r3, [r3]
 800ad80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	f023 0301 	bic.w	r3, r3, #1
 800ad88:	663b      	str	r3, [r7, #96]	; 0x60
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad92:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ada0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e5      	bne.n	800ad72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e069      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d051      	beq.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adde:	d149      	bne.n	800ae74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ade8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
 800ae0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e6      	bne.n	800adea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3308      	adds	r3, #8
 800ae22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae3c:	623a      	str	r2, [r7, #32]
 800ae3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	69f9      	ldr	r1, [r7, #28]
 800ae42:	6a3a      	ldr	r2, [r7, #32]
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e5      	bne.n	800ae1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2220      	movs	r2, #32
 800ae64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e010      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	69da      	ldr	r2, [r3, #28]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	bf0c      	ite	eq
 800ae84:	2301      	moveq	r3, #1
 800ae86:	2300      	movne	r3, #0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	f43f af46 	beq.w	800ad20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3770      	adds	r7, #112	; 0x70
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_UARTEx_DisableFifoMode+0x16>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e027      	b.n	800af04 <HAL_UARTEx_DisableFifoMode+0x66>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2224      	movs	r2, #36	; 0x24
 800aec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0201 	bic.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aee2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af20:	2b01      	cmp	r3, #1
 800af22:	d101      	bne.n	800af28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af24:	2302      	movs	r3, #2
 800af26:	e02d      	b.n	800af84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2224      	movs	r2, #36	; 0x24
 800af34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0201 	bic.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f84f 	bl	800b008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e02d      	b.n	800b000 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2224      	movs	r2, #36	; 0x24
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f811 	bl	800b008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b028:	e031      	b.n	800b08e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b02a:	2310      	movs	r3, #16
 800b02c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b02e:	2310      	movs	r3, #16
 800b030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	0e5b      	lsrs	r3, r3, #25
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	0f5b      	lsrs	r3, r3, #29
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 0307 	and.w	r3, r3, #7
 800b050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	7b3a      	ldrb	r2, [r7, #12]
 800b056:	4911      	ldr	r1, [pc, #68]	; (800b09c <UARTEx_SetNbDataToProcess+0x94>)
 800b058:	5c8a      	ldrb	r2, [r1, r2]
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b05e:	7b3a      	ldrb	r2, [r7, #12]
 800b060:	490f      	ldr	r1, [pc, #60]	; (800b0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b064:	fb93 f3f2 	sdiv	r3, r3, r2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	7b7a      	ldrb	r2, [r7, #13]
 800b074:	4909      	ldr	r1, [pc, #36]	; (800b09c <UARTEx_SetNbDataToProcess+0x94>)
 800b076:	5c8a      	ldrb	r2, [r1, r2]
 800b078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b07c:	7b7a      	ldrb	r2, [r7, #13]
 800b07e:	4908      	ldr	r1, [pc, #32]	; (800b0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b082:	fb93 f3f2 	sdiv	r3, r3, r2
 800b086:	b29a      	uxth	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	0800ecec 	.word	0x0800ecec
 800b0a0:	0800ecf4 	.word	0x0800ecf4

0800b0a4 <__errno>:
 800b0a4:	4b01      	ldr	r3, [pc, #4]	; (800b0ac <__errno+0x8>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	24000058 	.word	0x24000058

0800b0b0 <__libc_init_array>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	4d0d      	ldr	r5, [pc, #52]	; (800b0e8 <__libc_init_array+0x38>)
 800b0b4:	4c0d      	ldr	r4, [pc, #52]	; (800b0ec <__libc_init_array+0x3c>)
 800b0b6:	1b64      	subs	r4, r4, r5
 800b0b8:	10a4      	asrs	r4, r4, #2
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	42a6      	cmp	r6, r4
 800b0be:	d109      	bne.n	800b0d4 <__libc_init_array+0x24>
 800b0c0:	4d0b      	ldr	r5, [pc, #44]	; (800b0f0 <__libc_init_array+0x40>)
 800b0c2:	4c0c      	ldr	r4, [pc, #48]	; (800b0f4 <__libc_init_array+0x44>)
 800b0c4:	f003 fa3c 	bl	800e540 <_init>
 800b0c8:	1b64      	subs	r4, r4, r5
 800b0ca:	10a4      	asrs	r4, r4, #2
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	42a6      	cmp	r6, r4
 800b0d0:	d105      	bne.n	800b0de <__libc_init_array+0x2e>
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d8:	4798      	blx	r3
 800b0da:	3601      	adds	r6, #1
 800b0dc:	e7ee      	b.n	800b0bc <__libc_init_array+0xc>
 800b0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e2:	4798      	blx	r3
 800b0e4:	3601      	adds	r6, #1
 800b0e6:	e7f2      	b.n	800b0ce <__libc_init_array+0x1e>
 800b0e8:	08010998 	.word	0x08010998
 800b0ec:	08010998 	.word	0x08010998
 800b0f0:	08010998 	.word	0x08010998
 800b0f4:	0801099c 	.word	0x0801099c

0800b0f8 <memcpy>:
 800b0f8:	440a      	add	r2, r1
 800b0fa:	4291      	cmp	r1, r2
 800b0fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b100:	d100      	bne.n	800b104 <memcpy+0xc>
 800b102:	4770      	bx	lr
 800b104:	b510      	push	{r4, lr}
 800b106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b10e:	4291      	cmp	r1, r2
 800b110:	d1f9      	bne.n	800b106 <memcpy+0xe>
 800b112:	bd10      	pop	{r4, pc}

0800b114 <memset>:
 800b114:	4402      	add	r2, r0
 800b116:	4603      	mov	r3, r0
 800b118:	4293      	cmp	r3, r2
 800b11a:	d100      	bne.n	800b11e <memset+0xa>
 800b11c:	4770      	bx	lr
 800b11e:	f803 1b01 	strb.w	r1, [r3], #1
 800b122:	e7f9      	b.n	800b118 <memset+0x4>

0800b124 <__cvt>:
 800b124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b126:	ed2d 8b02 	vpush	{d8}
 800b12a:	eeb0 8b40 	vmov.f64	d8, d0
 800b12e:	b085      	sub	sp, #20
 800b130:	4617      	mov	r7, r2
 800b132:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b134:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b136:	ee18 2a90 	vmov	r2, s17
 800b13a:	f025 0520 	bic.w	r5, r5, #32
 800b13e:	2a00      	cmp	r2, #0
 800b140:	bfb6      	itet	lt
 800b142:	222d      	movlt	r2, #45	; 0x2d
 800b144:	2200      	movge	r2, #0
 800b146:	eeb1 8b40 	vneglt.f64	d8, d0
 800b14a:	2d46      	cmp	r5, #70	; 0x46
 800b14c:	460c      	mov	r4, r1
 800b14e:	701a      	strb	r2, [r3, #0]
 800b150:	d004      	beq.n	800b15c <__cvt+0x38>
 800b152:	2d45      	cmp	r5, #69	; 0x45
 800b154:	d100      	bne.n	800b158 <__cvt+0x34>
 800b156:	3401      	adds	r4, #1
 800b158:	2102      	movs	r1, #2
 800b15a:	e000      	b.n	800b15e <__cvt+0x3a>
 800b15c:	2103      	movs	r1, #3
 800b15e:	ab03      	add	r3, sp, #12
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	ab02      	add	r3, sp, #8
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4622      	mov	r2, r4
 800b168:	4633      	mov	r3, r6
 800b16a:	eeb0 0b48 	vmov.f64	d0, d8
 800b16e:	f000 fe4b 	bl	800be08 <_dtoa_r>
 800b172:	2d47      	cmp	r5, #71	; 0x47
 800b174:	d101      	bne.n	800b17a <__cvt+0x56>
 800b176:	07fb      	lsls	r3, r7, #31
 800b178:	d51a      	bpl.n	800b1b0 <__cvt+0x8c>
 800b17a:	2d46      	cmp	r5, #70	; 0x46
 800b17c:	eb00 0204 	add.w	r2, r0, r4
 800b180:	d10c      	bne.n	800b19c <__cvt+0x78>
 800b182:	7803      	ldrb	r3, [r0, #0]
 800b184:	2b30      	cmp	r3, #48	; 0x30
 800b186:	d107      	bne.n	800b198 <__cvt+0x74>
 800b188:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b190:	bf1c      	itt	ne
 800b192:	f1c4 0401 	rsbne	r4, r4, #1
 800b196:	6034      	strne	r4, [r6, #0]
 800b198:	6833      	ldr	r3, [r6, #0]
 800b19a:	441a      	add	r2, r3
 800b19c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	bf08      	it	eq
 800b1a6:	9203      	streq	r2, [sp, #12]
 800b1a8:	2130      	movs	r1, #48	; 0x30
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d307      	bcc.n	800b1c0 <__cvt+0x9c>
 800b1b0:	9b03      	ldr	r3, [sp, #12]
 800b1b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1b4:	1a1b      	subs	r3, r3, r0
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	b005      	add	sp, #20
 800b1ba:	ecbd 8b02 	vpop	{d8}
 800b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c0:	1c5c      	adds	r4, r3, #1
 800b1c2:	9403      	str	r4, [sp, #12]
 800b1c4:	7019      	strb	r1, [r3, #0]
 800b1c6:	e7f0      	b.n	800b1aa <__cvt+0x86>

0800b1c8 <__exponent>:
 800b1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	bfb8      	it	lt
 800b1d0:	4249      	neglt	r1, r1
 800b1d2:	f803 2b02 	strb.w	r2, [r3], #2
 800b1d6:	bfb4      	ite	lt
 800b1d8:	222d      	movlt	r2, #45	; 0x2d
 800b1da:	222b      	movge	r2, #43	; 0x2b
 800b1dc:	2909      	cmp	r1, #9
 800b1de:	7042      	strb	r2, [r0, #1]
 800b1e0:	dd2a      	ble.n	800b238 <__exponent+0x70>
 800b1e2:	f10d 0407 	add.w	r4, sp, #7
 800b1e6:	46a4      	mov	ip, r4
 800b1e8:	270a      	movs	r7, #10
 800b1ea:	46a6      	mov	lr, r4
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800b1f2:	fb07 1516 	mls	r5, r7, r6, r1
 800b1f6:	3530      	adds	r5, #48	; 0x30
 800b1f8:	2a63      	cmp	r2, #99	; 0x63
 800b1fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b1fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b202:	4631      	mov	r1, r6
 800b204:	dcf1      	bgt.n	800b1ea <__exponent+0x22>
 800b206:	3130      	adds	r1, #48	; 0x30
 800b208:	f1ae 0502 	sub.w	r5, lr, #2
 800b20c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b210:	1c44      	adds	r4, r0, #1
 800b212:	4629      	mov	r1, r5
 800b214:	4561      	cmp	r1, ip
 800b216:	d30a      	bcc.n	800b22e <__exponent+0x66>
 800b218:	f10d 0209 	add.w	r2, sp, #9
 800b21c:	eba2 020e 	sub.w	r2, r2, lr
 800b220:	4565      	cmp	r5, ip
 800b222:	bf88      	it	hi
 800b224:	2200      	movhi	r2, #0
 800b226:	4413      	add	r3, r2
 800b228:	1a18      	subs	r0, r3, r0
 800b22a:	b003      	add	sp, #12
 800b22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b232:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b236:	e7ed      	b.n	800b214 <__exponent+0x4c>
 800b238:	2330      	movs	r3, #48	; 0x30
 800b23a:	3130      	adds	r1, #48	; 0x30
 800b23c:	7083      	strb	r3, [r0, #2]
 800b23e:	70c1      	strb	r1, [r0, #3]
 800b240:	1d03      	adds	r3, r0, #4
 800b242:	e7f1      	b.n	800b228 <__exponent+0x60>
 800b244:	0000      	movs	r0, r0
	...

0800b248 <_printf_float>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	b08b      	sub	sp, #44	; 0x2c
 800b24e:	460c      	mov	r4, r1
 800b250:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b254:	4616      	mov	r6, r2
 800b256:	461f      	mov	r7, r3
 800b258:	4605      	mov	r5, r0
 800b25a:	f001 fcfb 	bl	800cc54 <_localeconv_r>
 800b25e:	f8d0 b000 	ldr.w	fp, [r0]
 800b262:	4658      	mov	r0, fp
 800b264:	f7f5 f83c 	bl	80002e0 <strlen>
 800b268:	2300      	movs	r3, #0
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	f8d8 3000 	ldr.w	r3, [r8]
 800b270:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b274:	6822      	ldr	r2, [r4, #0]
 800b276:	3307      	adds	r3, #7
 800b278:	f023 0307 	bic.w	r3, r3, #7
 800b27c:	f103 0108 	add.w	r1, r3, #8
 800b280:	f8c8 1000 	str.w	r1, [r8]
 800b284:	4682      	mov	sl, r0
 800b286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b28a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b28e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b4f0 <_printf_float+0x2a8>
 800b292:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b296:	eeb0 6bc0 	vabs.f64	d6, d0
 800b29a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a2:	dd24      	ble.n	800b2ee <_printf_float+0xa6>
 800b2a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ac:	d502      	bpl.n	800b2b4 <_printf_float+0x6c>
 800b2ae:	232d      	movs	r3, #45	; 0x2d
 800b2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b4:	4b90      	ldr	r3, [pc, #576]	; (800b4f8 <_printf_float+0x2b0>)
 800b2b6:	4891      	ldr	r0, [pc, #580]	; (800b4fc <_printf_float+0x2b4>)
 800b2b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b2bc:	bf94      	ite	ls
 800b2be:	4698      	movls	r8, r3
 800b2c0:	4680      	movhi	r8, r0
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	f022 0204 	bic.w	r2, r2, #4
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	6022      	str	r2, [r4, #0]
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9700      	str	r7, [sp, #0]
 800b2d2:	4633      	mov	r3, r6
 800b2d4:	aa09      	add	r2, sp, #36	; 0x24
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f9d3 	bl	800b684 <_printf_common>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	f040 808a 	bne.w	800b3f8 <_printf_float+0x1b0>
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	b00b      	add	sp, #44	; 0x2c
 800b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ee:	eeb4 0b40 	vcmp.f64	d0, d0
 800b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f6:	d709      	bvc.n	800b30c <_printf_float+0xc4>
 800b2f8:	ee10 3a90 	vmov	r3, s1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfbc      	itt	lt
 800b300:	232d      	movlt	r3, #45	; 0x2d
 800b302:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b306:	487e      	ldr	r0, [pc, #504]	; (800b500 <_printf_float+0x2b8>)
 800b308:	4b7e      	ldr	r3, [pc, #504]	; (800b504 <_printf_float+0x2bc>)
 800b30a:	e7d5      	b.n	800b2b8 <_printf_float+0x70>
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b312:	9104      	str	r1, [sp, #16]
 800b314:	1c59      	adds	r1, r3, #1
 800b316:	d13c      	bne.n	800b392 <_printf_float+0x14a>
 800b318:	2306      	movs	r3, #6
 800b31a:	6063      	str	r3, [r4, #4]
 800b31c:	2300      	movs	r3, #0
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	ab08      	add	r3, sp, #32
 800b322:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b32a:	ab07      	add	r3, sp, #28
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	6022      	str	r2, [r4, #0]
 800b332:	f10d 031b 	add.w	r3, sp, #27
 800b336:	4628      	mov	r0, r5
 800b338:	f7ff fef4 	bl	800b124 <__cvt>
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	9907      	ldr	r1, [sp, #28]
 800b340:	2b47      	cmp	r3, #71	; 0x47
 800b342:	4680      	mov	r8, r0
 800b344:	d108      	bne.n	800b358 <_printf_float+0x110>
 800b346:	1cc8      	adds	r0, r1, #3
 800b348:	db02      	blt.n	800b350 <_printf_float+0x108>
 800b34a:	6863      	ldr	r3, [r4, #4]
 800b34c:	4299      	cmp	r1, r3
 800b34e:	dd41      	ble.n	800b3d4 <_printf_float+0x18c>
 800b350:	f1a9 0902 	sub.w	r9, r9, #2
 800b354:	fa5f f989 	uxtb.w	r9, r9
 800b358:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b35c:	d820      	bhi.n	800b3a0 <_printf_float+0x158>
 800b35e:	3901      	subs	r1, #1
 800b360:	464a      	mov	r2, r9
 800b362:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b366:	9107      	str	r1, [sp, #28]
 800b368:	f7ff ff2e 	bl	800b1c8 <__exponent>
 800b36c:	9a08      	ldr	r2, [sp, #32]
 800b36e:	9004      	str	r0, [sp, #16]
 800b370:	1813      	adds	r3, r2, r0
 800b372:	2a01      	cmp	r2, #1
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	dc02      	bgt.n	800b37e <_printf_float+0x136>
 800b378:	6822      	ldr	r2, [r4, #0]
 800b37a:	07d2      	lsls	r2, r2, #31
 800b37c:	d501      	bpl.n	800b382 <_printf_float+0x13a>
 800b37e:	3301      	adds	r3, #1
 800b380:	6123      	str	r3, [r4, #16]
 800b382:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0a2      	beq.n	800b2d0 <_printf_float+0x88>
 800b38a:	232d      	movs	r3, #45	; 0x2d
 800b38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b390:	e79e      	b.n	800b2d0 <_printf_float+0x88>
 800b392:	9904      	ldr	r1, [sp, #16]
 800b394:	2947      	cmp	r1, #71	; 0x47
 800b396:	d1c1      	bne.n	800b31c <_printf_float+0xd4>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1bf      	bne.n	800b31c <_printf_float+0xd4>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e7bc      	b.n	800b31a <_printf_float+0xd2>
 800b3a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b3a4:	d118      	bne.n	800b3d8 <_printf_float+0x190>
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	6863      	ldr	r3, [r4, #4]
 800b3aa:	dd0b      	ble.n	800b3c4 <_printf_float+0x17c>
 800b3ac:	6121      	str	r1, [r4, #16]
 800b3ae:	b913      	cbnz	r3, 800b3b6 <_printf_float+0x16e>
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	07d0      	lsls	r0, r2, #31
 800b3b4:	d502      	bpl.n	800b3bc <_printf_float+0x174>
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	440b      	add	r3, r1
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	e7de      	b.n	800b382 <_printf_float+0x13a>
 800b3c4:	b913      	cbnz	r3, 800b3cc <_printf_float+0x184>
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	07d2      	lsls	r2, r2, #31
 800b3ca:	d501      	bpl.n	800b3d0 <_printf_float+0x188>
 800b3cc:	3302      	adds	r3, #2
 800b3ce:	e7f4      	b.n	800b3ba <_printf_float+0x172>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e7f2      	b.n	800b3ba <_printf_float+0x172>
 800b3d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	db05      	blt.n	800b3ea <_printf_float+0x1a2>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	6121      	str	r1, [r4, #16]
 800b3e2:	07d8      	lsls	r0, r3, #31
 800b3e4:	d5ea      	bpl.n	800b3bc <_printf_float+0x174>
 800b3e6:	1c4b      	adds	r3, r1, #1
 800b3e8:	e7e7      	b.n	800b3ba <_printf_float+0x172>
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	bfd4      	ite	le
 800b3ee:	f1c1 0202 	rsble	r2, r1, #2
 800b3f2:	2201      	movgt	r2, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	e7e0      	b.n	800b3ba <_printf_float+0x172>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	055a      	lsls	r2, r3, #21
 800b3fc:	d407      	bmi.n	800b40e <_printf_float+0x1c6>
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	4642      	mov	r2, r8
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	d12a      	bne.n	800b462 <_printf_float+0x21a>
 800b40c:	e76a      	b.n	800b2e4 <_printf_float+0x9c>
 800b40e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b412:	f240 80e2 	bls.w	800b5da <_printf_float+0x392>
 800b416:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b41a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b422:	d133      	bne.n	800b48c <_printf_float+0x244>
 800b424:	4a38      	ldr	r2, [pc, #224]	; (800b508 <_printf_float+0x2c0>)
 800b426:	2301      	movs	r3, #1
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af58 	beq.w	800b2e4 <_printf_float+0x9c>
 800b434:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b438:	429a      	cmp	r2, r3
 800b43a:	db02      	blt.n	800b442 <_printf_float+0x1fa>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	07d8      	lsls	r0, r3, #31
 800b440:	d50f      	bpl.n	800b462 <_printf_float+0x21a>
 800b442:	4653      	mov	r3, sl
 800b444:	465a      	mov	r2, fp
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f af49 	beq.w	800b2e4 <_printf_float+0x9c>
 800b452:	f04f 0800 	mov.w	r8, #0
 800b456:	f104 091a 	add.w	r9, r4, #26
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	4543      	cmp	r3, r8
 800b460:	dc09      	bgt.n	800b476 <_printf_float+0x22e>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	079b      	lsls	r3, r3, #30
 800b466:	f100 8108 	bmi.w	800b67a <_printf_float+0x432>
 800b46a:	68e0      	ldr	r0, [r4, #12]
 800b46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46e:	4298      	cmp	r0, r3
 800b470:	bfb8      	it	lt
 800b472:	4618      	movlt	r0, r3
 800b474:	e738      	b.n	800b2e8 <_printf_float+0xa0>
 800b476:	2301      	movs	r3, #1
 800b478:	464a      	mov	r2, r9
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	f43f af2f 	beq.w	800b2e4 <_printf_float+0x9c>
 800b486:	f108 0801 	add.w	r8, r8, #1
 800b48a:	e7e6      	b.n	800b45a <_printf_float+0x212>
 800b48c:	9b07      	ldr	r3, [sp, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dc3c      	bgt.n	800b50c <_printf_float+0x2c4>
 800b492:	4a1d      	ldr	r2, [pc, #116]	; (800b508 <_printf_float+0x2c0>)
 800b494:	2301      	movs	r3, #1
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f af21 	beq.w	800b2e4 <_printf_float+0x9c>
 800b4a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	d102      	bne.n	800b4b0 <_printf_float+0x268>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	07d9      	lsls	r1, r3, #31
 800b4ae:	d5d8      	bpl.n	800b462 <_printf_float+0x21a>
 800b4b0:	4653      	mov	r3, sl
 800b4b2:	465a      	mov	r2, fp
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af12 	beq.w	800b2e4 <_printf_float+0x9c>
 800b4c0:	f04f 0900 	mov.w	r9, #0
 800b4c4:	f104 0a1a 	add.w	sl, r4, #26
 800b4c8:	9b07      	ldr	r3, [sp, #28]
 800b4ca:	425b      	negs	r3, r3
 800b4cc:	454b      	cmp	r3, r9
 800b4ce:	dc01      	bgt.n	800b4d4 <_printf_float+0x28c>
 800b4d0:	9b08      	ldr	r3, [sp, #32]
 800b4d2:	e795      	b.n	800b400 <_printf_float+0x1b8>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b8      	blx	r7
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f43f af00 	beq.w	800b2e4 <_printf_float+0x9c>
 800b4e4:	f109 0901 	add.w	r9, r9, #1
 800b4e8:	e7ee      	b.n	800b4c8 <_printf_float+0x280>
 800b4ea:	bf00      	nop
 800b4ec:	f3af 8000 	nop.w
 800b4f0:	ffffffff 	.word	0xffffffff
 800b4f4:	7fefffff 	.word	0x7fefffff
 800b4f8:	0800ed00 	.word	0x0800ed00
 800b4fc:	0800ed04 	.word	0x0800ed04
 800b500:	0800ed0c 	.word	0x0800ed0c
 800b504:	0800ed08 	.word	0x0800ed08
 800b508:	0800ed10 	.word	0x0800ed10
 800b50c:	9a08      	ldr	r2, [sp, #32]
 800b50e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b510:	429a      	cmp	r2, r3
 800b512:	bfa8      	it	ge
 800b514:	461a      	movge	r2, r3
 800b516:	2a00      	cmp	r2, #0
 800b518:	4691      	mov	r9, r2
 800b51a:	dc38      	bgt.n	800b58e <_printf_float+0x346>
 800b51c:	2300      	movs	r3, #0
 800b51e:	9305      	str	r3, [sp, #20]
 800b520:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b524:	f104 021a 	add.w	r2, r4, #26
 800b528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b52a:	9905      	ldr	r1, [sp, #20]
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	eba3 0309 	sub.w	r3, r3, r9
 800b532:	428b      	cmp	r3, r1
 800b534:	dc33      	bgt.n	800b59e <_printf_float+0x356>
 800b536:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	db3c      	blt.n	800b5b8 <_printf_float+0x370>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	07da      	lsls	r2, r3, #31
 800b542:	d439      	bmi.n	800b5b8 <_printf_float+0x370>
 800b544:	9b08      	ldr	r3, [sp, #32]
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	9907      	ldr	r1, [sp, #28]
 800b54a:	1a9a      	subs	r2, r3, r2
 800b54c:	eba3 0901 	sub.w	r9, r3, r1
 800b550:	4591      	cmp	r9, r2
 800b552:	bfa8      	it	ge
 800b554:	4691      	movge	r9, r2
 800b556:	f1b9 0f00 	cmp.w	r9, #0
 800b55a:	dc35      	bgt.n	800b5c8 <_printf_float+0x380>
 800b55c:	f04f 0800 	mov.w	r8, #0
 800b560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b564:	f104 0a1a 	add.w	sl, r4, #26
 800b568:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b56c:	1a9b      	subs	r3, r3, r2
 800b56e:	eba3 0309 	sub.w	r3, r3, r9
 800b572:	4543      	cmp	r3, r8
 800b574:	f77f af75 	ble.w	800b462 <_printf_float+0x21a>
 800b578:	2301      	movs	r3, #1
 800b57a:	4652      	mov	r2, sl
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f aeae 	beq.w	800b2e4 <_printf_float+0x9c>
 800b588:	f108 0801 	add.w	r8, r8, #1
 800b58c:	e7ec      	b.n	800b568 <_printf_float+0x320>
 800b58e:	4613      	mov	r3, r2
 800b590:	4631      	mov	r1, r6
 800b592:	4642      	mov	r2, r8
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	d1bf      	bne.n	800b51c <_printf_float+0x2d4>
 800b59c:	e6a2      	b.n	800b2e4 <_printf_float+0x9c>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	9204      	str	r2, [sp, #16]
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f ae9b 	beq.w	800b2e4 <_printf_float+0x9c>
 800b5ae:	9b05      	ldr	r3, [sp, #20]
 800b5b0:	9a04      	ldr	r2, [sp, #16]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	9305      	str	r3, [sp, #20]
 800b5b6:	e7b7      	b.n	800b528 <_printf_float+0x2e0>
 800b5b8:	4653      	mov	r3, sl
 800b5ba:	465a      	mov	r2, fp
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	47b8      	blx	r7
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d1be      	bne.n	800b544 <_printf_float+0x2fc>
 800b5c6:	e68d      	b.n	800b2e4 <_printf_float+0x9c>
 800b5c8:	9a04      	ldr	r2, [sp, #16]
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	4442      	add	r2, r8
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d1c1      	bne.n	800b55c <_printf_float+0x314>
 800b5d8:	e684      	b.n	800b2e4 <_printf_float+0x9c>
 800b5da:	9a08      	ldr	r2, [sp, #32]
 800b5dc:	2a01      	cmp	r2, #1
 800b5de:	dc01      	bgt.n	800b5e4 <_printf_float+0x39c>
 800b5e0:	07db      	lsls	r3, r3, #31
 800b5e2:	d537      	bpl.n	800b654 <_printf_float+0x40c>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f ae78 	beq.w	800b2e4 <_printf_float+0x9c>
 800b5f4:	4653      	mov	r3, sl
 800b5f6:	465a      	mov	r2, fp
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b8      	blx	r7
 800b5fe:	3001      	adds	r0, #1
 800b600:	f43f ae70 	beq.w	800b2e4 <_printf_float+0x9c>
 800b604:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b608:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b610:	d01b      	beq.n	800b64a <_printf_float+0x402>
 800b612:	9b08      	ldr	r3, [sp, #32]
 800b614:	f108 0201 	add.w	r2, r8, #1
 800b618:	3b01      	subs	r3, #1
 800b61a:	4631      	mov	r1, r6
 800b61c:	4628      	mov	r0, r5
 800b61e:	47b8      	blx	r7
 800b620:	3001      	adds	r0, #1
 800b622:	d10e      	bne.n	800b642 <_printf_float+0x3fa>
 800b624:	e65e      	b.n	800b2e4 <_printf_float+0x9c>
 800b626:	2301      	movs	r3, #1
 800b628:	464a      	mov	r2, r9
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f ae57 	beq.w	800b2e4 <_printf_float+0x9c>
 800b636:	f108 0801 	add.w	r8, r8, #1
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	4543      	cmp	r3, r8
 800b640:	dcf1      	bgt.n	800b626 <_printf_float+0x3de>
 800b642:	9b04      	ldr	r3, [sp, #16]
 800b644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b648:	e6db      	b.n	800b402 <_printf_float+0x1ba>
 800b64a:	f04f 0800 	mov.w	r8, #0
 800b64e:	f104 091a 	add.w	r9, r4, #26
 800b652:	e7f2      	b.n	800b63a <_printf_float+0x3f2>
 800b654:	2301      	movs	r3, #1
 800b656:	4642      	mov	r2, r8
 800b658:	e7df      	b.n	800b61a <_printf_float+0x3d2>
 800b65a:	2301      	movs	r3, #1
 800b65c:	464a      	mov	r2, r9
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	f43f ae3d 	beq.w	800b2e4 <_printf_float+0x9c>
 800b66a:	f108 0801 	add.w	r8, r8, #1
 800b66e:	68e3      	ldr	r3, [r4, #12]
 800b670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b672:	1a5b      	subs	r3, r3, r1
 800b674:	4543      	cmp	r3, r8
 800b676:	dcf0      	bgt.n	800b65a <_printf_float+0x412>
 800b678:	e6f7      	b.n	800b46a <_printf_float+0x222>
 800b67a:	f04f 0800 	mov.w	r8, #0
 800b67e:	f104 0919 	add.w	r9, r4, #25
 800b682:	e7f4      	b.n	800b66e <_printf_float+0x426>

0800b684 <_printf_common>:
 800b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b688:	4616      	mov	r6, r2
 800b68a:	4699      	mov	r9, r3
 800b68c:	688a      	ldr	r2, [r1, #8]
 800b68e:	690b      	ldr	r3, [r1, #16]
 800b690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b694:	4293      	cmp	r3, r2
 800b696:	bfb8      	it	lt
 800b698:	4613      	movlt	r3, r2
 800b69a:	6033      	str	r3, [r6, #0]
 800b69c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	b10a      	cbz	r2, 800b6aa <_printf_common+0x26>
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	0699      	lsls	r1, r3, #26
 800b6ae:	bf42      	ittt	mi
 800b6b0:	6833      	ldrmi	r3, [r6, #0]
 800b6b2:	3302      	addmi	r3, #2
 800b6b4:	6033      	strmi	r3, [r6, #0]
 800b6b6:	6825      	ldr	r5, [r4, #0]
 800b6b8:	f015 0506 	ands.w	r5, r5, #6
 800b6bc:	d106      	bne.n	800b6cc <_printf_common+0x48>
 800b6be:	f104 0a19 	add.w	sl, r4, #25
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	6832      	ldr	r2, [r6, #0]
 800b6c6:	1a9b      	subs	r3, r3, r2
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	dc26      	bgt.n	800b71a <_printf_common+0x96>
 800b6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6d0:	1e13      	subs	r3, r2, #0
 800b6d2:	6822      	ldr	r2, [r4, #0]
 800b6d4:	bf18      	it	ne
 800b6d6:	2301      	movne	r3, #1
 800b6d8:	0692      	lsls	r2, r2, #26
 800b6da:	d42b      	bmi.n	800b734 <_printf_common+0xb0>
 800b6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	47c0      	blx	r8
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d01e      	beq.n	800b728 <_printf_common+0xa4>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	68e5      	ldr	r5, [r4, #12]
 800b6ee:	6832      	ldr	r2, [r6, #0]
 800b6f0:	f003 0306 	and.w	r3, r3, #6
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	bf08      	it	eq
 800b6f8:	1aad      	subeq	r5, r5, r2
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	6922      	ldr	r2, [r4, #16]
 800b6fe:	bf0c      	ite	eq
 800b700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b704:	2500      	movne	r5, #0
 800b706:	4293      	cmp	r3, r2
 800b708:	bfc4      	itt	gt
 800b70a:	1a9b      	subgt	r3, r3, r2
 800b70c:	18ed      	addgt	r5, r5, r3
 800b70e:	2600      	movs	r6, #0
 800b710:	341a      	adds	r4, #26
 800b712:	42b5      	cmp	r5, r6
 800b714:	d11a      	bne.n	800b74c <_printf_common+0xc8>
 800b716:	2000      	movs	r0, #0
 800b718:	e008      	b.n	800b72c <_printf_common+0xa8>
 800b71a:	2301      	movs	r3, #1
 800b71c:	4652      	mov	r2, sl
 800b71e:	4649      	mov	r1, r9
 800b720:	4638      	mov	r0, r7
 800b722:	47c0      	blx	r8
 800b724:	3001      	adds	r0, #1
 800b726:	d103      	bne.n	800b730 <_printf_common+0xac>
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b730:	3501      	adds	r5, #1
 800b732:	e7c6      	b.n	800b6c2 <_printf_common+0x3e>
 800b734:	18e1      	adds	r1, r4, r3
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	2030      	movs	r0, #48	; 0x30
 800b73a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b73e:	4422      	add	r2, r4
 800b740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b748:	3302      	adds	r3, #2
 800b74a:	e7c7      	b.n	800b6dc <_printf_common+0x58>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4622      	mov	r2, r4
 800b750:	4649      	mov	r1, r9
 800b752:	4638      	mov	r0, r7
 800b754:	47c0      	blx	r8
 800b756:	3001      	adds	r0, #1
 800b758:	d0e6      	beq.n	800b728 <_printf_common+0xa4>
 800b75a:	3601      	adds	r6, #1
 800b75c:	e7d9      	b.n	800b712 <_printf_common+0x8e>
	...

0800b760 <_printf_i>:
 800b760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	7e0f      	ldrb	r7, [r1, #24]
 800b766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b768:	2f78      	cmp	r7, #120	; 0x78
 800b76a:	4691      	mov	r9, r2
 800b76c:	4680      	mov	r8, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	469a      	mov	sl, r3
 800b772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b776:	d807      	bhi.n	800b788 <_printf_i+0x28>
 800b778:	2f62      	cmp	r7, #98	; 0x62
 800b77a:	d80a      	bhi.n	800b792 <_printf_i+0x32>
 800b77c:	2f00      	cmp	r7, #0
 800b77e:	f000 80d8 	beq.w	800b932 <_printf_i+0x1d2>
 800b782:	2f58      	cmp	r7, #88	; 0x58
 800b784:	f000 80a3 	beq.w	800b8ce <_printf_i+0x16e>
 800b788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b790:	e03a      	b.n	800b808 <_printf_i+0xa8>
 800b792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b796:	2b15      	cmp	r3, #21
 800b798:	d8f6      	bhi.n	800b788 <_printf_i+0x28>
 800b79a:	a101      	add	r1, pc, #4	; (adr r1, 800b7a0 <_printf_i+0x40>)
 800b79c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7a0:	0800b7f9 	.word	0x0800b7f9
 800b7a4:	0800b80d 	.word	0x0800b80d
 800b7a8:	0800b789 	.word	0x0800b789
 800b7ac:	0800b789 	.word	0x0800b789
 800b7b0:	0800b789 	.word	0x0800b789
 800b7b4:	0800b789 	.word	0x0800b789
 800b7b8:	0800b80d 	.word	0x0800b80d
 800b7bc:	0800b789 	.word	0x0800b789
 800b7c0:	0800b789 	.word	0x0800b789
 800b7c4:	0800b789 	.word	0x0800b789
 800b7c8:	0800b789 	.word	0x0800b789
 800b7cc:	0800b919 	.word	0x0800b919
 800b7d0:	0800b83d 	.word	0x0800b83d
 800b7d4:	0800b8fb 	.word	0x0800b8fb
 800b7d8:	0800b789 	.word	0x0800b789
 800b7dc:	0800b789 	.word	0x0800b789
 800b7e0:	0800b93b 	.word	0x0800b93b
 800b7e4:	0800b789 	.word	0x0800b789
 800b7e8:	0800b83d 	.word	0x0800b83d
 800b7ec:	0800b789 	.word	0x0800b789
 800b7f0:	0800b789 	.word	0x0800b789
 800b7f4:	0800b903 	.word	0x0800b903
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	1d1a      	adds	r2, r3, #4
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	602a      	str	r2, [r5, #0]
 800b800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b808:	2301      	movs	r3, #1
 800b80a:	e0a3      	b.n	800b954 <_printf_i+0x1f4>
 800b80c:	6820      	ldr	r0, [r4, #0]
 800b80e:	6829      	ldr	r1, [r5, #0]
 800b810:	0606      	lsls	r6, r0, #24
 800b812:	f101 0304 	add.w	r3, r1, #4
 800b816:	d50a      	bpl.n	800b82e <_printf_i+0xce>
 800b818:	680e      	ldr	r6, [r1, #0]
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	2e00      	cmp	r6, #0
 800b81e:	da03      	bge.n	800b828 <_printf_i+0xc8>
 800b820:	232d      	movs	r3, #45	; 0x2d
 800b822:	4276      	negs	r6, r6
 800b824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b828:	485e      	ldr	r0, [pc, #376]	; (800b9a4 <_printf_i+0x244>)
 800b82a:	230a      	movs	r3, #10
 800b82c:	e019      	b.n	800b862 <_printf_i+0x102>
 800b82e:	680e      	ldr	r6, [r1, #0]
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b836:	bf18      	it	ne
 800b838:	b236      	sxthne	r6, r6
 800b83a:	e7ef      	b.n	800b81c <_printf_i+0xbc>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	1d19      	adds	r1, r3, #4
 800b842:	6029      	str	r1, [r5, #0]
 800b844:	0601      	lsls	r1, r0, #24
 800b846:	d501      	bpl.n	800b84c <_printf_i+0xec>
 800b848:	681e      	ldr	r6, [r3, #0]
 800b84a:	e002      	b.n	800b852 <_printf_i+0xf2>
 800b84c:	0646      	lsls	r6, r0, #25
 800b84e:	d5fb      	bpl.n	800b848 <_printf_i+0xe8>
 800b850:	881e      	ldrh	r6, [r3, #0]
 800b852:	4854      	ldr	r0, [pc, #336]	; (800b9a4 <_printf_i+0x244>)
 800b854:	2f6f      	cmp	r7, #111	; 0x6f
 800b856:	bf0c      	ite	eq
 800b858:	2308      	moveq	r3, #8
 800b85a:	230a      	movne	r3, #10
 800b85c:	2100      	movs	r1, #0
 800b85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b862:	6865      	ldr	r5, [r4, #4]
 800b864:	60a5      	str	r5, [r4, #8]
 800b866:	2d00      	cmp	r5, #0
 800b868:	bfa2      	ittt	ge
 800b86a:	6821      	ldrge	r1, [r4, #0]
 800b86c:	f021 0104 	bicge.w	r1, r1, #4
 800b870:	6021      	strge	r1, [r4, #0]
 800b872:	b90e      	cbnz	r6, 800b878 <_printf_i+0x118>
 800b874:	2d00      	cmp	r5, #0
 800b876:	d04d      	beq.n	800b914 <_printf_i+0x1b4>
 800b878:	4615      	mov	r5, r2
 800b87a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b87e:	fb03 6711 	mls	r7, r3, r1, r6
 800b882:	5dc7      	ldrb	r7, [r0, r7]
 800b884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b888:	4637      	mov	r7, r6
 800b88a:	42bb      	cmp	r3, r7
 800b88c:	460e      	mov	r6, r1
 800b88e:	d9f4      	bls.n	800b87a <_printf_i+0x11a>
 800b890:	2b08      	cmp	r3, #8
 800b892:	d10b      	bne.n	800b8ac <_printf_i+0x14c>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	07de      	lsls	r6, r3, #31
 800b898:	d508      	bpl.n	800b8ac <_printf_i+0x14c>
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	6861      	ldr	r1, [r4, #4]
 800b89e:	4299      	cmp	r1, r3
 800b8a0:	bfde      	ittt	le
 800b8a2:	2330      	movle	r3, #48	; 0x30
 800b8a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8ac:	1b52      	subs	r2, r2, r5
 800b8ae:	6122      	str	r2, [r4, #16]
 800b8b0:	f8cd a000 	str.w	sl, [sp]
 800b8b4:	464b      	mov	r3, r9
 800b8b6:	aa03      	add	r2, sp, #12
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	f7ff fee2 	bl	800b684 <_printf_common>
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	d14c      	bne.n	800b95e <_printf_i+0x1fe>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	b004      	add	sp, #16
 800b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ce:	4835      	ldr	r0, [pc, #212]	; (800b9a4 <_printf_i+0x244>)
 800b8d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8d4:	6829      	ldr	r1, [r5, #0]
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8dc:	6029      	str	r1, [r5, #0]
 800b8de:	061d      	lsls	r5, r3, #24
 800b8e0:	d514      	bpl.n	800b90c <_printf_i+0x1ac>
 800b8e2:	07df      	lsls	r7, r3, #31
 800b8e4:	bf44      	itt	mi
 800b8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b8ea:	6023      	strmi	r3, [r4, #0]
 800b8ec:	b91e      	cbnz	r6, 800b8f6 <_printf_i+0x196>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	f023 0320 	bic.w	r3, r3, #32
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	2310      	movs	r3, #16
 800b8f8:	e7b0      	b.n	800b85c <_printf_i+0xfc>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	f043 0320 	orr.w	r3, r3, #32
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	2378      	movs	r3, #120	; 0x78
 800b904:	4828      	ldr	r0, [pc, #160]	; (800b9a8 <_printf_i+0x248>)
 800b906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b90a:	e7e3      	b.n	800b8d4 <_printf_i+0x174>
 800b90c:	0659      	lsls	r1, r3, #25
 800b90e:	bf48      	it	mi
 800b910:	b2b6      	uxthmi	r6, r6
 800b912:	e7e6      	b.n	800b8e2 <_printf_i+0x182>
 800b914:	4615      	mov	r5, r2
 800b916:	e7bb      	b.n	800b890 <_printf_i+0x130>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	6826      	ldr	r6, [r4, #0]
 800b91c:	6961      	ldr	r1, [r4, #20]
 800b91e:	1d18      	adds	r0, r3, #4
 800b920:	6028      	str	r0, [r5, #0]
 800b922:	0635      	lsls	r5, r6, #24
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	d501      	bpl.n	800b92c <_printf_i+0x1cc>
 800b928:	6019      	str	r1, [r3, #0]
 800b92a:	e002      	b.n	800b932 <_printf_i+0x1d2>
 800b92c:	0670      	lsls	r0, r6, #25
 800b92e:	d5fb      	bpl.n	800b928 <_printf_i+0x1c8>
 800b930:	8019      	strh	r1, [r3, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	6123      	str	r3, [r4, #16]
 800b936:	4615      	mov	r5, r2
 800b938:	e7ba      	b.n	800b8b0 <_printf_i+0x150>
 800b93a:	682b      	ldr	r3, [r5, #0]
 800b93c:	1d1a      	adds	r2, r3, #4
 800b93e:	602a      	str	r2, [r5, #0]
 800b940:	681d      	ldr	r5, [r3, #0]
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	2100      	movs	r1, #0
 800b946:	4628      	mov	r0, r5
 800b948:	f7f4 fcd2 	bl	80002f0 <memchr>
 800b94c:	b108      	cbz	r0, 800b952 <_printf_i+0x1f2>
 800b94e:	1b40      	subs	r0, r0, r5
 800b950:	6060      	str	r0, [r4, #4]
 800b952:	6863      	ldr	r3, [r4, #4]
 800b954:	6123      	str	r3, [r4, #16]
 800b956:	2300      	movs	r3, #0
 800b958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b95c:	e7a8      	b.n	800b8b0 <_printf_i+0x150>
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	462a      	mov	r2, r5
 800b962:	4649      	mov	r1, r9
 800b964:	4640      	mov	r0, r8
 800b966:	47d0      	blx	sl
 800b968:	3001      	adds	r0, #1
 800b96a:	d0ab      	beq.n	800b8c4 <_printf_i+0x164>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	079b      	lsls	r3, r3, #30
 800b970:	d413      	bmi.n	800b99a <_printf_i+0x23a>
 800b972:	68e0      	ldr	r0, [r4, #12]
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	4298      	cmp	r0, r3
 800b978:	bfb8      	it	lt
 800b97a:	4618      	movlt	r0, r3
 800b97c:	e7a4      	b.n	800b8c8 <_printf_i+0x168>
 800b97e:	2301      	movs	r3, #1
 800b980:	4632      	mov	r2, r6
 800b982:	4649      	mov	r1, r9
 800b984:	4640      	mov	r0, r8
 800b986:	47d0      	blx	sl
 800b988:	3001      	adds	r0, #1
 800b98a:	d09b      	beq.n	800b8c4 <_printf_i+0x164>
 800b98c:	3501      	adds	r5, #1
 800b98e:	68e3      	ldr	r3, [r4, #12]
 800b990:	9903      	ldr	r1, [sp, #12]
 800b992:	1a5b      	subs	r3, r3, r1
 800b994:	42ab      	cmp	r3, r5
 800b996:	dcf2      	bgt.n	800b97e <_printf_i+0x21e>
 800b998:	e7eb      	b.n	800b972 <_printf_i+0x212>
 800b99a:	2500      	movs	r5, #0
 800b99c:	f104 0619 	add.w	r6, r4, #25
 800b9a0:	e7f5      	b.n	800b98e <_printf_i+0x22e>
 800b9a2:	bf00      	nop
 800b9a4:	0800ed12 	.word	0x0800ed12
 800b9a8:	0800ed23 	.word	0x0800ed23

0800b9ac <iprintf>:
 800b9ac:	b40f      	push	{r0, r1, r2, r3}
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <iprintf+0x2c>)
 800b9b0:	b513      	push	{r0, r1, r4, lr}
 800b9b2:	681c      	ldr	r4, [r3, #0]
 800b9b4:	b124      	cbz	r4, 800b9c0 <iprintf+0x14>
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	b913      	cbnz	r3, 800b9c0 <iprintf+0x14>
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f001 f8ac 	bl	800cb18 <__sinit>
 800b9c0:	ab05      	add	r3, sp, #20
 800b9c2:	9a04      	ldr	r2, [sp, #16]
 800b9c4:	68a1      	ldr	r1, [r4, #8]
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f001 ffb7 	bl	800d93c <_vfiprintf_r>
 800b9ce:	b002      	add	sp, #8
 800b9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d4:	b004      	add	sp, #16
 800b9d6:	4770      	bx	lr
 800b9d8:	24000058 	.word	0x24000058

0800b9dc <_puts_r>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	460e      	mov	r6, r1
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	b118      	cbz	r0, 800b9ec <_puts_r+0x10>
 800b9e4:	6983      	ldr	r3, [r0, #24]
 800b9e6:	b90b      	cbnz	r3, 800b9ec <_puts_r+0x10>
 800b9e8:	f001 f896 	bl	800cb18 <__sinit>
 800b9ec:	69ab      	ldr	r3, [r5, #24]
 800b9ee:	68ac      	ldr	r4, [r5, #8]
 800b9f0:	b913      	cbnz	r3, 800b9f8 <_puts_r+0x1c>
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f001 f890 	bl	800cb18 <__sinit>
 800b9f8:	4b2c      	ldr	r3, [pc, #176]	; (800baac <_puts_r+0xd0>)
 800b9fa:	429c      	cmp	r4, r3
 800b9fc:	d120      	bne.n	800ba40 <_puts_r+0x64>
 800b9fe:	686c      	ldr	r4, [r5, #4]
 800ba00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba02:	07db      	lsls	r3, r3, #31
 800ba04:	d405      	bmi.n	800ba12 <_puts_r+0x36>
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	0598      	lsls	r0, r3, #22
 800ba0a:	d402      	bmi.n	800ba12 <_puts_r+0x36>
 800ba0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba0e:	f001 f926 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	0719      	lsls	r1, r3, #28
 800ba16:	d51d      	bpl.n	800ba54 <_puts_r+0x78>
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	b1db      	cbz	r3, 800ba54 <_puts_r+0x78>
 800ba1c:	3e01      	subs	r6, #1
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba24:	3b01      	subs	r3, #1
 800ba26:	60a3      	str	r3, [r4, #8]
 800ba28:	bb39      	cbnz	r1, 800ba7a <_puts_r+0x9e>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da38      	bge.n	800baa0 <_puts_r+0xc4>
 800ba2e:	4622      	mov	r2, r4
 800ba30:	210a      	movs	r1, #10
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 f89c 	bl	800bb70 <__swbuf_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d011      	beq.n	800ba60 <_puts_r+0x84>
 800ba3c:	250a      	movs	r5, #10
 800ba3e:	e011      	b.n	800ba64 <_puts_r+0x88>
 800ba40:	4b1b      	ldr	r3, [pc, #108]	; (800bab0 <_puts_r+0xd4>)
 800ba42:	429c      	cmp	r4, r3
 800ba44:	d101      	bne.n	800ba4a <_puts_r+0x6e>
 800ba46:	68ac      	ldr	r4, [r5, #8]
 800ba48:	e7da      	b.n	800ba00 <_puts_r+0x24>
 800ba4a:	4b1a      	ldr	r3, [pc, #104]	; (800bab4 <_puts_r+0xd8>)
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	bf08      	it	eq
 800ba50:	68ec      	ldreq	r4, [r5, #12]
 800ba52:	e7d5      	b.n	800ba00 <_puts_r+0x24>
 800ba54:	4621      	mov	r1, r4
 800ba56:	4628      	mov	r0, r5
 800ba58:	f000 f8dc 	bl	800bc14 <__swsetup_r>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d0dd      	beq.n	800ba1c <_puts_r+0x40>
 800ba60:	f04f 35ff 	mov.w	r5, #4294967295
 800ba64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba66:	07da      	lsls	r2, r3, #31
 800ba68:	d405      	bmi.n	800ba76 <_puts_r+0x9a>
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	059b      	lsls	r3, r3, #22
 800ba6e:	d402      	bmi.n	800ba76 <_puts_r+0x9a>
 800ba70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba72:	f001 f8f5 	bl	800cc60 <__retarget_lock_release_recursive>
 800ba76:	4628      	mov	r0, r5
 800ba78:	bd70      	pop	{r4, r5, r6, pc}
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da04      	bge.n	800ba88 <_puts_r+0xac>
 800ba7e:	69a2      	ldr	r2, [r4, #24]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	dc06      	bgt.n	800ba92 <_puts_r+0xb6>
 800ba84:	290a      	cmp	r1, #10
 800ba86:	d004      	beq.n	800ba92 <_puts_r+0xb6>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	6022      	str	r2, [r4, #0]
 800ba8e:	7019      	strb	r1, [r3, #0]
 800ba90:	e7c5      	b.n	800ba1e <_puts_r+0x42>
 800ba92:	4622      	mov	r2, r4
 800ba94:	4628      	mov	r0, r5
 800ba96:	f000 f86b 	bl	800bb70 <__swbuf_r>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	d1bf      	bne.n	800ba1e <_puts_r+0x42>
 800ba9e:	e7df      	b.n	800ba60 <_puts_r+0x84>
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	250a      	movs	r5, #10
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	701d      	strb	r5, [r3, #0]
 800baaa:	e7db      	b.n	800ba64 <_puts_r+0x88>
 800baac:	0800ede4 	.word	0x0800ede4
 800bab0:	0800ee04 	.word	0x0800ee04
 800bab4:	0800edc4 	.word	0x0800edc4

0800bab8 <puts>:
 800bab8:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <puts+0xc>)
 800baba:	4601      	mov	r1, r0
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f7ff bf8d 	b.w	800b9dc <_puts_r>
 800bac2:	bf00      	nop
 800bac4:	24000058 	.word	0x24000058

0800bac8 <sniprintf>:
 800bac8:	b40c      	push	{r2, r3}
 800baca:	b530      	push	{r4, r5, lr}
 800bacc:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <sniprintf+0x64>)
 800bace:	1e0c      	subs	r4, r1, #0
 800bad0:	681d      	ldr	r5, [r3, #0]
 800bad2:	b09d      	sub	sp, #116	; 0x74
 800bad4:	da08      	bge.n	800bae8 <sniprintf+0x20>
 800bad6:	238b      	movs	r3, #139	; 0x8b
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	f04f 30ff 	mov.w	r0, #4294967295
 800bade:	b01d      	add	sp, #116	; 0x74
 800bae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bae4:	b002      	add	sp, #8
 800bae6:	4770      	bx	lr
 800bae8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800baec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800baf0:	bf14      	ite	ne
 800baf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800baf6:	4623      	moveq	r3, r4
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	9307      	str	r3, [sp, #28]
 800bafc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb00:	9002      	str	r0, [sp, #8]
 800bb02:	9006      	str	r0, [sp, #24]
 800bb04:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb0a:	ab21      	add	r3, sp, #132	; 0x84
 800bb0c:	a902      	add	r1, sp, #8
 800bb0e:	4628      	mov	r0, r5
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	f001 fde9 	bl	800d6e8 <_svfiprintf_r>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	bfbc      	itt	lt
 800bb1a:	238b      	movlt	r3, #139	; 0x8b
 800bb1c:	602b      	strlt	r3, [r5, #0]
 800bb1e:	2c00      	cmp	r4, #0
 800bb20:	d0dd      	beq.n	800bade <sniprintf+0x16>
 800bb22:	9b02      	ldr	r3, [sp, #8]
 800bb24:	2200      	movs	r2, #0
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	e7d9      	b.n	800bade <sniprintf+0x16>
 800bb2a:	bf00      	nop
 800bb2c:	24000058 	.word	0x24000058

0800bb30 <siprintf>:
 800bb30:	b40e      	push	{r1, r2, r3}
 800bb32:	b500      	push	{lr}
 800bb34:	b09c      	sub	sp, #112	; 0x70
 800bb36:	ab1d      	add	r3, sp, #116	; 0x74
 800bb38:	9002      	str	r0, [sp, #8]
 800bb3a:	9006      	str	r0, [sp, #24]
 800bb3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb40:	4809      	ldr	r0, [pc, #36]	; (800bb68 <siprintf+0x38>)
 800bb42:	9107      	str	r1, [sp, #28]
 800bb44:	9104      	str	r1, [sp, #16]
 800bb46:	4909      	ldr	r1, [pc, #36]	; (800bb6c <siprintf+0x3c>)
 800bb48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb4c:	9105      	str	r1, [sp, #20]
 800bb4e:	6800      	ldr	r0, [r0, #0]
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	a902      	add	r1, sp, #8
 800bb54:	f001 fdc8 	bl	800d6e8 <_svfiprintf_r>
 800bb58:	9b02      	ldr	r3, [sp, #8]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	b01c      	add	sp, #112	; 0x70
 800bb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb64:	b003      	add	sp, #12
 800bb66:	4770      	bx	lr
 800bb68:	24000058 	.word	0x24000058
 800bb6c:	ffff0208 	.word	0xffff0208

0800bb70 <__swbuf_r>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	460e      	mov	r6, r1
 800bb74:	4614      	mov	r4, r2
 800bb76:	4605      	mov	r5, r0
 800bb78:	b118      	cbz	r0, 800bb82 <__swbuf_r+0x12>
 800bb7a:	6983      	ldr	r3, [r0, #24]
 800bb7c:	b90b      	cbnz	r3, 800bb82 <__swbuf_r+0x12>
 800bb7e:	f000 ffcb 	bl	800cb18 <__sinit>
 800bb82:	4b21      	ldr	r3, [pc, #132]	; (800bc08 <__swbuf_r+0x98>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	d12b      	bne.n	800bbe0 <__swbuf_r+0x70>
 800bb88:	686c      	ldr	r4, [r5, #4]
 800bb8a:	69a3      	ldr	r3, [r4, #24]
 800bb8c:	60a3      	str	r3, [r4, #8]
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	071a      	lsls	r2, r3, #28
 800bb92:	d52f      	bpl.n	800bbf4 <__swbuf_r+0x84>
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	b36b      	cbz	r3, 800bbf4 <__swbuf_r+0x84>
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	1ac0      	subs	r0, r0, r3
 800bb9e:	6963      	ldr	r3, [r4, #20]
 800bba0:	b2f6      	uxtb	r6, r6
 800bba2:	4283      	cmp	r3, r0
 800bba4:	4637      	mov	r7, r6
 800bba6:	dc04      	bgt.n	800bbb2 <__swbuf_r+0x42>
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 ff20 	bl	800c9f0 <_fflush_r>
 800bbb0:	bb30      	cbnz	r0, 800bc00 <__swbuf_r+0x90>
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	60a3      	str	r3, [r4, #8]
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	6022      	str	r2, [r4, #0]
 800bbbe:	701e      	strb	r6, [r3, #0]
 800bbc0:	6963      	ldr	r3, [r4, #20]
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	4283      	cmp	r3, r0
 800bbc6:	d004      	beq.n	800bbd2 <__swbuf_r+0x62>
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	07db      	lsls	r3, r3, #31
 800bbcc:	d506      	bpl.n	800bbdc <__swbuf_r+0x6c>
 800bbce:	2e0a      	cmp	r6, #10
 800bbd0:	d104      	bne.n	800bbdc <__swbuf_r+0x6c>
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f000 ff0b 	bl	800c9f0 <_fflush_r>
 800bbda:	b988      	cbnz	r0, 800bc00 <__swbuf_r+0x90>
 800bbdc:	4638      	mov	r0, r7
 800bbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <__swbuf_r+0x9c>)
 800bbe2:	429c      	cmp	r4, r3
 800bbe4:	d101      	bne.n	800bbea <__swbuf_r+0x7a>
 800bbe6:	68ac      	ldr	r4, [r5, #8]
 800bbe8:	e7cf      	b.n	800bb8a <__swbuf_r+0x1a>
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <__swbuf_r+0xa0>)
 800bbec:	429c      	cmp	r4, r3
 800bbee:	bf08      	it	eq
 800bbf0:	68ec      	ldreq	r4, [r5, #12]
 800bbf2:	e7ca      	b.n	800bb8a <__swbuf_r+0x1a>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f80c 	bl	800bc14 <__swsetup_r>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d0cb      	beq.n	800bb98 <__swbuf_r+0x28>
 800bc00:	f04f 37ff 	mov.w	r7, #4294967295
 800bc04:	e7ea      	b.n	800bbdc <__swbuf_r+0x6c>
 800bc06:	bf00      	nop
 800bc08:	0800ede4 	.word	0x0800ede4
 800bc0c:	0800ee04 	.word	0x0800ee04
 800bc10:	0800edc4 	.word	0x0800edc4

0800bc14 <__swsetup_r>:
 800bc14:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <__swsetup_r+0xcc>)
 800bc16:	b570      	push	{r4, r5, r6, lr}
 800bc18:	681d      	ldr	r5, [r3, #0]
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	b125      	cbz	r5, 800bc2a <__swsetup_r+0x16>
 800bc20:	69ab      	ldr	r3, [r5, #24]
 800bc22:	b913      	cbnz	r3, 800bc2a <__swsetup_r+0x16>
 800bc24:	4628      	mov	r0, r5
 800bc26:	f000 ff77 	bl	800cb18 <__sinit>
 800bc2a:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <__swsetup_r+0xd0>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d10f      	bne.n	800bc50 <__swsetup_r+0x3c>
 800bc30:	686c      	ldr	r4, [r5, #4]
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc38:	0719      	lsls	r1, r3, #28
 800bc3a:	d42c      	bmi.n	800bc96 <__swsetup_r+0x82>
 800bc3c:	06dd      	lsls	r5, r3, #27
 800bc3e:	d411      	bmi.n	800bc64 <__swsetup_r+0x50>
 800bc40:	2309      	movs	r3, #9
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc48:	81a3      	strh	r3, [r4, #12]
 800bc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4e:	e03e      	b.n	800bcce <__swsetup_r+0xba>
 800bc50:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <__swsetup_r+0xd4>)
 800bc52:	429c      	cmp	r4, r3
 800bc54:	d101      	bne.n	800bc5a <__swsetup_r+0x46>
 800bc56:	68ac      	ldr	r4, [r5, #8]
 800bc58:	e7eb      	b.n	800bc32 <__swsetup_r+0x1e>
 800bc5a:	4b24      	ldr	r3, [pc, #144]	; (800bcec <__swsetup_r+0xd8>)
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	bf08      	it	eq
 800bc60:	68ec      	ldreq	r4, [r5, #12]
 800bc62:	e7e6      	b.n	800bc32 <__swsetup_r+0x1e>
 800bc64:	0758      	lsls	r0, r3, #29
 800bc66:	d512      	bpl.n	800bc8e <__swsetup_r+0x7a>
 800bc68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc6a:	b141      	cbz	r1, 800bc7e <__swsetup_r+0x6a>
 800bc6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc70:	4299      	cmp	r1, r3
 800bc72:	d002      	beq.n	800bc7a <__swsetup_r+0x66>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f001 fbfb 	bl	800d470 <_free_r>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	2300      	movs	r3, #0
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f043 0308 	orr.w	r3, r3, #8
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	b94b      	cbnz	r3, 800bcae <__swsetup_r+0x9a>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca4:	d003      	beq.n	800bcae <__swsetup_r+0x9a>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f000 ffff 	bl	800ccac <__smakebuf_r>
 800bcae:	89a0      	ldrh	r0, [r4, #12]
 800bcb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcb4:	f010 0301 	ands.w	r3, r0, #1
 800bcb8:	d00a      	beq.n	800bcd0 <__swsetup_r+0xbc>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	6963      	ldr	r3, [r4, #20]
 800bcc0:	425b      	negs	r3, r3
 800bcc2:	61a3      	str	r3, [r4, #24]
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	b943      	cbnz	r3, 800bcda <__swsetup_r+0xc6>
 800bcc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bccc:	d1ba      	bne.n	800bc44 <__swsetup_r+0x30>
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	0781      	lsls	r1, r0, #30
 800bcd2:	bf58      	it	pl
 800bcd4:	6963      	ldrpl	r3, [r4, #20]
 800bcd6:	60a3      	str	r3, [r4, #8]
 800bcd8:	e7f4      	b.n	800bcc4 <__swsetup_r+0xb0>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e7f7      	b.n	800bcce <__swsetup_r+0xba>
 800bcde:	bf00      	nop
 800bce0:	24000058 	.word	0x24000058
 800bce4:	0800ede4 	.word	0x0800ede4
 800bce8:	0800ee04 	.word	0x0800ee04
 800bcec:	0800edc4 	.word	0x0800edc4

0800bcf0 <quorem>:
 800bcf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	6903      	ldr	r3, [r0, #16]
 800bcf6:	690c      	ldr	r4, [r1, #16]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	f2c0 8081 	blt.w	800be02 <quorem+0x112>
 800bd00:	3c01      	subs	r4, #1
 800bd02:	f101 0814 	add.w	r8, r1, #20
 800bd06:	f100 0514 	add.w	r5, r0, #20
 800bd0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd24:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd28:	d331      	bcc.n	800bd8e <quorem+0x9e>
 800bd2a:	f04f 0e00 	mov.w	lr, #0
 800bd2e:	4640      	mov	r0, r8
 800bd30:	46ac      	mov	ip, r5
 800bd32:	46f2      	mov	sl, lr
 800bd34:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd38:	b293      	uxth	r3, r2
 800bd3a:	fb06 e303 	mla	r3, r6, r3, lr
 800bd3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	ebaa 0303 	sub.w	r3, sl, r3
 800bd48:	f8dc a000 	ldr.w	sl, [ip]
 800bd4c:	0c12      	lsrs	r2, r2, #16
 800bd4e:	fa13 f38a 	uxtah	r3, r3, sl
 800bd52:	fb06 e202 	mla	r2, r6, r2, lr
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9b00      	ldr	r3, [sp, #0]
 800bd5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd5e:	b292      	uxth	r2, r2
 800bd60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd68:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd6c:	4581      	cmp	r9, r0
 800bd6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd72:	f84c 3b04 	str.w	r3, [ip], #4
 800bd76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd7a:	d2db      	bcs.n	800bd34 <quorem+0x44>
 800bd7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd80:	b92b      	cbnz	r3, 800bd8e <quorem+0x9e>
 800bd82:	9b01      	ldr	r3, [sp, #4]
 800bd84:	3b04      	subs	r3, #4
 800bd86:	429d      	cmp	r5, r3
 800bd88:	461a      	mov	r2, r3
 800bd8a:	d32e      	bcc.n	800bdea <quorem+0xfa>
 800bd8c:	613c      	str	r4, [r7, #16]
 800bd8e:	4638      	mov	r0, r7
 800bd90:	f001 fa56 	bl	800d240 <__mcmp>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	db24      	blt.n	800bde2 <quorem+0xf2>
 800bd98:	3601      	adds	r6, #1
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f04f 0c00 	mov.w	ip, #0
 800bda0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bda4:	f8d0 e000 	ldr.w	lr, [r0]
 800bda8:	b293      	uxth	r3, r2
 800bdaa:	ebac 0303 	sub.w	r3, ip, r3
 800bdae:	0c12      	lsrs	r2, r2, #16
 800bdb0:	fa13 f38e 	uxtah	r3, r3, lr
 800bdb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bdb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdc2:	45c1      	cmp	r9, r8
 800bdc4:	f840 3b04 	str.w	r3, [r0], #4
 800bdc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdcc:	d2e8      	bcs.n	800bda0 <quorem+0xb0>
 800bdce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdd6:	b922      	cbnz	r2, 800bde2 <quorem+0xf2>
 800bdd8:	3b04      	subs	r3, #4
 800bdda:	429d      	cmp	r5, r3
 800bddc:	461a      	mov	r2, r3
 800bdde:	d30a      	bcc.n	800bdf6 <quorem+0x106>
 800bde0:	613c      	str	r4, [r7, #16]
 800bde2:	4630      	mov	r0, r6
 800bde4:	b003      	add	sp, #12
 800bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdea:	6812      	ldr	r2, [r2, #0]
 800bdec:	3b04      	subs	r3, #4
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	d1cc      	bne.n	800bd8c <quorem+0x9c>
 800bdf2:	3c01      	subs	r4, #1
 800bdf4:	e7c7      	b.n	800bd86 <quorem+0x96>
 800bdf6:	6812      	ldr	r2, [r2, #0]
 800bdf8:	3b04      	subs	r3, #4
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	d1f0      	bne.n	800bde0 <quorem+0xf0>
 800bdfe:	3c01      	subs	r4, #1
 800be00:	e7eb      	b.n	800bdda <quorem+0xea>
 800be02:	2000      	movs	r0, #0
 800be04:	e7ee      	b.n	800bde4 <quorem+0xf4>
	...

0800be08 <_dtoa_r>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	ed2d 8b02 	vpush	{d8}
 800be10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be12:	b091      	sub	sp, #68	; 0x44
 800be14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be18:	ec59 8b10 	vmov	r8, r9, d0
 800be1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800be1e:	9106      	str	r1, [sp, #24]
 800be20:	4606      	mov	r6, r0
 800be22:	9208      	str	r2, [sp, #32]
 800be24:	930c      	str	r3, [sp, #48]	; 0x30
 800be26:	b975      	cbnz	r5, 800be46 <_dtoa_r+0x3e>
 800be28:	2010      	movs	r0, #16
 800be2a:	f000 ff7f 	bl	800cd2c <malloc>
 800be2e:	4602      	mov	r2, r0
 800be30:	6270      	str	r0, [r6, #36]	; 0x24
 800be32:	b920      	cbnz	r0, 800be3e <_dtoa_r+0x36>
 800be34:	4baa      	ldr	r3, [pc, #680]	; (800c0e0 <_dtoa_r+0x2d8>)
 800be36:	21ea      	movs	r1, #234	; 0xea
 800be38:	48aa      	ldr	r0, [pc, #680]	; (800c0e4 <_dtoa_r+0x2dc>)
 800be3a:	f001 ff15 	bl	800dc68 <__assert_func>
 800be3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be42:	6005      	str	r5, [r0, #0]
 800be44:	60c5      	str	r5, [r0, #12]
 800be46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be48:	6819      	ldr	r1, [r3, #0]
 800be4a:	b151      	cbz	r1, 800be62 <_dtoa_r+0x5a>
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	604a      	str	r2, [r1, #4]
 800be50:	2301      	movs	r3, #1
 800be52:	4093      	lsls	r3, r2
 800be54:	608b      	str	r3, [r1, #8]
 800be56:	4630      	mov	r0, r6
 800be58:	f000 ffb0 	bl	800cdbc <_Bfree>
 800be5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	f1b9 0300 	subs.w	r3, r9, #0
 800be66:	bfbb      	ittet	lt
 800be68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800be6c:	9303      	strlt	r3, [sp, #12]
 800be6e:	2300      	movge	r3, #0
 800be70:	2201      	movlt	r2, #1
 800be72:	bfac      	ite	ge
 800be74:	6023      	strge	r3, [r4, #0]
 800be76:	6022      	strlt	r2, [r4, #0]
 800be78:	4b9b      	ldr	r3, [pc, #620]	; (800c0e8 <_dtoa_r+0x2e0>)
 800be7a:	9c03      	ldr	r4, [sp, #12]
 800be7c:	43a3      	bics	r3, r4
 800be7e:	d11c      	bne.n	800beba <_dtoa_r+0xb2>
 800be80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be82:	f242 730f 	movw	r3, #9999	; 0x270f
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800be8c:	ea53 0308 	orrs.w	r3, r3, r8
 800be90:	f000 84fd 	beq.w	800c88e <_dtoa_r+0xa86>
 800be94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be96:	b963      	cbnz	r3, 800beb2 <_dtoa_r+0xaa>
 800be98:	4b94      	ldr	r3, [pc, #592]	; (800c0ec <_dtoa_r+0x2e4>)
 800be9a:	e01f      	b.n	800bedc <_dtoa_r+0xd4>
 800be9c:	4b94      	ldr	r3, [pc, #592]	; (800c0f0 <_dtoa_r+0x2e8>)
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	3308      	adds	r3, #8
 800bea2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	9801      	ldr	r0, [sp, #4]
 800bea8:	b011      	add	sp, #68	; 0x44
 800beaa:	ecbd 8b02 	vpop	{d8}
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	4b8e      	ldr	r3, [pc, #568]	; (800c0ec <_dtoa_r+0x2e4>)
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	3303      	adds	r3, #3
 800beb8:	e7f3      	b.n	800bea2 <_dtoa_r+0x9a>
 800beba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bebe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec6:	d10b      	bne.n	800bee0 <_dtoa_r+0xd8>
 800bec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beca:	2301      	movs	r3, #1
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 84d9 	beq.w	800c888 <_dtoa_r+0xa80>
 800bed6:	4887      	ldr	r0, [pc, #540]	; (800c0f4 <_dtoa_r+0x2ec>)
 800bed8:	6018      	str	r0, [r3, #0]
 800beda:	1e43      	subs	r3, r0, #1
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	e7e2      	b.n	800bea6 <_dtoa_r+0x9e>
 800bee0:	a90f      	add	r1, sp, #60	; 0x3c
 800bee2:	aa0e      	add	r2, sp, #56	; 0x38
 800bee4:	4630      	mov	r0, r6
 800bee6:	eeb0 0b48 	vmov.f64	d0, d8
 800beea:	f001 fa4f 	bl	800d38c <__d2b>
 800beee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bef2:	4605      	mov	r5, r0
 800bef4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d046      	beq.n	800bf88 <_dtoa_r+0x180>
 800befa:	ee18 4a90 	vmov	r4, s17
 800befe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf02:	ec53 2b18 	vmov	r2, r3, d8
 800bf06:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bf0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bf12:	2400      	movs	r4, #0
 800bf14:	ec43 2b16 	vmov	d6, r2, r3
 800bf18:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bf1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c0c8 <_dtoa_r+0x2c0>
 800bf20:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf24:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c0d0 <_dtoa_r+0x2c8>
 800bf28:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bf2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c0d8 <_dtoa_r+0x2d0>
 800bf30:	ee07 1a90 	vmov	s15, r1
 800bf34:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bf38:	eeb0 7b46 	vmov.f64	d7, d6
 800bf3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bf40:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bf44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4c:	ee16 ba90 	vmov	fp, s13
 800bf50:	940a      	str	r4, [sp, #40]	; 0x28
 800bf52:	d508      	bpl.n	800bf66 <_dtoa_r+0x15e>
 800bf54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bf58:	eeb4 6b47 	vcmp.f64	d6, d7
 800bf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf60:	bf18      	it	ne
 800bf62:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bf66:	f1bb 0f16 	cmp.w	fp, #22
 800bf6a:	d82f      	bhi.n	800bfcc <_dtoa_r+0x1c4>
 800bf6c:	4b62      	ldr	r3, [pc, #392]	; (800c0f8 <_dtoa_r+0x2f0>)
 800bf6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf72:	ed93 7b00 	vldr	d7, [r3]
 800bf76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7e:	d501      	bpl.n	800bf84 <_dtoa_r+0x17c>
 800bf80:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf84:	2300      	movs	r3, #0
 800bf86:	e022      	b.n	800bfce <_dtoa_r+0x1c6>
 800bf88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf8a:	4401      	add	r1, r0
 800bf8c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bf90:	2b20      	cmp	r3, #32
 800bf92:	bfc1      	itttt	gt
 800bf94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf98:	fa04 f303 	lslgt.w	r3, r4, r3
 800bf9c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bfa0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bfa4:	bfd6      	itet	le
 800bfa6:	f1c3 0320 	rsble	r3, r3, #32
 800bfaa:	ea43 0808 	orrgt.w	r8, r3, r8
 800bfae:	fa08 f803 	lslle.w	r8, r8, r3
 800bfb2:	ee07 8a90 	vmov	s15, r8
 800bfb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bfba:	3901      	subs	r1, #1
 800bfbc:	ee17 4a90 	vmov	r4, s15
 800bfc0:	ec53 2b17 	vmov	r2, r3, d7
 800bfc4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bfc8:	2401      	movs	r4, #1
 800bfca:	e7a3      	b.n	800bf14 <_dtoa_r+0x10c>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfd0:	1a43      	subs	r3, r0, r1
 800bfd2:	1e5a      	subs	r2, r3, #1
 800bfd4:	bf45      	ittet	mi
 800bfd6:	f1c3 0301 	rsbmi	r3, r3, #1
 800bfda:	9304      	strmi	r3, [sp, #16]
 800bfdc:	2300      	movpl	r3, #0
 800bfde:	2300      	movmi	r3, #0
 800bfe0:	9205      	str	r2, [sp, #20]
 800bfe2:	bf54      	ite	pl
 800bfe4:	9304      	strpl	r3, [sp, #16]
 800bfe6:	9305      	strmi	r3, [sp, #20]
 800bfe8:	f1bb 0f00 	cmp.w	fp, #0
 800bfec:	db18      	blt.n	800c020 <_dtoa_r+0x218>
 800bfee:	9b05      	ldr	r3, [sp, #20]
 800bff0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800bff4:	445b      	add	r3, fp
 800bff6:	9305      	str	r3, [sp, #20]
 800bff8:	2300      	movs	r3, #0
 800bffa:	9a06      	ldr	r2, [sp, #24]
 800bffc:	2a09      	cmp	r2, #9
 800bffe:	d849      	bhi.n	800c094 <_dtoa_r+0x28c>
 800c000:	2a05      	cmp	r2, #5
 800c002:	bfc4      	itt	gt
 800c004:	3a04      	subgt	r2, #4
 800c006:	9206      	strgt	r2, [sp, #24]
 800c008:	9a06      	ldr	r2, [sp, #24]
 800c00a:	f1a2 0202 	sub.w	r2, r2, #2
 800c00e:	bfcc      	ite	gt
 800c010:	2400      	movgt	r4, #0
 800c012:	2401      	movle	r4, #1
 800c014:	2a03      	cmp	r2, #3
 800c016:	d848      	bhi.n	800c0aa <_dtoa_r+0x2a2>
 800c018:	e8df f002 	tbb	[pc, r2]
 800c01c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c020:	9b04      	ldr	r3, [sp, #16]
 800c022:	2200      	movs	r2, #0
 800c024:	eba3 030b 	sub.w	r3, r3, fp
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	9209      	str	r2, [sp, #36]	; 0x24
 800c02c:	f1cb 0300 	rsb	r3, fp, #0
 800c030:	e7e3      	b.n	800bffa <_dtoa_r+0x1f2>
 800c032:	2200      	movs	r2, #0
 800c034:	9207      	str	r2, [sp, #28]
 800c036:	9a08      	ldr	r2, [sp, #32]
 800c038:	2a00      	cmp	r2, #0
 800c03a:	dc39      	bgt.n	800c0b0 <_dtoa_r+0x2a8>
 800c03c:	f04f 0a01 	mov.w	sl, #1
 800c040:	46d1      	mov	r9, sl
 800c042:	4652      	mov	r2, sl
 800c044:	f8cd a020 	str.w	sl, [sp, #32]
 800c048:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c04a:	2100      	movs	r1, #0
 800c04c:	6079      	str	r1, [r7, #4]
 800c04e:	2004      	movs	r0, #4
 800c050:	f100 0c14 	add.w	ip, r0, #20
 800c054:	4594      	cmp	ip, r2
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	d92f      	bls.n	800c0ba <_dtoa_r+0x2b2>
 800c05a:	4630      	mov	r0, r6
 800c05c:	930d      	str	r3, [sp, #52]	; 0x34
 800c05e:	f000 fe6d 	bl	800cd3c <_Balloc>
 800c062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c064:	9001      	str	r0, [sp, #4]
 800c066:	4602      	mov	r2, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	d149      	bne.n	800c100 <_dtoa_r+0x2f8>
 800c06c:	4b23      	ldr	r3, [pc, #140]	; (800c0fc <_dtoa_r+0x2f4>)
 800c06e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c072:	e6e1      	b.n	800be38 <_dtoa_r+0x30>
 800c074:	2201      	movs	r2, #1
 800c076:	e7dd      	b.n	800c034 <_dtoa_r+0x22c>
 800c078:	2200      	movs	r2, #0
 800c07a:	9207      	str	r2, [sp, #28]
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	eb0b 0a02 	add.w	sl, fp, r2
 800c082:	f10a 0901 	add.w	r9, sl, #1
 800c086:	464a      	mov	r2, r9
 800c088:	2a01      	cmp	r2, #1
 800c08a:	bfb8      	it	lt
 800c08c:	2201      	movlt	r2, #1
 800c08e:	e7db      	b.n	800c048 <_dtoa_r+0x240>
 800c090:	2201      	movs	r2, #1
 800c092:	e7f2      	b.n	800c07a <_dtoa_r+0x272>
 800c094:	2401      	movs	r4, #1
 800c096:	2200      	movs	r2, #0
 800c098:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c09c:	f04f 3aff 	mov.w	sl, #4294967295
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	46d1      	mov	r9, sl
 800c0a4:	2212      	movs	r2, #18
 800c0a6:	9108      	str	r1, [sp, #32]
 800c0a8:	e7ce      	b.n	800c048 <_dtoa_r+0x240>
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	9207      	str	r2, [sp, #28]
 800c0ae:	e7f5      	b.n	800c09c <_dtoa_r+0x294>
 800c0b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c0b4:	46d1      	mov	r9, sl
 800c0b6:	4652      	mov	r2, sl
 800c0b8:	e7c6      	b.n	800c048 <_dtoa_r+0x240>
 800c0ba:	3101      	adds	r1, #1
 800c0bc:	6079      	str	r1, [r7, #4]
 800c0be:	0040      	lsls	r0, r0, #1
 800c0c0:	e7c6      	b.n	800c050 <_dtoa_r+0x248>
 800c0c2:	bf00      	nop
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	636f4361 	.word	0x636f4361
 800c0cc:	3fd287a7 	.word	0x3fd287a7
 800c0d0:	8b60c8b3 	.word	0x8b60c8b3
 800c0d4:	3fc68a28 	.word	0x3fc68a28
 800c0d8:	509f79fb 	.word	0x509f79fb
 800c0dc:	3fd34413 	.word	0x3fd34413
 800c0e0:	0800ed41 	.word	0x0800ed41
 800c0e4:	0800ed58 	.word	0x0800ed58
 800c0e8:	7ff00000 	.word	0x7ff00000
 800c0ec:	0800ed3d 	.word	0x0800ed3d
 800c0f0:	0800ed34 	.word	0x0800ed34
 800c0f4:	0800ed11 	.word	0x0800ed11
 800c0f8:	0800eea8 	.word	0x0800eea8
 800c0fc:	0800edb3 	.word	0x0800edb3
 800c100:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c102:	9901      	ldr	r1, [sp, #4]
 800c104:	6011      	str	r1, [r2, #0]
 800c106:	f1b9 0f0e 	cmp.w	r9, #14
 800c10a:	d86c      	bhi.n	800c1e6 <_dtoa_r+0x3de>
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	d06a      	beq.n	800c1e6 <_dtoa_r+0x3de>
 800c110:	f1bb 0f00 	cmp.w	fp, #0
 800c114:	f340 80a0 	ble.w	800c258 <_dtoa_r+0x450>
 800c118:	49c1      	ldr	r1, [pc, #772]	; (800c420 <_dtoa_r+0x618>)
 800c11a:	f00b 020f 	and.w	r2, fp, #15
 800c11e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c122:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c126:	ed92 7b00 	vldr	d7, [r2]
 800c12a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c12e:	f000 8087 	beq.w	800c240 <_dtoa_r+0x438>
 800c132:	4abc      	ldr	r2, [pc, #752]	; (800c424 <_dtoa_r+0x61c>)
 800c134:	ed92 6b08 	vldr	d6, [r2, #32]
 800c138:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c13c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c140:	f001 010f 	and.w	r1, r1, #15
 800c144:	2203      	movs	r2, #3
 800c146:	48b7      	ldr	r0, [pc, #732]	; (800c424 <_dtoa_r+0x61c>)
 800c148:	2900      	cmp	r1, #0
 800c14a:	d17b      	bne.n	800c244 <_dtoa_r+0x43c>
 800c14c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c150:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c154:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c15a:	2900      	cmp	r1, #0
 800c15c:	f000 80a2 	beq.w	800c2a4 <_dtoa_r+0x49c>
 800c160:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c164:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c168:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c170:	f140 8098 	bpl.w	800c2a4 <_dtoa_r+0x49c>
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	f000 8094 	beq.w	800c2a4 <_dtoa_r+0x49c>
 800c17c:	f1ba 0f00 	cmp.w	sl, #0
 800c180:	dd2f      	ble.n	800c1e2 <_dtoa_r+0x3da>
 800c182:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c18a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c18e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c192:	3201      	adds	r2, #1
 800c194:	4650      	mov	r0, sl
 800c196:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c19a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c19e:	ee07 2a90 	vmov	s15, r2
 800c1a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c1aa:	ee15 4a90 	vmov	r4, s11
 800c1ae:	ec52 1b15 	vmov	r1, r2, d5
 800c1b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d177      	bne.n	800c2aa <_dtoa_r+0x4a2>
 800c1ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c1be:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c1c2:	ec42 1b17 	vmov	d7, r1, r2
 800c1c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ce:	f300 8263 	bgt.w	800c698 <_dtoa_r+0x890>
 800c1d2:	eeb1 7b47 	vneg.f64	d7, d7
 800c1d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1de:	f100 8258 	bmi.w	800c692 <_dtoa_r+0x88a>
 800c1e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	f2c0 811d 	blt.w	800c428 <_dtoa_r+0x620>
 800c1ee:	f1bb 0f0e 	cmp.w	fp, #14
 800c1f2:	f300 8119 	bgt.w	800c428 <_dtoa_r+0x620>
 800c1f6:	4b8a      	ldr	r3, [pc, #552]	; (800c420 <_dtoa_r+0x618>)
 800c1f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1fc:	ed93 6b00 	vldr	d6, [r3]
 800c200:	9b08      	ldr	r3, [sp, #32]
 800c202:	2b00      	cmp	r3, #0
 800c204:	f280 80b7 	bge.w	800c376 <_dtoa_r+0x56e>
 800c208:	f1b9 0f00 	cmp.w	r9, #0
 800c20c:	f300 80b3 	bgt.w	800c376 <_dtoa_r+0x56e>
 800c210:	f040 823f 	bne.w	800c692 <_dtoa_r+0x88a>
 800c214:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c218:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c21c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c220:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c228:	464c      	mov	r4, r9
 800c22a:	464f      	mov	r7, r9
 800c22c:	f280 8215 	bge.w	800c65a <_dtoa_r+0x852>
 800c230:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c234:	2331      	movs	r3, #49	; 0x31
 800c236:	f808 3b01 	strb.w	r3, [r8], #1
 800c23a:	f10b 0b01 	add.w	fp, fp, #1
 800c23e:	e211      	b.n	800c664 <_dtoa_r+0x85c>
 800c240:	2202      	movs	r2, #2
 800c242:	e780      	b.n	800c146 <_dtoa_r+0x33e>
 800c244:	07cc      	lsls	r4, r1, #31
 800c246:	d504      	bpl.n	800c252 <_dtoa_r+0x44a>
 800c248:	ed90 6b00 	vldr	d6, [r0]
 800c24c:	3201      	adds	r2, #1
 800c24e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c252:	1049      	asrs	r1, r1, #1
 800c254:	3008      	adds	r0, #8
 800c256:	e777      	b.n	800c148 <_dtoa_r+0x340>
 800c258:	d022      	beq.n	800c2a0 <_dtoa_r+0x498>
 800c25a:	f1cb 0100 	rsb	r1, fp, #0
 800c25e:	4a70      	ldr	r2, [pc, #448]	; (800c420 <_dtoa_r+0x618>)
 800c260:	f001 000f 	and.w	r0, r1, #15
 800c264:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c268:	ed92 7b00 	vldr	d7, [r2]
 800c26c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c270:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c274:	486b      	ldr	r0, [pc, #428]	; (800c424 <_dtoa_r+0x61c>)
 800c276:	1109      	asrs	r1, r1, #4
 800c278:	2400      	movs	r4, #0
 800c27a:	2202      	movs	r2, #2
 800c27c:	b929      	cbnz	r1, 800c28a <_dtoa_r+0x482>
 800c27e:	2c00      	cmp	r4, #0
 800c280:	f43f af6a 	beq.w	800c158 <_dtoa_r+0x350>
 800c284:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c288:	e766      	b.n	800c158 <_dtoa_r+0x350>
 800c28a:	07cf      	lsls	r7, r1, #31
 800c28c:	d505      	bpl.n	800c29a <_dtoa_r+0x492>
 800c28e:	ed90 6b00 	vldr	d6, [r0]
 800c292:	3201      	adds	r2, #1
 800c294:	2401      	movs	r4, #1
 800c296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c29a:	1049      	asrs	r1, r1, #1
 800c29c:	3008      	adds	r0, #8
 800c29e:	e7ed      	b.n	800c27c <_dtoa_r+0x474>
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	e759      	b.n	800c158 <_dtoa_r+0x350>
 800c2a4:	465f      	mov	r7, fp
 800c2a6:	4648      	mov	r0, r9
 800c2a8:	e775      	b.n	800c196 <_dtoa_r+0x38e>
 800c2aa:	ec42 1b17 	vmov	d7, r1, r2
 800c2ae:	4a5c      	ldr	r2, [pc, #368]	; (800c420 <_dtoa_r+0x618>)
 800c2b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c2b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c2b8:	9a01      	ldr	r2, [sp, #4]
 800c2ba:	1814      	adds	r4, r2, r0
 800c2bc:	9a07      	ldr	r2, [sp, #28]
 800c2be:	b352      	cbz	r2, 800c316 <_dtoa_r+0x50e>
 800c2c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c2c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c2c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c2d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c2d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c2d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c2dc:	ee14 2a90 	vmov	r2, s9
 800c2e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c2e4:	3230      	adds	r2, #48	; 0x30
 800c2e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c2ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f2:	f808 2b01 	strb.w	r2, [r8], #1
 800c2f6:	d439      	bmi.n	800c36c <_dtoa_r+0x564>
 800c2f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c2fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c304:	d472      	bmi.n	800c3ec <_dtoa_r+0x5e4>
 800c306:	45a0      	cmp	r8, r4
 800c308:	f43f af6b 	beq.w	800c1e2 <_dtoa_r+0x3da>
 800c30c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c310:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c314:	e7e0      	b.n	800c2d8 <_dtoa_r+0x4d0>
 800c316:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c31a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c31e:	4621      	mov	r1, r4
 800c320:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c324:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c328:	ee14 2a90 	vmov	r2, s9
 800c32c:	3230      	adds	r2, #48	; 0x30
 800c32e:	f808 2b01 	strb.w	r2, [r8], #1
 800c332:	45a0      	cmp	r8, r4
 800c334:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c338:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c33c:	d118      	bne.n	800c370 <_dtoa_r+0x568>
 800c33e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c342:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c346:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	dc4d      	bgt.n	800c3ec <_dtoa_r+0x5e4>
 800c350:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c354:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35c:	f57f af41 	bpl.w	800c1e2 <_dtoa_r+0x3da>
 800c360:	4688      	mov	r8, r1
 800c362:	3901      	subs	r1, #1
 800c364:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c368:	2b30      	cmp	r3, #48	; 0x30
 800c36a:	d0f9      	beq.n	800c360 <_dtoa_r+0x558>
 800c36c:	46bb      	mov	fp, r7
 800c36e:	e02a      	b.n	800c3c6 <_dtoa_r+0x5be>
 800c370:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c374:	e7d6      	b.n	800c324 <_dtoa_r+0x51c>
 800c376:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c37a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c37e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c382:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c386:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c38a:	ee15 3a10 	vmov	r3, s10
 800c38e:	3330      	adds	r3, #48	; 0x30
 800c390:	f808 3b01 	strb.w	r3, [r8], #1
 800c394:	9b01      	ldr	r3, [sp, #4]
 800c396:	eba8 0303 	sub.w	r3, r8, r3
 800c39a:	4599      	cmp	r9, r3
 800c39c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c3a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c3a4:	d133      	bne.n	800c40e <_dtoa_r+0x606>
 800c3a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c3aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b2:	dc1a      	bgt.n	800c3ea <_dtoa_r+0x5e2>
 800c3b4:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3bc:	d103      	bne.n	800c3c6 <_dtoa_r+0x5be>
 800c3be:	ee15 3a10 	vmov	r3, s10
 800c3c2:	07d9      	lsls	r1, r3, #31
 800c3c4:	d411      	bmi.n	800c3ea <_dtoa_r+0x5e2>
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f000 fcf7 	bl	800cdbc <_Bfree>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3d2:	f888 3000 	strb.w	r3, [r8]
 800c3d6:	f10b 0301 	add.w	r3, fp, #1
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f ad61 	beq.w	800bea6 <_dtoa_r+0x9e>
 800c3e4:	f8c3 8000 	str.w	r8, [r3]
 800c3e8:	e55d      	b.n	800bea6 <_dtoa_r+0x9e>
 800c3ea:	465f      	mov	r7, fp
 800c3ec:	4643      	mov	r3, r8
 800c3ee:	4698      	mov	r8, r3
 800c3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3f4:	2a39      	cmp	r2, #57	; 0x39
 800c3f6:	d106      	bne.n	800c406 <_dtoa_r+0x5fe>
 800c3f8:	9a01      	ldr	r2, [sp, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d1f7      	bne.n	800c3ee <_dtoa_r+0x5e6>
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	2230      	movs	r2, #48	; 0x30
 800c402:	3701      	adds	r7, #1
 800c404:	700a      	strb	r2, [r1, #0]
 800c406:	781a      	ldrb	r2, [r3, #0]
 800c408:	3201      	adds	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e7ae      	b.n	800c36c <_dtoa_r+0x564>
 800c40e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c412:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41a:	d1b2      	bne.n	800c382 <_dtoa_r+0x57a>
 800c41c:	e7d3      	b.n	800c3c6 <_dtoa_r+0x5be>
 800c41e:	bf00      	nop
 800c420:	0800eea8 	.word	0x0800eea8
 800c424:	0800ee80 	.word	0x0800ee80
 800c428:	9907      	ldr	r1, [sp, #28]
 800c42a:	2900      	cmp	r1, #0
 800c42c:	f000 80d0 	beq.w	800c5d0 <_dtoa_r+0x7c8>
 800c430:	9906      	ldr	r1, [sp, #24]
 800c432:	2901      	cmp	r1, #1
 800c434:	f300 80b4 	bgt.w	800c5a0 <_dtoa_r+0x798>
 800c438:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c43a:	2900      	cmp	r1, #0
 800c43c:	f000 80ac 	beq.w	800c598 <_dtoa_r+0x790>
 800c440:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c444:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c448:	461c      	mov	r4, r3
 800c44a:	930a      	str	r3, [sp, #40]	; 0x28
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	4413      	add	r3, r2
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	9b05      	ldr	r3, [sp, #20]
 800c454:	2101      	movs	r1, #1
 800c456:	4413      	add	r3, r2
 800c458:	4630      	mov	r0, r6
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	f000 fd66 	bl	800cf2c <__i2b>
 800c460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c462:	4607      	mov	r7, r0
 800c464:	f1b8 0f00 	cmp.w	r8, #0
 800c468:	dd0d      	ble.n	800c486 <_dtoa_r+0x67e>
 800c46a:	9a05      	ldr	r2, [sp, #20]
 800c46c:	2a00      	cmp	r2, #0
 800c46e:	dd0a      	ble.n	800c486 <_dtoa_r+0x67e>
 800c470:	4542      	cmp	r2, r8
 800c472:	9904      	ldr	r1, [sp, #16]
 800c474:	bfa8      	it	ge
 800c476:	4642      	movge	r2, r8
 800c478:	1a89      	subs	r1, r1, r2
 800c47a:	9104      	str	r1, [sp, #16]
 800c47c:	9905      	ldr	r1, [sp, #20]
 800c47e:	eba8 0802 	sub.w	r8, r8, r2
 800c482:	1a8a      	subs	r2, r1, r2
 800c484:	9205      	str	r2, [sp, #20]
 800c486:	b303      	cbz	r3, 800c4ca <_dtoa_r+0x6c2>
 800c488:	9a07      	ldr	r2, [sp, #28]
 800c48a:	2a00      	cmp	r2, #0
 800c48c:	f000 80a5 	beq.w	800c5da <_dtoa_r+0x7d2>
 800c490:	2c00      	cmp	r4, #0
 800c492:	dd13      	ble.n	800c4bc <_dtoa_r+0x6b4>
 800c494:	4639      	mov	r1, r7
 800c496:	4622      	mov	r2, r4
 800c498:	4630      	mov	r0, r6
 800c49a:	930d      	str	r3, [sp, #52]	; 0x34
 800c49c:	f000 fe06 	bl	800d0ac <__pow5mult>
 800c4a0:	462a      	mov	r2, r5
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 fd56 	bl	800cf58 <__multiply>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	900a      	str	r0, [sp, #40]	; 0x28
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f000 fc83 	bl	800cdbc <_Bfree>
 800c4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ba:	4615      	mov	r5, r2
 800c4bc:	1b1a      	subs	r2, r3, r4
 800c4be:	d004      	beq.n	800c4ca <_dtoa_r+0x6c2>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f000 fdf2 	bl	800d0ac <__pow5mult>
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 fd2d 	bl	800cf2c <__i2b>
 800c4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	f340 8081 	ble.w	800c5de <_dtoa_r+0x7d6>
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4601      	mov	r1, r0
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f000 fde3 	bl	800d0ac <__pow5mult>
 800c4e6:	9b06      	ldr	r3, [sp, #24]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	dd7a      	ble.n	800c5e4 <_dtoa_r+0x7dc>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	930a      	str	r3, [sp, #40]	; 0x28
 800c4f2:	6922      	ldr	r2, [r4, #16]
 800c4f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c4f8:	6910      	ldr	r0, [r2, #16]
 800c4fa:	f000 fcc7 	bl	800ce8c <__hi0bits>
 800c4fe:	f1c0 0020 	rsb	r0, r0, #32
 800c502:	9b05      	ldr	r3, [sp, #20]
 800c504:	4418      	add	r0, r3
 800c506:	f010 001f 	ands.w	r0, r0, #31
 800c50a:	f000 808c 	beq.w	800c626 <_dtoa_r+0x81e>
 800c50e:	f1c0 0220 	rsb	r2, r0, #32
 800c512:	2a04      	cmp	r2, #4
 800c514:	f340 8085 	ble.w	800c622 <_dtoa_r+0x81a>
 800c518:	f1c0 001c 	rsb	r0, r0, #28
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	4403      	add	r3, r0
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	4403      	add	r3, r0
 800c526:	4480      	add	r8, r0
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	9b04      	ldr	r3, [sp, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd05      	ble.n	800c53c <_dtoa_r+0x734>
 800c530:	4629      	mov	r1, r5
 800c532:	461a      	mov	r2, r3
 800c534:	4630      	mov	r0, r6
 800c536:	f000 fe13 	bl	800d160 <__lshift>
 800c53a:	4605      	mov	r5, r0
 800c53c:	9b05      	ldr	r3, [sp, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd05      	ble.n	800c54e <_dtoa_r+0x746>
 800c542:	4621      	mov	r1, r4
 800c544:	461a      	mov	r2, r3
 800c546:	4630      	mov	r0, r6
 800c548:	f000 fe0a 	bl	800d160 <__lshift>
 800c54c:	4604      	mov	r4, r0
 800c54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d06a      	beq.n	800c62a <_dtoa_r+0x822>
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f000 fe72 	bl	800d240 <__mcmp>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	da64      	bge.n	800c62a <_dtoa_r+0x822>
 800c560:	2300      	movs	r3, #0
 800c562:	4629      	mov	r1, r5
 800c564:	220a      	movs	r2, #10
 800c566:	4630      	mov	r0, r6
 800c568:	f000 fc4a 	bl	800ce00 <__multadd>
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c572:	4605      	mov	r5, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8191 	beq.w	800c89c <_dtoa_r+0xa94>
 800c57a:	4639      	mov	r1, r7
 800c57c:	2300      	movs	r3, #0
 800c57e:	220a      	movs	r2, #10
 800c580:	4630      	mov	r0, r6
 800c582:	f000 fc3d 	bl	800ce00 <__multadd>
 800c586:	f1ba 0f00 	cmp.w	sl, #0
 800c58a:	4607      	mov	r7, r0
 800c58c:	f300 808d 	bgt.w	800c6aa <_dtoa_r+0x8a2>
 800c590:	9b06      	ldr	r3, [sp, #24]
 800c592:	2b02      	cmp	r3, #2
 800c594:	dc50      	bgt.n	800c638 <_dtoa_r+0x830>
 800c596:	e088      	b.n	800c6aa <_dtoa_r+0x8a2>
 800c598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c59a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c59e:	e751      	b.n	800c444 <_dtoa_r+0x63c>
 800c5a0:	f109 34ff 	add.w	r4, r9, #4294967295
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	bfbf      	itttt	lt
 800c5a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c5aa:	1ae3      	sublt	r3, r4, r3
 800c5ac:	18d2      	addlt	r2, r2, r3
 800c5ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c5b0:	bfb6      	itet	lt
 800c5b2:	4623      	movlt	r3, r4
 800c5b4:	1b1c      	subge	r4, r3, r4
 800c5b6:	2400      	movlt	r4, #0
 800c5b8:	f1b9 0f00 	cmp.w	r9, #0
 800c5bc:	bfb5      	itete	lt
 800c5be:	9a04      	ldrlt	r2, [sp, #16]
 800c5c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c5c4:	eba2 0809 	sublt.w	r8, r2, r9
 800c5c8:	464a      	movge	r2, r9
 800c5ca:	bfb8      	it	lt
 800c5cc:	2200      	movlt	r2, #0
 800c5ce:	e73c      	b.n	800c44a <_dtoa_r+0x642>
 800c5d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c5d4:	9f07      	ldr	r7, [sp, #28]
 800c5d6:	461c      	mov	r4, r3
 800c5d8:	e744      	b.n	800c464 <_dtoa_r+0x65c>
 800c5da:	461a      	mov	r2, r3
 800c5dc:	e770      	b.n	800c4c0 <_dtoa_r+0x6b8>
 800c5de:	9b06      	ldr	r3, [sp, #24]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	dc18      	bgt.n	800c616 <_dtoa_r+0x80e>
 800c5e4:	9b02      	ldr	r3, [sp, #8]
 800c5e6:	b9b3      	cbnz	r3, 800c616 <_dtoa_r+0x80e>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c5ee:	b9a2      	cbnz	r2, 800c61a <_dtoa_r+0x812>
 800c5f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c5f4:	0d12      	lsrs	r2, r2, #20
 800c5f6:	0512      	lsls	r2, r2, #20
 800c5f8:	b18a      	cbz	r2, 800c61e <_dtoa_r+0x816>
 800c5fa:	9b04      	ldr	r3, [sp, #16]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	9b05      	ldr	r3, [sp, #20]
 800c602:	3301      	adds	r3, #1
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	2301      	movs	r3, #1
 800c608:	930a      	str	r3, [sp, #40]	; 0x28
 800c60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f47f af70 	bne.w	800c4f2 <_dtoa_r+0x6ea>
 800c612:	2001      	movs	r0, #1
 800c614:	e775      	b.n	800c502 <_dtoa_r+0x6fa>
 800c616:	2300      	movs	r3, #0
 800c618:	e7f6      	b.n	800c608 <_dtoa_r+0x800>
 800c61a:	9b02      	ldr	r3, [sp, #8]
 800c61c:	e7f4      	b.n	800c608 <_dtoa_r+0x800>
 800c61e:	920a      	str	r2, [sp, #40]	; 0x28
 800c620:	e7f3      	b.n	800c60a <_dtoa_r+0x802>
 800c622:	d082      	beq.n	800c52a <_dtoa_r+0x722>
 800c624:	4610      	mov	r0, r2
 800c626:	301c      	adds	r0, #28
 800c628:	e778      	b.n	800c51c <_dtoa_r+0x714>
 800c62a:	f1b9 0f00 	cmp.w	r9, #0
 800c62e:	dc37      	bgt.n	800c6a0 <_dtoa_r+0x898>
 800c630:	9b06      	ldr	r3, [sp, #24]
 800c632:	2b02      	cmp	r3, #2
 800c634:	dd34      	ble.n	800c6a0 <_dtoa_r+0x898>
 800c636:	46ca      	mov	sl, r9
 800c638:	f1ba 0f00 	cmp.w	sl, #0
 800c63c:	d10d      	bne.n	800c65a <_dtoa_r+0x852>
 800c63e:	4621      	mov	r1, r4
 800c640:	4653      	mov	r3, sl
 800c642:	2205      	movs	r2, #5
 800c644:	4630      	mov	r0, r6
 800c646:	f000 fbdb 	bl	800ce00 <__multadd>
 800c64a:	4601      	mov	r1, r0
 800c64c:	4604      	mov	r4, r0
 800c64e:	4628      	mov	r0, r5
 800c650:	f000 fdf6 	bl	800d240 <__mcmp>
 800c654:	2800      	cmp	r0, #0
 800c656:	f73f adeb 	bgt.w	800c230 <_dtoa_r+0x428>
 800c65a:	9b08      	ldr	r3, [sp, #32]
 800c65c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c660:	ea6f 0b03 	mvn.w	fp, r3
 800c664:	f04f 0900 	mov.w	r9, #0
 800c668:	4621      	mov	r1, r4
 800c66a:	4630      	mov	r0, r6
 800c66c:	f000 fba6 	bl	800cdbc <_Bfree>
 800c670:	2f00      	cmp	r7, #0
 800c672:	f43f aea8 	beq.w	800c3c6 <_dtoa_r+0x5be>
 800c676:	f1b9 0f00 	cmp.w	r9, #0
 800c67a:	d005      	beq.n	800c688 <_dtoa_r+0x880>
 800c67c:	45b9      	cmp	r9, r7
 800c67e:	d003      	beq.n	800c688 <_dtoa_r+0x880>
 800c680:	4649      	mov	r1, r9
 800c682:	4630      	mov	r0, r6
 800c684:	f000 fb9a 	bl	800cdbc <_Bfree>
 800c688:	4639      	mov	r1, r7
 800c68a:	4630      	mov	r0, r6
 800c68c:	f000 fb96 	bl	800cdbc <_Bfree>
 800c690:	e699      	b.n	800c3c6 <_dtoa_r+0x5be>
 800c692:	2400      	movs	r4, #0
 800c694:	4627      	mov	r7, r4
 800c696:	e7e0      	b.n	800c65a <_dtoa_r+0x852>
 800c698:	46bb      	mov	fp, r7
 800c69a:	4604      	mov	r4, r0
 800c69c:	4607      	mov	r7, r0
 800c69e:	e5c7      	b.n	800c230 <_dtoa_r+0x428>
 800c6a0:	9b07      	ldr	r3, [sp, #28]
 800c6a2:	46ca      	mov	sl, r9
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 8100 	beq.w	800c8aa <_dtoa_r+0xaa2>
 800c6aa:	f1b8 0f00 	cmp.w	r8, #0
 800c6ae:	dd05      	ble.n	800c6bc <_dtoa_r+0x8b4>
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4642      	mov	r2, r8
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 fd53 	bl	800d160 <__lshift>
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d05d      	beq.n	800c77e <_dtoa_r+0x976>
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f000 fb39 	bl	800cd3c <_Balloc>
 800c6ca:	4680      	mov	r8, r0
 800c6cc:	b928      	cbnz	r0, 800c6da <_dtoa_r+0x8d2>
 800c6ce:	4b82      	ldr	r3, [pc, #520]	; (800c8d8 <_dtoa_r+0xad0>)
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6d6:	f7ff bbaf 	b.w	800be38 <_dtoa_r+0x30>
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	3202      	adds	r2, #2
 800c6de:	0092      	lsls	r2, r2, #2
 800c6e0:	f107 010c 	add.w	r1, r7, #12
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	f7fe fd07 	bl	800b0f8 <memcpy>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f000 fd36 	bl	800d160 <__lshift>
 800c6f4:	9b01      	ldr	r3, [sp, #4]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	9b01      	ldr	r3, [sp, #4]
 800c6fc:	4453      	add	r3, sl
 800c6fe:	9308      	str	r3, [sp, #32]
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	46b9      	mov	r9, r7
 800c708:	9307      	str	r3, [sp, #28]
 800c70a:	4607      	mov	r7, r0
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	4621      	mov	r1, r4
 800c710:	3b01      	subs	r3, #1
 800c712:	4628      	mov	r0, r5
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	f7ff faeb 	bl	800bcf0 <quorem>
 800c71a:	4603      	mov	r3, r0
 800c71c:	3330      	adds	r3, #48	; 0x30
 800c71e:	9005      	str	r0, [sp, #20]
 800c720:	4649      	mov	r1, r9
 800c722:	4628      	mov	r0, r5
 800c724:	9309      	str	r3, [sp, #36]	; 0x24
 800c726:	f000 fd8b 	bl	800d240 <__mcmp>
 800c72a:	463a      	mov	r2, r7
 800c72c:	4682      	mov	sl, r0
 800c72e:	4621      	mov	r1, r4
 800c730:	4630      	mov	r0, r6
 800c732:	f000 fda1 	bl	800d278 <__mdiff>
 800c736:	68c2      	ldr	r2, [r0, #12]
 800c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73a:	4680      	mov	r8, r0
 800c73c:	bb0a      	cbnz	r2, 800c782 <_dtoa_r+0x97a>
 800c73e:	4601      	mov	r1, r0
 800c740:	4628      	mov	r0, r5
 800c742:	f000 fd7d 	bl	800d240 <__mcmp>
 800c746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c748:	4602      	mov	r2, r0
 800c74a:	4641      	mov	r1, r8
 800c74c:	4630      	mov	r0, r6
 800c74e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c752:	f000 fb33 	bl	800cdbc <_Bfree>
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c75e:	ea43 0102 	orr.w	r1, r3, r2
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	430b      	orrs	r3, r1
 800c766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c768:	d10d      	bne.n	800c786 <_dtoa_r+0x97e>
 800c76a:	2b39      	cmp	r3, #57	; 0x39
 800c76c:	d029      	beq.n	800c7c2 <_dtoa_r+0x9ba>
 800c76e:	f1ba 0f00 	cmp.w	sl, #0
 800c772:	dd01      	ble.n	800c778 <_dtoa_r+0x970>
 800c774:	9b05      	ldr	r3, [sp, #20]
 800c776:	3331      	adds	r3, #49	; 0x31
 800c778:	9a02      	ldr	r2, [sp, #8]
 800c77a:	7013      	strb	r3, [r2, #0]
 800c77c:	e774      	b.n	800c668 <_dtoa_r+0x860>
 800c77e:	4638      	mov	r0, r7
 800c780:	e7b8      	b.n	800c6f4 <_dtoa_r+0x8ec>
 800c782:	2201      	movs	r2, #1
 800c784:	e7e1      	b.n	800c74a <_dtoa_r+0x942>
 800c786:	f1ba 0f00 	cmp.w	sl, #0
 800c78a:	db06      	blt.n	800c79a <_dtoa_r+0x992>
 800c78c:	9906      	ldr	r1, [sp, #24]
 800c78e:	ea41 0a0a 	orr.w	sl, r1, sl
 800c792:	9907      	ldr	r1, [sp, #28]
 800c794:	ea5a 0101 	orrs.w	r1, sl, r1
 800c798:	d120      	bne.n	800c7dc <_dtoa_r+0x9d4>
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	ddec      	ble.n	800c778 <_dtoa_r+0x970>
 800c79e:	4629      	mov	r1, r5
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	f000 fcdb 	bl	800d160 <__lshift>
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	f000 fd47 	bl	800d240 <__mcmp>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	dc02      	bgt.n	800c7be <_dtoa_r+0x9b6>
 800c7b8:	d1de      	bne.n	800c778 <_dtoa_r+0x970>
 800c7ba:	07da      	lsls	r2, r3, #31
 800c7bc:	d5dc      	bpl.n	800c778 <_dtoa_r+0x970>
 800c7be:	2b39      	cmp	r3, #57	; 0x39
 800c7c0:	d1d8      	bne.n	800c774 <_dtoa_r+0x96c>
 800c7c2:	9a02      	ldr	r2, [sp, #8]
 800c7c4:	2339      	movs	r3, #57	; 0x39
 800c7c6:	7013      	strb	r3, [r2, #0]
 800c7c8:	4643      	mov	r3, r8
 800c7ca:	4698      	mov	r8, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c7d2:	2a39      	cmp	r2, #57	; 0x39
 800c7d4:	d051      	beq.n	800c87a <_dtoa_r+0xa72>
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e745      	b.n	800c668 <_dtoa_r+0x860>
 800c7dc:	2a00      	cmp	r2, #0
 800c7de:	dd03      	ble.n	800c7e8 <_dtoa_r+0x9e0>
 800c7e0:	2b39      	cmp	r3, #57	; 0x39
 800c7e2:	d0ee      	beq.n	800c7c2 <_dtoa_r+0x9ba>
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	e7c7      	b.n	800c778 <_dtoa_r+0x970>
 800c7e8:	9a04      	ldr	r2, [sp, #16]
 800c7ea:	9908      	ldr	r1, [sp, #32]
 800c7ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7f0:	428a      	cmp	r2, r1
 800c7f2:	d02b      	beq.n	800c84c <_dtoa_r+0xa44>
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	220a      	movs	r2, #10
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 fb00 	bl	800ce00 <__multadd>
 800c800:	45b9      	cmp	r9, r7
 800c802:	4605      	mov	r5, r0
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	f04f 020a 	mov.w	r2, #10
 800c80c:	4649      	mov	r1, r9
 800c80e:	4630      	mov	r0, r6
 800c810:	d107      	bne.n	800c822 <_dtoa_r+0xa1a>
 800c812:	f000 faf5 	bl	800ce00 <__multadd>
 800c816:	4681      	mov	r9, r0
 800c818:	4607      	mov	r7, r0
 800c81a:	9b04      	ldr	r3, [sp, #16]
 800c81c:	3301      	adds	r3, #1
 800c81e:	9304      	str	r3, [sp, #16]
 800c820:	e774      	b.n	800c70c <_dtoa_r+0x904>
 800c822:	f000 faed 	bl	800ce00 <__multadd>
 800c826:	4639      	mov	r1, r7
 800c828:	4681      	mov	r9, r0
 800c82a:	2300      	movs	r3, #0
 800c82c:	220a      	movs	r2, #10
 800c82e:	4630      	mov	r0, r6
 800c830:	f000 fae6 	bl	800ce00 <__multadd>
 800c834:	4607      	mov	r7, r0
 800c836:	e7f0      	b.n	800c81a <_dtoa_r+0xa12>
 800c838:	f1ba 0f00 	cmp.w	sl, #0
 800c83c:	9a01      	ldr	r2, [sp, #4]
 800c83e:	bfcc      	ite	gt
 800c840:	46d0      	movgt	r8, sl
 800c842:	f04f 0801 	movle.w	r8, #1
 800c846:	4490      	add	r8, r2
 800c848:	f04f 0900 	mov.w	r9, #0
 800c84c:	4629      	mov	r1, r5
 800c84e:	2201      	movs	r2, #1
 800c850:	4630      	mov	r0, r6
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	f000 fc84 	bl	800d160 <__lshift>
 800c858:	4621      	mov	r1, r4
 800c85a:	4605      	mov	r5, r0
 800c85c:	f000 fcf0 	bl	800d240 <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	dcb1      	bgt.n	800c7c8 <_dtoa_r+0x9c0>
 800c864:	d102      	bne.n	800c86c <_dtoa_r+0xa64>
 800c866:	9b02      	ldr	r3, [sp, #8]
 800c868:	07db      	lsls	r3, r3, #31
 800c86a:	d4ad      	bmi.n	800c7c8 <_dtoa_r+0x9c0>
 800c86c:	4643      	mov	r3, r8
 800c86e:	4698      	mov	r8, r3
 800c870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c874:	2a30      	cmp	r2, #48	; 0x30
 800c876:	d0fa      	beq.n	800c86e <_dtoa_r+0xa66>
 800c878:	e6f6      	b.n	800c668 <_dtoa_r+0x860>
 800c87a:	9a01      	ldr	r2, [sp, #4]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d1a4      	bne.n	800c7ca <_dtoa_r+0x9c2>
 800c880:	f10b 0b01 	add.w	fp, fp, #1
 800c884:	2331      	movs	r3, #49	; 0x31
 800c886:	e778      	b.n	800c77a <_dtoa_r+0x972>
 800c888:	4b14      	ldr	r3, [pc, #80]	; (800c8dc <_dtoa_r+0xad4>)
 800c88a:	f7ff bb27 	b.w	800bedc <_dtoa_r+0xd4>
 800c88e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c890:	2b00      	cmp	r3, #0
 800c892:	f47f ab03 	bne.w	800be9c <_dtoa_r+0x94>
 800c896:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <_dtoa_r+0xad8>)
 800c898:	f7ff bb20 	b.w	800bedc <_dtoa_r+0xd4>
 800c89c:	f1ba 0f00 	cmp.w	sl, #0
 800c8a0:	dc03      	bgt.n	800c8aa <_dtoa_r+0xaa2>
 800c8a2:	9b06      	ldr	r3, [sp, #24]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	f73f aec7 	bgt.w	800c638 <_dtoa_r+0x830>
 800c8aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f7ff fa1d 	bl	800bcf0 <quorem>
 800c8b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c8ba:	f808 3b01 	strb.w	r3, [r8], #1
 800c8be:	9a01      	ldr	r2, [sp, #4]
 800c8c0:	eba8 0202 	sub.w	r2, r8, r2
 800c8c4:	4592      	cmp	sl, r2
 800c8c6:	ddb7      	ble.n	800c838 <_dtoa_r+0xa30>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	220a      	movs	r2, #10
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f000 fa96 	bl	800ce00 <__multadd>
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	e7ea      	b.n	800c8ae <_dtoa_r+0xaa6>
 800c8d8:	0800edb3 	.word	0x0800edb3
 800c8dc:	0800ed10 	.word	0x0800ed10
 800c8e0:	0800ed34 	.word	0x0800ed34

0800c8e4 <__sflush_r>:
 800c8e4:	898a      	ldrh	r2, [r1, #12]
 800c8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	0710      	lsls	r0, r2, #28
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	d458      	bmi.n	800c9a4 <__sflush_r+0xc0>
 800c8f2:	684b      	ldr	r3, [r1, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc05      	bgt.n	800c904 <__sflush_r+0x20>
 800c8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dc02      	bgt.n	800c904 <__sflush_r+0x20>
 800c8fe:	2000      	movs	r0, #0
 800c900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c906:	2e00      	cmp	r6, #0
 800c908:	d0f9      	beq.n	800c8fe <__sflush_r+0x1a>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c910:	682f      	ldr	r7, [r5, #0]
 800c912:	602b      	str	r3, [r5, #0]
 800c914:	d032      	beq.n	800c97c <__sflush_r+0x98>
 800c916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	075a      	lsls	r2, r3, #29
 800c91c:	d505      	bpl.n	800c92a <__sflush_r+0x46>
 800c91e:	6863      	ldr	r3, [r4, #4]
 800c920:	1ac0      	subs	r0, r0, r3
 800c922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c924:	b10b      	cbz	r3, 800c92a <__sflush_r+0x46>
 800c926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c928:	1ac0      	subs	r0, r0, r3
 800c92a:	2300      	movs	r3, #0
 800c92c:	4602      	mov	r2, r0
 800c92e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c930:	6a21      	ldr	r1, [r4, #32]
 800c932:	4628      	mov	r0, r5
 800c934:	47b0      	blx	r6
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	d106      	bne.n	800c94a <__sflush_r+0x66>
 800c93c:	6829      	ldr	r1, [r5, #0]
 800c93e:	291d      	cmp	r1, #29
 800c940:	d82c      	bhi.n	800c99c <__sflush_r+0xb8>
 800c942:	4a2a      	ldr	r2, [pc, #168]	; (800c9ec <__sflush_r+0x108>)
 800c944:	40ca      	lsrs	r2, r1
 800c946:	07d6      	lsls	r6, r2, #31
 800c948:	d528      	bpl.n	800c99c <__sflush_r+0xb8>
 800c94a:	2200      	movs	r2, #0
 800c94c:	6062      	str	r2, [r4, #4]
 800c94e:	04d9      	lsls	r1, r3, #19
 800c950:	6922      	ldr	r2, [r4, #16]
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	d504      	bpl.n	800c960 <__sflush_r+0x7c>
 800c956:	1c42      	adds	r2, r0, #1
 800c958:	d101      	bne.n	800c95e <__sflush_r+0x7a>
 800c95a:	682b      	ldr	r3, [r5, #0]
 800c95c:	b903      	cbnz	r3, 800c960 <__sflush_r+0x7c>
 800c95e:	6560      	str	r0, [r4, #84]	; 0x54
 800c960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c962:	602f      	str	r7, [r5, #0]
 800c964:	2900      	cmp	r1, #0
 800c966:	d0ca      	beq.n	800c8fe <__sflush_r+0x1a>
 800c968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c96c:	4299      	cmp	r1, r3
 800c96e:	d002      	beq.n	800c976 <__sflush_r+0x92>
 800c970:	4628      	mov	r0, r5
 800c972:	f000 fd7d 	bl	800d470 <_free_r>
 800c976:	2000      	movs	r0, #0
 800c978:	6360      	str	r0, [r4, #52]	; 0x34
 800c97a:	e7c1      	b.n	800c900 <__sflush_r+0x1c>
 800c97c:	6a21      	ldr	r1, [r4, #32]
 800c97e:	2301      	movs	r3, #1
 800c980:	4628      	mov	r0, r5
 800c982:	47b0      	blx	r6
 800c984:	1c41      	adds	r1, r0, #1
 800c986:	d1c7      	bne.n	800c918 <__sflush_r+0x34>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0c4      	beq.n	800c918 <__sflush_r+0x34>
 800c98e:	2b1d      	cmp	r3, #29
 800c990:	d001      	beq.n	800c996 <__sflush_r+0xb2>
 800c992:	2b16      	cmp	r3, #22
 800c994:	d101      	bne.n	800c99a <__sflush_r+0xb6>
 800c996:	602f      	str	r7, [r5, #0]
 800c998:	e7b1      	b.n	800c8fe <__sflush_r+0x1a>
 800c99a:	89a3      	ldrh	r3, [r4, #12]
 800c99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	e7ad      	b.n	800c900 <__sflush_r+0x1c>
 800c9a4:	690f      	ldr	r7, [r1, #16]
 800c9a6:	2f00      	cmp	r7, #0
 800c9a8:	d0a9      	beq.n	800c8fe <__sflush_r+0x1a>
 800c9aa:	0793      	lsls	r3, r2, #30
 800c9ac:	680e      	ldr	r6, [r1, #0]
 800c9ae:	bf08      	it	eq
 800c9b0:	694b      	ldreq	r3, [r1, #20]
 800c9b2:	600f      	str	r7, [r1, #0]
 800c9b4:	bf18      	it	ne
 800c9b6:	2300      	movne	r3, #0
 800c9b8:	eba6 0807 	sub.w	r8, r6, r7
 800c9bc:	608b      	str	r3, [r1, #8]
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	dd9c      	ble.n	800c8fe <__sflush_r+0x1a>
 800c9c4:	6a21      	ldr	r1, [r4, #32]
 800c9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9c8:	4643      	mov	r3, r8
 800c9ca:	463a      	mov	r2, r7
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	47b0      	blx	r6
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	dc06      	bgt.n	800c9e2 <__sflush_r+0xfe>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e78e      	b.n	800c900 <__sflush_r+0x1c>
 800c9e2:	4407      	add	r7, r0
 800c9e4:	eba8 0800 	sub.w	r8, r8, r0
 800c9e8:	e7e9      	b.n	800c9be <__sflush_r+0xda>
 800c9ea:	bf00      	nop
 800c9ec:	20400001 	.word	0x20400001

0800c9f0 <_fflush_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	690b      	ldr	r3, [r1, #16]
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	b913      	cbnz	r3, 800ca00 <_fflush_r+0x10>
 800c9fa:	2500      	movs	r5, #0
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	b118      	cbz	r0, 800ca0a <_fflush_r+0x1a>
 800ca02:	6983      	ldr	r3, [r0, #24]
 800ca04:	b90b      	cbnz	r3, 800ca0a <_fflush_r+0x1a>
 800ca06:	f000 f887 	bl	800cb18 <__sinit>
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <_fflush_r+0x6c>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	d11b      	bne.n	800ca48 <_fflush_r+0x58>
 800ca10:	686c      	ldr	r4, [r5, #4]
 800ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0ef      	beq.n	800c9fa <_fflush_r+0xa>
 800ca1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca1c:	07d0      	lsls	r0, r2, #31
 800ca1e:	d404      	bmi.n	800ca2a <_fflush_r+0x3a>
 800ca20:	0599      	lsls	r1, r3, #22
 800ca22:	d402      	bmi.n	800ca2a <_fflush_r+0x3a>
 800ca24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca26:	f000 f91a 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7ff ff59 	bl	800c8e4 <__sflush_r>
 800ca32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca34:	07da      	lsls	r2, r3, #31
 800ca36:	4605      	mov	r5, r0
 800ca38:	d4e0      	bmi.n	800c9fc <_fflush_r+0xc>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	059b      	lsls	r3, r3, #22
 800ca3e:	d4dd      	bmi.n	800c9fc <_fflush_r+0xc>
 800ca40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca42:	f000 f90d 	bl	800cc60 <__retarget_lock_release_recursive>
 800ca46:	e7d9      	b.n	800c9fc <_fflush_r+0xc>
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <_fflush_r+0x70>)
 800ca4a:	429c      	cmp	r4, r3
 800ca4c:	d101      	bne.n	800ca52 <_fflush_r+0x62>
 800ca4e:	68ac      	ldr	r4, [r5, #8]
 800ca50:	e7df      	b.n	800ca12 <_fflush_r+0x22>
 800ca52:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <_fflush_r+0x74>)
 800ca54:	429c      	cmp	r4, r3
 800ca56:	bf08      	it	eq
 800ca58:	68ec      	ldreq	r4, [r5, #12]
 800ca5a:	e7da      	b.n	800ca12 <_fflush_r+0x22>
 800ca5c:	0800ede4 	.word	0x0800ede4
 800ca60:	0800ee04 	.word	0x0800ee04
 800ca64:	0800edc4 	.word	0x0800edc4

0800ca68 <std>:
 800ca68:	2300      	movs	r3, #0
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca76:	6083      	str	r3, [r0, #8]
 800ca78:	8181      	strh	r1, [r0, #12]
 800ca7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca7c:	81c2      	strh	r2, [r0, #14]
 800ca7e:	6183      	str	r3, [r0, #24]
 800ca80:	4619      	mov	r1, r3
 800ca82:	2208      	movs	r2, #8
 800ca84:	305c      	adds	r0, #92	; 0x5c
 800ca86:	f7fe fb45 	bl	800b114 <memset>
 800ca8a:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <std+0x38>)
 800ca8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <std+0x3c>)
 800ca90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca92:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <std+0x40>)
 800ca94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <std+0x44>)
 800ca98:	6224      	str	r4, [r4, #32]
 800ca9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	bf00      	nop
 800caa0:	0800dbbd 	.word	0x0800dbbd
 800caa4:	0800dbdf 	.word	0x0800dbdf
 800caa8:	0800dc17 	.word	0x0800dc17
 800caac:	0800dc3b 	.word	0x0800dc3b

0800cab0 <_cleanup_r>:
 800cab0:	4901      	ldr	r1, [pc, #4]	; (800cab8 <_cleanup_r+0x8>)
 800cab2:	f000 b8af 	b.w	800cc14 <_fwalk_reent>
 800cab6:	bf00      	nop
 800cab8:	0800c9f1 	.word	0x0800c9f1

0800cabc <__sfmoreglue>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	2268      	movs	r2, #104	; 0x68
 800cac0:	1e4d      	subs	r5, r1, #1
 800cac2:	4355      	muls	r5, r2
 800cac4:	460e      	mov	r6, r1
 800cac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caca:	f000 fd3d 	bl	800d548 <_malloc_r>
 800cace:	4604      	mov	r4, r0
 800cad0:	b140      	cbz	r0, 800cae4 <__sfmoreglue+0x28>
 800cad2:	2100      	movs	r1, #0
 800cad4:	e9c0 1600 	strd	r1, r6, [r0]
 800cad8:	300c      	adds	r0, #12
 800cada:	60a0      	str	r0, [r4, #8]
 800cadc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cae0:	f7fe fb18 	bl	800b114 <memset>
 800cae4:	4620      	mov	r0, r4
 800cae6:	bd70      	pop	{r4, r5, r6, pc}

0800cae8 <__sfp_lock_acquire>:
 800cae8:	4801      	ldr	r0, [pc, #4]	; (800caf0 <__sfp_lock_acquire+0x8>)
 800caea:	f000 b8b8 	b.w	800cc5e <__retarget_lock_acquire_recursive>
 800caee:	bf00      	nop
 800caf0:	240007a9 	.word	0x240007a9

0800caf4 <__sfp_lock_release>:
 800caf4:	4801      	ldr	r0, [pc, #4]	; (800cafc <__sfp_lock_release+0x8>)
 800caf6:	f000 b8b3 	b.w	800cc60 <__retarget_lock_release_recursive>
 800cafa:	bf00      	nop
 800cafc:	240007a9 	.word	0x240007a9

0800cb00 <__sinit_lock_acquire>:
 800cb00:	4801      	ldr	r0, [pc, #4]	; (800cb08 <__sinit_lock_acquire+0x8>)
 800cb02:	f000 b8ac 	b.w	800cc5e <__retarget_lock_acquire_recursive>
 800cb06:	bf00      	nop
 800cb08:	240007aa 	.word	0x240007aa

0800cb0c <__sinit_lock_release>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	; (800cb14 <__sinit_lock_release+0x8>)
 800cb0e:	f000 b8a7 	b.w	800cc60 <__retarget_lock_release_recursive>
 800cb12:	bf00      	nop
 800cb14:	240007aa 	.word	0x240007aa

0800cb18 <__sinit>:
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	f7ff fff0 	bl	800cb00 <__sinit_lock_acquire>
 800cb20:	69a3      	ldr	r3, [r4, #24]
 800cb22:	b11b      	cbz	r3, 800cb2c <__sinit+0x14>
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb28:	f7ff bff0 	b.w	800cb0c <__sinit_lock_release>
 800cb2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb30:	6523      	str	r3, [r4, #80]	; 0x50
 800cb32:	4b13      	ldr	r3, [pc, #76]	; (800cb80 <__sinit+0x68>)
 800cb34:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <__sinit+0x6c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	bf04      	itt	eq
 800cb3e:	2301      	moveq	r3, #1
 800cb40:	61a3      	streq	r3, [r4, #24]
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 f820 	bl	800cb88 <__sfp>
 800cb48:	6060      	str	r0, [r4, #4]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f81c 	bl	800cb88 <__sfp>
 800cb50:	60a0      	str	r0, [r4, #8]
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f818 	bl	800cb88 <__sfp>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	60e0      	str	r0, [r4, #12]
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	6860      	ldr	r0, [r4, #4]
 800cb60:	f7ff ff82 	bl	800ca68 <std>
 800cb64:	68a0      	ldr	r0, [r4, #8]
 800cb66:	2201      	movs	r2, #1
 800cb68:	2109      	movs	r1, #9
 800cb6a:	f7ff ff7d 	bl	800ca68 <std>
 800cb6e:	68e0      	ldr	r0, [r4, #12]
 800cb70:	2202      	movs	r2, #2
 800cb72:	2112      	movs	r1, #18
 800cb74:	f7ff ff78 	bl	800ca68 <std>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	61a3      	str	r3, [r4, #24]
 800cb7c:	e7d2      	b.n	800cb24 <__sinit+0xc>
 800cb7e:	bf00      	nop
 800cb80:	0800ecfc 	.word	0x0800ecfc
 800cb84:	0800cab1 	.word	0x0800cab1

0800cb88 <__sfp>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	4607      	mov	r7, r0
 800cb8c:	f7ff ffac 	bl	800cae8 <__sfp_lock_acquire>
 800cb90:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <__sfp+0x84>)
 800cb92:	681e      	ldr	r6, [r3, #0]
 800cb94:	69b3      	ldr	r3, [r6, #24]
 800cb96:	b913      	cbnz	r3, 800cb9e <__sfp+0x16>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff ffbd 	bl	800cb18 <__sinit>
 800cb9e:	3648      	adds	r6, #72	; 0x48
 800cba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	d503      	bpl.n	800cbb0 <__sfp+0x28>
 800cba8:	6833      	ldr	r3, [r6, #0]
 800cbaa:	b30b      	cbz	r3, 800cbf0 <__sfp+0x68>
 800cbac:	6836      	ldr	r6, [r6, #0]
 800cbae:	e7f7      	b.n	800cba0 <__sfp+0x18>
 800cbb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbb4:	b9d5      	cbnz	r5, 800cbec <__sfp+0x64>
 800cbb6:	4b16      	ldr	r3, [pc, #88]	; (800cc10 <__sfp+0x88>)
 800cbb8:	60e3      	str	r3, [r4, #12]
 800cbba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbbe:	6665      	str	r5, [r4, #100]	; 0x64
 800cbc0:	f000 f84c 	bl	800cc5c <__retarget_lock_init_recursive>
 800cbc4:	f7ff ff96 	bl	800caf4 <__sfp_lock_release>
 800cbc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbd0:	6025      	str	r5, [r4, #0]
 800cbd2:	61a5      	str	r5, [r4, #24]
 800cbd4:	2208      	movs	r2, #8
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbdc:	f7fe fa9a 	bl	800b114 <memset>
 800cbe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbe8:	4620      	mov	r0, r4
 800cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbec:	3468      	adds	r4, #104	; 0x68
 800cbee:	e7d9      	b.n	800cba4 <__sfp+0x1c>
 800cbf0:	2104      	movs	r1, #4
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7ff ff62 	bl	800cabc <__sfmoreglue>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	6030      	str	r0, [r6, #0]
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d1d5      	bne.n	800cbac <__sfp+0x24>
 800cc00:	f7ff ff78 	bl	800caf4 <__sfp_lock_release>
 800cc04:	230c      	movs	r3, #12
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	e7ee      	b.n	800cbe8 <__sfp+0x60>
 800cc0a:	bf00      	nop
 800cc0c:	0800ecfc 	.word	0x0800ecfc
 800cc10:	ffff0001 	.word	0xffff0001

0800cc14 <_fwalk_reent>:
 800cc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc18:	4606      	mov	r6, r0
 800cc1a:	4688      	mov	r8, r1
 800cc1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc20:	2700      	movs	r7, #0
 800cc22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc26:	f1b9 0901 	subs.w	r9, r9, #1
 800cc2a:	d505      	bpl.n	800cc38 <_fwalk_reent+0x24>
 800cc2c:	6824      	ldr	r4, [r4, #0]
 800cc2e:	2c00      	cmp	r4, #0
 800cc30:	d1f7      	bne.n	800cc22 <_fwalk_reent+0xe>
 800cc32:	4638      	mov	r0, r7
 800cc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc38:	89ab      	ldrh	r3, [r5, #12]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d907      	bls.n	800cc4e <_fwalk_reent+0x3a>
 800cc3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc42:	3301      	adds	r3, #1
 800cc44:	d003      	beq.n	800cc4e <_fwalk_reent+0x3a>
 800cc46:	4629      	mov	r1, r5
 800cc48:	4630      	mov	r0, r6
 800cc4a:	47c0      	blx	r8
 800cc4c:	4307      	orrs	r7, r0
 800cc4e:	3568      	adds	r5, #104	; 0x68
 800cc50:	e7e9      	b.n	800cc26 <_fwalk_reent+0x12>
	...

0800cc54 <_localeconv_r>:
 800cc54:	4800      	ldr	r0, [pc, #0]	; (800cc58 <_localeconv_r+0x4>)
 800cc56:	4770      	bx	lr
 800cc58:	240001ac 	.word	0x240001ac

0800cc5c <__retarget_lock_init_recursive>:
 800cc5c:	4770      	bx	lr

0800cc5e <__retarget_lock_acquire_recursive>:
 800cc5e:	4770      	bx	lr

0800cc60 <__retarget_lock_release_recursive>:
 800cc60:	4770      	bx	lr

0800cc62 <__swhatbuf_r>:
 800cc62:	b570      	push	{r4, r5, r6, lr}
 800cc64:	460e      	mov	r6, r1
 800cc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc6a:	2900      	cmp	r1, #0
 800cc6c:	b096      	sub	sp, #88	; 0x58
 800cc6e:	4614      	mov	r4, r2
 800cc70:	461d      	mov	r5, r3
 800cc72:	da08      	bge.n	800cc86 <__swhatbuf_r+0x24>
 800cc74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	602a      	str	r2, [r5, #0]
 800cc7c:	061a      	lsls	r2, r3, #24
 800cc7e:	d410      	bmi.n	800cca2 <__swhatbuf_r+0x40>
 800cc80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc84:	e00e      	b.n	800cca4 <__swhatbuf_r+0x42>
 800cc86:	466a      	mov	r2, sp
 800cc88:	f001 f82e 	bl	800dce8 <_fstat_r>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	dbf1      	blt.n	800cc74 <__swhatbuf_r+0x12>
 800cc90:	9a01      	ldr	r2, [sp, #4]
 800cc92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc9a:	425a      	negs	r2, r3
 800cc9c:	415a      	adcs	r2, r3
 800cc9e:	602a      	str	r2, [r5, #0]
 800cca0:	e7ee      	b.n	800cc80 <__swhatbuf_r+0x1e>
 800cca2:	2340      	movs	r3, #64	; 0x40
 800cca4:	2000      	movs	r0, #0
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	b016      	add	sp, #88	; 0x58
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}

0800ccac <__smakebuf_r>:
 800ccac:	898b      	ldrh	r3, [r1, #12]
 800ccae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccb0:	079d      	lsls	r5, r3, #30
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	d507      	bpl.n	800ccc8 <__smakebuf_r+0x1c>
 800ccb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	6163      	str	r3, [r4, #20]
 800ccc4:	b002      	add	sp, #8
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	ab01      	add	r3, sp, #4
 800ccca:	466a      	mov	r2, sp
 800cccc:	f7ff ffc9 	bl	800cc62 <__swhatbuf_r>
 800ccd0:	9900      	ldr	r1, [sp, #0]
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f000 fc37 	bl	800d548 <_malloc_r>
 800ccda:	b948      	cbnz	r0, 800ccf0 <__smakebuf_r+0x44>
 800ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce0:	059a      	lsls	r2, r3, #22
 800cce2:	d4ef      	bmi.n	800ccc4 <__smakebuf_r+0x18>
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	f043 0302 	orr.w	r3, r3, #2
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	e7e3      	b.n	800ccb8 <__smakebuf_r+0xc>
 800ccf0:	4b0d      	ldr	r3, [pc, #52]	; (800cd28 <__smakebuf_r+0x7c>)
 800ccf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	6020      	str	r0, [r4, #0]
 800ccf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccfc:	81a3      	strh	r3, [r4, #12]
 800ccfe:	9b00      	ldr	r3, [sp, #0]
 800cd00:	6163      	str	r3, [r4, #20]
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	6120      	str	r0, [r4, #16]
 800cd06:	b15b      	cbz	r3, 800cd20 <__smakebuf_r+0x74>
 800cd08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f000 fffd 	bl	800dd0c <_isatty_r>
 800cd12:	b128      	cbz	r0, 800cd20 <__smakebuf_r+0x74>
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	f043 0301 	orr.w	r3, r3, #1
 800cd1e:	81a3      	strh	r3, [r4, #12]
 800cd20:	89a0      	ldrh	r0, [r4, #12]
 800cd22:	4305      	orrs	r5, r0
 800cd24:	81a5      	strh	r5, [r4, #12]
 800cd26:	e7cd      	b.n	800ccc4 <__smakebuf_r+0x18>
 800cd28:	0800cab1 	.word	0x0800cab1

0800cd2c <malloc>:
 800cd2c:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <malloc+0xc>)
 800cd2e:	4601      	mov	r1, r0
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f000 bc09 	b.w	800d548 <_malloc_r>
 800cd36:	bf00      	nop
 800cd38:	24000058 	.word	0x24000058

0800cd3c <_Balloc>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd40:	4604      	mov	r4, r0
 800cd42:	460d      	mov	r5, r1
 800cd44:	b976      	cbnz	r6, 800cd64 <_Balloc+0x28>
 800cd46:	2010      	movs	r0, #16
 800cd48:	f7ff fff0 	bl	800cd2c <malloc>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6260      	str	r0, [r4, #36]	; 0x24
 800cd50:	b920      	cbnz	r0, 800cd5c <_Balloc+0x20>
 800cd52:	4b18      	ldr	r3, [pc, #96]	; (800cdb4 <_Balloc+0x78>)
 800cd54:	4818      	ldr	r0, [pc, #96]	; (800cdb8 <_Balloc+0x7c>)
 800cd56:	2166      	movs	r1, #102	; 0x66
 800cd58:	f000 ff86 	bl	800dc68 <__assert_func>
 800cd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd60:	6006      	str	r6, [r0, #0]
 800cd62:	60c6      	str	r6, [r0, #12]
 800cd64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd66:	68f3      	ldr	r3, [r6, #12]
 800cd68:	b183      	cbz	r3, 800cd8c <_Balloc+0x50>
 800cd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd72:	b9b8      	cbnz	r0, 800cda4 <_Balloc+0x68>
 800cd74:	2101      	movs	r1, #1
 800cd76:	fa01 f605 	lsl.w	r6, r1, r5
 800cd7a:	1d72      	adds	r2, r6, #5
 800cd7c:	0092      	lsls	r2, r2, #2
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 fb60 	bl	800d444 <_calloc_r>
 800cd84:	b160      	cbz	r0, 800cda0 <_Balloc+0x64>
 800cd86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd8a:	e00e      	b.n	800cdaa <_Balloc+0x6e>
 800cd8c:	2221      	movs	r2, #33	; 0x21
 800cd8e:	2104      	movs	r1, #4
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 fb57 	bl	800d444 <_calloc_r>
 800cd96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd98:	60f0      	str	r0, [r6, #12]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1e4      	bne.n	800cd6a <_Balloc+0x2e>
 800cda0:	2000      	movs	r0, #0
 800cda2:	bd70      	pop	{r4, r5, r6, pc}
 800cda4:	6802      	ldr	r2, [r0, #0]
 800cda6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdb0:	e7f7      	b.n	800cda2 <_Balloc+0x66>
 800cdb2:	bf00      	nop
 800cdb4:	0800ed41 	.word	0x0800ed41
 800cdb8:	0800ee24 	.word	0x0800ee24

0800cdbc <_Bfree>:
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	b976      	cbnz	r6, 800cde4 <_Bfree+0x28>
 800cdc6:	2010      	movs	r0, #16
 800cdc8:	f7ff ffb0 	bl	800cd2c <malloc>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	6268      	str	r0, [r5, #36]	; 0x24
 800cdd0:	b920      	cbnz	r0, 800cddc <_Bfree+0x20>
 800cdd2:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <_Bfree+0x3c>)
 800cdd4:	4809      	ldr	r0, [pc, #36]	; (800cdfc <_Bfree+0x40>)
 800cdd6:	218a      	movs	r1, #138	; 0x8a
 800cdd8:	f000 ff46 	bl	800dc68 <__assert_func>
 800cddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde0:	6006      	str	r6, [r0, #0]
 800cde2:	60c6      	str	r6, [r0, #12]
 800cde4:	b13c      	cbz	r4, 800cdf6 <_Bfree+0x3a>
 800cde6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cde8:	6862      	ldr	r2, [r4, #4]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdf0:	6021      	str	r1, [r4, #0]
 800cdf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	0800ed41 	.word	0x0800ed41
 800cdfc:	0800ee24 	.word	0x0800ee24

0800ce00 <__multadd>:
 800ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce04:	690d      	ldr	r5, [r1, #16]
 800ce06:	4607      	mov	r7, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	461e      	mov	r6, r3
 800ce0c:	f101 0c14 	add.w	ip, r1, #20
 800ce10:	2000      	movs	r0, #0
 800ce12:	f8dc 3000 	ldr.w	r3, [ip]
 800ce16:	b299      	uxth	r1, r3
 800ce18:	fb02 6101 	mla	r1, r2, r1, r6
 800ce1c:	0c1e      	lsrs	r6, r3, #16
 800ce1e:	0c0b      	lsrs	r3, r1, #16
 800ce20:	fb02 3306 	mla	r3, r2, r6, r3
 800ce24:	b289      	uxth	r1, r1
 800ce26:	3001      	adds	r0, #1
 800ce28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce2c:	4285      	cmp	r5, r0
 800ce2e:	f84c 1b04 	str.w	r1, [ip], #4
 800ce32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce36:	dcec      	bgt.n	800ce12 <__multadd+0x12>
 800ce38:	b30e      	cbz	r6, 800ce7e <__multadd+0x7e>
 800ce3a:	68a3      	ldr	r3, [r4, #8]
 800ce3c:	42ab      	cmp	r3, r5
 800ce3e:	dc19      	bgt.n	800ce74 <__multadd+0x74>
 800ce40:	6861      	ldr	r1, [r4, #4]
 800ce42:	4638      	mov	r0, r7
 800ce44:	3101      	adds	r1, #1
 800ce46:	f7ff ff79 	bl	800cd3c <_Balloc>
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	b928      	cbnz	r0, 800ce5a <__multadd+0x5a>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	4b0c      	ldr	r3, [pc, #48]	; (800ce84 <__multadd+0x84>)
 800ce52:	480d      	ldr	r0, [pc, #52]	; (800ce88 <__multadd+0x88>)
 800ce54:	21b5      	movs	r1, #181	; 0xb5
 800ce56:	f000 ff07 	bl	800dc68 <__assert_func>
 800ce5a:	6922      	ldr	r2, [r4, #16]
 800ce5c:	3202      	adds	r2, #2
 800ce5e:	f104 010c 	add.w	r1, r4, #12
 800ce62:	0092      	lsls	r2, r2, #2
 800ce64:	300c      	adds	r0, #12
 800ce66:	f7fe f947 	bl	800b0f8 <memcpy>
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f7ff ffa5 	bl	800cdbc <_Bfree>
 800ce72:	4644      	mov	r4, r8
 800ce74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce78:	3501      	adds	r5, #1
 800ce7a:	615e      	str	r6, [r3, #20]
 800ce7c:	6125      	str	r5, [r4, #16]
 800ce7e:	4620      	mov	r0, r4
 800ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce84:	0800edb3 	.word	0x0800edb3
 800ce88:	0800ee24 	.word	0x0800ee24

0800ce8c <__hi0bits>:
 800ce8c:	0c03      	lsrs	r3, r0, #16
 800ce8e:	041b      	lsls	r3, r3, #16
 800ce90:	b9d3      	cbnz	r3, 800cec8 <__hi0bits+0x3c>
 800ce92:	0400      	lsls	r0, r0, #16
 800ce94:	2310      	movs	r3, #16
 800ce96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce9a:	bf04      	itt	eq
 800ce9c:	0200      	lsleq	r0, r0, #8
 800ce9e:	3308      	addeq	r3, #8
 800cea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cea4:	bf04      	itt	eq
 800cea6:	0100      	lsleq	r0, r0, #4
 800cea8:	3304      	addeq	r3, #4
 800ceaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ceae:	bf04      	itt	eq
 800ceb0:	0080      	lsleq	r0, r0, #2
 800ceb2:	3302      	addeq	r3, #2
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	db05      	blt.n	800cec4 <__hi0bits+0x38>
 800ceb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cebc:	f103 0301 	add.w	r3, r3, #1
 800cec0:	bf08      	it	eq
 800cec2:	2320      	moveq	r3, #32
 800cec4:	4618      	mov	r0, r3
 800cec6:	4770      	bx	lr
 800cec8:	2300      	movs	r3, #0
 800ceca:	e7e4      	b.n	800ce96 <__hi0bits+0xa>

0800cecc <__lo0bits>:
 800cecc:	6803      	ldr	r3, [r0, #0]
 800cece:	f013 0207 	ands.w	r2, r3, #7
 800ced2:	4601      	mov	r1, r0
 800ced4:	d00b      	beq.n	800ceee <__lo0bits+0x22>
 800ced6:	07da      	lsls	r2, r3, #31
 800ced8:	d423      	bmi.n	800cf22 <__lo0bits+0x56>
 800ceda:	0798      	lsls	r0, r3, #30
 800cedc:	bf49      	itett	mi
 800cede:	085b      	lsrmi	r3, r3, #1
 800cee0:	089b      	lsrpl	r3, r3, #2
 800cee2:	2001      	movmi	r0, #1
 800cee4:	600b      	strmi	r3, [r1, #0]
 800cee6:	bf5c      	itt	pl
 800cee8:	600b      	strpl	r3, [r1, #0]
 800ceea:	2002      	movpl	r0, #2
 800ceec:	4770      	bx	lr
 800ceee:	b298      	uxth	r0, r3
 800cef0:	b9a8      	cbnz	r0, 800cf1e <__lo0bits+0x52>
 800cef2:	0c1b      	lsrs	r3, r3, #16
 800cef4:	2010      	movs	r0, #16
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	b90a      	cbnz	r2, 800cefe <__lo0bits+0x32>
 800cefa:	3008      	adds	r0, #8
 800cefc:	0a1b      	lsrs	r3, r3, #8
 800cefe:	071a      	lsls	r2, r3, #28
 800cf00:	bf04      	itt	eq
 800cf02:	091b      	lsreq	r3, r3, #4
 800cf04:	3004      	addeq	r0, #4
 800cf06:	079a      	lsls	r2, r3, #30
 800cf08:	bf04      	itt	eq
 800cf0a:	089b      	lsreq	r3, r3, #2
 800cf0c:	3002      	addeq	r0, #2
 800cf0e:	07da      	lsls	r2, r3, #31
 800cf10:	d403      	bmi.n	800cf1a <__lo0bits+0x4e>
 800cf12:	085b      	lsrs	r3, r3, #1
 800cf14:	f100 0001 	add.w	r0, r0, #1
 800cf18:	d005      	beq.n	800cf26 <__lo0bits+0x5a>
 800cf1a:	600b      	str	r3, [r1, #0]
 800cf1c:	4770      	bx	lr
 800cf1e:	4610      	mov	r0, r2
 800cf20:	e7e9      	b.n	800cef6 <__lo0bits+0x2a>
 800cf22:	2000      	movs	r0, #0
 800cf24:	4770      	bx	lr
 800cf26:	2020      	movs	r0, #32
 800cf28:	4770      	bx	lr
	...

0800cf2c <__i2b>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	460c      	mov	r4, r1
 800cf30:	2101      	movs	r1, #1
 800cf32:	f7ff ff03 	bl	800cd3c <_Balloc>
 800cf36:	4602      	mov	r2, r0
 800cf38:	b928      	cbnz	r0, 800cf46 <__i2b+0x1a>
 800cf3a:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <__i2b+0x24>)
 800cf3c:	4805      	ldr	r0, [pc, #20]	; (800cf54 <__i2b+0x28>)
 800cf3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf42:	f000 fe91 	bl	800dc68 <__assert_func>
 800cf46:	2301      	movs	r3, #1
 800cf48:	6144      	str	r4, [r0, #20]
 800cf4a:	6103      	str	r3, [r0, #16]
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800edb3 	.word	0x0800edb3
 800cf54:	0800ee24 	.word	0x0800ee24

0800cf58 <__multiply>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	4691      	mov	r9, r2
 800cf5e:	690a      	ldr	r2, [r1, #16]
 800cf60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	bfb8      	it	lt
 800cf68:	460b      	movlt	r3, r1
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	bfbc      	itt	lt
 800cf6e:	464c      	movlt	r4, r9
 800cf70:	4699      	movlt	r9, r3
 800cf72:	6927      	ldr	r7, [r4, #16]
 800cf74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	6861      	ldr	r1, [r4, #4]
 800cf7c:	eb07 060a 	add.w	r6, r7, sl
 800cf80:	42b3      	cmp	r3, r6
 800cf82:	b085      	sub	sp, #20
 800cf84:	bfb8      	it	lt
 800cf86:	3101      	addlt	r1, #1
 800cf88:	f7ff fed8 	bl	800cd3c <_Balloc>
 800cf8c:	b930      	cbnz	r0, 800cf9c <__multiply+0x44>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	4b44      	ldr	r3, [pc, #272]	; (800d0a4 <__multiply+0x14c>)
 800cf92:	4845      	ldr	r0, [pc, #276]	; (800d0a8 <__multiply+0x150>)
 800cf94:	f240 115d 	movw	r1, #349	; 0x15d
 800cf98:	f000 fe66 	bl	800dc68 <__assert_func>
 800cf9c:	f100 0514 	add.w	r5, r0, #20
 800cfa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	4543      	cmp	r3, r8
 800cfaa:	d321      	bcc.n	800cff0 <__multiply+0x98>
 800cfac:	f104 0314 	add.w	r3, r4, #20
 800cfb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfb4:	f109 0314 	add.w	r3, r9, #20
 800cfb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfbc:	9202      	str	r2, [sp, #8]
 800cfbe:	1b3a      	subs	r2, r7, r4
 800cfc0:	3a15      	subs	r2, #21
 800cfc2:	f022 0203 	bic.w	r2, r2, #3
 800cfc6:	3204      	adds	r2, #4
 800cfc8:	f104 0115 	add.w	r1, r4, #21
 800cfcc:	428f      	cmp	r7, r1
 800cfce:	bf38      	it	cc
 800cfd0:	2204      	movcc	r2, #4
 800cfd2:	9201      	str	r2, [sp, #4]
 800cfd4:	9a02      	ldr	r2, [sp, #8]
 800cfd6:	9303      	str	r3, [sp, #12]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d80c      	bhi.n	800cff6 <__multiply+0x9e>
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	dd03      	ble.n	800cfe8 <__multiply+0x90>
 800cfe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d05a      	beq.n	800d09e <__multiply+0x146>
 800cfe8:	6106      	str	r6, [r0, #16]
 800cfea:	b005      	add	sp, #20
 800cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff0:	f843 2b04 	str.w	r2, [r3], #4
 800cff4:	e7d8      	b.n	800cfa8 <__multiply+0x50>
 800cff6:	f8b3 a000 	ldrh.w	sl, [r3]
 800cffa:	f1ba 0f00 	cmp.w	sl, #0
 800cffe:	d024      	beq.n	800d04a <__multiply+0xf2>
 800d000:	f104 0e14 	add.w	lr, r4, #20
 800d004:	46a9      	mov	r9, r5
 800d006:	f04f 0c00 	mov.w	ip, #0
 800d00a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d00e:	f8d9 1000 	ldr.w	r1, [r9]
 800d012:	fa1f fb82 	uxth.w	fp, r2
 800d016:	b289      	uxth	r1, r1
 800d018:	fb0a 110b 	mla	r1, sl, fp, r1
 800d01c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d020:	f8d9 2000 	ldr.w	r2, [r9]
 800d024:	4461      	add	r1, ip
 800d026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d02a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d02e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d032:	b289      	uxth	r1, r1
 800d034:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d038:	4577      	cmp	r7, lr
 800d03a:	f849 1b04 	str.w	r1, [r9], #4
 800d03e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d042:	d8e2      	bhi.n	800d00a <__multiply+0xb2>
 800d044:	9a01      	ldr	r2, [sp, #4]
 800d046:	f845 c002 	str.w	ip, [r5, r2]
 800d04a:	9a03      	ldr	r2, [sp, #12]
 800d04c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d050:	3304      	adds	r3, #4
 800d052:	f1b9 0f00 	cmp.w	r9, #0
 800d056:	d020      	beq.n	800d09a <__multiply+0x142>
 800d058:	6829      	ldr	r1, [r5, #0]
 800d05a:	f104 0c14 	add.w	ip, r4, #20
 800d05e:	46ae      	mov	lr, r5
 800d060:	f04f 0a00 	mov.w	sl, #0
 800d064:	f8bc b000 	ldrh.w	fp, [ip]
 800d068:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d06c:	fb09 220b 	mla	r2, r9, fp, r2
 800d070:	4492      	add	sl, r2
 800d072:	b289      	uxth	r1, r1
 800d074:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d078:	f84e 1b04 	str.w	r1, [lr], #4
 800d07c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d080:	f8be 1000 	ldrh.w	r1, [lr]
 800d084:	0c12      	lsrs	r2, r2, #16
 800d086:	fb09 1102 	mla	r1, r9, r2, r1
 800d08a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d08e:	4567      	cmp	r7, ip
 800d090:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d094:	d8e6      	bhi.n	800d064 <__multiply+0x10c>
 800d096:	9a01      	ldr	r2, [sp, #4]
 800d098:	50a9      	str	r1, [r5, r2]
 800d09a:	3504      	adds	r5, #4
 800d09c:	e79a      	b.n	800cfd4 <__multiply+0x7c>
 800d09e:	3e01      	subs	r6, #1
 800d0a0:	e79c      	b.n	800cfdc <__multiply+0x84>
 800d0a2:	bf00      	nop
 800d0a4:	0800edb3 	.word	0x0800edb3
 800d0a8:	0800ee24 	.word	0x0800ee24

0800d0ac <__pow5mult>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	f012 0203 	ands.w	r2, r2, #3
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	460f      	mov	r7, r1
 800d0ba:	d007      	beq.n	800d0cc <__pow5mult+0x20>
 800d0bc:	4c25      	ldr	r4, [pc, #148]	; (800d154 <__pow5mult+0xa8>)
 800d0be:	3a01      	subs	r2, #1
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0c6:	f7ff fe9b 	bl	800ce00 <__multadd>
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	10ad      	asrs	r5, r5, #2
 800d0ce:	d03d      	beq.n	800d14c <__pow5mult+0xa0>
 800d0d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0d2:	b97c      	cbnz	r4, 800d0f4 <__pow5mult+0x48>
 800d0d4:	2010      	movs	r0, #16
 800d0d6:	f7ff fe29 	bl	800cd2c <malloc>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	6270      	str	r0, [r6, #36]	; 0x24
 800d0de:	b928      	cbnz	r0, 800d0ec <__pow5mult+0x40>
 800d0e0:	4b1d      	ldr	r3, [pc, #116]	; (800d158 <__pow5mult+0xac>)
 800d0e2:	481e      	ldr	r0, [pc, #120]	; (800d15c <__pow5mult+0xb0>)
 800d0e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0e8:	f000 fdbe 	bl	800dc68 <__assert_func>
 800d0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0f0:	6004      	str	r4, [r0, #0]
 800d0f2:	60c4      	str	r4, [r0, #12]
 800d0f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0fc:	b94c      	cbnz	r4, 800d112 <__pow5mult+0x66>
 800d0fe:	f240 2171 	movw	r1, #625	; 0x271
 800d102:	4630      	mov	r0, r6
 800d104:	f7ff ff12 	bl	800cf2c <__i2b>
 800d108:	2300      	movs	r3, #0
 800d10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d10e:	4604      	mov	r4, r0
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	f04f 0900 	mov.w	r9, #0
 800d116:	07eb      	lsls	r3, r5, #31
 800d118:	d50a      	bpl.n	800d130 <__pow5mult+0x84>
 800d11a:	4639      	mov	r1, r7
 800d11c:	4622      	mov	r2, r4
 800d11e:	4630      	mov	r0, r6
 800d120:	f7ff ff1a 	bl	800cf58 <__multiply>
 800d124:	4639      	mov	r1, r7
 800d126:	4680      	mov	r8, r0
 800d128:	4630      	mov	r0, r6
 800d12a:	f7ff fe47 	bl	800cdbc <_Bfree>
 800d12e:	4647      	mov	r7, r8
 800d130:	106d      	asrs	r5, r5, #1
 800d132:	d00b      	beq.n	800d14c <__pow5mult+0xa0>
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	b938      	cbnz	r0, 800d148 <__pow5mult+0x9c>
 800d138:	4622      	mov	r2, r4
 800d13a:	4621      	mov	r1, r4
 800d13c:	4630      	mov	r0, r6
 800d13e:	f7ff ff0b 	bl	800cf58 <__multiply>
 800d142:	6020      	str	r0, [r4, #0]
 800d144:	f8c0 9000 	str.w	r9, [r0]
 800d148:	4604      	mov	r4, r0
 800d14a:	e7e4      	b.n	800d116 <__pow5mult+0x6a>
 800d14c:	4638      	mov	r0, r7
 800d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d152:	bf00      	nop
 800d154:	0800ef70 	.word	0x0800ef70
 800d158:	0800ed41 	.word	0x0800ed41
 800d15c:	0800ee24 	.word	0x0800ee24

0800d160 <__lshift>:
 800d160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	6849      	ldr	r1, [r1, #4]
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d16e:	68a3      	ldr	r3, [r4, #8]
 800d170:	4607      	mov	r7, r0
 800d172:	4691      	mov	r9, r2
 800d174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d178:	f108 0601 	add.w	r6, r8, #1
 800d17c:	42b3      	cmp	r3, r6
 800d17e:	db0b      	blt.n	800d198 <__lshift+0x38>
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff fddb 	bl	800cd3c <_Balloc>
 800d186:	4605      	mov	r5, r0
 800d188:	b948      	cbnz	r0, 800d19e <__lshift+0x3e>
 800d18a:	4602      	mov	r2, r0
 800d18c:	4b2a      	ldr	r3, [pc, #168]	; (800d238 <__lshift+0xd8>)
 800d18e:	482b      	ldr	r0, [pc, #172]	; (800d23c <__lshift+0xdc>)
 800d190:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d194:	f000 fd68 	bl	800dc68 <__assert_func>
 800d198:	3101      	adds	r1, #1
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	e7ee      	b.n	800d17c <__lshift+0x1c>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f100 0114 	add.w	r1, r0, #20
 800d1a4:	f100 0210 	add.w	r2, r0, #16
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	4553      	cmp	r3, sl
 800d1ac:	db37      	blt.n	800d21e <__lshift+0xbe>
 800d1ae:	6920      	ldr	r0, [r4, #16]
 800d1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b4:	f104 0314 	add.w	r3, r4, #20
 800d1b8:	f019 091f 	ands.w	r9, r9, #31
 800d1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1c4:	d02f      	beq.n	800d226 <__lshift+0xc6>
 800d1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d1ca:	468a      	mov	sl, r1
 800d1cc:	f04f 0c00 	mov.w	ip, #0
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	fa02 f209 	lsl.w	r2, r2, r9
 800d1d6:	ea42 020c 	orr.w	r2, r2, ip
 800d1da:	f84a 2b04 	str.w	r2, [sl], #4
 800d1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e2:	4298      	cmp	r0, r3
 800d1e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1e8:	d8f2      	bhi.n	800d1d0 <__lshift+0x70>
 800d1ea:	1b03      	subs	r3, r0, r4
 800d1ec:	3b15      	subs	r3, #21
 800d1ee:	f023 0303 	bic.w	r3, r3, #3
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	f104 0215 	add.w	r2, r4, #21
 800d1f8:	4290      	cmp	r0, r2
 800d1fa:	bf38      	it	cc
 800d1fc:	2304      	movcc	r3, #4
 800d1fe:	f841 c003 	str.w	ip, [r1, r3]
 800d202:	f1bc 0f00 	cmp.w	ip, #0
 800d206:	d001      	beq.n	800d20c <__lshift+0xac>
 800d208:	f108 0602 	add.w	r6, r8, #2
 800d20c:	3e01      	subs	r6, #1
 800d20e:	4638      	mov	r0, r7
 800d210:	612e      	str	r6, [r5, #16]
 800d212:	4621      	mov	r1, r4
 800d214:	f7ff fdd2 	bl	800cdbc <_Bfree>
 800d218:	4628      	mov	r0, r5
 800d21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d222:	3301      	adds	r3, #1
 800d224:	e7c1      	b.n	800d1aa <__lshift+0x4a>
 800d226:	3904      	subs	r1, #4
 800d228:	f853 2b04 	ldr.w	r2, [r3], #4
 800d22c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d230:	4298      	cmp	r0, r3
 800d232:	d8f9      	bhi.n	800d228 <__lshift+0xc8>
 800d234:	e7ea      	b.n	800d20c <__lshift+0xac>
 800d236:	bf00      	nop
 800d238:	0800edb3 	.word	0x0800edb3
 800d23c:	0800ee24 	.word	0x0800ee24

0800d240 <__mcmp>:
 800d240:	b530      	push	{r4, r5, lr}
 800d242:	6902      	ldr	r2, [r0, #16]
 800d244:	690c      	ldr	r4, [r1, #16]
 800d246:	1b12      	subs	r2, r2, r4
 800d248:	d10e      	bne.n	800d268 <__mcmp+0x28>
 800d24a:	f100 0314 	add.w	r3, r0, #20
 800d24e:	3114      	adds	r1, #20
 800d250:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d258:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d25c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d260:	42a5      	cmp	r5, r4
 800d262:	d003      	beq.n	800d26c <__mcmp+0x2c>
 800d264:	d305      	bcc.n	800d272 <__mcmp+0x32>
 800d266:	2201      	movs	r2, #1
 800d268:	4610      	mov	r0, r2
 800d26a:	bd30      	pop	{r4, r5, pc}
 800d26c:	4283      	cmp	r3, r0
 800d26e:	d3f3      	bcc.n	800d258 <__mcmp+0x18>
 800d270:	e7fa      	b.n	800d268 <__mcmp+0x28>
 800d272:	f04f 32ff 	mov.w	r2, #4294967295
 800d276:	e7f7      	b.n	800d268 <__mcmp+0x28>

0800d278 <__mdiff>:
 800d278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	460c      	mov	r4, r1
 800d27e:	4606      	mov	r6, r0
 800d280:	4611      	mov	r1, r2
 800d282:	4620      	mov	r0, r4
 800d284:	4690      	mov	r8, r2
 800d286:	f7ff ffdb 	bl	800d240 <__mcmp>
 800d28a:	1e05      	subs	r5, r0, #0
 800d28c:	d110      	bne.n	800d2b0 <__mdiff+0x38>
 800d28e:	4629      	mov	r1, r5
 800d290:	4630      	mov	r0, r6
 800d292:	f7ff fd53 	bl	800cd3c <_Balloc>
 800d296:	b930      	cbnz	r0, 800d2a6 <__mdiff+0x2e>
 800d298:	4b3a      	ldr	r3, [pc, #232]	; (800d384 <__mdiff+0x10c>)
 800d29a:	4602      	mov	r2, r0
 800d29c:	f240 2132 	movw	r1, #562	; 0x232
 800d2a0:	4839      	ldr	r0, [pc, #228]	; (800d388 <__mdiff+0x110>)
 800d2a2:	f000 fce1 	bl	800dc68 <__assert_func>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b0:	bfa4      	itt	ge
 800d2b2:	4643      	movge	r3, r8
 800d2b4:	46a0      	movge	r8, r4
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2bc:	bfa6      	itte	ge
 800d2be:	461c      	movge	r4, r3
 800d2c0:	2500      	movge	r5, #0
 800d2c2:	2501      	movlt	r5, #1
 800d2c4:	f7ff fd3a 	bl	800cd3c <_Balloc>
 800d2c8:	b920      	cbnz	r0, 800d2d4 <__mdiff+0x5c>
 800d2ca:	4b2e      	ldr	r3, [pc, #184]	; (800d384 <__mdiff+0x10c>)
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2d2:	e7e5      	b.n	800d2a0 <__mdiff+0x28>
 800d2d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2d8:	6926      	ldr	r6, [r4, #16]
 800d2da:	60c5      	str	r5, [r0, #12]
 800d2dc:	f104 0914 	add.w	r9, r4, #20
 800d2e0:	f108 0514 	add.w	r5, r8, #20
 800d2e4:	f100 0e14 	add.w	lr, r0, #20
 800d2e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2f0:	f108 0210 	add.w	r2, r8, #16
 800d2f4:	46f2      	mov	sl, lr
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d300:	fa1f f883 	uxth.w	r8, r3
 800d304:	fa11 f18b 	uxtah	r1, r1, fp
 800d308:	0c1b      	lsrs	r3, r3, #16
 800d30a:	eba1 0808 	sub.w	r8, r1, r8
 800d30e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d312:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d316:	fa1f f888 	uxth.w	r8, r8
 800d31a:	1419      	asrs	r1, r3, #16
 800d31c:	454e      	cmp	r6, r9
 800d31e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d322:	f84a 3b04 	str.w	r3, [sl], #4
 800d326:	d8e7      	bhi.n	800d2f8 <__mdiff+0x80>
 800d328:	1b33      	subs	r3, r6, r4
 800d32a:	3b15      	subs	r3, #21
 800d32c:	f023 0303 	bic.w	r3, r3, #3
 800d330:	3304      	adds	r3, #4
 800d332:	3415      	adds	r4, #21
 800d334:	42a6      	cmp	r6, r4
 800d336:	bf38      	it	cc
 800d338:	2304      	movcc	r3, #4
 800d33a:	441d      	add	r5, r3
 800d33c:	4473      	add	r3, lr
 800d33e:	469e      	mov	lr, r3
 800d340:	462e      	mov	r6, r5
 800d342:	4566      	cmp	r6, ip
 800d344:	d30e      	bcc.n	800d364 <__mdiff+0xec>
 800d346:	f10c 0203 	add.w	r2, ip, #3
 800d34a:	1b52      	subs	r2, r2, r5
 800d34c:	f022 0203 	bic.w	r2, r2, #3
 800d350:	3d03      	subs	r5, #3
 800d352:	45ac      	cmp	ip, r5
 800d354:	bf38      	it	cc
 800d356:	2200      	movcc	r2, #0
 800d358:	441a      	add	r2, r3
 800d35a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d35e:	b17b      	cbz	r3, 800d380 <__mdiff+0x108>
 800d360:	6107      	str	r7, [r0, #16]
 800d362:	e7a3      	b.n	800d2ac <__mdiff+0x34>
 800d364:	f856 8b04 	ldr.w	r8, [r6], #4
 800d368:	fa11 f288 	uxtah	r2, r1, r8
 800d36c:	1414      	asrs	r4, r2, #16
 800d36e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d372:	b292      	uxth	r2, r2
 800d374:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d378:	f84e 2b04 	str.w	r2, [lr], #4
 800d37c:	1421      	asrs	r1, r4, #16
 800d37e:	e7e0      	b.n	800d342 <__mdiff+0xca>
 800d380:	3f01      	subs	r7, #1
 800d382:	e7ea      	b.n	800d35a <__mdiff+0xe2>
 800d384:	0800edb3 	.word	0x0800edb3
 800d388:	0800ee24 	.word	0x0800ee24

0800d38c <__d2b>:
 800d38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d390:	4689      	mov	r9, r1
 800d392:	2101      	movs	r1, #1
 800d394:	ec57 6b10 	vmov	r6, r7, d0
 800d398:	4690      	mov	r8, r2
 800d39a:	f7ff fccf 	bl	800cd3c <_Balloc>
 800d39e:	4604      	mov	r4, r0
 800d3a0:	b930      	cbnz	r0, 800d3b0 <__d2b+0x24>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	4b25      	ldr	r3, [pc, #148]	; (800d43c <__d2b+0xb0>)
 800d3a6:	4826      	ldr	r0, [pc, #152]	; (800d440 <__d2b+0xb4>)
 800d3a8:	f240 310a 	movw	r1, #778	; 0x30a
 800d3ac:	f000 fc5c 	bl	800dc68 <__assert_func>
 800d3b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d3b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3b8:	bb35      	cbnz	r5, 800d408 <__d2b+0x7c>
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	d028      	beq.n	800d412 <__d2b+0x86>
 800d3c0:	4668      	mov	r0, sp
 800d3c2:	9600      	str	r6, [sp, #0]
 800d3c4:	f7ff fd82 	bl	800cecc <__lo0bits>
 800d3c8:	9900      	ldr	r1, [sp, #0]
 800d3ca:	b300      	cbz	r0, 800d40e <__d2b+0x82>
 800d3cc:	9a01      	ldr	r2, [sp, #4]
 800d3ce:	f1c0 0320 	rsb	r3, r0, #32
 800d3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d6:	430b      	orrs	r3, r1
 800d3d8:	40c2      	lsrs	r2, r0
 800d3da:	6163      	str	r3, [r4, #20]
 800d3dc:	9201      	str	r2, [sp, #4]
 800d3de:	9b01      	ldr	r3, [sp, #4]
 800d3e0:	61a3      	str	r3, [r4, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	bf14      	ite	ne
 800d3e6:	2202      	movne	r2, #2
 800d3e8:	2201      	moveq	r2, #1
 800d3ea:	6122      	str	r2, [r4, #16]
 800d3ec:	b1d5      	cbz	r5, 800d424 <__d2b+0x98>
 800d3ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3f2:	4405      	add	r5, r0
 800d3f4:	f8c9 5000 	str.w	r5, [r9]
 800d3f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3fc:	f8c8 0000 	str.w	r0, [r8]
 800d400:	4620      	mov	r0, r4
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d40c:	e7d5      	b.n	800d3ba <__d2b+0x2e>
 800d40e:	6161      	str	r1, [r4, #20]
 800d410:	e7e5      	b.n	800d3de <__d2b+0x52>
 800d412:	a801      	add	r0, sp, #4
 800d414:	f7ff fd5a 	bl	800cecc <__lo0bits>
 800d418:	9b01      	ldr	r3, [sp, #4]
 800d41a:	6163      	str	r3, [r4, #20]
 800d41c:	2201      	movs	r2, #1
 800d41e:	6122      	str	r2, [r4, #16]
 800d420:	3020      	adds	r0, #32
 800d422:	e7e3      	b.n	800d3ec <__d2b+0x60>
 800d424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d42c:	f8c9 0000 	str.w	r0, [r9]
 800d430:	6918      	ldr	r0, [r3, #16]
 800d432:	f7ff fd2b 	bl	800ce8c <__hi0bits>
 800d436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d43a:	e7df      	b.n	800d3fc <__d2b+0x70>
 800d43c:	0800edb3 	.word	0x0800edb3
 800d440:	0800ee24 	.word	0x0800ee24

0800d444 <_calloc_r>:
 800d444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d446:	fba1 2402 	umull	r2, r4, r1, r2
 800d44a:	b94c      	cbnz	r4, 800d460 <_calloc_r+0x1c>
 800d44c:	4611      	mov	r1, r2
 800d44e:	9201      	str	r2, [sp, #4]
 800d450:	f000 f87a 	bl	800d548 <_malloc_r>
 800d454:	9a01      	ldr	r2, [sp, #4]
 800d456:	4605      	mov	r5, r0
 800d458:	b930      	cbnz	r0, 800d468 <_calloc_r+0x24>
 800d45a:	4628      	mov	r0, r5
 800d45c:	b003      	add	sp, #12
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	220c      	movs	r2, #12
 800d462:	6002      	str	r2, [r0, #0]
 800d464:	2500      	movs	r5, #0
 800d466:	e7f8      	b.n	800d45a <_calloc_r+0x16>
 800d468:	4621      	mov	r1, r4
 800d46a:	f7fd fe53 	bl	800b114 <memset>
 800d46e:	e7f4      	b.n	800d45a <_calloc_r+0x16>

0800d470 <_free_r>:
 800d470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d472:	2900      	cmp	r1, #0
 800d474:	d044      	beq.n	800d500 <_free_r+0x90>
 800d476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d47a:	9001      	str	r0, [sp, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f1a1 0404 	sub.w	r4, r1, #4
 800d482:	bfb8      	it	lt
 800d484:	18e4      	addlt	r4, r4, r3
 800d486:	f000 fc8f 	bl	800dda8 <__malloc_lock>
 800d48a:	4a1e      	ldr	r2, [pc, #120]	; (800d504 <_free_r+0x94>)
 800d48c:	9801      	ldr	r0, [sp, #4]
 800d48e:	6813      	ldr	r3, [r2, #0]
 800d490:	b933      	cbnz	r3, 800d4a0 <_free_r+0x30>
 800d492:	6063      	str	r3, [r4, #4]
 800d494:	6014      	str	r4, [r2, #0]
 800d496:	b003      	add	sp, #12
 800d498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d49c:	f000 bc8a 	b.w	800ddb4 <__malloc_unlock>
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d908      	bls.n	800d4b6 <_free_r+0x46>
 800d4a4:	6825      	ldr	r5, [r4, #0]
 800d4a6:	1961      	adds	r1, r4, r5
 800d4a8:	428b      	cmp	r3, r1
 800d4aa:	bf01      	itttt	eq
 800d4ac:	6819      	ldreq	r1, [r3, #0]
 800d4ae:	685b      	ldreq	r3, [r3, #4]
 800d4b0:	1949      	addeq	r1, r1, r5
 800d4b2:	6021      	streq	r1, [r4, #0]
 800d4b4:	e7ed      	b.n	800d492 <_free_r+0x22>
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	b10b      	cbz	r3, 800d4c0 <_free_r+0x50>
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	d9fa      	bls.n	800d4b6 <_free_r+0x46>
 800d4c0:	6811      	ldr	r1, [r2, #0]
 800d4c2:	1855      	adds	r5, r2, r1
 800d4c4:	42a5      	cmp	r5, r4
 800d4c6:	d10b      	bne.n	800d4e0 <_free_r+0x70>
 800d4c8:	6824      	ldr	r4, [r4, #0]
 800d4ca:	4421      	add	r1, r4
 800d4cc:	1854      	adds	r4, r2, r1
 800d4ce:	42a3      	cmp	r3, r4
 800d4d0:	6011      	str	r1, [r2, #0]
 800d4d2:	d1e0      	bne.n	800d496 <_free_r+0x26>
 800d4d4:	681c      	ldr	r4, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	6053      	str	r3, [r2, #4]
 800d4da:	4421      	add	r1, r4
 800d4dc:	6011      	str	r1, [r2, #0]
 800d4de:	e7da      	b.n	800d496 <_free_r+0x26>
 800d4e0:	d902      	bls.n	800d4e8 <_free_r+0x78>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	e7d6      	b.n	800d496 <_free_r+0x26>
 800d4e8:	6825      	ldr	r5, [r4, #0]
 800d4ea:	1961      	adds	r1, r4, r5
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	bf04      	itt	eq
 800d4f0:	6819      	ldreq	r1, [r3, #0]
 800d4f2:	685b      	ldreq	r3, [r3, #4]
 800d4f4:	6063      	str	r3, [r4, #4]
 800d4f6:	bf04      	itt	eq
 800d4f8:	1949      	addeq	r1, r1, r5
 800d4fa:	6021      	streq	r1, [r4, #0]
 800d4fc:	6054      	str	r4, [r2, #4]
 800d4fe:	e7ca      	b.n	800d496 <_free_r+0x26>
 800d500:	b003      	add	sp, #12
 800d502:	bd30      	pop	{r4, r5, pc}
 800d504:	240007ac 	.word	0x240007ac

0800d508 <sbrk_aligned>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	4e0e      	ldr	r6, [pc, #56]	; (800d544 <sbrk_aligned+0x3c>)
 800d50c:	460c      	mov	r4, r1
 800d50e:	6831      	ldr	r1, [r6, #0]
 800d510:	4605      	mov	r5, r0
 800d512:	b911      	cbnz	r1, 800d51a <sbrk_aligned+0x12>
 800d514:	f000 fb42 	bl	800db9c <_sbrk_r>
 800d518:	6030      	str	r0, [r6, #0]
 800d51a:	4621      	mov	r1, r4
 800d51c:	4628      	mov	r0, r5
 800d51e:	f000 fb3d 	bl	800db9c <_sbrk_r>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d00a      	beq.n	800d53c <sbrk_aligned+0x34>
 800d526:	1cc4      	adds	r4, r0, #3
 800d528:	f024 0403 	bic.w	r4, r4, #3
 800d52c:	42a0      	cmp	r0, r4
 800d52e:	d007      	beq.n	800d540 <sbrk_aligned+0x38>
 800d530:	1a21      	subs	r1, r4, r0
 800d532:	4628      	mov	r0, r5
 800d534:	f000 fb32 	bl	800db9c <_sbrk_r>
 800d538:	3001      	adds	r0, #1
 800d53a:	d101      	bne.n	800d540 <sbrk_aligned+0x38>
 800d53c:	f04f 34ff 	mov.w	r4, #4294967295
 800d540:	4620      	mov	r0, r4
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	240007b0 	.word	0x240007b0

0800d548 <_malloc_r>:
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	1ccd      	adds	r5, r1, #3
 800d54e:	f025 0503 	bic.w	r5, r5, #3
 800d552:	3508      	adds	r5, #8
 800d554:	2d0c      	cmp	r5, #12
 800d556:	bf38      	it	cc
 800d558:	250c      	movcc	r5, #12
 800d55a:	2d00      	cmp	r5, #0
 800d55c:	4607      	mov	r7, r0
 800d55e:	db01      	blt.n	800d564 <_malloc_r+0x1c>
 800d560:	42a9      	cmp	r1, r5
 800d562:	d905      	bls.n	800d570 <_malloc_r+0x28>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	2600      	movs	r6, #0
 800d56a:	4630      	mov	r0, r6
 800d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d570:	4e2e      	ldr	r6, [pc, #184]	; (800d62c <_malloc_r+0xe4>)
 800d572:	f000 fc19 	bl	800dda8 <__malloc_lock>
 800d576:	6833      	ldr	r3, [r6, #0]
 800d578:	461c      	mov	r4, r3
 800d57a:	bb34      	cbnz	r4, 800d5ca <_malloc_r+0x82>
 800d57c:	4629      	mov	r1, r5
 800d57e:	4638      	mov	r0, r7
 800d580:	f7ff ffc2 	bl	800d508 <sbrk_aligned>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	4604      	mov	r4, r0
 800d588:	d14d      	bne.n	800d626 <_malloc_r+0xde>
 800d58a:	6834      	ldr	r4, [r6, #0]
 800d58c:	4626      	mov	r6, r4
 800d58e:	2e00      	cmp	r6, #0
 800d590:	d140      	bne.n	800d614 <_malloc_r+0xcc>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4631      	mov	r1, r6
 800d596:	4638      	mov	r0, r7
 800d598:	eb04 0803 	add.w	r8, r4, r3
 800d59c:	f000 fafe 	bl	800db9c <_sbrk_r>
 800d5a0:	4580      	cmp	r8, r0
 800d5a2:	d13a      	bne.n	800d61a <_malloc_r+0xd2>
 800d5a4:	6821      	ldr	r1, [r4, #0]
 800d5a6:	3503      	adds	r5, #3
 800d5a8:	1a6d      	subs	r5, r5, r1
 800d5aa:	f025 0503 	bic.w	r5, r5, #3
 800d5ae:	3508      	adds	r5, #8
 800d5b0:	2d0c      	cmp	r5, #12
 800d5b2:	bf38      	it	cc
 800d5b4:	250c      	movcc	r5, #12
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ffa5 	bl	800d508 <sbrk_aligned>
 800d5be:	3001      	adds	r0, #1
 800d5c0:	d02b      	beq.n	800d61a <_malloc_r+0xd2>
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	442b      	add	r3, r5
 800d5c6:	6023      	str	r3, [r4, #0]
 800d5c8:	e00e      	b.n	800d5e8 <_malloc_r+0xa0>
 800d5ca:	6822      	ldr	r2, [r4, #0]
 800d5cc:	1b52      	subs	r2, r2, r5
 800d5ce:	d41e      	bmi.n	800d60e <_malloc_r+0xc6>
 800d5d0:	2a0b      	cmp	r2, #11
 800d5d2:	d916      	bls.n	800d602 <_malloc_r+0xba>
 800d5d4:	1961      	adds	r1, r4, r5
 800d5d6:	42a3      	cmp	r3, r4
 800d5d8:	6025      	str	r5, [r4, #0]
 800d5da:	bf18      	it	ne
 800d5dc:	6059      	strne	r1, [r3, #4]
 800d5de:	6863      	ldr	r3, [r4, #4]
 800d5e0:	bf08      	it	eq
 800d5e2:	6031      	streq	r1, [r6, #0]
 800d5e4:	5162      	str	r2, [r4, r5]
 800d5e6:	604b      	str	r3, [r1, #4]
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f104 060b 	add.w	r6, r4, #11
 800d5ee:	f000 fbe1 	bl	800ddb4 <__malloc_unlock>
 800d5f2:	f026 0607 	bic.w	r6, r6, #7
 800d5f6:	1d23      	adds	r3, r4, #4
 800d5f8:	1af2      	subs	r2, r6, r3
 800d5fa:	d0b6      	beq.n	800d56a <_malloc_r+0x22>
 800d5fc:	1b9b      	subs	r3, r3, r6
 800d5fe:	50a3      	str	r3, [r4, r2]
 800d600:	e7b3      	b.n	800d56a <_malloc_r+0x22>
 800d602:	6862      	ldr	r2, [r4, #4]
 800d604:	42a3      	cmp	r3, r4
 800d606:	bf0c      	ite	eq
 800d608:	6032      	streq	r2, [r6, #0]
 800d60a:	605a      	strne	r2, [r3, #4]
 800d60c:	e7ec      	b.n	800d5e8 <_malloc_r+0xa0>
 800d60e:	4623      	mov	r3, r4
 800d610:	6864      	ldr	r4, [r4, #4]
 800d612:	e7b2      	b.n	800d57a <_malloc_r+0x32>
 800d614:	4634      	mov	r4, r6
 800d616:	6876      	ldr	r6, [r6, #4]
 800d618:	e7b9      	b.n	800d58e <_malloc_r+0x46>
 800d61a:	230c      	movs	r3, #12
 800d61c:	603b      	str	r3, [r7, #0]
 800d61e:	4638      	mov	r0, r7
 800d620:	f000 fbc8 	bl	800ddb4 <__malloc_unlock>
 800d624:	e7a1      	b.n	800d56a <_malloc_r+0x22>
 800d626:	6025      	str	r5, [r4, #0]
 800d628:	e7de      	b.n	800d5e8 <_malloc_r+0xa0>
 800d62a:	bf00      	nop
 800d62c:	240007ac 	.word	0x240007ac

0800d630 <__ssputs_r>:
 800d630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d634:	688e      	ldr	r6, [r1, #8]
 800d636:	429e      	cmp	r6, r3
 800d638:	4682      	mov	sl, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	4690      	mov	r8, r2
 800d63e:	461f      	mov	r7, r3
 800d640:	d838      	bhi.n	800d6b4 <__ssputs_r+0x84>
 800d642:	898a      	ldrh	r2, [r1, #12]
 800d644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d648:	d032      	beq.n	800d6b0 <__ssputs_r+0x80>
 800d64a:	6825      	ldr	r5, [r4, #0]
 800d64c:	6909      	ldr	r1, [r1, #16]
 800d64e:	eba5 0901 	sub.w	r9, r5, r1
 800d652:	6965      	ldr	r5, [r4, #20]
 800d654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d65c:	3301      	adds	r3, #1
 800d65e:	444b      	add	r3, r9
 800d660:	106d      	asrs	r5, r5, #1
 800d662:	429d      	cmp	r5, r3
 800d664:	bf38      	it	cc
 800d666:	461d      	movcc	r5, r3
 800d668:	0553      	lsls	r3, r2, #21
 800d66a:	d531      	bpl.n	800d6d0 <__ssputs_r+0xa0>
 800d66c:	4629      	mov	r1, r5
 800d66e:	f7ff ff6b 	bl	800d548 <_malloc_r>
 800d672:	4606      	mov	r6, r0
 800d674:	b950      	cbnz	r0, 800d68c <__ssputs_r+0x5c>
 800d676:	230c      	movs	r3, #12
 800d678:	f8ca 3000 	str.w	r3, [sl]
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68c:	6921      	ldr	r1, [r4, #16]
 800d68e:	464a      	mov	r2, r9
 800d690:	f7fd fd32 	bl	800b0f8 <memcpy>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	6126      	str	r6, [r4, #16]
 800d6a2:	6165      	str	r5, [r4, #20]
 800d6a4:	444e      	add	r6, r9
 800d6a6:	eba5 0509 	sub.w	r5, r5, r9
 800d6aa:	6026      	str	r6, [r4, #0]
 800d6ac:	60a5      	str	r5, [r4, #8]
 800d6ae:	463e      	mov	r6, r7
 800d6b0:	42be      	cmp	r6, r7
 800d6b2:	d900      	bls.n	800d6b6 <__ssputs_r+0x86>
 800d6b4:	463e      	mov	r6, r7
 800d6b6:	6820      	ldr	r0, [r4, #0]
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	4641      	mov	r1, r8
 800d6bc:	f000 fb5a 	bl	800dd74 <memmove>
 800d6c0:	68a3      	ldr	r3, [r4, #8]
 800d6c2:	1b9b      	subs	r3, r3, r6
 800d6c4:	60a3      	str	r3, [r4, #8]
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	4433      	add	r3, r6
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	e7db      	b.n	800d688 <__ssputs_r+0x58>
 800d6d0:	462a      	mov	r2, r5
 800d6d2:	f000 fb75 	bl	800ddc0 <_realloc_r>
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d1e1      	bne.n	800d6a0 <__ssputs_r+0x70>
 800d6dc:	6921      	ldr	r1, [r4, #16]
 800d6de:	4650      	mov	r0, sl
 800d6e0:	f7ff fec6 	bl	800d470 <_free_r>
 800d6e4:	e7c7      	b.n	800d676 <__ssputs_r+0x46>
	...

0800d6e8 <_svfiprintf_r>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	898b      	ldrh	r3, [r1, #12]
 800d6f0:	061b      	lsls	r3, r3, #24
 800d6f2:	b09d      	sub	sp, #116	; 0x74
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	460d      	mov	r5, r1
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	d50e      	bpl.n	800d71a <_svfiprintf_r+0x32>
 800d6fc:	690b      	ldr	r3, [r1, #16]
 800d6fe:	b963      	cbnz	r3, 800d71a <_svfiprintf_r+0x32>
 800d700:	2140      	movs	r1, #64	; 0x40
 800d702:	f7ff ff21 	bl	800d548 <_malloc_r>
 800d706:	6028      	str	r0, [r5, #0]
 800d708:	6128      	str	r0, [r5, #16]
 800d70a:	b920      	cbnz	r0, 800d716 <_svfiprintf_r+0x2e>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	e0d1      	b.n	800d8ba <_svfiprintf_r+0x1d2>
 800d716:	2340      	movs	r3, #64	; 0x40
 800d718:	616b      	str	r3, [r5, #20]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9309      	str	r3, [sp, #36]	; 0x24
 800d71e:	2320      	movs	r3, #32
 800d720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d724:	f8cd 800c 	str.w	r8, [sp, #12]
 800d728:	2330      	movs	r3, #48	; 0x30
 800d72a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8d4 <_svfiprintf_r+0x1ec>
 800d72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d732:	f04f 0901 	mov.w	r9, #1
 800d736:	4623      	mov	r3, r4
 800d738:	469a      	mov	sl, r3
 800d73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d73e:	b10a      	cbz	r2, 800d744 <_svfiprintf_r+0x5c>
 800d740:	2a25      	cmp	r2, #37	; 0x25
 800d742:	d1f9      	bne.n	800d738 <_svfiprintf_r+0x50>
 800d744:	ebba 0b04 	subs.w	fp, sl, r4
 800d748:	d00b      	beq.n	800d762 <_svfiprintf_r+0x7a>
 800d74a:	465b      	mov	r3, fp
 800d74c:	4622      	mov	r2, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	4638      	mov	r0, r7
 800d752:	f7ff ff6d 	bl	800d630 <__ssputs_r>
 800d756:	3001      	adds	r0, #1
 800d758:	f000 80aa 	beq.w	800d8b0 <_svfiprintf_r+0x1c8>
 800d75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d75e:	445a      	add	r2, fp
 800d760:	9209      	str	r2, [sp, #36]	; 0x24
 800d762:	f89a 3000 	ldrb.w	r3, [sl]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80a2 	beq.w	800d8b0 <_svfiprintf_r+0x1c8>
 800d76c:	2300      	movs	r3, #0
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d776:	f10a 0a01 	add.w	sl, sl, #1
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	9307      	str	r3, [sp, #28]
 800d77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d782:	931a      	str	r3, [sp, #104]	; 0x68
 800d784:	4654      	mov	r4, sl
 800d786:	2205      	movs	r2, #5
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	4851      	ldr	r0, [pc, #324]	; (800d8d4 <_svfiprintf_r+0x1ec>)
 800d78e:	f7f2 fdaf 	bl	80002f0 <memchr>
 800d792:	9a04      	ldr	r2, [sp, #16]
 800d794:	b9d8      	cbnz	r0, 800d7ce <_svfiprintf_r+0xe6>
 800d796:	06d0      	lsls	r0, r2, #27
 800d798:	bf44      	itt	mi
 800d79a:	2320      	movmi	r3, #32
 800d79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7a0:	0711      	lsls	r1, r2, #28
 800d7a2:	bf44      	itt	mi
 800d7a4:	232b      	movmi	r3, #43	; 0x2b
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b0:	d015      	beq.n	800d7de <_svfiprintf_r+0xf6>
 800d7b2:	9a07      	ldr	r2, [sp, #28]
 800d7b4:	4654      	mov	r4, sl
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	f04f 0c0a 	mov.w	ip, #10
 800d7bc:	4621      	mov	r1, r4
 800d7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c2:	3b30      	subs	r3, #48	; 0x30
 800d7c4:	2b09      	cmp	r3, #9
 800d7c6:	d94e      	bls.n	800d866 <_svfiprintf_r+0x17e>
 800d7c8:	b1b0      	cbz	r0, 800d7f8 <_svfiprintf_r+0x110>
 800d7ca:	9207      	str	r2, [sp, #28]
 800d7cc:	e014      	b.n	800d7f8 <_svfiprintf_r+0x110>
 800d7ce:	eba0 0308 	sub.w	r3, r0, r8
 800d7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	46a2      	mov	sl, r4
 800d7dc:	e7d2      	b.n	800d784 <_svfiprintf_r+0x9c>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	1d19      	adds	r1, r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	9103      	str	r1, [sp, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bfbb      	ittet	lt
 800d7ea:	425b      	neglt	r3, r3
 800d7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d7f0:	9307      	strge	r3, [sp, #28]
 800d7f2:	9307      	strlt	r3, [sp, #28]
 800d7f4:	bfb8      	it	lt
 800d7f6:	9204      	strlt	r2, [sp, #16]
 800d7f8:	7823      	ldrb	r3, [r4, #0]
 800d7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d7fc:	d10c      	bne.n	800d818 <_svfiprintf_r+0x130>
 800d7fe:	7863      	ldrb	r3, [r4, #1]
 800d800:	2b2a      	cmp	r3, #42	; 0x2a
 800d802:	d135      	bne.n	800d870 <_svfiprintf_r+0x188>
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	1d1a      	adds	r2, r3, #4
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	9203      	str	r2, [sp, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bfb8      	it	lt
 800d810:	f04f 33ff 	movlt.w	r3, #4294967295
 800d814:	3402      	adds	r4, #2
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8e4 <_svfiprintf_r+0x1fc>
 800d81c:	7821      	ldrb	r1, [r4, #0]
 800d81e:	2203      	movs	r2, #3
 800d820:	4650      	mov	r0, sl
 800d822:	f7f2 fd65 	bl	80002f0 <memchr>
 800d826:	b140      	cbz	r0, 800d83a <_svfiprintf_r+0x152>
 800d828:	2340      	movs	r3, #64	; 0x40
 800d82a:	eba0 000a 	sub.w	r0, r0, sl
 800d82e:	fa03 f000 	lsl.w	r0, r3, r0
 800d832:	9b04      	ldr	r3, [sp, #16]
 800d834:	4303      	orrs	r3, r0
 800d836:	3401      	adds	r4, #1
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83e:	4826      	ldr	r0, [pc, #152]	; (800d8d8 <_svfiprintf_r+0x1f0>)
 800d840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d844:	2206      	movs	r2, #6
 800d846:	f7f2 fd53 	bl	80002f0 <memchr>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d038      	beq.n	800d8c0 <_svfiprintf_r+0x1d8>
 800d84e:	4b23      	ldr	r3, [pc, #140]	; (800d8dc <_svfiprintf_r+0x1f4>)
 800d850:	bb1b      	cbnz	r3, 800d89a <_svfiprintf_r+0x1b2>
 800d852:	9b03      	ldr	r3, [sp, #12]
 800d854:	3307      	adds	r3, #7
 800d856:	f023 0307 	bic.w	r3, r3, #7
 800d85a:	3308      	adds	r3, #8
 800d85c:	9303      	str	r3, [sp, #12]
 800d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d860:	4433      	add	r3, r6
 800d862:	9309      	str	r3, [sp, #36]	; 0x24
 800d864:	e767      	b.n	800d736 <_svfiprintf_r+0x4e>
 800d866:	fb0c 3202 	mla	r2, ip, r2, r3
 800d86a:	460c      	mov	r4, r1
 800d86c:	2001      	movs	r0, #1
 800d86e:	e7a5      	b.n	800d7bc <_svfiprintf_r+0xd4>
 800d870:	2300      	movs	r3, #0
 800d872:	3401      	adds	r4, #1
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	4619      	mov	r1, r3
 800d878:	f04f 0c0a 	mov.w	ip, #10
 800d87c:	4620      	mov	r0, r4
 800d87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d882:	3a30      	subs	r2, #48	; 0x30
 800d884:	2a09      	cmp	r2, #9
 800d886:	d903      	bls.n	800d890 <_svfiprintf_r+0x1a8>
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0c5      	beq.n	800d818 <_svfiprintf_r+0x130>
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	e7c3      	b.n	800d818 <_svfiprintf_r+0x130>
 800d890:	fb0c 2101 	mla	r1, ip, r1, r2
 800d894:	4604      	mov	r4, r0
 800d896:	2301      	movs	r3, #1
 800d898:	e7f0      	b.n	800d87c <_svfiprintf_r+0x194>
 800d89a:	ab03      	add	r3, sp, #12
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	462a      	mov	r2, r5
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <_svfiprintf_r+0x1f8>)
 800d8a2:	a904      	add	r1, sp, #16
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f7fd fccf 	bl	800b248 <_printf_float>
 800d8aa:	1c42      	adds	r2, r0, #1
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	d1d6      	bne.n	800d85e <_svfiprintf_r+0x176>
 800d8b0:	89ab      	ldrh	r3, [r5, #12]
 800d8b2:	065b      	lsls	r3, r3, #25
 800d8b4:	f53f af2c 	bmi.w	800d710 <_svfiprintf_r+0x28>
 800d8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ba:	b01d      	add	sp, #116	; 0x74
 800d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c0:	ab03      	add	r3, sp, #12
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	462a      	mov	r2, r5
 800d8c6:	4b06      	ldr	r3, [pc, #24]	; (800d8e0 <_svfiprintf_r+0x1f8>)
 800d8c8:	a904      	add	r1, sp, #16
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	f7fd ff48 	bl	800b760 <_printf_i>
 800d8d0:	e7eb      	b.n	800d8aa <_svfiprintf_r+0x1c2>
 800d8d2:	bf00      	nop
 800d8d4:	0800ef7c 	.word	0x0800ef7c
 800d8d8:	0800ef86 	.word	0x0800ef86
 800d8dc:	0800b249 	.word	0x0800b249
 800d8e0:	0800d631 	.word	0x0800d631
 800d8e4:	0800ef82 	.word	0x0800ef82

0800d8e8 <__sfputc_r>:
 800d8e8:	6893      	ldr	r3, [r2, #8]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	b410      	push	{r4}
 800d8f0:	6093      	str	r3, [r2, #8]
 800d8f2:	da08      	bge.n	800d906 <__sfputc_r+0x1e>
 800d8f4:	6994      	ldr	r4, [r2, #24]
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	db01      	blt.n	800d8fe <__sfputc_r+0x16>
 800d8fa:	290a      	cmp	r1, #10
 800d8fc:	d103      	bne.n	800d906 <__sfputc_r+0x1e>
 800d8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d902:	f7fe b935 	b.w	800bb70 <__swbuf_r>
 800d906:	6813      	ldr	r3, [r2, #0]
 800d908:	1c58      	adds	r0, r3, #1
 800d90a:	6010      	str	r0, [r2, #0]
 800d90c:	7019      	strb	r1, [r3, #0]
 800d90e:	4608      	mov	r0, r1
 800d910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <__sfputs_r>:
 800d916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d918:	4606      	mov	r6, r0
 800d91a:	460f      	mov	r7, r1
 800d91c:	4614      	mov	r4, r2
 800d91e:	18d5      	adds	r5, r2, r3
 800d920:	42ac      	cmp	r4, r5
 800d922:	d101      	bne.n	800d928 <__sfputs_r+0x12>
 800d924:	2000      	movs	r0, #0
 800d926:	e007      	b.n	800d938 <__sfputs_r+0x22>
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	463a      	mov	r2, r7
 800d92e:	4630      	mov	r0, r6
 800d930:	f7ff ffda 	bl	800d8e8 <__sfputc_r>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d1f3      	bne.n	800d920 <__sfputs_r+0xa>
 800d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d93c <_vfiprintf_r>:
 800d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	460d      	mov	r5, r1
 800d942:	b09d      	sub	sp, #116	; 0x74
 800d944:	4614      	mov	r4, r2
 800d946:	4698      	mov	r8, r3
 800d948:	4606      	mov	r6, r0
 800d94a:	b118      	cbz	r0, 800d954 <_vfiprintf_r+0x18>
 800d94c:	6983      	ldr	r3, [r0, #24]
 800d94e:	b90b      	cbnz	r3, 800d954 <_vfiprintf_r+0x18>
 800d950:	f7ff f8e2 	bl	800cb18 <__sinit>
 800d954:	4b89      	ldr	r3, [pc, #548]	; (800db7c <_vfiprintf_r+0x240>)
 800d956:	429d      	cmp	r5, r3
 800d958:	d11b      	bne.n	800d992 <_vfiprintf_r+0x56>
 800d95a:	6875      	ldr	r5, [r6, #4]
 800d95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d95e:	07d9      	lsls	r1, r3, #31
 800d960:	d405      	bmi.n	800d96e <_vfiprintf_r+0x32>
 800d962:	89ab      	ldrh	r3, [r5, #12]
 800d964:	059a      	lsls	r2, r3, #22
 800d966:	d402      	bmi.n	800d96e <_vfiprintf_r+0x32>
 800d968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d96a:	f7ff f978 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800d96e:	89ab      	ldrh	r3, [r5, #12]
 800d970:	071b      	lsls	r3, r3, #28
 800d972:	d501      	bpl.n	800d978 <_vfiprintf_r+0x3c>
 800d974:	692b      	ldr	r3, [r5, #16]
 800d976:	b9eb      	cbnz	r3, 800d9b4 <_vfiprintf_r+0x78>
 800d978:	4629      	mov	r1, r5
 800d97a:	4630      	mov	r0, r6
 800d97c:	f7fe f94a 	bl	800bc14 <__swsetup_r>
 800d980:	b1c0      	cbz	r0, 800d9b4 <_vfiprintf_r+0x78>
 800d982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d984:	07dc      	lsls	r4, r3, #31
 800d986:	d50e      	bpl.n	800d9a6 <_vfiprintf_r+0x6a>
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	b01d      	add	sp, #116	; 0x74
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d992:	4b7b      	ldr	r3, [pc, #492]	; (800db80 <_vfiprintf_r+0x244>)
 800d994:	429d      	cmp	r5, r3
 800d996:	d101      	bne.n	800d99c <_vfiprintf_r+0x60>
 800d998:	68b5      	ldr	r5, [r6, #8]
 800d99a:	e7df      	b.n	800d95c <_vfiprintf_r+0x20>
 800d99c:	4b79      	ldr	r3, [pc, #484]	; (800db84 <_vfiprintf_r+0x248>)
 800d99e:	429d      	cmp	r5, r3
 800d9a0:	bf08      	it	eq
 800d9a2:	68f5      	ldreq	r5, [r6, #12]
 800d9a4:	e7da      	b.n	800d95c <_vfiprintf_r+0x20>
 800d9a6:	89ab      	ldrh	r3, [r5, #12]
 800d9a8:	0598      	lsls	r0, r3, #22
 800d9aa:	d4ed      	bmi.n	800d988 <_vfiprintf_r+0x4c>
 800d9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9ae:	f7ff f957 	bl	800cc60 <__retarget_lock_release_recursive>
 800d9b2:	e7e9      	b.n	800d988 <_vfiprintf_r+0x4c>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b8:	2320      	movs	r3, #32
 800d9ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9c2:	2330      	movs	r3, #48	; 0x30
 800d9c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db88 <_vfiprintf_r+0x24c>
 800d9c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9cc:	f04f 0901 	mov.w	r9, #1
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	469a      	mov	sl, r3
 800d9d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9d8:	b10a      	cbz	r2, 800d9de <_vfiprintf_r+0xa2>
 800d9da:	2a25      	cmp	r2, #37	; 0x25
 800d9dc:	d1f9      	bne.n	800d9d2 <_vfiprintf_r+0x96>
 800d9de:	ebba 0b04 	subs.w	fp, sl, r4
 800d9e2:	d00b      	beq.n	800d9fc <_vfiprintf_r+0xc0>
 800d9e4:	465b      	mov	r3, fp
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f7ff ff93 	bl	800d916 <__sfputs_r>
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	f000 80aa 	beq.w	800db4a <_vfiprintf_r+0x20e>
 800d9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f8:	445a      	add	r2, fp
 800d9fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 80a2 	beq.w	800db4a <_vfiprintf_r+0x20e>
 800da06:	2300      	movs	r3, #0
 800da08:	f04f 32ff 	mov.w	r2, #4294967295
 800da0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da10:	f10a 0a01 	add.w	sl, sl, #1
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	9307      	str	r3, [sp, #28]
 800da18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da1c:	931a      	str	r3, [sp, #104]	; 0x68
 800da1e:	4654      	mov	r4, sl
 800da20:	2205      	movs	r2, #5
 800da22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da26:	4858      	ldr	r0, [pc, #352]	; (800db88 <_vfiprintf_r+0x24c>)
 800da28:	f7f2 fc62 	bl	80002f0 <memchr>
 800da2c:	9a04      	ldr	r2, [sp, #16]
 800da2e:	b9d8      	cbnz	r0, 800da68 <_vfiprintf_r+0x12c>
 800da30:	06d1      	lsls	r1, r2, #27
 800da32:	bf44      	itt	mi
 800da34:	2320      	movmi	r3, #32
 800da36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da3a:	0713      	lsls	r3, r2, #28
 800da3c:	bf44      	itt	mi
 800da3e:	232b      	movmi	r3, #43	; 0x2b
 800da40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da44:	f89a 3000 	ldrb.w	r3, [sl]
 800da48:	2b2a      	cmp	r3, #42	; 0x2a
 800da4a:	d015      	beq.n	800da78 <_vfiprintf_r+0x13c>
 800da4c:	9a07      	ldr	r2, [sp, #28]
 800da4e:	4654      	mov	r4, sl
 800da50:	2000      	movs	r0, #0
 800da52:	f04f 0c0a 	mov.w	ip, #10
 800da56:	4621      	mov	r1, r4
 800da58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da5c:	3b30      	subs	r3, #48	; 0x30
 800da5e:	2b09      	cmp	r3, #9
 800da60:	d94e      	bls.n	800db00 <_vfiprintf_r+0x1c4>
 800da62:	b1b0      	cbz	r0, 800da92 <_vfiprintf_r+0x156>
 800da64:	9207      	str	r2, [sp, #28]
 800da66:	e014      	b.n	800da92 <_vfiprintf_r+0x156>
 800da68:	eba0 0308 	sub.w	r3, r0, r8
 800da6c:	fa09 f303 	lsl.w	r3, r9, r3
 800da70:	4313      	orrs	r3, r2
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	46a2      	mov	sl, r4
 800da76:	e7d2      	b.n	800da1e <_vfiprintf_r+0xe2>
 800da78:	9b03      	ldr	r3, [sp, #12]
 800da7a:	1d19      	adds	r1, r3, #4
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	9103      	str	r1, [sp, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	bfbb      	ittet	lt
 800da84:	425b      	neglt	r3, r3
 800da86:	f042 0202 	orrlt.w	r2, r2, #2
 800da8a:	9307      	strge	r3, [sp, #28]
 800da8c:	9307      	strlt	r3, [sp, #28]
 800da8e:	bfb8      	it	lt
 800da90:	9204      	strlt	r2, [sp, #16]
 800da92:	7823      	ldrb	r3, [r4, #0]
 800da94:	2b2e      	cmp	r3, #46	; 0x2e
 800da96:	d10c      	bne.n	800dab2 <_vfiprintf_r+0x176>
 800da98:	7863      	ldrb	r3, [r4, #1]
 800da9a:	2b2a      	cmp	r3, #42	; 0x2a
 800da9c:	d135      	bne.n	800db0a <_vfiprintf_r+0x1ce>
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	1d1a      	adds	r2, r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	9203      	str	r2, [sp, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	bfb8      	it	lt
 800daaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800daae:	3402      	adds	r4, #2
 800dab0:	9305      	str	r3, [sp, #20]
 800dab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db98 <_vfiprintf_r+0x25c>
 800dab6:	7821      	ldrb	r1, [r4, #0]
 800dab8:	2203      	movs	r2, #3
 800daba:	4650      	mov	r0, sl
 800dabc:	f7f2 fc18 	bl	80002f0 <memchr>
 800dac0:	b140      	cbz	r0, 800dad4 <_vfiprintf_r+0x198>
 800dac2:	2340      	movs	r3, #64	; 0x40
 800dac4:	eba0 000a 	sub.w	r0, r0, sl
 800dac8:	fa03 f000 	lsl.w	r0, r3, r0
 800dacc:	9b04      	ldr	r3, [sp, #16]
 800dace:	4303      	orrs	r3, r0
 800dad0:	3401      	adds	r4, #1
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad8:	482c      	ldr	r0, [pc, #176]	; (800db8c <_vfiprintf_r+0x250>)
 800dada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dade:	2206      	movs	r2, #6
 800dae0:	f7f2 fc06 	bl	80002f0 <memchr>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d03f      	beq.n	800db68 <_vfiprintf_r+0x22c>
 800dae8:	4b29      	ldr	r3, [pc, #164]	; (800db90 <_vfiprintf_r+0x254>)
 800daea:	bb1b      	cbnz	r3, 800db34 <_vfiprintf_r+0x1f8>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	3307      	adds	r3, #7
 800daf0:	f023 0307 	bic.w	r3, r3, #7
 800daf4:	3308      	adds	r3, #8
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dafa:	443b      	add	r3, r7
 800dafc:	9309      	str	r3, [sp, #36]	; 0x24
 800dafe:	e767      	b.n	800d9d0 <_vfiprintf_r+0x94>
 800db00:	fb0c 3202 	mla	r2, ip, r2, r3
 800db04:	460c      	mov	r4, r1
 800db06:	2001      	movs	r0, #1
 800db08:	e7a5      	b.n	800da56 <_vfiprintf_r+0x11a>
 800db0a:	2300      	movs	r3, #0
 800db0c:	3401      	adds	r4, #1
 800db0e:	9305      	str	r3, [sp, #20]
 800db10:	4619      	mov	r1, r3
 800db12:	f04f 0c0a 	mov.w	ip, #10
 800db16:	4620      	mov	r0, r4
 800db18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db1c:	3a30      	subs	r2, #48	; 0x30
 800db1e:	2a09      	cmp	r2, #9
 800db20:	d903      	bls.n	800db2a <_vfiprintf_r+0x1ee>
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0c5      	beq.n	800dab2 <_vfiprintf_r+0x176>
 800db26:	9105      	str	r1, [sp, #20]
 800db28:	e7c3      	b.n	800dab2 <_vfiprintf_r+0x176>
 800db2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db2e:	4604      	mov	r4, r0
 800db30:	2301      	movs	r3, #1
 800db32:	e7f0      	b.n	800db16 <_vfiprintf_r+0x1da>
 800db34:	ab03      	add	r3, sp, #12
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	462a      	mov	r2, r5
 800db3a:	4b16      	ldr	r3, [pc, #88]	; (800db94 <_vfiprintf_r+0x258>)
 800db3c:	a904      	add	r1, sp, #16
 800db3e:	4630      	mov	r0, r6
 800db40:	f7fd fb82 	bl	800b248 <_printf_float>
 800db44:	4607      	mov	r7, r0
 800db46:	1c78      	adds	r0, r7, #1
 800db48:	d1d6      	bne.n	800daf8 <_vfiprintf_r+0x1bc>
 800db4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db4c:	07d9      	lsls	r1, r3, #31
 800db4e:	d405      	bmi.n	800db5c <_vfiprintf_r+0x220>
 800db50:	89ab      	ldrh	r3, [r5, #12]
 800db52:	059a      	lsls	r2, r3, #22
 800db54:	d402      	bmi.n	800db5c <_vfiprintf_r+0x220>
 800db56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db58:	f7ff f882 	bl	800cc60 <__retarget_lock_release_recursive>
 800db5c:	89ab      	ldrh	r3, [r5, #12]
 800db5e:	065b      	lsls	r3, r3, #25
 800db60:	f53f af12 	bmi.w	800d988 <_vfiprintf_r+0x4c>
 800db64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db66:	e711      	b.n	800d98c <_vfiprintf_r+0x50>
 800db68:	ab03      	add	r3, sp, #12
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	462a      	mov	r2, r5
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <_vfiprintf_r+0x258>)
 800db70:	a904      	add	r1, sp, #16
 800db72:	4630      	mov	r0, r6
 800db74:	f7fd fdf4 	bl	800b760 <_printf_i>
 800db78:	e7e4      	b.n	800db44 <_vfiprintf_r+0x208>
 800db7a:	bf00      	nop
 800db7c:	0800ede4 	.word	0x0800ede4
 800db80:	0800ee04 	.word	0x0800ee04
 800db84:	0800edc4 	.word	0x0800edc4
 800db88:	0800ef7c 	.word	0x0800ef7c
 800db8c:	0800ef86 	.word	0x0800ef86
 800db90:	0800b249 	.word	0x0800b249
 800db94:	0800d917 	.word	0x0800d917
 800db98:	0800ef82 	.word	0x0800ef82

0800db9c <_sbrk_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d06      	ldr	r5, [pc, #24]	; (800dbb8 <_sbrk_r+0x1c>)
 800dba0:	2300      	movs	r3, #0
 800dba2:	4604      	mov	r4, r0
 800dba4:	4608      	mov	r0, r1
 800dba6:	602b      	str	r3, [r5, #0]
 800dba8:	f7f5 fd56 	bl	8003658 <_sbrk>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_sbrk_r+0x1a>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_sbrk_r+0x1a>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	240007b4 	.word	0x240007b4

0800dbbc <__sread>:
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	460c      	mov	r4, r1
 800dbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc4:	f000 f92c 	bl	800de20 <_read_r>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	bfab      	itete	ge
 800dbcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbce:	89a3      	ldrhlt	r3, [r4, #12]
 800dbd0:	181b      	addge	r3, r3, r0
 800dbd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbd6:	bfac      	ite	ge
 800dbd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbda:	81a3      	strhlt	r3, [r4, #12]
 800dbdc:	bd10      	pop	{r4, pc}

0800dbde <__swrite>:
 800dbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe2:	461f      	mov	r7, r3
 800dbe4:	898b      	ldrh	r3, [r1, #12]
 800dbe6:	05db      	lsls	r3, r3, #23
 800dbe8:	4605      	mov	r5, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	4616      	mov	r6, r2
 800dbee:	d505      	bpl.n	800dbfc <__swrite+0x1e>
 800dbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f000 f898 	bl	800dd2c <_lseek_r>
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc06:	81a3      	strh	r3, [r4, #12]
 800dc08:	4632      	mov	r2, r6
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc12:	f000 b817 	b.w	800dc44 <_write_r>

0800dc16 <__sseek>:
 800dc16:	b510      	push	{r4, lr}
 800dc18:	460c      	mov	r4, r1
 800dc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc1e:	f000 f885 	bl	800dd2c <_lseek_r>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	bf15      	itete	ne
 800dc28:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc32:	81a3      	strheq	r3, [r4, #12]
 800dc34:	bf18      	it	ne
 800dc36:	81a3      	strhne	r3, [r4, #12]
 800dc38:	bd10      	pop	{r4, pc}

0800dc3a <__sclose>:
 800dc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3e:	f000 b831 	b.w	800dca4 <_close_r>
	...

0800dc44 <_write_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4d07      	ldr	r5, [pc, #28]	; (800dc64 <_write_r+0x20>)
 800dc48:	4604      	mov	r4, r0
 800dc4a:	4608      	mov	r0, r1
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	2200      	movs	r2, #0
 800dc50:	602a      	str	r2, [r5, #0]
 800dc52:	461a      	mov	r2, r3
 800dc54:	f7f5 fcaf 	bl	80035b6 <_write>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d102      	bne.n	800dc62 <_write_r+0x1e>
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	b103      	cbz	r3, 800dc62 <_write_r+0x1e>
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	240007b4 	.word	0x240007b4

0800dc68 <__assert_func>:
 800dc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc6a:	4614      	mov	r4, r2
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	4b09      	ldr	r3, [pc, #36]	; (800dc94 <__assert_func+0x2c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4605      	mov	r5, r0
 800dc74:	68d8      	ldr	r0, [r3, #12]
 800dc76:	b14c      	cbz	r4, 800dc8c <__assert_func+0x24>
 800dc78:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <__assert_func+0x30>)
 800dc7a:	9100      	str	r1, [sp, #0]
 800dc7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc80:	4906      	ldr	r1, [pc, #24]	; (800dc9c <__assert_func+0x34>)
 800dc82:	462b      	mov	r3, r5
 800dc84:	f000 f81e 	bl	800dcc4 <fiprintf>
 800dc88:	f000 f8e9 	bl	800de5e <abort>
 800dc8c:	4b04      	ldr	r3, [pc, #16]	; (800dca0 <__assert_func+0x38>)
 800dc8e:	461c      	mov	r4, r3
 800dc90:	e7f3      	b.n	800dc7a <__assert_func+0x12>
 800dc92:	bf00      	nop
 800dc94:	24000058 	.word	0x24000058
 800dc98:	0800ef8d 	.word	0x0800ef8d
 800dc9c:	0800ef9a 	.word	0x0800ef9a
 800dca0:	0800efc8 	.word	0x0800efc8

0800dca4 <_close_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d06      	ldr	r5, [pc, #24]	; (800dcc0 <_close_r+0x1c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	f7f5 fc9d 	bl	80035ee <_close>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_close_r+0x1a>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_close_r+0x1a>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	240007b4 	.word	0x240007b4

0800dcc4 <fiprintf>:
 800dcc4:	b40e      	push	{r1, r2, r3}
 800dcc6:	b503      	push	{r0, r1, lr}
 800dcc8:	4601      	mov	r1, r0
 800dcca:	ab03      	add	r3, sp, #12
 800dccc:	4805      	ldr	r0, [pc, #20]	; (800dce4 <fiprintf+0x20>)
 800dcce:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd2:	6800      	ldr	r0, [r0, #0]
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	f7ff fe31 	bl	800d93c <_vfiprintf_r>
 800dcda:	b002      	add	sp, #8
 800dcdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dce0:	b003      	add	sp, #12
 800dce2:	4770      	bx	lr
 800dce4:	24000058 	.word	0x24000058

0800dce8 <_fstat_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d07      	ldr	r5, [pc, #28]	; (800dd08 <_fstat_r+0x20>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	602b      	str	r3, [r5, #0]
 800dcf6:	f7f5 fc86 	bl	8003606 <_fstat>
 800dcfa:	1c43      	adds	r3, r0, #1
 800dcfc:	d102      	bne.n	800dd04 <_fstat_r+0x1c>
 800dcfe:	682b      	ldr	r3, [r5, #0]
 800dd00:	b103      	cbz	r3, 800dd04 <_fstat_r+0x1c>
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
 800dd06:	bf00      	nop
 800dd08:	240007b4 	.word	0x240007b4

0800dd0c <_isatty_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d06      	ldr	r5, [pc, #24]	; (800dd28 <_isatty_r+0x1c>)
 800dd10:	2300      	movs	r3, #0
 800dd12:	4604      	mov	r4, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	602b      	str	r3, [r5, #0]
 800dd18:	f7f5 fc85 	bl	8003626 <_isatty>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_isatty_r+0x1a>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_isatty_r+0x1a>
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	240007b4 	.word	0x240007b4

0800dd2c <_lseek_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4d07      	ldr	r5, [pc, #28]	; (800dd4c <_lseek_r+0x20>)
 800dd30:	4604      	mov	r4, r0
 800dd32:	4608      	mov	r0, r1
 800dd34:	4611      	mov	r1, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	602a      	str	r2, [r5, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	f7f5 fc7e 	bl	800363c <_lseek>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_lseek_r+0x1e>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_lseek_r+0x1e>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	240007b4 	.word	0x240007b4

0800dd50 <__ascii_mbtowc>:
 800dd50:	b082      	sub	sp, #8
 800dd52:	b901      	cbnz	r1, 800dd56 <__ascii_mbtowc+0x6>
 800dd54:	a901      	add	r1, sp, #4
 800dd56:	b142      	cbz	r2, 800dd6a <__ascii_mbtowc+0x1a>
 800dd58:	b14b      	cbz	r3, 800dd6e <__ascii_mbtowc+0x1e>
 800dd5a:	7813      	ldrb	r3, [r2, #0]
 800dd5c:	600b      	str	r3, [r1, #0]
 800dd5e:	7812      	ldrb	r2, [r2, #0]
 800dd60:	1e10      	subs	r0, r2, #0
 800dd62:	bf18      	it	ne
 800dd64:	2001      	movne	r0, #1
 800dd66:	b002      	add	sp, #8
 800dd68:	4770      	bx	lr
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	e7fb      	b.n	800dd66 <__ascii_mbtowc+0x16>
 800dd6e:	f06f 0001 	mvn.w	r0, #1
 800dd72:	e7f8      	b.n	800dd66 <__ascii_mbtowc+0x16>

0800dd74 <memmove>:
 800dd74:	4288      	cmp	r0, r1
 800dd76:	b510      	push	{r4, lr}
 800dd78:	eb01 0402 	add.w	r4, r1, r2
 800dd7c:	d902      	bls.n	800dd84 <memmove+0x10>
 800dd7e:	4284      	cmp	r4, r0
 800dd80:	4623      	mov	r3, r4
 800dd82:	d807      	bhi.n	800dd94 <memmove+0x20>
 800dd84:	1e43      	subs	r3, r0, #1
 800dd86:	42a1      	cmp	r1, r4
 800dd88:	d008      	beq.n	800dd9c <memmove+0x28>
 800dd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd92:	e7f8      	b.n	800dd86 <memmove+0x12>
 800dd94:	4402      	add	r2, r0
 800dd96:	4601      	mov	r1, r0
 800dd98:	428a      	cmp	r2, r1
 800dd9a:	d100      	bne.n	800dd9e <memmove+0x2a>
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dda6:	e7f7      	b.n	800dd98 <memmove+0x24>

0800dda8 <__malloc_lock>:
 800dda8:	4801      	ldr	r0, [pc, #4]	; (800ddb0 <__malloc_lock+0x8>)
 800ddaa:	f7fe bf58 	b.w	800cc5e <__retarget_lock_acquire_recursive>
 800ddae:	bf00      	nop
 800ddb0:	240007a8 	.word	0x240007a8

0800ddb4 <__malloc_unlock>:
 800ddb4:	4801      	ldr	r0, [pc, #4]	; (800ddbc <__malloc_unlock+0x8>)
 800ddb6:	f7fe bf53 	b.w	800cc60 <__retarget_lock_release_recursive>
 800ddba:	bf00      	nop
 800ddbc:	240007a8 	.word	0x240007a8

0800ddc0 <_realloc_r>:
 800ddc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4614      	mov	r4, r2
 800ddc8:	460e      	mov	r6, r1
 800ddca:	b921      	cbnz	r1, 800ddd6 <_realloc_r+0x16>
 800ddcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	f7ff bbb9 	b.w	800d548 <_malloc_r>
 800ddd6:	b92a      	cbnz	r2, 800dde4 <_realloc_r+0x24>
 800ddd8:	f7ff fb4a 	bl	800d470 <_free_r>
 800dddc:	4625      	mov	r5, r4
 800ddde:	4628      	mov	r0, r5
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	f000 f842 	bl	800de6c <_malloc_usable_size_r>
 800dde8:	4284      	cmp	r4, r0
 800ddea:	4607      	mov	r7, r0
 800ddec:	d802      	bhi.n	800ddf4 <_realloc_r+0x34>
 800ddee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddf2:	d812      	bhi.n	800de1a <_realloc_r+0x5a>
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	f7ff fba6 	bl	800d548 <_malloc_r>
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d0ed      	beq.n	800ddde <_realloc_r+0x1e>
 800de02:	42bc      	cmp	r4, r7
 800de04:	4622      	mov	r2, r4
 800de06:	4631      	mov	r1, r6
 800de08:	bf28      	it	cs
 800de0a:	463a      	movcs	r2, r7
 800de0c:	f7fd f974 	bl	800b0f8 <memcpy>
 800de10:	4631      	mov	r1, r6
 800de12:	4640      	mov	r0, r8
 800de14:	f7ff fb2c 	bl	800d470 <_free_r>
 800de18:	e7e1      	b.n	800ddde <_realloc_r+0x1e>
 800de1a:	4635      	mov	r5, r6
 800de1c:	e7df      	b.n	800ddde <_realloc_r+0x1e>
	...

0800de20 <_read_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	; (800de40 <_read_r+0x20>)
 800de24:	4604      	mov	r4, r0
 800de26:	4608      	mov	r0, r1
 800de28:	4611      	mov	r1, r2
 800de2a:	2200      	movs	r2, #0
 800de2c:	602a      	str	r2, [r5, #0]
 800de2e:	461a      	mov	r2, r3
 800de30:	f7f5 fba4 	bl	800357c <_read>
 800de34:	1c43      	adds	r3, r0, #1
 800de36:	d102      	bne.n	800de3e <_read_r+0x1e>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	b103      	cbz	r3, 800de3e <_read_r+0x1e>
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	bd38      	pop	{r3, r4, r5, pc}
 800de40:	240007b4 	.word	0x240007b4

0800de44 <__ascii_wctomb>:
 800de44:	b149      	cbz	r1, 800de5a <__ascii_wctomb+0x16>
 800de46:	2aff      	cmp	r2, #255	; 0xff
 800de48:	bf85      	ittet	hi
 800de4a:	238a      	movhi	r3, #138	; 0x8a
 800de4c:	6003      	strhi	r3, [r0, #0]
 800de4e:	700a      	strbls	r2, [r1, #0]
 800de50:	f04f 30ff 	movhi.w	r0, #4294967295
 800de54:	bf98      	it	ls
 800de56:	2001      	movls	r0, #1
 800de58:	4770      	bx	lr
 800de5a:	4608      	mov	r0, r1
 800de5c:	4770      	bx	lr

0800de5e <abort>:
 800de5e:	b508      	push	{r3, lr}
 800de60:	2006      	movs	r0, #6
 800de62:	f000 f833 	bl	800decc <raise>
 800de66:	2001      	movs	r0, #1
 800de68:	f7f5 fb7e 	bl	8003568 <_exit>

0800de6c <_malloc_usable_size_r>:
 800de6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de70:	1f18      	subs	r0, r3, #4
 800de72:	2b00      	cmp	r3, #0
 800de74:	bfbc      	itt	lt
 800de76:	580b      	ldrlt	r3, [r1, r0]
 800de78:	18c0      	addlt	r0, r0, r3
 800de7a:	4770      	bx	lr

0800de7c <_raise_r>:
 800de7c:	291f      	cmp	r1, #31
 800de7e:	b538      	push	{r3, r4, r5, lr}
 800de80:	4604      	mov	r4, r0
 800de82:	460d      	mov	r5, r1
 800de84:	d904      	bls.n	800de90 <_raise_r+0x14>
 800de86:	2316      	movs	r3, #22
 800de88:	6003      	str	r3, [r0, #0]
 800de8a:	f04f 30ff 	mov.w	r0, #4294967295
 800de8e:	bd38      	pop	{r3, r4, r5, pc}
 800de90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de92:	b112      	cbz	r2, 800de9a <_raise_r+0x1e>
 800de94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de98:	b94b      	cbnz	r3, 800deae <_raise_r+0x32>
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 f830 	bl	800df00 <_getpid_r>
 800dea0:	462a      	mov	r2, r5
 800dea2:	4601      	mov	r1, r0
 800dea4:	4620      	mov	r0, r4
 800dea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deaa:	f000 b817 	b.w	800dedc <_kill_r>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d00a      	beq.n	800dec8 <_raise_r+0x4c>
 800deb2:	1c59      	adds	r1, r3, #1
 800deb4:	d103      	bne.n	800debe <_raise_r+0x42>
 800deb6:	2316      	movs	r3, #22
 800deb8:	6003      	str	r3, [r0, #0]
 800deba:	2001      	movs	r0, #1
 800debc:	e7e7      	b.n	800de8e <_raise_r+0x12>
 800debe:	2400      	movs	r4, #0
 800dec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dec4:	4628      	mov	r0, r5
 800dec6:	4798      	blx	r3
 800dec8:	2000      	movs	r0, #0
 800deca:	e7e0      	b.n	800de8e <_raise_r+0x12>

0800decc <raise>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <raise+0xc>)
 800dece:	4601      	mov	r1, r0
 800ded0:	6818      	ldr	r0, [r3, #0]
 800ded2:	f7ff bfd3 	b.w	800de7c <_raise_r>
 800ded6:	bf00      	nop
 800ded8:	24000058 	.word	0x24000058

0800dedc <_kill_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4d07      	ldr	r5, [pc, #28]	; (800defc <_kill_r+0x20>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	4611      	mov	r1, r2
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	f7f5 fb2d 	bl	8003548 <_kill>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d102      	bne.n	800def8 <_kill_r+0x1c>
 800def2:	682b      	ldr	r3, [r5, #0]
 800def4:	b103      	cbz	r3, 800def8 <_kill_r+0x1c>
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	bd38      	pop	{r3, r4, r5, pc}
 800defa:	bf00      	nop
 800defc:	240007b4 	.word	0x240007b4

0800df00 <_getpid_r>:
 800df00:	f7f5 bb1a 	b.w	8003538 <_getpid>

0800df04 <checkint>:
 800df04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df08:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800df0c:	429a      	cmp	r2, r3
 800df0e:	b570      	push	{r4, r5, r6, lr}
 800df10:	dd2a      	ble.n	800df68 <checkint+0x64>
 800df12:	f240 4333 	movw	r3, #1075	; 0x433
 800df16:	429a      	cmp	r2, r3
 800df18:	dc24      	bgt.n	800df64 <checkint+0x60>
 800df1a:	1a9b      	subs	r3, r3, r2
 800df1c:	f1a3 0620 	sub.w	r6, r3, #32
 800df20:	f04f 32ff 	mov.w	r2, #4294967295
 800df24:	fa02 f403 	lsl.w	r4, r2, r3
 800df28:	fa02 f606 	lsl.w	r6, r2, r6
 800df2c:	f1c3 0520 	rsb	r5, r3, #32
 800df30:	fa22 f505 	lsr.w	r5, r2, r5
 800df34:	4334      	orrs	r4, r6
 800df36:	432c      	orrs	r4, r5
 800df38:	409a      	lsls	r2, r3
 800df3a:	ea20 0202 	bic.w	r2, r0, r2
 800df3e:	ea21 0404 	bic.w	r4, r1, r4
 800df42:	4322      	orrs	r2, r4
 800df44:	f1a3 0420 	sub.w	r4, r3, #32
 800df48:	f1c3 0220 	rsb	r2, r3, #32
 800df4c:	d10c      	bne.n	800df68 <checkint+0x64>
 800df4e:	40d8      	lsrs	r0, r3
 800df50:	fa01 f302 	lsl.w	r3, r1, r2
 800df54:	4318      	orrs	r0, r3
 800df56:	40e1      	lsrs	r1, r4
 800df58:	4308      	orrs	r0, r1
 800df5a:	f000 0001 	and.w	r0, r0, #1
 800df5e:	f1d0 0002 	rsbs	r0, r0, #2
 800df62:	bd70      	pop	{r4, r5, r6, pc}
 800df64:	2002      	movs	r0, #2
 800df66:	e7fc      	b.n	800df62 <checkint+0x5e>
 800df68:	2000      	movs	r0, #0
 800df6a:	e7fa      	b.n	800df62 <checkint+0x5e>
 800df6c:	0000      	movs	r0, r0
	...

0800df70 <pow>:
 800df70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df74:	ee10 4a90 	vmov	r4, s1
 800df78:	ed2d 8b0a 	vpush	{d8-d12}
 800df7c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800df80:	ee11 7a90 	vmov	r7, s3
 800df84:	f10a 32ff 	add.w	r2, sl, #4294967295
 800df88:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800df8c:	429a      	cmp	r2, r3
 800df8e:	ee10 6a10 	vmov	r6, s0
 800df92:	ee11 0a10 	vmov	r0, s2
 800df96:	b086      	sub	sp, #24
 800df98:	46d4      	mov	ip, sl
 800df9a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800df9e:	d806      	bhi.n	800dfae <pow+0x3e>
 800dfa0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800dfa4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800dfa8:	2b7f      	cmp	r3, #127	; 0x7f
 800dfaa:	f240 8156 	bls.w	800e25a <pow+0x2ea>
 800dfae:	1802      	adds	r2, r0, r0
 800dfb0:	eb47 0107 	adc.w	r1, r7, r7
 800dfb4:	f06f 0e01 	mvn.w	lr, #1
 800dfb8:	f112 39ff 	adds.w	r9, r2, #4294967295
 800dfbc:	f141 38ff 	adc.w	r8, r1, #4294967295
 800dfc0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800dfc4:	45ce      	cmp	lr, r9
 800dfc6:	eb73 0808 	sbcs.w	r8, r3, r8
 800dfca:	d23f      	bcs.n	800e04c <pow+0xdc>
 800dfcc:	ea52 0301 	orrs.w	r3, r2, r1
 800dfd0:	f04f 0300 	mov.w	r3, #0
 800dfd4:	d10c      	bne.n	800dff0 <pow+0x80>
 800dfd6:	19b6      	adds	r6, r6, r6
 800dfd8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800dfdc:	4164      	adcs	r4, r4
 800dfde:	42b3      	cmp	r3, r6
 800dfe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dfe4:	41a3      	sbcs	r3, r4
 800dfe6:	f0c0 808c 	bcc.w	800e102 <pow+0x192>
 800dfea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dfee:	e028      	b.n	800e042 <pow+0xd2>
 800dff0:	4da3      	ldr	r5, [pc, #652]	; (800e280 <pow+0x310>)
 800dff2:	42ac      	cmp	r4, r5
 800dff4:	bf08      	it	eq
 800dff6:	429e      	cmpeq	r6, r3
 800dff8:	d107      	bne.n	800e00a <pow+0x9a>
 800dffa:	1800      	adds	r0, r0, r0
 800dffc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800e000:	417f      	adcs	r7, r7
 800e002:	4283      	cmp	r3, r0
 800e004:	4b9f      	ldr	r3, [pc, #636]	; (800e284 <pow+0x314>)
 800e006:	41bb      	sbcs	r3, r7
 800e008:	e7ed      	b.n	800dfe6 <pow+0x76>
 800e00a:	19b6      	adds	r6, r6, r6
 800e00c:	489e      	ldr	r0, [pc, #632]	; (800e288 <pow+0x318>)
 800e00e:	4164      	adcs	r4, r4
 800e010:	42b3      	cmp	r3, r6
 800e012:	eb70 0504 	sbcs.w	r5, r0, r4
 800e016:	d374      	bcc.n	800e102 <pow+0x192>
 800e018:	4281      	cmp	r1, r0
 800e01a:	bf08      	it	eq
 800e01c:	429a      	cmpeq	r2, r3
 800e01e:	d170      	bne.n	800e102 <pow+0x192>
 800e020:	4a9a      	ldr	r2, [pc, #616]	; (800e28c <pow+0x31c>)
 800e022:	4294      	cmp	r4, r2
 800e024:	bf08      	it	eq
 800e026:	429e      	cmpeq	r6, r3
 800e028:	d0df      	beq.n	800dfea <pow+0x7a>
 800e02a:	4294      	cmp	r4, r2
 800e02c:	ea6f 0707 	mvn.w	r7, r7
 800e030:	bf34      	ite	cc
 800e032:	2400      	movcc	r4, #0
 800e034:	2401      	movcs	r4, #1
 800e036:	0fff      	lsrs	r7, r7, #31
 800e038:	42bc      	cmp	r4, r7
 800e03a:	f040 81d9 	bne.w	800e3f0 <pow+0x480>
 800e03e:	ee21 0b01 	vmul.f64	d0, d1, d1
 800e042:	b006      	add	sp, #24
 800e044:	ecbd 8b0a 	vpop	{d8-d12}
 800e048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04c:	eb16 0806 	adds.w	r8, r6, r6
 800e050:	eb44 0904 	adc.w	r9, r4, r4
 800e054:	f118 31ff 	adds.w	r1, r8, #4294967295
 800e058:	f169 0200 	sbc.w	r2, r9, #0
 800e05c:	458e      	cmp	lr, r1
 800e05e:	4193      	sbcs	r3, r2
 800e060:	d223      	bcs.n	800e0aa <pow+0x13a>
 800e062:	ee20 0b00 	vmul.f64	d0, d0, d0
 800e066:	2c00      	cmp	r4, #0
 800e068:	da12      	bge.n	800e090 <pow+0x120>
 800e06a:	4639      	mov	r1, r7
 800e06c:	f7ff ff4a 	bl	800df04 <checkint>
 800e070:	2801      	cmp	r0, #1
 800e072:	d10d      	bne.n	800e090 <pow+0x120>
 800e074:	eeb1 0b40 	vneg.f64	d0, d0
 800e078:	ea58 0309 	orrs.w	r3, r8, r9
 800e07c:	d10a      	bne.n	800e094 <pow+0x124>
 800e07e:	2f00      	cmp	r7, #0
 800e080:	dadf      	bge.n	800e042 <pow+0xd2>
 800e082:	b006      	add	sp, #24
 800e084:	ecbd 8b0a 	vpop	{d8-d12}
 800e088:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e08c:	f000 ba14 	b.w	800e4b8 <__math_divzero>
 800e090:	2000      	movs	r0, #0
 800e092:	e7f1      	b.n	800e078 <pow+0x108>
 800e094:	2f00      	cmp	r7, #0
 800e096:	dad4      	bge.n	800e042 <pow+0xd2>
 800e098:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e09c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e0a0:	ed8d 7b00 	vstr	d7, [sp]
 800e0a4:	ed9d 0b00 	vldr	d0, [sp]
 800e0a8:	e7cb      	b.n	800e042 <pow+0xd2>
 800e0aa:	2c00      	cmp	r4, #0
 800e0ac:	da2c      	bge.n	800e108 <pow+0x198>
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	f7ff ff28 	bl	800df04 <checkint>
 800e0b4:	b930      	cbnz	r0, 800e0c4 <pow+0x154>
 800e0b6:	b006      	add	sp, #24
 800e0b8:	ecbd 8b0a 	vpop	{d8-d12}
 800e0bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c0:	f000 ba12 	b.w	800e4e8 <__math_invalid>
 800e0c4:	2801      	cmp	r0, #1
 800e0c6:	bf14      	ite	ne
 800e0c8:	2000      	movne	r0, #0
 800e0ca:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e0ce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e0d2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800e0d6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800e0da:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800e0de:	2b7f      	cmp	r3, #127	; 0x7f
 800e0e0:	d92d      	bls.n	800e13e <pow+0x1ce>
 800e0e2:	4b67      	ldr	r3, [pc, #412]	; (800e280 <pow+0x310>)
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	429c      	cmp	r4, r3
 800e0e8:	bf08      	it	eq
 800e0ea:	4286      	cmpeq	r6, r0
 800e0ec:	f43f af7d 	beq.w	800dfea <pow+0x7a>
 800e0f0:	f240 31bd 	movw	r1, #957	; 0x3bd
 800e0f4:	428a      	cmp	r2, r1
 800e0f6:	d80c      	bhi.n	800e112 <pow+0x1a2>
 800e0f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e0fc:	42b0      	cmp	r0, r6
 800e0fe:	41a3      	sbcs	r3, r4
 800e100:	d204      	bcs.n	800e10c <pow+0x19c>
 800e102:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e106:	e79c      	b.n	800e042 <pow+0xd2>
 800e108:	2000      	movs	r0, #0
 800e10a:	e7e4      	b.n	800e0d6 <pow+0x166>
 800e10c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e110:	e797      	b.n	800e042 <pow+0xd2>
 800e112:	2e01      	cmp	r6, #1
 800e114:	eb74 0303 	sbcs.w	r3, r4, r3
 800e118:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e11c:	bf34      	ite	cc
 800e11e:	2301      	movcc	r3, #1
 800e120:	2300      	movcs	r3, #0
 800e122:	4295      	cmp	r5, r2
 800e124:	bf8c      	ite	hi
 800e126:	2500      	movhi	r5, #0
 800e128:	2501      	movls	r5, #1
 800e12a:	42ab      	cmp	r3, r5
 800e12c:	f000 809d 	beq.w	800e26a <pow+0x2fa>
 800e130:	b006      	add	sp, #24
 800e132:	ecbd 8b0a 	vpop	{d8-d12}
 800e136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e13a:	f000 b9b5 	b.w	800e4a8 <__math_oflow>
 800e13e:	f1bc 0f00 	cmp.w	ip, #0
 800e142:	d10b      	bne.n	800e15c <pow+0x1ec>
 800e144:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e278 <pow+0x308>
 800e148:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e14c:	ec53 2b17 	vmov	r2, r3, d7
 800e150:	ee17 6a10 	vmov	r6, s14
 800e154:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e158:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800e15c:	4b4c      	ldr	r3, [pc, #304]	; (800e290 <pow+0x320>)
 800e15e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e162:	4423      	add	r3, r4
 800e164:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e168:	1519      	asrs	r1, r3, #20
 800e16a:	0d1b      	lsrs	r3, r3, #20
 800e16c:	051b      	lsls	r3, r3, #20
 800e16e:	eba4 0903 	sub.w	r9, r4, r3
 800e172:	4b48      	ldr	r3, [pc, #288]	; (800e294 <pow+0x324>)
 800e174:	ee04 1a10 	vmov	s8, r1
 800e178:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800e17c:	f1b6 0800 	subs.w	r8, r6, #0
 800e180:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800e184:	ec49 8b15 	vmov	d5, r8, r9
 800e188:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800e18c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e190:	ed93 7b00 	vldr	d7, [r3]
 800e194:	ed93 5b02 	vldr	d5, [r3, #8]
 800e198:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800e19c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800e1a0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800e1a4:	ee36 ab02 	vadd.f64	d10, d6, d2
 800e1a8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800e1ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e1b0:	ed93 5b04 	vldr	d5, [r3, #16]
 800e1b4:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e1b8:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e1bc:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e1c0:	ed93 4b08 	vldr	d4, [r3, #32]
 800e1c4:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e1c8:	eeb0 9b40 	vmov.f64	d9, d0
 800e1cc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800e1d0:	ed93 5b06 	vldr	d5, [r3, #24]
 800e1d4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800e1d8:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e1dc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e1e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e1e4:	ee3a ab48 	vsub.f64	d10, d10, d8
 800e1e8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800e1ec:	ee37 9b09 	vadd.f64	d9, d7, d9
 800e1f0:	ee3a ab00 	vadd.f64	d10, d10, d0
 800e1f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e1f8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e1fc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800e200:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e204:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e208:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e20c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e210:	eeab ab05 	vfma.f64	d10, d11, d5
 800e214:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800e218:	ee21 7b06 	vmul.f64	d7, d1, d6
 800e21c:	ee17 3a90 	vmov	r3, s15
 800e220:	eeb0 5b47 	vmov.f64	d5, d7
 800e224:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e228:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800e22c:	18b2      	adds	r2, r6, r2
 800e22e:	2a3e      	cmp	r2, #62	; 0x3e
 800e230:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800e234:	ee38 8b46 	vsub.f64	d8, d8, d6
 800e238:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800e23c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800e240:	d92b      	bls.n	800e29a <pow+0x32a>
 800e242:	2a00      	cmp	r2, #0
 800e244:	da0b      	bge.n	800e25e <pow+0x2ee>
 800e246:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e24a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e24e:	2800      	cmp	r0, #0
 800e250:	f43f aef7 	beq.w	800e042 <pow+0xd2>
 800e254:	eeb1 0b40 	vneg.f64	d0, d0
 800e258:	e6f3      	b.n	800e042 <pow+0xd2>
 800e25a:	2000      	movs	r0, #0
 800e25c:	e77e      	b.n	800e15c <pow+0x1ec>
 800e25e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800e262:	d919      	bls.n	800e298 <pow+0x328>
 800e264:	2b00      	cmp	r3, #0
 800e266:	f6bf af63 	bge.w	800e130 <pow+0x1c0>
 800e26a:	b006      	add	sp, #24
 800e26c:	ecbd 8b0a 	vpop	{d8-d12}
 800e270:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e274:	f000 b910 	b.w	800e498 <__math_uflow>
 800e278:	00000000 	.word	0x00000000
 800e27c:	43300000 	.word	0x43300000
 800e280:	3ff00000 	.word	0x3ff00000
 800e284:	fff00000 	.word	0xfff00000
 800e288:	ffe00000 	.word	0xffe00000
 800e28c:	7fe00000 	.word	0x7fe00000
 800e290:	c0196aab 	.word	0xc0196aab
 800e294:	0800f0d8 	.word	0x0800f0d8
 800e298:	2600      	movs	r6, #0
 800e29a:	495d      	ldr	r1, [pc, #372]	; (800e410 <pow+0x4a0>)
 800e29c:	ed91 4b02 	vldr	d4, [r1, #8]
 800e2a0:	ed91 3b00 	vldr	d3, [r1]
 800e2a4:	eeb0 6b44 	vmov.f64	d6, d4
 800e2a8:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e2ac:	ee16 5a10 	vmov	r5, s12
 800e2b0:	ee36 6b44 	vsub.f64	d6, d6, d4
 800e2b4:	ed91 4b04 	vldr	d4, [r1, #16]
 800e2b8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800e2bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e2c0:	eeb0 0b47 	vmov.f64	d0, d7
 800e2c4:	ed91 7b06 	vldr	d7, [r1, #24]
 800e2c8:	18dc      	adds	r4, r3, r3
 800e2ca:	f104 030f 	add.w	r3, r4, #15
 800e2ce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e2d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e2d6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800e2da:	ee35 0b00 	vadd.f64	d0, d5, d0
 800e2de:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e2e2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800e2e6:	ed91 5b08 	vldr	d5, [r1, #32]
 800e2ea:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e2ee:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e2f2:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e2f6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800e2fa:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e2fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e302:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800e306:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e30a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e30e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e312:	1940      	adds	r0, r0, r5
 800e314:	2700      	movs	r7, #0
 800e316:	eb17 020c 	adds.w	r2, r7, ip
 800e31a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e31e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e322:	2e00      	cmp	r6, #0
 800e324:	d15f      	bne.n	800e3e6 <pow+0x476>
 800e326:	42bd      	cmp	r5, r7
 800e328:	db13      	blt.n	800e352 <pow+0x3e2>
 800e32a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800e32e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800e332:	4610      	mov	r0, r2
 800e334:	ec41 0b10 	vmov	d0, r0, r1
 800e338:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e33c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e3f8 <pow+0x488>
 800e340:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e344:	b006      	add	sp, #24
 800e346:	ecbd 8b0a 	vpop	{d8-d12}
 800e34a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e34e:	f000 b8e3 	b.w	800e518 <__math_check_oflow>
 800e352:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e356:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e35a:	4610      	mov	r0, r2
 800e35c:	ec41 0b15 	vmov	d5, r0, r1
 800e360:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e364:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e368:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e36c:	eeb0 3bc7 	vabs.f64	d3, d7
 800e370:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e400 <pow+0x490>
 800e37c:	d52a      	bpl.n	800e3d4 <pow+0x464>
 800e37e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e382:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e38e:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e392:	bf48      	it	mi
 800e394:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e398:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e39c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e3a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e3a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e3a8:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e3ac:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e3b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b8:	d104      	bne.n	800e3c4 <pow+0x454>
 800e3ba:	4632      	mov	r2, r6
 800e3bc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e3c0:	ec43 2b17 	vmov	d7, r2, r3
 800e3c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e3c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e3cc:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e3d0:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e3d4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e3d8:	b006      	add	sp, #24
 800e3da:	ecbd 8b0a 	vpop	{d8-d12}
 800e3de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e2:	f000 b890 	b.w	800e506 <__math_check_uflow>
 800e3e6:	ec43 2b10 	vmov	d0, r2, r3
 800e3ea:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e3ee:	e628      	b.n	800e042 <pow+0xd2>
 800e3f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e408 <pow+0x498>
 800e3f4:	e625      	b.n	800e042 <pow+0xd2>
 800e3f6:	bf00      	nop
 800e3f8:	00000000 	.word	0x00000000
 800e3fc:	7f000000 	.word	0x7f000000
 800e400:	00000000 	.word	0x00000000
 800e404:	00100000 	.word	0x00100000
	...
 800e410:	08010120 	.word	0x08010120
 800e414:	00000000 	.word	0x00000000

0800e418 <sqrt>:
 800e418:	b508      	push	{r3, lr}
 800e41a:	ed2d 8b04 	vpush	{d8-d9}
 800e41e:	eeb0 8b40 	vmov.f64	d8, d0
 800e422:	f000 f819 	bl	800e458 <__ieee754_sqrt>
 800e426:	eeb4 8b48 	vcmp.f64	d8, d8
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	d60c      	bvs.n	800e44a <sqrt+0x32>
 800e430:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800e450 <sqrt+0x38>
 800e434:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43c:	d505      	bpl.n	800e44a <sqrt+0x32>
 800e43e:	f7fc fe31 	bl	800b0a4 <__errno>
 800e442:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e446:	2321      	movs	r3, #33	; 0x21
 800e448:	6003      	str	r3, [r0, #0]
 800e44a:	ecbd 8b04 	vpop	{d8-d9}
 800e44e:	bd08      	pop	{r3, pc}
	...

0800e458 <__ieee754_sqrt>:
 800e458:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e45c:	4770      	bx	lr

0800e45e <with_errno>:
 800e45e:	b513      	push	{r0, r1, r4, lr}
 800e460:	4604      	mov	r4, r0
 800e462:	ed8d 0b00 	vstr	d0, [sp]
 800e466:	f7fc fe1d 	bl	800b0a4 <__errno>
 800e46a:	ed9d 0b00 	vldr	d0, [sp]
 800e46e:	6004      	str	r4, [r0, #0]
 800e470:	b002      	add	sp, #8
 800e472:	bd10      	pop	{r4, pc}

0800e474 <xflow>:
 800e474:	b082      	sub	sp, #8
 800e476:	b158      	cbz	r0, 800e490 <xflow+0x1c>
 800e478:	eeb1 7b40 	vneg.f64	d7, d0
 800e47c:	ed8d 7b00 	vstr	d7, [sp]
 800e480:	ed9d 7b00 	vldr	d7, [sp]
 800e484:	2022      	movs	r0, #34	; 0x22
 800e486:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e48a:	b002      	add	sp, #8
 800e48c:	f7ff bfe7 	b.w	800e45e <with_errno>
 800e490:	eeb0 7b40 	vmov.f64	d7, d0
 800e494:	e7f2      	b.n	800e47c <xflow+0x8>
	...

0800e498 <__math_uflow>:
 800e498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4a0 <__math_uflow+0x8>
 800e49c:	f7ff bfea 	b.w	800e474 <xflow>
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	10000000 	.word	0x10000000

0800e4a8 <__math_oflow>:
 800e4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4b0 <__math_oflow+0x8>
 800e4ac:	f7ff bfe2 	b.w	800e474 <xflow>
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	70000000 	.word	0x70000000

0800e4b8 <__math_divzero>:
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e4c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e4c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e4c8:	ed8d 7b00 	vstr	d7, [sp]
 800e4cc:	ed9d 0b00 	vldr	d0, [sp]
 800e4d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e4e0 <__math_divzero+0x28>
 800e4d4:	2022      	movs	r0, #34	; 0x22
 800e4d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e4da:	b002      	add	sp, #8
 800e4dc:	f7ff bfbf 	b.w	800e45e <with_errno>
	...

0800e4e8 <__math_invalid>:
 800e4e8:	eeb0 7b40 	vmov.f64	d7, d0
 800e4ec:	eeb4 7b47 	vcmp.f64	d7, d7
 800e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e4f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e4fc:	d602      	bvs.n	800e504 <__math_invalid+0x1c>
 800e4fe:	2021      	movs	r0, #33	; 0x21
 800e500:	f7ff bfad 	b.w	800e45e <with_errno>
 800e504:	4770      	bx	lr

0800e506 <__math_check_uflow>:
 800e506:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50e:	d102      	bne.n	800e516 <__math_check_uflow+0x10>
 800e510:	2022      	movs	r0, #34	; 0x22
 800e512:	f7ff bfa4 	b.w	800e45e <with_errno>
 800e516:	4770      	bx	lr

0800e518 <__math_check_oflow>:
 800e518:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e538 <__math_check_oflow+0x20>
 800e51c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e520:	eeb4 7b46 	vcmp.f64	d7, d6
 800e524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e528:	dd02      	ble.n	800e530 <__math_check_oflow+0x18>
 800e52a:	2022      	movs	r0, #34	; 0x22
 800e52c:	f7ff bf97 	b.w	800e45e <with_errno>
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	f3af 8000 	nop.w
 800e538:	ffffffff 	.word	0xffffffff
 800e53c:	7fefffff 	.word	0x7fefffff

0800e540 <_init>:
 800e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e542:	bf00      	nop
 800e544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e546:	bc08      	pop	{r3}
 800e548:	469e      	mov	lr, r3
 800e54a:	4770      	bx	lr

0800e54c <_fini>:
 800e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54e:	bf00      	nop
 800e550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e552:	bc08      	pop	{r3}
 800e554:	469e      	mov	lr, r3
 800e556:	4770      	bx	lr
