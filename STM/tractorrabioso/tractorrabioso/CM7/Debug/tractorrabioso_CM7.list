
tractorrabioso_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e888  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002460  0800eb28  0800eb28  0001eb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f88  08010f88  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08010f88  08010f88  00020f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f90  08010f90  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f90  08010f90  00020f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f94  08010f94  00020f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  24000000  08010f98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  24000228  080111c0  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000810  080111c0  00030810  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ee2  00000000  00000000  00030256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2a  00000000  00000000  00054138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00057b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00059788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ec3a  00000000  00000000  0005b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002286d  00000000  00000000  00099e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199347  00000000  00000000  000bc6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00255a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d0c  00000000  00000000  00255a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000228 	.word	0x24000228
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb10 	.word	0x0800eb10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400022c 	.word	0x2400022c
 80002dc:	0800eb10 	.word	0x0800eb10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f004 f925 	bl	8004a6c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f91c 	bl	8004a6c <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000254 	.word	0x24000254
 8000840:	24000258 	.word	0x24000258

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f004 f905 	bl	8004a6c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f8fc 	bl	8004a6c <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000254 	.word	0x24000254
 8000880:	2400025a 	.word	0x2400025a

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f007 fcc8 	bl	800823c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f007 feb2 	bl	8008620 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400025c 	.word	0x2400025c

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f007 fc9d 	bl	800823c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f007 fe88 	bl	8008620 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400025c 	.word	0x2400025c

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f007 fc73 	bl	800823c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400025c 	.word	0x2400025c

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f007 fc53 	bl	800823c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f007 fc4c 	bl	800823c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400025c 	.word	0x2400025c

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f007 fc23 	bl	800823c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f007 fe0e 	bl	8008620 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400025c 	.word	0x2400025c

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00a fe2a 	bl	800b6cc <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f003 f84c 	bl	8003b34 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fad5 	bl	8001150 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fae5 	bl	8001184 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f9ab 	bl	8000f1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9e1 	bl	8000f90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fa24 	bl	800101c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f976 	bl	8000ec4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 faae 	bl	800113e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa3c 	bl	800106c <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400025c 	.word	0x2400025c
 8000c08:	24000254 	.word	0x24000254
 8000c0c:	24000258 	.word	0x24000258
 8000c10:	2400025a 	.word	0x2400025a

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000248 	.word	0x24000248

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa10 	bl	800108a <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000248 	.word	0x24000248
 8000d40:	0800f2bc 	.word	0x0800f2bc
 8000d44:	0800f2c4 	.word	0x0800f2c4
 8000d48:	24000250 	.word	0x24000250

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000250 	.word	0x24000250

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000250 	.word	0x24000250

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0306 	orr.w	r3, r3, #6
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f991 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0306 	orr.w	r3, r3, #6
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 0303 	orr.w	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd0d 	bl	8000884 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd55 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fd02 	bl	8000884 <NRF24_read_register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e86:	f000 f963 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff fcfa 	bl	8000884 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f7ff fd42 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fcef 	bl	8000884 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f7ff fd37 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <NRF24_enableDynamicPayloads+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24000251 	.word	0x24000251

08000ec4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f7ff fcdb 	bl	8000884 <NRF24_read_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fd23 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f7ff fd1f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <NRF24_disableDynamicPayloads+0x2c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000251 	.word	0x24000251

08000ef4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f04:	213f      	movs	r1, #63	; 0x3f
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fd0c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f0c:	e003      	b.n	8000f16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd07 	bl	8000924 <NRF24_write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fcab 	bl	8000884 <NRF24_read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f023 0306 	bic.w	r3, r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d104      	bne.n	8000f4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0306 	orr.w	r3, r3, #6
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e019      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d104      	bne.n	8000f5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e011      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d103      	bne.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0306 	orr.w	r3, r3, #6
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fcce 	bl	8000924 <NRF24_write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fc70 	bl	8000884 <NRF24_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <NRF24_setDataRate+0x88>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00d      	b.n	8000fe8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	e002      	b.n	8000fe8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fc99 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f7ff fc46 	bl	8000884 <NRF24_read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e002      	b.n	800100e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_setDataRate+0x88>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000252 	.word	0x24000252

0800101c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fc2c 	bl	8000884 <NRF24_read_register>
 800102c:	4603      	mov	r3, r0
 800102e:	f023 030c 	bic.w	r3, r3, #12
 8001032:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e007      	b.n	800105a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc60 	bl	8000924 <NRF24_write_register>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc07 	bl	8000884 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc4f 	bl	8000924 <NRF24_write_register>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001092:	f7ff fcd1 	bl	8000a38 <NRF24_get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fc2b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010d8:	2120      	movs	r1, #32
 80010da:	2007      	movs	r0, #7
 80010dc:	f7ff fc22 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80010fe:	2320      	movs	r3, #32
 8001100:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001102:	7afa      	ldrb	r2, [r7, #11]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	4293      	cmp	r3, r2
 8001108:	bf28      	it	cs
 800110a:	4613      	movcs	r3, r2
 800110c:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(0);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fb78 	bl	8000804 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc1c 	bl	8000968 <NRF24_write_registerN>
  NRF24_csn(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fb67 	bl	8000804 <NRF24_csn>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001142:	2170      	movs	r1, #112	; 0x70
 8001144:	2007      	movs	r0, #7
 8001146:	f7ff fbed 	bl	8000924 <NRF24_write_register>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fb54 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800115c:	2350      	movs	r3, #80	; 0x50
 800115e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001160:	2373      	movs	r3, #115	; 0x73
 8001162:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2202      	movs	r2, #2
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <NRF24_ACTIVATE_cmd+0x30>)
 800116c:	f007 f866 	bl	800823c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fb47 	bl	8000804 <NRF24_csn>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2400025c 	.word	0x2400025c

08001184 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b0a1      	sub	sp, #132	; 0x84
 8001188:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	49c3      	ldr	r1, [pc, #780]	; (800149c <printRadioSettings+0x318>)
 8001190:	4618      	mov	r0, r3
 8001192:	f00a ffb5 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8a0 	bl	80002e0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	230a      	movs	r3, #10
 80011aa:	48bd      	ldr	r0, [pc, #756]	; (80014a0 <printRadioSettings+0x31c>)
 80011ac:	f009 f9ae 	bl	800a50c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fb67 	bl	8000884 <NRF24_read_register>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80011bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80011c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <printRadioSettings+0x5e>
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	49b2      	ldr	r1, [pc, #712]	; (80014a4 <printRadioSettings+0x320>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a ff90 	bl	800c100 <siprintf>
 80011e0:	e00c      	b.n	80011fc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	49b0      	ldr	r1, [pc, #704]	; (80014a8 <printRadioSettings+0x324>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a ff89 	bl	800c100 <siprintf>
 80011ee:	e005      	b.n	80011fc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49ad      	ldr	r1, [pc, #692]	; (80014ac <printRadioSettings+0x328>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00a ff82 	bl	800c100 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f86d 	bl	80002e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <printRadioSettings+0x31c>)
 8001212:	f009 f97b 	bl	800a50c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fb34 	bl	8000884 <NRF24_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfcc      	ite	gt
 800122e:	2301      	movgt	r3, #1
 8001230:	2300      	movle	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfcc      	ite	gt
 8001256:	2301      	movgt	r3, #1
 8001258:	2300      	movle	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfcc      	ite	gt
 800126a:	2301      	movgt	r3, #1
 800126c:	2300      	movle	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001276:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfcc      	ite	gt
 800127e:	2301      	movgt	r3, #1
 8001280:	2300      	movle	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfcc      	ite	gt
 8001292:	2301      	movgt	r3, #1
 8001294:	2300      	movle	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	9303      	str	r3, [sp, #12]
 800129e:	9402      	str	r4, [sp, #8]
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	4633      	mov	r3, r6
 80012a6:	462a      	mov	r2, r5
 80012a8:	4981      	ldr	r1, [pc, #516]	; (80014b0 <printRadioSettings+0x32c>)
 80012aa:	f00a ff29 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f814 	bl	80002e0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	230a      	movs	r3, #10
 80012c2:	4877      	ldr	r0, [pc, #476]	; (80014a0 <printRadioSettings+0x31c>)
 80012c4:	f009 f922 	bl	800a50c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fadb 	bl	8000884 <NRF24_read_register>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfcc      	ite	gt
 80012f4:	2301      	movgt	r3, #1
 80012f6:	2300      	movle	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001300:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	bfcc      	ite	gt
 8001308:	2301      	movgt	r3, #1
 800130a:	2300      	movle	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001310:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001314:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfcc      	ite	gt
 800131c:	2301      	movgt	r3, #1
 800131e:	2300      	movle	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001328:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfcc      	ite	gt
 8001330:	2301      	movgt	r3, #1
 8001332:	2300      	movle	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f107 0008 	add.w	r0, r7, #8
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	9402      	str	r4, [sp, #8]
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	4633      	mov	r3, r6
 8001358:	462a      	mov	r2, r5
 800135a:	4956      	ldr	r1, [pc, #344]	; (80014b4 <printRadioSettings+0x330>)
 800135c:	f00a fed0 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffbb 	bl	80002e0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	230a      	movs	r3, #10
 8001374:	484a      	ldr	r0, [pc, #296]	; (80014a0 <printRadioSettings+0x31c>)
 8001376:	f009 f8c9 	bl	800a50c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fa82 	bl	8000884 <NRF24_read_register>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	3302      	adds	r3, #2
 8001390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001394:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4946      	ldr	r1, [pc, #280]	; (80014b8 <printRadioSettings+0x334>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a feae 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	230a      	movs	r3, #10
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <printRadioSettings+0x31c>)
 80013ba:	f009 f8a7 	bl	800a50c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80013be:	2005      	movs	r0, #5
 80013c0:	f7ff fa60 	bl	8000884 <NRF24_read_register>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80013ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <printRadioSettings+0x338>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f00a fe91 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff7c 	bl	80002e0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f107 0108 	add.w	r1, r7, #8
 80013f0:	230a      	movs	r3, #10
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <printRadioSettings+0x31c>)
 80013f4:	f009 f88a 	bl	800a50c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80013f8:	2006      	movs	r0, #6
 80013fa:	f7ff fa43 	bl	8000884 <NRF24_read_register>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <printRadioSettings+0x29a>
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	492a      	ldr	r1, [pc, #168]	; (80014c0 <printRadioSettings+0x33c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f00a fe72 	bl	800c100 <siprintf>
 800141c:	e005      	b.n	800142a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4928      	ldr	r1, [pc, #160]	; (80014c4 <printRadioSettings+0x340>)
 8001424:	4618      	mov	r0, r3
 8001426:	f00a fe6b 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ff56 	bl	80002e0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0108 	add.w	r1, r7, #8
 800143c:	230a      	movs	r3, #10
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <printRadioSettings+0x31c>)
 8001440:	f009 f864 	bl	800a50c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001448:	f003 0306 	and.w	r3, r3, #6
 800144c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <printRadioSettings+0x2ec>
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4918      	ldr	r1, [pc, #96]	; (80014c8 <printRadioSettings+0x344>)
 8001468:	4618      	mov	r0, r3
 800146a:	f00a fe49 	bl	800c100 <siprintf>
 800146e:	e03b      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <printRadioSettings+0x302>
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <printRadioSettings+0x348>)
 800147e:	4618      	mov	r0, r3
 8001480:	f00a fe3e 	bl	800c100 <siprintf>
 8001484:	e030      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	2b02      	cmp	r3, #2
 800148c:	d122      	bne.n	80014d4 <printRadioSettings+0x350>
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <printRadioSettings+0x34c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f00a fe33 	bl	800c100 <siprintf>
 800149a:	e025      	b.n	80014e8 <printRadioSettings+0x364>
 800149c:	0800eb28 	.word	0x0800eb28
 80014a0:	240002e4 	.word	0x240002e4
 80014a4:	0800eb5c 	.word	0x0800eb5c
 80014a8:	0800eb78 	.word	0x0800eb78
 80014ac:	0800eb94 	.word	0x0800eb94
 80014b0:	0800eba8 	.word	0x0800eba8
 80014b4:	0800ebec 	.word	0x0800ebec
 80014b8:	0800ec38 	.word	0x0800ec38
 80014bc:	0800ec54 	.word	0x0800ec54
 80014c0:	0800ec68 	.word	0x0800ec68
 80014c4:	0800ec80 	.word	0x0800ec80
 80014c8:	0800ec98 	.word	0x0800ec98
 80014cc:	0800ecac 	.word	0x0800ecac
 80014d0:	0800ecc0 	.word	0x0800ecc0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80014d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d105      	bne.n	80014e8 <printRadioSettings+0x364>
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	49d7      	ldr	r1, [pc, #860]	; (8001840 <printRadioSettings+0x6bc>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00a fe0c 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fef7 	bl	80002e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	230a      	movs	r3, #10
 80014fc:	48d1      	ldr	r0, [pc, #836]	; (8001844 <printRadioSettings+0x6c0>)
 80014fe:	f009 f805 	bl	800a50c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001502:	463b      	mov	r3, r7
 8001504:	2205      	movs	r2, #5
 8001506:	4619      	mov	r1, r3
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff f9e3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	461c      	mov	r4, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	461d      	mov	r5, r3
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	787a      	ldrb	r2, [r7, #1]
 800151a:	7839      	ldrb	r1, [r7, #0]
 800151c:	f107 0008 	add.w	r0, r7, #8
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	49c7      	ldr	r1, [pc, #796]	; (8001848 <printRadioSettings+0x6c4>)
 800152c:	f00a fde8 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed3 	bl	80002e0 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	230a      	movs	r3, #10
 8001544:	48bf      	ldr	r0, [pc, #764]	; (8001844 <printRadioSettings+0x6c0>)
 8001546:	f008 ffe1 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800154a:	463b      	mov	r3, r7
 800154c:	2205      	movs	r2, #5
 800154e:	4619      	mov	r1, r3
 8001550:	200b      	movs	r0, #11
 8001552:	f7ff f9bf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	461d      	mov	r5, r3
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	787a      	ldrb	r2, [r7, #1]
 8001562:	7839      	ldrb	r1, [r7, #0]
 8001564:	f107 0008 	add.w	r0, r7, #8
 8001568:	9102      	str	r1, [sp, #8]
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	462b      	mov	r3, r5
 8001570:	4622      	mov	r2, r4
 8001572:	49b6      	ldr	r1, [pc, #728]	; (800184c <printRadioSettings+0x6c8>)
 8001574:	f00a fdc4 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feaf 	bl	80002e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	230a      	movs	r3, #10
 800158c:	48ad      	ldr	r0, [pc, #692]	; (8001844 <printRadioSettings+0x6c0>)
 800158e:	f008 ffbd 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001592:	463b      	mov	r3, r7
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	200c      	movs	r0, #12
 800159a:	f7ff f99b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	49aa      	ldr	r1, [pc, #680]	; (8001850 <printRadioSettings+0x6cc>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00a fda9 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe94 	bl	80002e0 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	230a      	movs	r3, #10
 80015c2:	48a0      	ldr	r0, [pc, #640]	; (8001844 <printRadioSettings+0x6c0>)
 80015c4:	f008 ffa2 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80015c8:	463b      	mov	r3, r7
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	200d      	movs	r0, #13
 80015d0:	f7ff f980 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	499d      	ldr	r1, [pc, #628]	; (8001854 <printRadioSettings+0x6d0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f00a fd8e 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fe79 	bl	80002e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	230a      	movs	r3, #10
 80015f8:	4892      	ldr	r0, [pc, #584]	; (8001844 <printRadioSettings+0x6c0>)
 80015fa:	f008 ff87 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80015fe:	463b      	mov	r3, r7
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	200e      	movs	r0, #14
 8001606:	f7ff f965 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800160a:	783b      	ldrb	r3, [r7, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4991      	ldr	r1, [pc, #580]	; (8001858 <printRadioSettings+0x6d4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fd73 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe5e 	bl	80002e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	4885      	ldr	r0, [pc, #532]	; (8001844 <printRadioSettings+0x6c0>)
 8001630:	f008 ff6c 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff f94a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001640:	783b      	ldrb	r3, [r7, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4984      	ldr	r1, [pc, #528]	; (800185c <printRadioSettings+0x6d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f00a fd58 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe43 	bl	80002e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	230a      	movs	r3, #10
 8001664:	4877      	ldr	r0, [pc, #476]	; (8001844 <printRadioSettings+0x6c0>)
 8001666:	f008 ff51 	bl	800a50c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800166a:	463b      	mov	r3, r7
 800166c:	2205      	movs	r2, #5
 800166e:	4619      	mov	r1, r3
 8001670:	2010      	movs	r0, #16
 8001672:	f7ff f92f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	461c      	mov	r4, r3
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	461d      	mov	r5, r3
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	787a      	ldrb	r2, [r7, #1]
 8001682:	7839      	ldrb	r1, [r7, #0]
 8001684:	f107 0008 	add.w	r0, r7, #8
 8001688:	9102      	str	r1, [sp, #8]
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	462b      	mov	r3, r5
 8001690:	4622      	mov	r2, r4
 8001692:	4973      	ldr	r1, [pc, #460]	; (8001860 <printRadioSettings+0x6dc>)
 8001694:	f00a fd34 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fe1f 	bl	80002e0 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	230a      	movs	r3, #10
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <printRadioSettings+0x6c0>)
 80016ae:	f008 ff2d 	bl	800a50c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80016b2:	2011      	movs	r0, #17
 80016b4:	f7ff f8e6 	bl	8000884 <NRF24_read_register>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4966      	ldr	r1, [pc, #408]	; (8001864 <printRadioSettings+0x6e0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a fd17 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 0108 	add.w	r1, r7, #8
 80016e4:	230a      	movs	r3, #10
 80016e6:	4857      	ldr	r0, [pc, #348]	; (8001844 <printRadioSettings+0x6c0>)
 80016e8:	f008 ff10 	bl	800a50c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f7ff f8c9 	bl	8000884 <NRF24_read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4958      	ldr	r1, [pc, #352]	; (8001868 <printRadioSettings+0x6e4>)
 8001706:	4618      	mov	r0, r3
 8001708:	f00a fcfa 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fde5 	bl	80002e0 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	f107 0108 	add.w	r1, r7, #8
 800171e:	230a      	movs	r3, #10
 8001720:	4848      	ldr	r0, [pc, #288]	; (8001844 <printRadioSettings+0x6c0>)
 8001722:	f008 fef3 	bl	800a50c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001726:	2013      	movs	r0, #19
 8001728:	f7ff f8ac 	bl	8000884 <NRF24_read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001732:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <printRadioSettings+0x6e8>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00a fcdd 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdc8 	bl	80002e0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	230a      	movs	r3, #10
 800175a:	483a      	ldr	r0, [pc, #232]	; (8001844 <printRadioSettings+0x6c0>)
 800175c:	f008 fed6 	bl	800a50c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001760:	2014      	movs	r0, #20
 8001762:	f7ff f88f 	bl	8000884 <NRF24_read_register>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <printRadioSettings+0x6ec>)
 800177a:	4618      	mov	r0, r3
 800177c:	f00a fcc0 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdab 	bl	80002e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	482b      	ldr	r0, [pc, #172]	; (8001844 <printRadioSettings+0x6c0>)
 8001796:	f008 feb9 	bl	800a50c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 800179a:	2015      	movs	r0, #21
 800179c:	f7ff f872 	bl	8000884 <NRF24_read_register>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4930      	ldr	r1, [pc, #192]	; (8001874 <printRadioSettings+0x6f0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fca3 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd8e 	bl	80002e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <printRadioSettings+0x6c0>)
 80017d0:	f008 fe9c 	bl	800a50c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80017d4:	2016      	movs	r0, #22
 80017d6:	f7ff f855 	bl	8000884 <NRF24_read_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4922      	ldr	r1, [pc, #136]	; (8001878 <printRadioSettings+0x6f4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00a fc86 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd71 	bl	80002e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <printRadioSettings+0x6c0>)
 800180a:	f008 fe7f 	bl	800a50c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800180e:	201c      	movs	r0, #28
 8001810:	f7ff f838 	bl	8000884 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfcc      	ite	gt
 8001826:	2301      	movgt	r3, #1
 8001828:	2300      	movle	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001832:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfcc      	ite	gt
 800183a:	2301      	movgt	r3, #1
 800183c:	2300      	movle	r3, #0
 800183e:	e01d      	b.n	800187c <printRadioSettings+0x6f8>
 8001840:	0800ecd4 	.word	0x0800ecd4
 8001844:	240002e4 	.word	0x240002e4
 8001848:	0800ece8 	.word	0x0800ece8
 800184c:	0800ed18 	.word	0x0800ed18
 8001850:	0800ed48 	.word	0x0800ed48
 8001854:	0800ed70 	.word	0x0800ed70
 8001858:	0800ed98 	.word	0x0800ed98
 800185c:	0800edc0 	.word	0x0800edc0
 8001860:	0800ede8 	.word	0x0800ede8
 8001864:	0800ee14 	.word	0x0800ee14
 8001868:	0800ee30 	.word	0x0800ee30
 800186c:	0800ee4c 	.word	0x0800ee4c
 8001870:	0800ee68 	.word	0x0800ee68
 8001874:	0800ee84 	.word	0x0800ee84
 8001878:	0800eea0 	.word	0x0800eea0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfcc      	ite	gt
 800188c:	2301      	movgt	r3, #1
 800188e:	2300      	movle	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001894:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001898:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800189c:	2b00      	cmp	r3, #0
 800189e:	bfcc      	ite	gt
 80018a0:	2301      	movgt	r3, #1
 80018a2:	2300      	movle	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bfcc      	ite	gt
 80018b4:	2301      	movgt	r3, #1
 80018b6:	2300      	movle	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bfcc      	ite	gt
 80018c8:	2301      	movgt	r3, #1
 80018ca:	2300      	movle	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f107 0008 	add.w	r0, r7, #8
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9402      	str	r4, [sp, #8]
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	462a      	mov	r2, r5
 80018de:	4936      	ldr	r1, [pc, #216]	; (80019b8 <printRadioSettings+0x834>)
 80018e0:	f00a fc0e 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcf9 	bl	80002e0 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	230a      	movs	r3, #10
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <printRadioSettings+0x838>)
 80018fa:	f008 fe07 	bl	800a50c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80018fe:	201d      	movs	r0, #29
 8001900:	f7fe ffc0 	bl	8000884 <NRF24_read_register>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800190a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <printRadioSettings+0x7a0>
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4929      	ldr	r1, [pc, #164]	; (80019c0 <printRadioSettings+0x83c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f00a fbef 	bl	800c100 <siprintf>
 8001922:	e005      	b.n	8001930 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4926      	ldr	r1, [pc, #152]	; (80019c4 <printRadioSettings+0x840>)
 800192a:	4618      	mov	r0, r3
 800192c:	f00a fbe8 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fcd3 	bl	80002e0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0108 	add.w	r1, r7, #8
 8001942:	230a      	movs	r3, #10
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <printRadioSettings+0x838>)
 8001946:	f008 fde1 	bl	800a50c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800194a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <printRadioSettings+0x7e0>
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <printRadioSettings+0x844>)
 800195c:	4618      	mov	r0, r3
 800195e:	f00a fbcf 	bl	800c100 <siprintf>
 8001962:	e005      	b.n	8001970 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <printRadioSettings+0x848>)
 800196a:	4618      	mov	r0, r3
 800196c:	f00a fbc8 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <printRadioSettings+0x838>)
 8001986:	f008 fdc1 	bl	800a50c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <printRadioSettings+0x84c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00a fbb5 	bl	800c100 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fca0 	bl	80002e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0108 	add.w	r1, r7, #8
 80019a8:	230a      	movs	r3, #10
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <printRadioSettings+0x838>)
 80019ac:	f008 fdae 	bl	800a50c <HAL_UART_Transmit>
}
 80019b0:	bf00      	nop
 80019b2:	3774      	adds	r7, #116	; 0x74
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	0800eebc 	.word	0x0800eebc
 80019bc:	240002e4 	.word	0x240002e4
 80019c0:	0800ef08 	.word	0x0800ef08
 80019c4:	0800ef20 	.word	0x0800ef20
 80019c8:	0800ef38 	.word	0x0800ef38
 80019cc:	0800ef54 	.word	0x0800ef54
 80019d0:	0800eb28 	.word	0x0800eb28

080019d4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019d4:	b084      	sub	sp, #16
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f107 0c08 	add.w	ip, r7, #8
 80019de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <nrf24_DebugUART_Init+0x2c>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2290      	movs	r2, #144	; 0x90
 80019ec:	4619      	mov	r1, r3
 80019ee:	f009 fe6d 	bl	800b6cc <memcpy>
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fa:	b004      	add	sp, #16
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	240002e4 	.word	0x240002e4

08001a04 <WaypointUpdateState>:
static float wpNextX;
static float wpNextY;

static uint32_t stateId = 0;

uint32_t WaypointUpdateState(float wpEstX, float wpEstY) { // run periodically from main loop
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a0e:	edc7 0a00 	vstr	s1, [r7]
switch (CurrState) {
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <WaypointUpdateState+0x104>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d869      	bhi.n	8001aee <WaypointUpdateState+0xea>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <WaypointUpdateState+0x1c>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a8f 	.word	0x08001a8f
 8001a28:	08001abb 	.word	0x08001abb
 8001a2c:	08001ae1 	.word	0x08001ae1
   case START:   /* state 0 */
	  currentWaypointIndex = 0;
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
      wpCurrX = waypoints[currentWaypointIndex][0];   // Setup Initial WayPoints
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <WaypointUpdateState+0x110>)
 8001a44:	6013      	str	r3, [r2, #0]
      wpCurrY = waypoints[currentWaypointIndex][1];
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <WaypointUpdateState+0x114>)
 8001a56:	6013      	str	r3, [r2, #0]
	  currentWaypointIndex = 1;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
      wpNextX = waypoints[currentWaypointIndex][0];   // Setup Initial WayPoints
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <WaypointUpdateState+0x118>)
 8001a6c:	6013      	str	r3, [r2, #0]
      wpNextY = waypoints[currentWaypointIndex][1];
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <WaypointUpdateState+0x108>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <WaypointUpdateState+0x10c>)
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <WaypointUpdateState+0x11c>)
 8001a7e:	6013      	str	r3, [r2, #0]
      CurrState = GOTOwp;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <WaypointUpdateState+0x104>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      stateId = 1;
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <WaypointUpdateState+0x120>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      break;
 8001a8c:	e036      	b.n	8001afc <WaypointUpdateState+0xf8>

   case GOTOwp:   /* state 1 */
	  wpCurrX = wpEstX;
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <WaypointUpdateState+0x110>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6013      	str	r3, [r2, #0]
	  wpCurrY = wpEstY;
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <WaypointUpdateState+0x114>)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6013      	str	r3, [r2, #0]
	  if (isCarAtWaypoint()){   /* distance (next - current) way points*/
 8001a9a:	f000 f845 	bl	8001b28 <isCarAtWaypoint>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <WaypointUpdateState+0xae>
         CurrState = ATwp;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <WaypointUpdateState+0x104>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
         stateId = 2;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <WaypointUpdateState+0x120>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
	  }
      else {
         CurrState = GOTOwp;
      }
      break;
 8001ab0:	e024      	b.n	8001afc <WaypointUpdateState+0xf8>
         CurrState = GOTOwp;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
      break;
 8001ab8:	e020      	b.n	8001afc <WaypointUpdateState+0xf8>

   case ATwp:  /* state 2 */
      if(updateNextWaypoint()) {
 8001aba:	f000 f885 	bl	8001bc8 <updateNextWaypoint>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <WaypointUpdateState+0xce>
         CurrState = GOTOwp;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
         stateId = 1;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <WaypointUpdateState+0x120>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
      }
      else {
         CurrState = OFF;
         stateId = 3;
      }
      break;
 8001ad0:	e014      	b.n	8001afc <WaypointUpdateState+0xf8>
         CurrState = OFF;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
         stateId = 3;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <WaypointUpdateState+0x120>)
 8001ada:	2203      	movs	r2, #3
 8001adc:	601a      	str	r2, [r3, #0]
      break;
 8001ade:	e00d      	b.n	8001afc <WaypointUpdateState+0xf8>

   case OFF:   /* state 3*/
      stateId = 3;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <WaypointUpdateState+0x120>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <WaypointUpdateState+0x104>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e006      	b.n	8001afc <WaypointUpdateState+0xf8>

   default:   /* state 4 error: invalid state */
      stateId = 4;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <WaypointUpdateState+0x120>)
 8001af0:	2204      	movs	r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <WaypointUpdateState+0x104>)
 8001af6:	2203      	movs	r2, #3
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	bf00      	nop
    }

   return(stateId);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <WaypointUpdateState+0x120>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	24000378 	.word	0x24000378
 8001b0c:	24000374 	.word	0x24000374
 8001b10:	24000008 	.word	0x24000008
 8001b14:	2400037c 	.word	0x2400037c
 8001b18:	24000380 	.word	0x24000380
 8001b1c:	24000384 	.word	0x24000384
 8001b20:	24000388 	.word	0x24000388
 8001b24:	2400038c 	.word	0x2400038c

08001b28 <isCarAtWaypoint>:



// Function to check if the car is near a way point
uint8_t isCarAtWaypoint() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	ed2d 8b02 	vpush	{d8}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
    float distance = sqrt(pow(wpNextX - wpCurrX, 2) + pow(wpNextY - wpCurrY, 2));
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <isCarAtWaypoint+0x90>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <isCarAtWaypoint+0x94>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b46:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b4e:	f00c fcf7 	bl	800e540 <pow>
 8001b52:	eeb0 8b40 	vmov.f64	d8, d0
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <isCarAtWaypoint+0x98>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <isCarAtWaypoint+0x9c>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b72:	f00c fce5 	bl	800e540 <pow>
 8001b76:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b7e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b82:	f00c ff31 	bl	800e9e8 <sqrt>
 8001b86:	eeb0 7b40 	vmov.f64	d7, d0
 8001b8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b8e:	edc7 7a01 	vstr	s15, [r7, #4]
    return (distance <= WAYPOINT_RADIUS);
 8001b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b96:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	bf94      	ite	ls
 8001ba4:	2301      	movls	r3, #1
 8001ba6:	2300      	movhi	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	ecbd 8b02 	vpop	{d8}
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24000384 	.word	0x24000384
 8001bbc:	2400037c 	.word	0x2400037c
 8001bc0:	24000388 	.word	0x24000388
 8001bc4:	24000380 	.word	0x24000380

08001bc8 <updateNextWaypoint>:

// Function to update the target way point
uint8_t updateNextWaypoint() {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	uint8_t retval = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	currentWaypointIndex = currentWaypointIndex + 1;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bda:	6013      	str	r3, [r2, #0]
    if (currentWaypointIndex < NUM_WAYPOINTS) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	dc13      	bgt.n	8001c0c <updateNextWaypoint+0x44>
        wpNextX = waypoints[currentWaypointIndex][0];
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <updateNextWaypoint+0x58>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <updateNextWaypoint+0x5c>)
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <updateNextWaypoint+0x60>)
 8001bf2:	6013      	str	r3, [r2, #0]
        wpNextY = waypoints[currentWaypointIndex][1];
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <updateNextWaypoint+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <updateNextWaypoint+0x5c>)
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <updateNextWaypoint+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]
        retval = 1; /* process next way point*/
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e001      	b.n	8001c10 <updateNextWaypoint+0x48>
        }
    else{
      retval = 0; /* no way points left */
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
    }
    return(retval);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	24000374 	.word	0x24000374
 8001c24:	24000008 	.word	0x24000008
 8001c28:	24000384 	.word	0x24000384
 8001c2c:	24000388 	.word	0x24000388

08001c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c34:	b0cb      	sub	sp, #300	; 0x12c
 8001c36:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c40:	bf00      	nop
 8001c42:	4bcc      	ldr	r3, [pc, #816]	; (8001f74 <main+0x344>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <main+0x2c>
 8001c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dcf2      	bgt.n	8001c42 <main+0x12>
  if ( timeout < 0 )
 8001c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da01      	bge.n	8001c68 <main+0x38>
  {
  Error_Handler();
 8001c64:	f000 fe8c 	bl	8002980 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f001 fed2 	bl	8003a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 fa6a 	bl	8002144 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001c70:	4bc0      	ldr	r3, [pc, #768]	; (8001f74 <main+0x344>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4abf      	ldr	r2, [pc, #764]	; (8001f74 <main+0x344>)
 8001c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4bbc      	ldr	r3, [pc, #752]	; (8001f74 <main+0x344>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f002 ff20 	bl	8004ad4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f002 ff36 	bl	8004b08 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ca4:	bf00      	nop
 8001ca6:	4bb3      	ldr	r3, [pc, #716]	; (8001f74 <main+0x344>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <main+0x90>
 8001cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dcf2      	bgt.n	8001ca6 <main+0x76>
if ( timeout < 0 )
 8001cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da01      	bge.n	8001ccc <main+0x9c>
{
Error_Handler();
 8001cc8:	f000 fe5a 	bl	8002980 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ccc:	f000 fd92 	bl	80027f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001cd0:	f000 fd44 	bl	800275c <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001cd4:	f000 fbb2 	bl	800243c <MX_SPI5_Init>
  MX_TIM16_Init();
 8001cd8:	f000 fcc6 	bl	8002668 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001cdc:	f000 fc3e 	bl	800255c <MX_TIM15_Init>
  MX_FDCAN1_Init();
 8001ce0:	f000 fab8 	bl	8002254 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001ce4:	f000 fb6a 	bl	80023bc <MX_I2C4_Init>
  MX_TIM12_Init();
 8001ce8:	f000 fbfe 	bl	80024e8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  //RetargetInit(&huart3);

  NRF24_begin(GPIOC, nrf24_CSN_Pin, nrf24_CE_Pin, hspi5);
 8001cec:	4ca2      	ldr	r4, [pc, #648]	; (8001f78 <main+0x348>)
 8001cee:	4668      	mov	r0, sp
 8001cf0:	1d23      	adds	r3, r4, #4
 8001cf2:	2284      	movs	r2, #132	; 0x84
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f009 fce9 	bl	800b6cc <memcpy>
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	489e      	ldr	r0, [pc, #632]	; (8001f7c <main+0x34c>)
 8001d02:	f7fe fea7 	bl	8000a54 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001d06:	4c9e      	ldr	r4, [pc, #632]	; (8001f80 <main+0x350>)
 8001d08:	4668      	mov	r0, sp
 8001d0a:	f104 0310 	add.w	r3, r4, #16
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	4619      	mov	r1, r3
 8001d12:	f009 fcdb 	bl	800b6cc <memcpy>
 8001d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1a:	f7ff fe5b 	bl	80019d4 <nrf24_DebugUART_Init>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001d1e:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <main+0x354>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7fe ffc3 	bl	8000cb0 <NRF24_openReadingPipe>
  NRF24_setAutoAck(false);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f8e2 	bl	8000ef4 <NRF24_setAutoAck>
  NRF24_setChannel(60);
 8001d30:	203c      	movs	r0, #60	; 0x3c
 8001d32:	f7ff f826 	bl	8000d82 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001d36:	2020      	movs	r0, #32
 8001d38:	f7ff f838 	bl	8000dac <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_2MBPS);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff f927 	bl	8000f90 <NRF24_setDataRate>

  NRF24_enableDynamicPayloads();
 8001d42:	f7ff f88d 	bl	8000e60 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8001d46:	f7ff f85d 	bl	8000e04 <NRF24_enableAckPayload>
  printRadioSettings();
 8001d4a:	f7ff fa1b 	bl	8001184 <printRadioSettings>
  NRF24_startListening();
 8001d4e:	f7fe ff61 	bl	8000c14 <NRF24_startListening>
  printf("Starting NRF24\r\n");
 8001d52:	488d      	ldr	r0, [pc, #564]	; (8001f88 <main+0x358>)
 8001d54:	f00a f998 	bl	800c088 <puts>
  HAL_Delay(1000);
 8001d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5c:	f001 feea 	bl	8003b34 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  initServoTim(htim16);
 8001d60:	4e8a      	ldr	r6, [pc, #552]	; (8001f8c <main+0x35c>)
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d80:	f001 f9fa 	bl	8003178 <initServoTim>
  initESCTim(htim15);
 8001d84:	4e82      	ldr	r6, [pc, #520]	; (8001f90 <main+0x360>)
 8001d86:	466d      	mov	r5, sp
 8001d88:	f106 0410 	add.w	r4, r6, #16
 8001d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001da0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001da4:	f001 fa12 	bl	80031cc <initESCTim>
  mpu6050_init(&hi2c4, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004);
 8001da8:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8001f94 <main+0x364>
 8001dac:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8001f98 <main+0x368>
 8001db0:	2301      	movs	r3, #1
 8001db2:	2201      	movs	r2, #1
 8001db4:	2168      	movs	r1, #104	; 0x68
 8001db6:	4879      	ldr	r0, [pc, #484]	; (8001f9c <main+0x36c>)
 8001db8:	f000 fde8 	bl	800298c <mpu6050_init>

  // Parameters are: uint16_t forwardSpeed, uint16_t turningSpeed, uint16_t forwardTime, uint16_t turningTime, uint16_t turnigAngle
  //hardCodedPath(1350, 1300, 3150, 5080, 150);

  /* Previous time peripherals */
  uint64_t prevTimNRF24 = 0;  /* initial values */
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  uint64_t prevTimCAN = 0;
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  uint64_t prevTimIMU = 0;
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  uint64_t prevTimLED = 0;
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

  /* Interval time peripherals */
  uint64_t intTimNRF24 = 500;  /* every 500 mili-seconds */
 8001dec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  uint64_t intTimCAN =  200;  /* every 200 miliseconds */
 8001df8:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  uint64_t intTimIMU = 500;  /* every 500 miliseconds */
 8001e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  uint64_t intTimLED = 1000; /* every 1 second */
 8001e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  uint8_t stateHardCode = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t prevStateHardCode = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint8_t stateWaypointNotify = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  uint8_t prevStateWPNotify = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  uint8_t counter = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		 stopCar();
	 }
	 com*/


	stateHardCode = PathHardCodeUpdateState(cntMilisec);
 8001e3a:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <main+0x370>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f001 f8a2 	bl	8002f8c <PathHardCodeUpdateState>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stateHardCode != prevStateHardCode){
 8001e4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001e52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d009      	beq.n	8001e6e <main+0x23e>
	  prevStateHardCode = stateHardCode;
 8001e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  printf("\n\rCurrent State of HardCoded Path is: %u",stateHardCode);
 8001e62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e66:	4619      	mov	r1, r3
 8001e68:	484e      	ldr	r0, [pc, #312]	; (8001fa4 <main+0x374>)
 8001e6a:	f00a f887 	bl	800bf7c <iprintf>
	{90, 60},
	{150, 120}
};
 */

	switch(stateHardCode) {
 8001e6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e72:	3b01      	subs	r3, #1
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d827      	bhi.n	8001ec8 <main+0x298>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <main+0x250>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001e9f 	.word	0x08001e9f
 8001e88:	08001ead 	.word	0x08001ead
 8001e8c:	08001ebb 	.word	0x08001ebb
	case 1:
		wpCurrX = 50.0;
 8001e90:	4b45      	ldr	r3, [pc, #276]	; (8001fa8 <main+0x378>)
 8001e92:	4a46      	ldr	r2, [pc, #280]	; (8001fac <main+0x37c>)
 8001e94:	601a      	str	r2, [r3, #0]
	    wpCurrY = 30.0;
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <main+0x380>)
 8001e98:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <main+0x384>)
 8001e9a:	601a      	str	r2, [r3, #0]
	    break;
 8001e9c:	e014      	b.n	8001ec8 <main+0x298>
	case 2:
		wpCurrX = 90.0;
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <main+0x378>)
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <main+0x388>)
 8001ea2:	601a      	str	r2, [r3, #0]
    	wpCurrY = 60.0;
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <main+0x380>)
 8001ea6:	4a45      	ldr	r2, [pc, #276]	; (8001fbc <main+0x38c>)
 8001ea8:	601a      	str	r2, [r3, #0]
    	break;
 8001eaa:	e00d      	b.n	8001ec8 <main+0x298>
	case 3:
		wpCurrX = 150.0;
 8001eac:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <main+0x378>)
 8001eae:	4a44      	ldr	r2, [pc, #272]	; (8001fc0 <main+0x390>)
 8001eb0:	601a      	str	r2, [r3, #0]
    	wpCurrY = 120.0;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <main+0x380>)
 8001eb4:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <main+0x394>)
 8001eb6:	601a      	str	r2, [r3, #0]
    	break;
 8001eb8:	e006      	b.n	8001ec8 <main+0x298>
	case 4:
		wpCurrX = 150.0;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <main+0x378>)
 8001ebc:	4a40      	ldr	r2, [pc, #256]	; (8001fc0 <main+0x390>)
 8001ebe:	601a      	str	r2, [r3, #0]
    	wpCurrY = 120.0;
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <main+0x380>)
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <main+0x394>)
 8001ec4:	601a      	str	r2, [r3, #0]
    	break;
 8001ec6:	bf00      	nop
	}



	stateWaypointNotify = WaypointUpdateState(wpCurrX, wpCurrY);
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <main+0x378>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <main+0x380>)
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	eef0 0a47 	vmov.f32	s1, s14
 8001ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8001edc:	f7ff fd92 	bl	8001a04 <WaypointUpdateState>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	if (stateWaypointNotify != prevStateWPNotify){
 8001ee6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001eea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d009      	beq.n	8001f06 <main+0x2d6>
	  prevStateWPNotify = stateWaypointNotify;
 8001ef2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ef6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	  printf("\n\rCurrent Waypoint Notify State is: %u",stateWaypointNotify);
 8001efa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001efe:	4619      	mov	r1, r3
 8001f00:	4831      	ldr	r0, [pc, #196]	; (8001fc8 <main+0x398>)
 8001f02:	f00a f83b 	bl	800bf7c <iprintf>
	}

	if((cntMilisec - prevTimNRF24) >= intTimNRF24) {                    // Send this at a one second interval.
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <main+0x370>)
 8001f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001f10:	ebb0 0802 	subs.w	r8, r0, r2
 8001f14:	eb61 0903 	sbc.w	r9, r1, r3
 8001f18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001f1c:	4590      	cmp	r8, r2
 8001f1e:	eb79 0303 	sbcs.w	r3, r9, r3
 8001f22:	f0c0 8085 	bcc.w	8002030 <main+0x400>
	    prevTimNRF24 = cntMilisec;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <main+0x370>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	    char myRxData[50] = "";
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	222e      	movs	r2, #46	; 0x2e
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 fbd3 	bl	800b6e8 <memset>
	    if(NRF24_available()) {
 8001f42:	f7fe fe8d 	bl	8000c60 <NRF24_available>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d071      	beq.n	8002030 <main+0x400>
	       NRF24_read(buffer, 6);
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	481f      	ldr	r0, [pc, #124]	; (8001fcc <main+0x39c>)
 8001f50:	f7fe fe8e 	bl	8000c70 <NRF24_read>
           if(buffer[0] == 0xFF && buffer[1] == 0xFF) {
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <main+0x39c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d13b      	bne.n	8001fd4 <main+0x3a4>
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <main+0x39c>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	2bff      	cmp	r3, #255	; 0xff
 8001f62:	d137      	bne.n	8001fd4 <main+0x3a4>
   	  	     snprintf(myRxData, 32, "Coordinates not found\r\n");
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <main+0x3a0>)
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00a f893 	bl	800c098 <sniprintf>
 8001f72:	e04b      	b.n	800200c <main+0x3dc>
 8001f74:	58024400 	.word	0x58024400
 8001f78:	2400047c 	.word	0x2400047c
 8001f7c:	58020800 	.word	0x58020800
 8001f80:	240005e8 	.word	0x240005e8
 8001f84:	24000028 	.word	0x24000028
 8001f88:	0800f06c 	.word	0x0800f06c
 8001f8c:	2400059c 	.word	0x2400059c
 8001f90:	24000550 	.word	0x24000550
 8001f94:	3b83126f 	.word	0x3b83126f
 8001f98:	3f7ae148 	.word	0x3f7ae148
 8001f9c:	24000430 	.word	0x24000430
 8001fa0:	240006f8 	.word	0x240006f8
 8001fa4:	0800f07c 	.word	0x0800f07c
 8001fa8:	24000708 	.word	0x24000708
 8001fac:	42480000 	.word	0x42480000
 8001fb0:	2400070c 	.word	0x2400070c
 8001fb4:	41f00000 	.word	0x41f00000
 8001fb8:	42b40000 	.word	0x42b40000
 8001fbc:	42700000 	.word	0x42700000
 8001fc0:	43160000 	.word	0x43160000
 8001fc4:	42f00000 	.word	0x42f00000
 8001fc8:	0800f0a8 	.word	0x0800f0a8
 8001fcc:	24000700 	.word	0x24000700
 8001fd0:	0800f0d0 	.word	0x0800f0d0
    	   }
           else {
   	  	     snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));
 8001fd4:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <main+0x4e0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <main+0x4e0>)
 8001fdc:	7852      	ldrb	r2, [r2, #1]
 8001fde:	ea43 0102 	orr.w	r1, r3, r2
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <main+0x4e0>)
 8001fe4:	789b      	ldrb	r3, [r3, #2]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4a49      	ldr	r2, [pc, #292]	; (8002110 <main+0x4e0>)
 8001fea:	78d2      	ldrb	r2, [r2, #3]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	4a48      	ldr	r2, [pc, #288]	; (8002110 <main+0x4e0>)
 8001ff0:	7912      	ldrb	r2, [r2, #4]
 8001ff2:	0212      	lsls	r2, r2, #8
 8001ff4:	4846      	ldr	r0, [pc, #280]	; (8002110 <main+0x4e0>)
 8001ff6:	7940      	ldrb	r0, [r0, #5]
 8001ff8:	4302      	orrs	r2, r0
 8001ffa:	f107 0014 	add.w	r0, r7, #20
 8001ffe:	9201      	str	r2, [sp, #4]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	460b      	mov	r3, r1
 8002004:	4a43      	ldr	r2, [pc, #268]	; (8002114 <main+0x4e4>)
 8002006:	2120      	movs	r1, #32
 8002008:	f00a f846 	bl	800c098 <sniprintf>
    	   }
           NRF24_writeAckPayload(1, myAckPayload, 32);
 800200c:	2220      	movs	r2, #32
 800200e:	4942      	ldr	r1, [pc, #264]	; (8002118 <main+0x4e8>)
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff f86a 	bl	80010ea <NRF24_writeAckPayload>
           HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f960 	bl	80002e0 <strlen>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	f107 0114 	add.w	r1, r7, #20
 8002028:	230a      	movs	r3, #10
 800202a:	483c      	ldr	r0, [pc, #240]	; (800211c <main+0x4ec>)
 800202c:	f008 fa6e 	bl	800a50c <HAL_UART_Transmit>
        }

	}

	if((cntMilisec - prevTimIMU) >= intTimIMU) {                    // Send this at a one second interval.
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <main+0x4f0>)
 8002032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002036:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800203a:	ebb0 0a02 	subs.w	sl, r0, r2
 800203e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002046:	4592      	cmp	sl, r2
 8002048:	eb7b 0303 	sbcs.w	r3, fp, r3
 800204c:	d307      	bcc.n	800205e <main+0x42e>
	    prevTimIMU = cntMilisec;
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <main+0x4f0>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	    MPU_readProcessedData(&hi2c4);
 8002058:	4832      	ldr	r0, [pc, #200]	; (8002124 <main+0x4f4>)
 800205a:	f000 feb5 	bl	8002dc8 <MPU_readProcessedData>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if((cntMilisec - prevTimCAN) >= intTimCAN) {                    // Send this at a one second interval.
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <main+0x4f0>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002068:	1a84      	subs	r4, r0, r2
 800206a:	60bc      	str	r4, [r7, #8]
 800206c:	eb61 0303 	sbc.w	r3, r1, r3
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800207a:	4621      	mov	r1, r4
 800207c:	4291      	cmp	r1, r2
 800207e:	4629      	mov	r1, r5
 8002080:	eb71 0303 	sbcs.w	r3, r1, r3
 8002084:	d324      	bcc.n	80020d0 <main+0x4a0>
	    prevTimCAN = cntMilisec;
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <main+0x4f0>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    	//if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
    	//HAL_Delay(10);
    	valueCAN.valueInt[0] = RxData[0];
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <main+0x4f8>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <main+0x4fc>)
 8002096:	701a      	strb	r2, [r3, #0]
    	valueCAN.valueInt[1] = RxData[1];
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <main+0x4f8>)
 800209a:	785a      	ldrb	r2, [r3, #1]
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <main+0x4fc>)
 800209e:	705a      	strb	r2, [r3, #1]
    	valueCAN.valueInt[2] = RxData[2];
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <main+0x4f8>)
 80020a2:	789a      	ldrb	r2, [r3, #2]
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <main+0x4fc>)
 80020a6:	709a      	strb	r2, [r3, #2]
    	valueCAN.valueInt[3] = RxData[3];
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <main+0x4f8>)
 80020aa:	78da      	ldrb	r2, [r3, #3]
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <main+0x4fc>)
 80020ae:	70da      	strb	r2, [r3, #3]
    	numTurns = RxData[4];
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <main+0x4f8>)
 80020b2:	791a      	ldrb	r2, [r3, #4]
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <main+0x500>)
 80020b6:	701a      	strb	r2, [r3, #0]
    	printf("\n\rCAN ID: %lx", RxHeader.Identifier);
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <main+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <main+0x508>)
 80020c0:	f009 ff5c 	bl	800bf7c <iprintf>
    	//printf("\n\rAdvWheel360: %f  ", valueCAN.valuefloat);
    	//if (direction == true)
    	printf("\n\rNumber of turns: %d",numTurns );
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <main+0x500>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	481c      	ldr	r0, [pc, #112]	; (800213c <main+0x50c>)
 80020cc:	f009 ff56 	bl	800bf7c <iprintf>
    	//else
    	  //printf("direction: backwards");
	}


	if((cntMilisec - prevTimLED) >= intTimLED) {                    // Send this at a one second interval.
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <main+0x4f0>)
 80020d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80020da:	1a84      	subs	r4, r0, r2
 80020dc:	603c      	str	r4, [r7, #0]
 80020de:	eb61 0303 	sbc.w	r3, r1, r3
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ec:	4621      	mov	r1, r4
 80020ee:	4291      	cmp	r1, r2
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80020f6:	f4ff aea0 	bcc.w	8001e3a <main+0x20a>
	    prevTimLED = cntMilisec;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <main+0x4f0>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	    HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8002104:	2101      	movs	r1, #1
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <main+0x510>)
 8002108:	f002 fcc9 	bl	8004a9e <HAL_GPIO_TogglePin>
	stateHardCode = PathHardCodeUpdateState(cntMilisec);
 800210c:	e695      	b.n	8001e3a <main+0x20a>
 800210e:	bf00      	nop
 8002110:	24000700 	.word	0x24000700
 8002114:	0800f0e8 	.word	0x0800f0e8
 8002118:	24000030 	.word	0x24000030
 800211c:	240005e8 	.word	0x240005e8
 8002120:	240006f8 	.word	0x240006f8
 8002124:	24000430 	.word	0x24000430
 8002128:	240006e8 	.word	0x240006e8
 800212c:	24000678 	.word	0x24000678
 8002130:	240006f0 	.word	0x240006f0
 8002134:	240006c0 	.word	0x240006c0
 8002138:	0800f0f4 	.word	0x0800f0f4
 800213c:	0800f104 	.word	0x0800f104
 8002140:	58020400 	.word	0x58020400

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09c      	sub	sp, #112	; 0x70
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	224c      	movs	r2, #76	; 0x4c
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f009 fac8 	bl	800b6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2220      	movs	r2, #32
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f009 fac2 	bl	800b6e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002164:	2004      	movs	r0, #4
 8002166:	f003 fbe7 	bl	8005938 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <SystemClock_Config+0x104>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4a35      	ldr	r2, [pc, #212]	; (8002248 <SystemClock_Config+0x104>)
 8002174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <SystemClock_Config+0x104>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <SystemClock_Config+0x108>)
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	4a30      	ldr	r2, [pc, #192]	; (800224c <SystemClock_Config+0x108>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <SystemClock_Config+0x108>)
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800219c:	bf00      	nop
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <SystemClock_Config+0x104>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d1f8      	bne.n	800219e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <SystemClock_Config+0x10c>)
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f023 0303 	bic.w	r3, r3, #3
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <SystemClock_Config+0x10c>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80021bc:	2303      	movs	r3, #3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	2302      	movs	r3, #2
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80021d6:	2302      	movs	r3, #2
 80021d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80021da:	23f0      	movs	r3, #240	; 0xf0
 80021dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80021de:	2302      	movs	r3, #2
 80021e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80021e2:	2318      	movs	r3, #24
 80021e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021e6:	2302      	movs	r3, #2
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80021ea:	2308      	movs	r3, #8
 80021ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fbf6 	bl	80059ec <HAL_RCC_OscConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002206:	f000 fbbb 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220a:	233f      	movs	r3, #63	; 0x3f
 800220c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220e:	2303      	movs	r3, #3
 8002210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002216:	2308      	movs	r3, #8
 8002218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800221a:	2340      	movs	r3, #64	; 0x40
 800221c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002226:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002228:	2340      	movs	r3, #64	; 0x40
 800222a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2104      	movs	r1, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f809 	bl	8006248 <HAL_RCC_ClockConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800223c:	f000 fba0 	bl	8002980 <Error_Handler>
  }
}
 8002240:	bf00      	nop
 8002242:	3770      	adds	r7, #112	; 0x70
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	58024800 	.word	0x58024800
 800224c:	58000400 	.word	0x58000400
 8002250:	58024400 	.word	0x58024400

08002254 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <MX_FDCAN1_Init+0x15c>)
 800225e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002260:	4b52      	ldr	r3, [pc, #328]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800226e:	2200      	movs	r2, #0
 8002270:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002272:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002274:	2200      	movs	r2, #0
 8002276:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800227a:	2201      	movs	r2, #1
 800227c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800227e:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002280:	2202      	movs	r2, #2
 8002282:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002286:	2208      	movs	r2, #8
 8002288:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800228c:	221f      	movs	r2, #31
 800228e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002292:	2208      	movs	r2, #8
 8002294:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002298:	2201      	movs	r2, #1
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800229e:	2201      	movs	r2, #1
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80022a2:	4b42      	ldr	r3, [pc, #264]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80022a8:	4b40      	ldr	r3, [pc, #256]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80022b4:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022c8:	2204      	movs	r2, #4
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022d4:	2204      	movs	r2, #4
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022da:	2200      	movs	r2, #0
 80022dc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022e0:	2204      	movs	r2, #4
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <MX_FDCAN1_Init+0x158>)
 80022fe:	2204      	movs	r2, #4
 8002300:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002302:	482a      	ldr	r0, [pc, #168]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002304:	f001 fd56 	bl	8003db4 <HAL_FDCAN_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800230e:	f000 fb37 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 8002320:	2202      	movs	r2, #2
 8002322:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 8002326:	2201      	movs	r2, #1
 8002328:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE,
 8002336:	2301      	movs	r3, #1
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	2202      	movs	r2, #2
 800233e:	2102      	movs	r1, #2
 8002340:	481a      	ldr	r0, [pc, #104]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002342:	f001 ff8b 	bl	800425c <HAL_FDCAN_ConfigGlobalFilter>
  FDCAN_REJECT_REMOTE);
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002346:	491b      	ldr	r1, [pc, #108]	; (80023b4 <MX_FDCAN1_Init+0x160>)
 8002348:	4818      	ldr	r0, [pc, #96]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800234a:	f001 ff11 	bl	8004170 <HAL_FDCAN_ConfigFilter>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_FDCAN1_Init+0x104>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 8002354:	f000 fb14 	bl	8002980 <Error_Handler>
  }
  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002358:	4814      	ldr	r0, [pc, #80]	; (80023ac <MX_FDCAN1_Init+0x158>)
 800235a:	f001 ffac 	bl	80042b6 <HAL_FDCAN_Start>
  }
  /* Start Error */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800235e:	2200      	movs	r2, #0
 8002360:	2101      	movs	r1, #1
 8002362:	4812      	ldr	r0, [pc, #72]	; (80023ac <MX_FDCAN1_Init+0x158>)
 8002364:	f001 ffd2 	bl	800430c <HAL_FDCAN_ActivateNotification>
  }
  /* Notification Error */
	  /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 800236a:	f240 1211 	movw	r2, #273	; 0x111
 800236e:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 800237e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002382:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 800238c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002390:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 8002394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002398:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <MX_FDCAN1_Init+0x164>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
	  /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	24000390 	.word	0x24000390
 80023b0:	4000a000 	.word	0x4000a000
 80023b4:	2400067c 	.word	0x2400067c
 80023b8:	2400069c 	.word	0x2400069c

080023bc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MX_I2C4_Init+0x74>)
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <MX_I2C4_Init+0x78>)
 80023c4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00404C74;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_I2C4_Init+0x74>)
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <MX_I2C4_Init+0x7c>)
 80023ca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_I2C4_Init+0x74>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <MX_I2C4_Init+0x74>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_I2C4_Init+0x74>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <MX_I2C4_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <MX_I2C4_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_I2C4_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_I2C4_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80023f6:	480e      	ldr	r0, [pc, #56]	; (8002430 <MX_I2C4_Init+0x74>)
 80023f8:	f002 fb9a 	bl	8004b30 <HAL_I2C_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002402:	f000 fabd 	bl	8002980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002406:	2100      	movs	r1, #0
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <MX_I2C4_Init+0x74>)
 800240a:	f003 f9fd 	bl	8005808 <HAL_I2CEx_ConfigAnalogFilter>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002414:	f000 fab4 	bl	8002980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002418:	2100      	movs	r1, #0
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_I2C4_Init+0x74>)
 800241c:	f003 fa3f 	bl	800589e <HAL_I2CEx_ConfigDigitalFilter>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002426:	f000 faab 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000430 	.word	0x24000430
 8002434:	58001c00 	.word	0x58001c00
 8002438:	00404c74 	.word	0x00404c74

0800243c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <MX_SPI5_Init+0xa8>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002448:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800244c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002456:	2207      	movs	r2, #7
 8002458:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <MX_SPI5_Init+0xa4>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002468:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800246c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002470:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002474:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_SPI5_Init+0xa4>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <MX_SPI5_Init+0xa4>)
 800248a:	2200      	movs	r2, #0
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <MX_SPI5_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <MX_SPI5_Init+0xa4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <MX_SPI5_Init+0xa4>)
 80024ce:	f005 fdaf 	bl	8008030 <HAL_SPI_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 80024d8:	f000 fa52 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2400047c 	.word	0x2400047c
 80024e4:	40015000 	.word	0x40015000

080024e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	463b      	mov	r3, r7
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_TIM12_Init+0x6c>)
 80024fc:	4a16      	ldr	r2, [pc, #88]	; (8002558 <MX_TIM12_Init+0x70>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 23;
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_TIM12_Init+0x6c>)
 8002502:	2217      	movs	r2, #23
 8002504:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_TIM12_Init+0x6c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_TIM12_Init+0x6c>)
 800250e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002512:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_TIM12_Init+0x6c>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_TIM12_Init+0x6c>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <MX_TIM12_Init+0x6c>)
 8002522:	f006 fd2a 	bl	8008f7a <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 800252c:	f000 fa28 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002534:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_TIM12_Init+0x6c>)
 800253c:	f007 f90e 	bl	800975c <HAL_TIM_ConfigClockSource>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8002546:	f000 fa1b 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24000504 	.word	0x24000504
 8002558:	40001800 	.word	0x40001800

0800255c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b096      	sub	sp, #88	; 0x58
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800256e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	222c      	movs	r2, #44	; 0x2c
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f009 f8ad 	bl	800b6e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <MX_TIM15_Init+0x104>)
 8002590:	4a34      	ldr	r2, [pc, #208]	; (8002664 <MX_TIM15_Init+0x108>)
 8002592:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 239;
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <MX_TIM15_Init+0x104>)
 8002596:	22ef      	movs	r2, #239	; 0xef
 8002598:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <MX_TIM15_Init+0x104>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <MX_TIM15_Init+0x104>)
 80025a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80025a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <MX_TIM15_Init+0x104>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <MX_TIM15_Init+0x104>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <MX_TIM15_Init+0x104>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80025ba:	4829      	ldr	r0, [pc, #164]	; (8002660 <MX_TIM15_Init+0x104>)
 80025bc:	f006 fd34 	bl	8009028 <HAL_TIM_PWM_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f000 f9db 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80025d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025d6:	4619      	mov	r1, r3
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <MX_TIM15_Init+0x104>)
 80025da:	f007 fe1d 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80025e4:	f000 f9cc 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e8:	2360      	movs	r3, #96	; 0x60
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f0:	2300      	movs	r3, #0
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	4814      	ldr	r0, [pc, #80]	; (8002660 <MX_TIM15_Init+0x104>)
 800260e:	f006 ff91 	bl	8009534 <HAL_TIM_PWM_ConfigChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002618:	f000 f9b2 	bl	8002980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002634:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <MX_TIM15_Init+0x104>)
 8002644:	f007 fe76 	bl	800a334 <HAL_TIMEx_ConfigBreakDeadTime>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800264e:	f000 f997 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002652:	4803      	ldr	r0, [pc, #12]	; (8002660 <MX_TIM15_Init+0x104>)
 8002654:	f000 ffe2 	bl	800361c <HAL_TIM_MspPostInit>

}
 8002658:	bf00      	nop
 800265a:	3758      	adds	r7, #88	; 0x58
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	24000550 	.word	0x24000550
 8002664:	40014000 	.word	0x40014000

08002668 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b092      	sub	sp, #72	; 0x48
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002682:	463b      	mov	r3, r7
 8002684:	222c      	movs	r2, #44	; 0x2c
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f009 f82d 	bl	800b6e8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <MX_TIM16_Init+0xec>)
 8002690:	4a31      	ldr	r2, [pc, #196]	; (8002758 <MX_TIM16_Init+0xf0>)
 8002692:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 239;
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <MX_TIM16_Init+0xec>)
 8002696:	22ef      	movs	r2, #239	; 0xef
 8002698:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <MX_TIM16_Init+0xec>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <MX_TIM16_Init+0xec>)
 80026a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80026a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <MX_TIM16_Init+0xec>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <MX_TIM16_Init+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <MX_TIM16_Init+0xec>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026ba:	4826      	ldr	r0, [pc, #152]	; (8002754 <MX_TIM16_Init+0xec>)
 80026bc:	f006 fc5d 	bl	8008f7a <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80026c6:	f000 f95b 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80026ca:	4822      	ldr	r0, [pc, #136]	; (8002754 <MX_TIM16_Init+0xec>)
 80026cc:	f006 fcac 	bl	8009028 <HAL_TIM_PWM_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80026d6:	f000 f953 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026da:	2360      	movs	r3, #96	; 0x60
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e6:	2300      	movs	r3, #0
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4815      	ldr	r0, [pc, #84]	; (8002754 <MX_TIM16_Init+0xec>)
 8002700:	f006 ff18 	bl	8009534 <HAL_TIM_PWM_ConfigChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800270a:	f000 f939 	bl	8002980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002730:	463b      	mov	r3, r7
 8002732:	4619      	mov	r1, r3
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <MX_TIM16_Init+0xec>)
 8002736:	f007 fdfd 	bl	800a334 <HAL_TIMEx_ConfigBreakDeadTime>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002740:	f000 f91e 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <MX_TIM16_Init+0xec>)
 8002746:	f000 ff69 	bl	800361c <HAL_TIM_MspPostInit>

}
 800274a:	bf00      	nop
 800274c:	3748      	adds	r7, #72	; 0x48
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2400059c 	.word	0x2400059c
 8002758:	40014400 	.word	0x40014400

0800275c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002762:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <MX_USART3_UART_Init+0x94>)
 8002764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800276c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_USART3_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002782:	220c      	movs	r2, #12
 8002784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_USART3_UART_Init+0x90>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_USART3_UART_Init+0x90>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_USART3_UART_Init+0x90>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_USART3_UART_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027a4:	4811      	ldr	r0, [pc, #68]	; (80027ec <MX_USART3_UART_Init+0x90>)
 80027a6:	f007 fe61 	bl	800a46c <HAL_UART_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80027b0:	f000 f8e6 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b4:	2100      	movs	r1, #0
 80027b6:	480d      	ldr	r0, [pc, #52]	; (80027ec <MX_USART3_UART_Init+0x90>)
 80027b8:	f008 fe94 	bl	800b4e4 <HAL_UARTEx_SetTxFifoThreshold>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80027c2:	f000 f8dd 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c6:	2100      	movs	r1, #0
 80027c8:	4808      	ldr	r0, [pc, #32]	; (80027ec <MX_USART3_UART_Init+0x90>)
 80027ca:	f008 fec9 	bl	800b560 <HAL_UARTEx_SetRxFifoThreshold>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027d4:	f000 f8d4 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <MX_USART3_UART_Init+0x90>)
 80027da:	f008 fe4a 	bl	800b472 <HAL_UARTEx_DisableFifoMode>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027e4:	f000 f8cc 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	240005e8 	.word	0x240005e8
 80027f0:	40004800 	.word	0x40004800

080027f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800280a:	4b59      	ldr	r3, [pc, #356]	; (8002970 <MX_GPIO_Init+0x17c>)
 800280c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281a:	4b55      	ldr	r3, [pc, #340]	; (8002970 <MX_GPIO_Init+0x17c>)
 800281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <MX_GPIO_Init+0x17c>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282e:	4a50      	ldr	r2, [pc, #320]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002838:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <MX_GPIO_Init+0x17c>)
 800283a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284c:	4a48      	ldr	r2, [pc, #288]	; (8002970 <MX_GPIO_Init+0x17c>)
 800284e:	f043 0320 	orr.w	r3, r3, #32
 8002852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286a:	4a41      	ldr	r2, [pc, #260]	; (8002970 <MX_GPIO_Init+0x17c>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002888:	4a39      	ldr	r2, [pc, #228]	; (8002970 <MX_GPIO_Init+0x17c>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <MX_GPIO_Init+0x17c>)
 8002894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a6:	4a32      	ldr	r2, [pc, #200]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <MX_GPIO_Init+0x17c>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LLED_Pin|RLED_Pin, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	2148      	movs	r1, #72	; 0x48
 80028e0:	4824      	ldr	r0, [pc, #144]	; (8002974 <MX_GPIO_Init+0x180>)
 80028e2:	f002 f8c3 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4823      	ldr	r0, [pc, #140]	; (8002978 <MX_GPIO_Init+0x184>)
 80028ec:	f002 f8be 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nrf24_CE_Pin|nrf24_CSN_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	21c0      	movs	r1, #192	; 0xc0
 80028f4:	4821      	ldr	r0, [pc, #132]	; (800297c <MX_GPIO_Init+0x188>)
 80028f6:	f002 f8b9 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LLED_Pin RLED_Pin */
  GPIO_InitStruct.Pin = LLED_Pin|RLED_Pin;
 80028fa:	2348      	movs	r3, #72	; 0x48
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	2301      	movs	r3, #1
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	4818      	ldr	r0, [pc, #96]	; (8002974 <MX_GPIO_Init+0x180>)
 8002912:	f001 fefb 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800291a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <MX_GPIO_Init+0x188>)
 800292c:	f001 feee 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8002930:	2301      	movs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	480c      	ldr	r0, [pc, #48]	; (8002978 <MX_GPIO_Init+0x184>)
 8002948:	f001 fee0 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf24_CE_Pin nrf24_CSN_Pin */
  GPIO_InitStruct.Pin = nrf24_CE_Pin|nrf24_CSN_Pin;
 800294c:	23c0      	movs	r3, #192	; 0xc0
 800294e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	2301      	movs	r3, #1
 8002952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_GPIO_Init+0x188>)
 8002964:	f001 fed2 	bl	800470c <HAL_GPIO_Init>

}
 8002968:	bf00      	nop
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024400 	.word	0x58024400
 8002974:	58021000 	.word	0x58021000
 8002978:	58020400 	.word	0x58020400
 800297c:	58020800 	.word	0x58020800

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	e7fe      	b.n	8002988 <Error_Handler+0x8>
	...

0800298c <mpu6050_init>:
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.

void mpu6050_init(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af04      	add	r7, sp, #16
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	ed87 0a01 	vstr	s0, [r7, #4]
 800299e:	edc7 0a00 	vstr	s1, [r7]
 80029a2:	4603      	mov	r3, r0
 80029a4:	72fb      	strb	r3, [r7, #11]
 80029a6:	460b      	mov	r3, r1
 80029a8:	72bb      	strb	r3, [r7, #10]
 80029aa:	4613      	mov	r3, r2
 80029ac:	727b      	strb	r3, [r7, #9]
    uint8_t select =0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75bb      	strb	r3, [r7, #22]
	// Save values
	mpu6050_addr = addr << 1;
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <mpu6050_init+0xf0>)
 80029ba:	701a      	strb	r2, [r3, #0]
    tau_val = tau;
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <mpu6050_init+0xf4>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
    dt_val = dt;
 80029c2:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <mpu6050_init+0xf8>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6013      	str	r3, [r2, #0]


    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(I2Cx, (mpu6050_addr + 0), 1, I2C_TIMOUT_MS);
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <mpu6050_init+0xf0>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b299      	uxth	r1, r3
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	2201      	movs	r2, #1
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f002 fb69 	bl	80050ac <HAL_I2C_IsDeviceReady>
 80029da:	4603      	mov	r3, r0
 80029dc:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <mpu6050_init+0x60>
  	  printf("The device is OK\n\r");
 80029e4:	4828      	ldr	r0, [pc, #160]	; (8002a88 <mpu6050_init+0xfc>)
 80029e6:	f009 fac9 	bl	800bf7c <iprintf>
 80029ea:	e002      	b.n	80029f2 <mpu6050_init+0x66>
    }
    else {
  	  printf("The device is not ready \n\r");
 80029ec:	4827      	ldr	r0, [pc, #156]	; (8002a8c <mpu6050_init+0x100>)
 80029ee:	f009 fac5 	bl	800bf7c <iprintf>
    }

    // Quit sleep mode and enable temperature sensor
    select = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75bb      	strb	r3, [r7, #22]
    ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr + 0), PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <mpu6050_init+0xf0>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b299      	uxth	r1, r3
 80029fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2301      	movs	r3, #1
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f107 0316 	add.w	r3, r7, #22
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	226b      	movs	r2, #107	; 0x6b
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f002 f91d 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <mpu6050_init+0x9c>
  	  printf("Out of sleep mode and temp sensor on is OK\n\r");
 8002a20:	481b      	ldr	r0, [pc, #108]	; (8002a90 <mpu6050_init+0x104>)
 8002a22:	f009 faab 	bl	800bf7c <iprintf>
 8002a26:	e002      	b.n	8002a2e <mpu6050_init+0xa2>
    }
    else {
  	  printf("sleep mode and temp sensor error \n\r");
 8002a28:	481a      	ldr	r0, [pc, #104]	; (8002a94 <mpu6050_init+0x108>)
 8002a2a:	f009 faa7 	bl	800bf7c <iprintf>
    }

    // Set the full scale ranges
    ret = MPU_writeAccFullScaleRange(I2Cx, aScale);
 8002a2e:	7abb      	ldrb	r3, [r7, #10]
 8002a30:	4619      	mov	r1, r3
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f838 	bl	8002aa8 <MPU_writeAccFullScaleRange>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <mpu6050_init+0xbe>
  	  printf("Acc scale is OK\n\r");
 8002a42:	4815      	ldr	r0, [pc, #84]	; (8002a98 <mpu6050_init+0x10c>)
 8002a44:	f009 fa9a 	bl	800bf7c <iprintf>
 8002a48:	e002      	b.n	8002a50 <mpu6050_init+0xc4>
    }
    else {
  	  printf("Acc scale not ready \n\r");
 8002a4a:	4814      	ldr	r0, [pc, #80]	; (8002a9c <mpu6050_init+0x110>)
 8002a4c:	f009 fa96 	bl	800bf7c <iprintf>
    }


    ret = MPU_writeGyroFullScaleRange(I2Cx, gScale);
 8002a50:	7a7b      	ldrb	r3, [r7, #9]
 8002a52:	4619      	mov	r1, r3
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f8c3 	bl	8002be0 <MPU_writeGyroFullScaleRange>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK){
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d103      	bne.n	8002a6c <mpu6050_init+0xe0>
  	  printf("Gyro scale is OK\n\r");
 8002a64:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <mpu6050_init+0x114>)
 8002a66:	f009 fa89 	bl	800bf7c <iprintf>
    }
    else {
  	  printf("Gyro scale not ready \n\r");
    }

}
 8002a6a:	e002      	b.n	8002a72 <mpu6050_init+0xe6>
  	  printf("Gyro scale not ready \n\r");
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <mpu6050_init+0x118>)
 8002a6e:	f009 fa85 	bl	800bf7c <iprintf>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	24000740 	.word	0x24000740
 8002a80:	24000748 	.word	0x24000748
 8002a84:	24000744 	.word	0x24000744
 8002a88:	0800f11c 	.word	0x0800f11c
 8002a8c:	0800f130 	.word	0x0800f130
 8002a90:	0800f14c 	.word	0x0800f14c
 8002a94:	0800f17c 	.word	0x0800f17c
 8002a98:	0800f1a0 	.word	0x0800f1a0
 8002a9c:	0800f1b4 	.word	0x0800f1b4
 8002aa0:	0800f1cc 	.word	0x0800f1cc
 8002aa4:	0800f1e0 	.word	0x0800f1e0

08002aa8 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.

HAL_StatusTypeDef MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af04      	add	r7, sp, #16
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (aScale) {
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d86e      	bhi.n	8002b9c <MPU_writeAccFullScaleRange+0xf4>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <MPU_writeAccFullScaleRange+0x1c>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002b07 	.word	0x08002b07
 8002acc:	08002b39 	.word	0x08002b39
 8002ad0:	08002b6b 	.word	0x08002b6b
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <MPU_writeAccFullScaleRange+0x130>)
 8002ad6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002ada:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <MPU_writeAccFullScaleRange+0x134>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	2301      	movs	r3, #1
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f107 030e 	add.w	r3, r7, #14
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	221c      	movs	r2, #28
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f002 f8a8 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
        break;
 8002b04:	e063      	b.n	8002bce <MPU_writeAccFullScaleRange+0x126>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <MPU_writeAccFullScaleRange+0x130>)
 8002b08:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002b0c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <MPU_writeAccFullScaleRange+0x134>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b299      	uxth	r1, r3
 8002b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	f107 030e 	add.w	r3, r7, #14
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	221c      	movs	r2, #28
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f002 f88f 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
        break;
 8002b36:	e04a      	b.n	8002bce <MPU_writeAccFullScaleRange+0x126>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <MPU_writeAccFullScaleRange+0x130>)
 8002b3a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002b3e:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8002b40:	2310      	movs	r3, #16
 8002b42:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <MPU_writeAccFullScaleRange+0x134>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b299      	uxth	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	9302      	str	r3, [sp, #8]
 8002b50:	2301      	movs	r3, #1
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	f107 030e 	add.w	r3, r7, #14
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	221c      	movs	r2, #28
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f002 f876 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
        break;
 8002b68:	e031      	b.n	8002bce <MPU_writeAccFullScaleRange+0x126>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MPU_writeAccFullScaleRange+0x130>)
 8002b6c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002b70:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8002b72:	2318      	movs	r3, #24
 8002b74:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <MPU_writeAccFullScaleRange+0x134>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b299      	uxth	r1, r3
 8002b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	2301      	movs	r3, #1
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	f107 030e 	add.w	r3, r7, #14
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	221c      	movs	r2, #28
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f002 f85d 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9a:	e018      	b.n	8002bce <MPU_writeAccFullScaleRange+0x126>
    default:
        aScaleFactor = 8192.0;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MPU_writeAccFullScaleRange+0x130>)
 8002b9e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002ba2:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	73bb      	strb	r3, [r7, #14]
        ret =  HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <MPU_writeAccFullScaleRange+0x134>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b299      	uxth	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	f107 030e 	add.w	r3, r7, #14
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	221c      	movs	r2, #28
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f002 f844 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
        break;
 8002bcc:	bf00      	nop
    }
    return ret;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2400074c 	.word	0x2400074c
 8002bdc:	24000740 	.word	0x24000740

08002be0 <MPU_writeGyroFullScaleRange>:
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.


HAL_StatusTypeDef MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

    // Set the value
    switch (gScale)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d86a      	bhi.n	8002ccc <MPU_writeGyroFullScaleRange+0xec>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <MPU_writeGyroFullScaleRange+0x1c>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c3d 	.word	0x08002c3d
 8002c04:	08002c6d 	.word	0x08002c6d
 8002c08:	08002c9d 	.word	0x08002c9d
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <MPU_writeGyroFullScaleRange+0x128>)
 8002c0e:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <MPU_writeGyroFullScaleRange+0x12c>)
 8002c10:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <MPU_writeGyroFullScaleRange+0x130>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c20:	9302      	str	r3, [sp, #8]
 8002c22:	2301      	movs	r3, #1
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	f107 030e 	add.w	r3, r7, #14
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	221b      	movs	r2, #27
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f002 f80d 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3a:	e05f      	b.n	8002cfc <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <MPU_writeGyroFullScaleRange+0x128>)
 8002c3e:	4a35      	ldr	r2, [pc, #212]	; (8002d14 <MPU_writeGyroFullScaleRange+0x134>)
 8002c40:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002c42:	2308      	movs	r3, #8
 8002c44:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002c46:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <MPU_writeGyroFullScaleRange+0x130>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f107 030e 	add.w	r3, r7, #14
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	221b      	movs	r2, #27
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f001 fff5 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]
        break;
 8002c6a:	e047      	b.n	8002cfc <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8002c6c:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <MPU_writeGyroFullScaleRange+0x128>)
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <MPU_writeGyroFullScaleRange+0x138>)
 8002c70:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8002c72:	2310      	movs	r3, #16
 8002c74:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <MPU_writeGyroFullScaleRange+0x130>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b299      	uxth	r1, r3
 8002c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	2301      	movs	r3, #1
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	f107 030e 	add.w	r3, r7, #14
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	221b      	movs	r2, #27
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f001 ffdd 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9a:	e02f      	b.n	8002cfc <MPU_writeGyroFullScaleRange+0x11c>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MPU_writeGyroFullScaleRange+0x128>)
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <MPU_writeGyroFullScaleRange+0x13c>)
 8002ca0:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8002ca2:	2318      	movs	r3, #24
 8002ca4:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <MPU_writeGyroFullScaleRange+0x130>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b299      	uxth	r1, r3
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	f107 030e 	add.w	r3, r7, #14
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	221b      	movs	r2, #27
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 ffc5 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cca:	e017      	b.n	8002cfc <MPU_writeGyroFullScaleRange+0x11c>
    default:
        gScaleFactor = 65.5;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MPU_writeGyroFullScaleRange+0x128>)
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <MPU_writeGyroFullScaleRange+0x134>)
 8002cd0:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	73bb      	strb	r3, [r7, #14]
        ret = HAL_I2C_Mem_Write(I2Cx, (mpu6050_addr+0), GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <MPU_writeGyroFullScaleRange+0x130>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b299      	uxth	r1, r3
 8002cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce0:	9302      	str	r3, [sp, #8]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	f107 030e 	add.w	r3, r7, #14
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2301      	movs	r3, #1
 8002cee:	221b      	movs	r2, #27
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f001 ffad 	bl	8004c50 <HAL_I2C_Mem_Write>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cfa:	bf00      	nop
    }

  return ret;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	24000750 	.word	0x24000750
 8002d0c:	43030000 	.word	0x43030000
 8002d10:	24000740 	.word	0x24000740
 8002d14:	42830000 	.word	0x42830000
 8002d18:	42033333 	.word	0x42033333
 8002d1c:	41833333 	.word	0x41833333

08002d20 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.

void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af04      	add	r7, sp, #16
 8002d26:	6078      	str	r0, [r7, #4]
    uint8_t buf[14];



    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, (mpu6050_addr+1), ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <MPU_readRawData+0xa0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b299      	uxth	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	230e      	movs	r3, #14
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	223b      	movs	r2, #59	; 0x3b
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f002 f896 	bl	8004e78 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 8002d4c:	7a3b      	ldrb	r3, [r7, #8]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	7a7b      	ldrb	r3, [r7, #9]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002d5c:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8002d5e:	7abb      	ldrb	r3, [r7, #10]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002d6e:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8002d70:	7b3b      	ldrb	r3, [r7, #12]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002d80:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8002d82:	7c3b      	ldrb	r3, [r7, #16]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	7c7b      	ldrb	r3, [r7, #17]
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b21a      	sxth	r2, r3
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002d92:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8002d94:	7cbb      	ldrb	r3, [r7, #18]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b21a      	sxth	r2, r3
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002da4:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8002da6:	7d3b      	ldrb	r3, [r7, #20]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	7d7b      	ldrb	r3, [r7, #21]
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <MPU_readRawData+0xa4>)
 8002db6:	815a      	strh	r2, [r3, #10]

    //printf("X-axis accelerometer is ax,ay,az = [%f, %f, %f]\n\r", (float)rawData.ax, (float)rawData.ay, (float)rawData.az);
    //printf("X-axis gyroscope is     gx,gy,gz = [%f, %f, %f]\n\r", (float)rawData.gx,(float)rawData.gy,(float)rawData.gz);
}
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	24000740 	.word	0x24000740
 8002dc4:	24000710 	.word	0x24000710

08002dc8 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.

void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffa5 	bl	8002d20 <MPU_readRawData>

    gyroCal.x = 0;
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
    gyroCal.y = 0;
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
    gyroCal.z = 0;
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax / aScaleFactor;
 8002dee:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dfc:	4b55      	ldr	r3, [pc, #340]	; (8002f54 <MPU_readProcessedData+0x18c>)
 8002dfe:	ed93 7a00 	vldr	s14, [r3]
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e08:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = rawData.ay / aScaleFactor;
 8002e0c:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002e0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <MPU_readProcessedData+0x18c>)
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e24:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e26:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / aScaleFactor;
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e38:	4b46      	ldr	r3, [pc, #280]	; (8002f54 <MPU_readProcessedData+0x18c>)
 8002e3a:	ed93 7a00 	vldr	s14, [r3]
 8002e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e44:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002e4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e62:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002e76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e80:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <MPU_readProcessedData+0x188>)
 8002e86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <MPU_readProcessedData+0x184>)
 8002e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002e9e:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= gScaleFactor;
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002ea4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ea8:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <MPU_readProcessedData+0x194>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002eb4:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= gScaleFactor;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002eba:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <MPU_readProcessedData+0x194>)
 8002ec0:	ed93 7a00 	vldr	s14, [r3]
 8002ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002eca:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= gScaleFactor;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002ed0:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <MPU_readProcessedData+0x194>)
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002ee0:	edc3 7a05 	vstr	s15, [r3, #20]

    printf("\n\rX-axis accelerometer is ax,ay,az = [%f, %f, %f]", sensorData.ax, sensorData.ay, sensorData.az);
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ef4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002efa:	edd3 6a02 	vldr	s13, [r3, #8]
 8002efe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002f02:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f06:	ed8d 7b00 	vstr	d7, [sp]
 8002f0a:	ec53 2b15 	vmov	r2, r3, d5
 8002f0e:	4814      	ldr	r0, [pc, #80]	; (8002f60 <MPU_readProcessedData+0x198>)
 8002f10:	f009 f834 	bl	800bf7c <iprintf>
    printf("\n\rX-axis gyroscope is     gx,gy,gz = [%f, %f, %f]", sensorData.gx, sensorData.gy, sensorData.gz);
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002f16:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f1a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MPU_readProcessedData+0x190>)
 8002f2a:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f2e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002f32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f36:	ed8d 7b00 	vstr	d7, [sp]
 8002f3a:	ec53 2b15 	vmov	r2, r3, d5
 8002f3e:	4809      	ldr	r0, [pc, #36]	; (8002f64 <MPU_readProcessedData+0x19c>)
 8002f40:	f009 f81c 	bl	800bf7c <iprintf>
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	24000734 	.word	0x24000734
 8002f50:	24000710 	.word	0x24000710
 8002f54:	2400074c 	.word	0x2400074c
 8002f58:	2400071c 	.word	0x2400071c
 8002f5c:	24000750 	.word	0x24000750
 8002f60:	0800f1f8 	.word	0x0800f1f8
 8002f64:	0800f22c 	.word	0x0800f22c

08002f68 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002f70:	1d39      	adds	r1, r7, #4
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	2201      	movs	r2, #1
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <__io_putchar+0x20>)
 8002f7a:	f007 fac7 	bl	800a50c <HAL_UART_Transmit>
  return ch;
 8002f7e:	687b      	ldr	r3, [r7, #4]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	240005e8 	.word	0x240005e8

08002f8c <PathHardCodeUpdateState>:
static const uint32_t intCurv = 6000;

static uint32_t prevTim  = 0;
static uint32_t stateId = 0;

uint32_t PathHardCodeUpdateState(uint64_t cntMilisec) { // run periodically from main loop
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b08e      	sub	sp, #56	; 0x38
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
switch (CurrState) {
 8002f98:	4b74      	ldr	r3, [pc, #464]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	f200 80d0 	bhi.w	8003142 <PathHardCodeUpdateState+0x1b6>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <PathHardCodeUpdateState+0x1c>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fbd 	.word	0x08002fbd
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	0800305f 	.word	0x0800305f
 8002fb4:	080030c9 	.word	0x080030c9
 8002fb8:	08003135 	.word	0x08003135
   case START:
	  stopCar();
 8002fbc:	f000 f966 	bl	800328c <stopCar>
      setServoAngle(AngleFwd);   // Set the target steering angle
 8002fc0:	232a      	movs	r3, #42	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f92b 	bl	8003220 <setServoAngle>
      CurrState = PathFwd1;
 8002fca:	4b68      	ldr	r3, [pc, #416]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
      prevTim = cntMilisec;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	4a67      	ldr	r2, [pc, #412]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 8002fd4:	6013      	str	r3, [r2, #0]
      stateId = 1;
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
      setServoAngle(AngleFwd);   // Set the target steering angle
 8002fdc:	232a      	movs	r3, #42	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f91d 	bl	8003220 <setServoAngle>
      setEscSpeed(SpdFwd1);      // Low forward speed
 8002fe6:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f93b 	bl	8003268 <setEscSpeed>
      break;
 8002ff2:	e0b4      	b.n	800315e <PathHardCodeUpdateState+0x1d2>

   case PathFwd1:

      if((cntMilisec - prevTim) >= intFwd) {
 8002ff4:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ffe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003002:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003006:	4621      	mov	r1, r4
 8003008:	ebb2 0a01 	subs.w	sl, r2, r1
 800300c:	4629      	mov	r1, r5
 800300e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003012:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003016:	2300      	movs	r3, #0
 8003018:	623a      	str	r2, [r7, #32]
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003020:	460b      	mov	r3, r1
 8003022:	459a      	cmp	sl, r3
 8003024:	4613      	mov	r3, r2
 8003026:	eb7b 0303 	sbcs.w	r3, fp, r3
 800302a:	d314      	bcc.n	8003056 <PathHardCodeUpdateState+0xca>
         prevTim = cntMilisec;
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	4a50      	ldr	r2, [pc, #320]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 8003030:	6013      	str	r3, [r2, #0]
         CurrState = PathCurv;
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
         stateId = 2;
 8003038:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleCurv);   // Target steering angle for curv
 800303e:	2367      	movs	r3, #103	; 0x67
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8ec 	bl	8003220 <setServoAngle>
         setEscSpeed(SpdCurv);       // Low Curv speed
 8003048:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800304c:	b29b      	uxth	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f90a 	bl	8003268 <setEscSpeed>
      }
      else {
         CurrState = PathFwd1;
      }
      break;
 8003054:	e083      	b.n	800315e <PathHardCodeUpdateState+0x1d2>
         CurrState = PathFwd1;
 8003056:	4b45      	ldr	r3, [pc, #276]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
      break;
 800305c:	e07f      	b.n	800315e <PathHardCodeUpdateState+0x1d2>

   case PathCurv:
      if((cntMilisec - prevTim) >= intCurv) {
 800305e:	4b44      	ldr	r3, [pc, #272]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	61fa      	str	r2, [r7, #28]
 8003068:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800306c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003070:	4621      	mov	r1, r4
 8003072:	ebb2 0801 	subs.w	r8, r2, r1
 8003076:	4629      	mov	r1, r5
 8003078:	eb63 0901 	sbc.w	r9, r3, r1
 800307c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003080:	2300      	movs	r3, #0
 8003082:	613a      	str	r2, [r7, #16]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800308a:	460b      	mov	r3, r1
 800308c:	4598      	cmp	r8, r3
 800308e:	4613      	mov	r3, r2
 8003090:	eb79 0303 	sbcs.w	r3, r9, r3
 8003094:	d314      	bcc.n	80030c0 <PathHardCodeUpdateState+0x134>
         prevTim = cntMilisec;
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	4a35      	ldr	r2, [pc, #212]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 800309a:	6013      	str	r3, [r2, #0]
         CurrState = PathFwd2;
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 800309e:	2203      	movs	r2, #3
 80030a0:	701a      	strb	r2, [r3, #0]
         stateId = 3;
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 80030a4:	2203      	movs	r2, #3
 80030a6:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleFwd);   // Set the target steering angle
 80030a8:	232a      	movs	r3, #42	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f8b7 	bl	8003220 <setServoAngle>
         setEscSpeed(SpdFwd1);      // Low forward speed
 80030b2:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f8d5 	bl	8003268 <setEscSpeed>
      }
      else {
         CurrState = PathCurv;
      }
      break;
 80030be:	e04e      	b.n	800315e <PathHardCodeUpdateState+0x1d2>
         CurrState = PathCurv;
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
      break;
 80030c6:	e04a      	b.n	800315e <PathHardCodeUpdateState+0x1d2>

   case PathFwd2:


      if((cntMilisec - prevTim) >= intFwd1) {
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	60fa      	str	r2, [r7, #12]
 80030d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030d6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80030da:	4641      	mov	r1, r8
 80030dc:	1a54      	subs	r4, r2, r1
 80030de:	4649      	mov	r1, r9
 80030e0:	eb63 0501 	sbc.w	r5, r3, r1
 80030e4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80030e8:	2300      	movs	r3, #0
 80030ea:	603a      	str	r2, [r7, #0]
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030f2:	460b      	mov	r3, r1
 80030f4:	429c      	cmp	r4, r3
 80030f6:	4613      	mov	r3, r2
 80030f8:	eb75 0303 	sbcs.w	r3, r5, r3
 80030fc:	d316      	bcc.n	800312c <PathHardCodeUpdateState+0x1a0>
         prevTim = cntMilisec;
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <PathHardCodeUpdateState+0x1e4>)
 8003102:	6013      	str	r3, [r2, #0]
         CurrState = OFF;
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 8003106:	2204      	movs	r2, #4
 8003108:	701a      	strb	r2, [r3, #0]
         stateId = 4;
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 800310c:	2204      	movs	r2, #4
 800310e:	601a      	str	r2, [r3, #0]
         setServoAngle(AngleFwd);   // Set the target steering angle
 8003110:	232a      	movs	r3, #42	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f883 	bl	8003220 <setServoAngle>
         setEscSpeed(SpdFwd1);
 800311a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800311e:	b29b      	uxth	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f8a1 	bl	8003268 <setEscSpeed>
         stopCar();
 8003126:	f000 f8b1 	bl	800328c <stopCar>
      }
      else {
         CurrState = PathFwd2;
      }
      break;
 800312a:	e018      	b.n	800315e <PathHardCodeUpdateState+0x1d2>
         CurrState = PathFwd2;
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 800312e:	2203      	movs	r2, #3
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	e014      	b.n	800315e <PathHardCodeUpdateState+0x1d2>

   case OFF:
      stateId = 4;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 8003136:	2204      	movs	r2, #4
 8003138:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 800313c:	2204      	movs	r2, #4
 800313e:	701a      	strb	r2, [r3, #0]
      break;
 8003140:	e00d      	b.n	800315e <PathHardCodeUpdateState+0x1d2>

   default: // Error: invalid state
      stateId = 5;
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 8003144:	2205      	movs	r2, #5
 8003146:	601a      	str	r2, [r3, #0]
      CurrState = OFF;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <PathHardCodeUpdateState+0x1e0>)
 800314a:	2204      	movs	r2, #4
 800314c:	701a      	strb	r2, [r3, #0]
      setServoAngle(AngleFwd);   // Set the target steering angle
 800314e:	232a      	movs	r3, #42	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f864 	bl	8003220 <setServoAngle>
      stopCar();
 8003158:	f000 f898 	bl	800328c <stopCar>
      break;
 800315c:	bf00      	nop
    }

   return(stateId);
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <PathHardCodeUpdateState+0x1e8>)
 8003160:	681b      	ldr	r3, [r3, #0]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3738      	adds	r7, #56	; 0x38
 8003166:	46bd      	mov	sp, r7
 8003168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316c:	240007ec 	.word	0x240007ec
 8003170:	240007f0 	.word	0x240007f0
 8003174:	240007f4 	.word	0x240007f4

08003178 <initServoTim>:

void initServoTim(TIM_HandleTypeDef hTimServo){
 8003178:	b084      	sub	sp, #16
 800317a:	b580      	push	{r7, lr}
 800317c:	af00      	add	r7, sp, #0
 800317e:	f107 0c08 	add.w	ip, r7, #8
 8003182:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimServo = hTimServo;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <initServoTim+0x50>)
 8003188:	4618      	mov	r0, r3
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	224c      	movs	r2, #76	; 0x4c
 8003190:	4619      	mov	r1, r3
 8003192:	f008 fa9b 	bl	800b6cc <memcpy>

	if (HAL_TIM_PWM_Start(&HTimServo, TIM_CHANNEL_1) != HAL_OK) {
 8003196:	2100      	movs	r1, #0
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <initServoTim+0x50>)
 800319a:	f005 ff9d 	bl	80090d8 <HAL_TIM_PWM_Start>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <initServoTim+0x30>
		  Error_Handler();
 80031a4:	f7ff fbec 	bl	8002980 <Error_Handler>
	}
	__HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <initServoTim+0x50>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 80031b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031b6:	f000 fcbd 	bl	8003b34 <HAL_Delay>
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031c2:	b004      	add	sp, #16
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	240007a0 	.word	0x240007a0

080031cc <initESCTim>:

void initESCTim(TIM_HandleTypeDef hTimESC){
 80031cc:	b084      	sub	sp, #16
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	f107 0c08 	add.w	ip, r7, #8
 80031d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HTimESC = hTimESC;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <initESCTim+0x50>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	224c      	movs	r2, #76	; 0x4c
 80031e4:	4619      	mov	r1, r3
 80031e6:	f008 fa71 	bl	800b6cc <memcpy>

	if (HAL_TIM_PWM_Start(&HTimESC, TIM_CHANNEL_1) != HAL_OK) {
 80031ea:	2100      	movs	r1, #0
 80031ec:	480b      	ldr	r0, [pc, #44]	; (800321c <initESCTim+0x50>)
 80031ee:	f005 ff73 	bl	80090d8 <HAL_TIM_PWM_Start>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <initESCTim+0x30>
		  Error_Handler();
 80031f8:	f7ff fbc2 	bl	8002980 <Error_Handler>
	  }
	__HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, 1500); // 1.5 ms pulse width for neutral
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <initESCTim+0x50>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8003206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800320a:	f000 fc93 	bl	8003b34 <HAL_Delay>
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003216:	b004      	add	sp, #16
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	24000754 	.word	0x24000754

08003220 <setServoAngle>:

void setServoAngle(uint16_t angle) {
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
    // Map angle (0° to 180°) to pulse width (1 ms to 2 ms)
    uint16_t pulse_width = 1000 + (angle * 1000) / 180; // Scale angle to 1000-2000 μs
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <setServoAngle+0x40>)
 8003236:	fb82 1203 	smull	r1, r2, r2, r3
 800323a:	441a      	add	r2, r3
 800323c:	11d2      	asrs	r2, r2, #7
 800323e:	17db      	asrs	r3, r3, #31
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003248:	81fb      	strh	r3, [r7, #14]

    // Update PWM duty cycle
    __HAL_TIM_SET_COMPARE(&HTimServo, TIM_CHANNEL_1, pulse_width);
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <setServoAngle+0x44>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	89fa      	ldrh	r2, [r7, #14]
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	b60b60b7 	.word	0xb60b60b7
 8003264:	240007a0 	.word	0x240007a0

08003268 <setEscSpeed>:


void setEscSpeed(uint16_t pulse_width) {
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
    // Update PWM duty cycle for ESC
    __HAL_TIM_SET_COMPARE(&HTimESC, TIM_CHANNEL_1, pulse_width);
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <setEscSpeed+0x20>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	24000754 	.word	0x24000754

0800328c <stopCar>:

// Function to stop the car
void stopCar() {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
    setEscSpeed(1500); // Neutral position (no movement)
 8003290:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003294:	f7ff ffe8 	bl	8003268 <setEscSpeed>
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_MspInit+0x30>)
 80032a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032a8:	4a08      	ldr	r2, [pc, #32]	; (80032cc <HAL_MspInit+0x30>)
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_MspInit+0x30>)
 80032b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	58024400 	.word	0x58024400

080032d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b8      	sub	sp, #224	; 0xe0
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	22bc      	movs	r2, #188	; 0xbc
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f008 f9f9 	bl	800b6e8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a25      	ldr	r2, [pc, #148]	; (8003390 <HAL_FDCAN_MspInit+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d142      	bne.n	8003386 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003304:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800330a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fb25 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800331c:	f7ff fb30 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003322:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003332:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003346:	f043 0308 	orr.w	r3, r3, #8
 800334a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_FDCAN_MspInit+0xc4>)
 8003350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800335c:	2303      	movs	r3, #3
 800335e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003374:	2309      	movs	r3, #9
 8003376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800337a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800337e:	4619      	mov	r1, r3
 8003380:	4805      	ldr	r0, [pc, #20]	; (8003398 <HAL_FDCAN_MspInit+0xc8>)
 8003382:	f001 f9c3 	bl	800470c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003386:	bf00      	nop
 8003388:	37e0      	adds	r7, #224	; 0xe0
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	4000a000 	.word	0x4000a000
 8003394:	58024400 	.word	0x58024400
 8003398:	58020c00 	.word	0x58020c00

0800339c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b0b8      	sub	sp, #224	; 0xe0
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033b4:	f107 0310 	add.w	r3, r7, #16
 80033b8:	22bc      	movs	r2, #188	; 0xbc
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f008 f993 	bl	800b6e8 <memset>
  if(hi2c->Instance==I2C4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <HAL_I2C_MspInit+0xe4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d154      	bne.n	8003476 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80033cc:	2310      	movs	r3, #16
 80033ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80033d0:	2304      	movs	r3, #4
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 120;
 80033d4:	2378      	movs	r3, #120	; 0x78
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80033d8:	2302      	movs	r3, #2
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80033dc:	2302      	movs	r3, #2
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 12;
 80033e0:	230c      	movs	r3, #12
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80033e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 80033f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fa:	f107 0310 	add.w	r3, r7, #16
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 faae 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_MspInit+0x72>
    {
      Error_Handler();
 800340a:	f7ff fab9 	bl	8002980 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 8003420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800342c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003434:	2312      	movs	r3, #18
 8003436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003446:	2304      	movs	r3, #4
 8003448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800344c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003450:	4619      	mov	r1, r3
 8003452:	480d      	ldr	r0, [pc, #52]	; (8003488 <HAL_I2C_MspInit+0xec>)
 8003454:	f001 f95a 	bl	800470c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 800345a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_I2C_MspInit+0xe8>)
 800346a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003476:	bf00      	nop
 8003478:	37e0      	adds	r7, #224	; 0xe0
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	58001c00 	.word	0x58001c00
 8003484:	58024400 	.word	0x58024400
 8003488:	58021400 	.word	0x58021400

0800348c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b0b8      	sub	sp, #224	; 0xe0
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	22bc      	movs	r2, #188	; 0xbc
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f008 f91b 	bl	800b6e8 <memset>
  if(hspi->Instance==SPI5)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a25      	ldr	r2, [pc, #148]	; (800354c <HAL_SPI_MspInit+0xc0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d143      	bne.n	8003544 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80034bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80034c2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80034c6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fa47 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80034d8:	f7ff fa52 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 80034de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 80034e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 80034ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 80034fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_SPI_MspInit+0xc4>)
 800350c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003518:	f44f 7360 	mov.w	r3, #896	; 0x380
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003532:	2305      	movs	r3, #5
 8003534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003538:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800353c:	4619      	mov	r1, r3
 800353e:	4805      	ldr	r0, [pc, #20]	; (8003554 <HAL_SPI_MspInit+0xc8>)
 8003540:	f001 f8e4 	bl	800470c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003544:	bf00      	nop
 8003546:	37e0      	adds	r7, #224	; 0xe0
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40015000 	.word	0x40015000
 8003550:	58024400 	.word	0x58024400
 8003554:	58021400 	.word	0x58021400

08003558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_TIM_Base_MspInit+0x74>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d117      	bne.n	800359a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 800356c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003570:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 8003572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 800357c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	202b      	movs	r0, #43	; 0x2b
 800358e:	f000 fbdc 	bl	8003d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003592:	202b      	movs	r0, #43	; 0x2b
 8003594:	f000 fbf3 	bl	8003d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003598:	e013      	b.n	80035c2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_TIM_Base_MspInit+0x7c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_TIM_Base_MspInit+0x78>)
 80035b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40001800 	.word	0x40001800
 80035d0:	58024400 	.word	0x58024400
 80035d4:	40014400 	.word	0x40014400

080035d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <HAL_TIM_PWM_MspInit+0x3c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_TIM_PWM_MspInit+0x40>)
 80035ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f0:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_TIM_PWM_MspInit+0x40>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_TIM_PWM_MspInit+0x40>)
 80035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40014000 	.word	0x40014000
 8003618:	58024400 	.word	0x58024400

0800361c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_TIM_MspPostInit+0xb4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11f      	bne.n	800367e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003644:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003646:	f043 0310 	orr.w	r3, r3, #16
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800365c:	2320      	movs	r3, #32
 800365e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800366c:	2304      	movs	r3, #4
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4619      	mov	r1, r3
 8003676:	4818      	ldr	r0, [pc, #96]	; (80036d8 <HAL_TIM_MspPostInit+0xbc>)
 8003678:	f001 f848 	bl	800470c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800367c:	e023      	b.n	80036c6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM16)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIM_MspPostInit+0xc0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d11e      	bne.n	80036c6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368e:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 8003690:	f043 0320 	orr.w	r3, r3, #32
 8003694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_TIM_MspPostInit+0xb8>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036a6:	2340      	movs	r3, #64	; 0x40
 80036a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80036b6:	2301      	movs	r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4807      	ldr	r0, [pc, #28]	; (80036e0 <HAL_TIM_MspPostInit+0xc4>)
 80036c2:	f001 f823 	bl	800470c <HAL_GPIO_Init>
}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40014000 	.word	0x40014000
 80036d4:	58024400 	.word	0x58024400
 80036d8:	58021000 	.word	0x58021000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	58021400 	.word	0x58021400

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0b8      	sub	sp, #224	; 0xe0
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036fc:	f107 0310 	add.w	r3, r7, #16
 8003700:	22bc      	movs	r2, #188	; 0xbc
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f007 ffef 	bl	800b6e8 <memset>
  if(huart->Instance==USART3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_UART_MspInit+0xc0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d142      	bne.n	800379a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003714:	2302      	movs	r3, #2
 8003716:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800371e:	f107 0310 	add.w	r3, r7, #16
 8003722:	4618      	mov	r0, r3
 8003724:	f003 f91c 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800372e:	f7ff f927 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 8003734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 800373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 8003744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 8003752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_UART_MspInit+0xc4>)
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800376e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003788:	2307      	movs	r3, #7
 800378a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800378e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <HAL_UART_MspInit+0xc8>)
 8003796:	f000 ffb9 	bl	800470c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	37e0      	adds	r7, #224	; 0xe0
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40004800 	.word	0x40004800
 80037a8:	58024400 	.word	0x58024400
 80037ac:	58020c00 	.word	0x58020c00

080037b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <NMI_Handler+0x4>

080037b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ba:	e7fe      	b.n	80037ba <HardFault_Handler+0x4>

080037bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037c0:	e7fe      	b.n	80037c0 <MemManage_Handler+0x4>

080037c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037c6:	e7fe      	b.n	80037c6 <BusFault_Handler+0x4>

080037c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <UsageFault_Handler+0x4>

080037ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037fc:	f000 f97a 	bl	8003af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  cntMilisec++;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <SysTick_Handler+0x20>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	1c54      	adds	r4, r2, #1
 8003808:	f143 0500 	adc.w	r5, r3, #0
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <SysTick_Handler+0x20>)
 800380e:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	240006f8 	.word	0x240006f8

0800381c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003822:	f005 fd67 	bl	80092f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24000504 	.word	0x24000504

08003830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
	return 1;
 8003834:	2301      	movs	r3, #1
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_kill>:

int _kill(int pid, int sig)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800384a:	f007 ff15 	bl	800b678 <__errno>
 800384e:	4603      	mov	r3, r0
 8003850:	2216      	movs	r2, #22
 8003852:	601a      	str	r2, [r3, #0]
	return -1;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_exit>:

void _exit (int status)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ffe7 	bl	8003840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003872:	e7fe      	b.n	8003872 <_exit+0x12>

08003874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e00a      	b.n	800389c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003886:	f3af 8000 	nop.w
 800388a:	4601      	mov	r1, r0
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	60ba      	str	r2, [r7, #8]
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbf0      	blt.n	8003886 <_read+0x12>
	}

return len;
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e009      	b.n	80038d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	60ba      	str	r2, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fb4d 	bl	8002f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3301      	adds	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	dbf1      	blt.n	80038c0 <_write+0x12>
	}
	return len;
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_close>:

int _close(int file)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	return -1;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800390e:	605a      	str	r2, [r3, #4]
	return 0;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_isatty>:

int _isatty(int file)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	return 1;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	return 0;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003958:	4a14      	ldr	r2, [pc, #80]	; (80039ac <_sbrk+0x5c>)
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <_sbrk+0x60>)
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003964:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <_sbrk+0x64>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <_sbrk+0x64>)
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <_sbrk+0x68>)
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <_sbrk+0x64>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d207      	bcs.n	8003990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003980:	f007 fe7a 	bl	800b678 <__errno>
 8003984:	4603      	mov	r3, r0
 8003986:	220c      	movs	r2, #12
 8003988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295
 800398e:	e009      	b.n	80039a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <_sbrk+0x64>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <_sbrk+0x64>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <_sbrk+0x64>)
 80039a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	24080000 	.word	0x24080000
 80039b0:	00000400 	.word	0x00000400
 80039b4:	240007f8 	.word	0x240007f8
 80039b8:	24000810 	.word	0x24000810

080039bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039c0:	f7fc fe68 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039cc:	e002      	b.n	80039d4 <LoopCopyDataInit>

080039ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039d2:	3304      	adds	r3, #4

080039d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d8:	d3f9      	bcc.n	80039ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039dc:	4c0a      	ldr	r4, [pc, #40]	; (8003a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e0:	e001      	b.n	80039e6 <LoopFillZerobss>

080039e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e4:	3204      	adds	r2, #4

080039e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e8:	d3fb      	bcc.n	80039e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ea:	f007 fe4b 	bl	800b684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ee:	f7fe f91f 	bl	8001c30 <main>
  bx  lr
 80039f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80039f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039fc:	24000228 	.word	0x24000228
  ldr r2, =_sidata
 8003a00:	08010f98 	.word	0x08010f98
  ldr r2, =_sbss
 8003a04:	24000228 	.word	0x24000228
  ldr r4, =_ebss
 8003a08:	24000810 	.word	0x24000810

08003a0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a0c:	e7fe      	b.n	8003a0c <ADC3_IRQHandler>
	...

08003a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a16:	2003      	movs	r0, #3
 8003a18:	f000 f98c 	bl	8003d34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a1c:	f002 fdca 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_Init+0x68>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	4913      	ldr	r1, [pc, #76]	; (8003a7c <HAL_Init+0x6c>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_Init+0x68>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_Init+0x6c>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <HAL_Init+0x70>)
 8003a52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_Init+0x74>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5a:	200f      	movs	r0, #15
 8003a5c:	f000 f814 	bl	8003a88 <HAL_InitTick>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e002      	b.n	8003a70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a6a:	f7ff fc17 	bl	800329c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	0800f2ac 	.word	0x0800f2ac
 8003a80:	24000004 	.word	0x24000004
 8003a84:	24000000 	.word	0x24000000

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <HAL_InitTick+0x60>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e021      	b.n	8003ae0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_InitTick+0x64>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_InitTick+0x60>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f971 	bl	8003d9a <HAL_SYSTICK_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00e      	b.n	8003ae0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d80a      	bhi.n	8003ade <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f000 f93b 	bl	8003d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <HAL_InitTick+0x68>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	24000054 	.word	0x24000054
 8003aec:	24000000 	.word	0x24000000
 8003af0:	24000050 	.word	0x24000050

08003af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x20>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_IncTick+0x24>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_IncTick+0x24>)
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	24000054 	.word	0x24000054
 8003b18:	240007fc 	.word	0x240007fc

08003b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_GetTick+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	240007fc 	.word	0x240007fc

08003b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff ffee 	bl	8003b1c <HAL_GetTick>
 8003b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d005      	beq.n	8003b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_Delay+0x44>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b5a:	bf00      	nop
 8003b5c:	f7ff ffde 	bl	8003b1c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d8f7      	bhi.n	8003b5c <HAL_Delay+0x28>
  {
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	24000054 	.word	0x24000054

08003b7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_GetREVID+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0c1b      	lsrs	r3, r3, #16
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	5c001000 	.word	0x5c001000

08003b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00
 8003bd8:	05fa0000 	.word	0x05fa0000

08003bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4907      	ldr	r1, [pc, #28]	; (8003c30 <__NVIC_EnableIRQ+0x38>)
 8003c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db0a      	blt.n	8003c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	490c      	ldr	r1, [pc, #48]	; (8003c80 <__NVIC_SetPriority+0x4c>)
 8003c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	440b      	add	r3, r1
 8003c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c5c:	e00a      	b.n	8003c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <__NVIC_SetPriority+0x50>)
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	761a      	strb	r2, [r3, #24]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	bf28      	it	cs
 8003ca6:	2304      	movcs	r3, #4
 8003ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d902      	bls.n	8003cb8 <NVIC_EncodePriority+0x30>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3b03      	subs	r3, #3
 8003cb6:	e000      	b.n	8003cba <NVIC_EncodePriority+0x32>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	401a      	ands	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	4313      	orrs	r3, r2
         );
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d00:	d301      	bcc.n	8003d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d02:	2301      	movs	r3, #1
 8003d04:	e00f      	b.n	8003d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <SysTick_Config+0x40>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d0e:	210f      	movs	r1, #15
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f7ff ff8e 	bl	8003c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <SysTick_Config+0x40>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <SysTick_Config+0x40>)
 8003d20:	2207      	movs	r2, #7
 8003d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	e000e010 	.word	0xe000e010

08003d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff29 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d58:	f7ff ff40 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff90 	bl	8003c88 <NVIC_EncodePriority>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff5f 	bl	8003c34 <__NVIC_SetPriority>
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff33 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffa4 	bl	8003cf0 <SysTick_Config>
 8003da8:	4603      	mov	r3, r0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b098      	sub	sp, #96	; 0x60
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003dbc:	4a84      	ldr	r2, [pc, #528]	; (8003fd0 <HAL_FDCAN_Init+0x21c>)
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	224c      	movs	r2, #76	; 0x4c
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f007 fc80 	bl	800b6cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c6      	b.n	8004164 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7e      	ldr	r2, [pc, #504]	; (8003fd4 <HAL_FDCAN_Init+0x220>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d106      	bne.n	8003dee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003de8:	461a      	mov	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fa64 	bl	80032d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0210 	bic.w	r2, r2, #16
 8003e16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e18:	f7ff fe80 	bl	8003b1c <HAL_GetTick>
 8003e1c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e1e:	e014      	b.n	8003e4a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e20:	f7ff fe7c 	bl	8003b1c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b0a      	cmp	r3, #10
 8003e2c:	d90d      	bls.n	8003e4a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e18c      	b.n	8004164 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d0e3      	beq.n	8003e20 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7ff fe58 	bl	8003b1c <HAL_GetTick>
 8003e6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e6e:	e014      	b.n	8003e9a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e70:	f7ff fe54 	bl	8003b1c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b0a      	cmp	r3, #10
 8003e7c:	d90d      	bls.n	8003e9a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e164      	b.n	8004164 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0e3      	beq.n	8003e70 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0202 	orr.w	r2, r2, #2
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7c1b      	ldrb	r3, [r3, #16]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	619a      	str	r2, [r3, #24]
 8003ed0:	e007      	b.n	8003ee2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7c5b      	ldrb	r3, [r3, #17]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef8:	619a      	str	r2, [r3, #24]
 8003efa:	e007      	b.n	8003f0c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7c9b      	ldrb	r3, [r3, #18]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d108      	bne.n	8003f26 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f22:	619a      	str	r2, [r3, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f34:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003f5a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0210 	bic.w	r2, r2, #16
 8003f6a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d108      	bne.n	8003f86 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0204 	orr.w	r2, r2, #4
 8003f82:	619a      	str	r2, [r3, #24]
 8003f84:	e030      	b.n	8003fe8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d02c      	beq.n	8003fe8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d020      	beq.n	8003fd8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0210 	orr.w	r2, r2, #16
 8003fb4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d114      	bne.n	8003fe8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0220 	orr.w	r2, r2, #32
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	e00b      	b.n	8003fe8 <HAL_FDCAN_Init+0x234>
 8003fd0:	0800f260 	.word	0x0800f260
 8003fd4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ff8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004000:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	3b01      	subs	r3, #1
 800400a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004010:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004012:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401c:	d115      	bne.n	800404a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	3b01      	subs	r3, #1
 800402a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800402c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004036:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	3b01      	subs	r3, #1
 8004040:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004046:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004048:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	4413      	add	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d011      	beq.n	800409a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800407e:	f023 0107 	bic.w	r1, r3, #7
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	3360      	adds	r3, #96	; 0x60
 800408a:	443b      	add	r3, r7
 800408c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d011      	beq.n	80040c6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040aa:	f023 0107 	bic.w	r1, r3, #7
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	3360      	adds	r3, #96	; 0x60
 80040b6:	443b      	add	r3, r7
 80040b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3360      	adds	r3, #96	; 0x60
 80040e2:	443b      	add	r3, r7
 80040e4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80040e8:	011a      	lsls	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004104:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	3360      	adds	r3, #96	; 0x60
 8004110:	443b      	add	r3, r7
 8004112:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a11      	ldr	r2, [pc, #68]	; (800416c <HAL_FDCAN_Init+0x3b8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d107      	bne.n	800413c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f022 0203 	bic.w	r2, r2, #3
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f953 	bl	8004400 <FDCAN_CalcultateRamBlockAddresses>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004160:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004164:	4618      	mov	r0, r3
 8004166:	3760      	adds	r7, #96	; 0x60
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	4000a000 	.word	0x4000a000

08004170 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004180:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <HAL_FDCAN_ConfigFilter+0x1e>
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d157      	bne.n	800423e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d12b      	bne.n	80041ee <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b07      	cmp	r3, #7
 800419c:	d10d      	bne.n	80041ba <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80041aa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80041b0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80041b2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e00e      	b.n	80041d8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80041c6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80041ce:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e025      	b.n	800423a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	075a      	lsls	r2, r3, #29
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d103      	bne.n	800420c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e006      	b.n	800421a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	079a      	lsls	r2, r3, #30
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3304      	adds	r3, #4
 8004232:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e008      	b.n	8004250 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004244:	f043 0202 	orr.w	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d110      	bne.n	8004298 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800427e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004284:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e008      	b.n	80042aa <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d111      	bne.n	80042ee <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e008      	b.n	8004300 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f4:	f043 0204 	orr.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800431e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d002      	beq.n	800432c <HAL_FDCAN_ActivateNotification+0x20>
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d155      	bne.n	80043d8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	65da      	str	r2, [r3, #92]	; 0x5c
 800434a:	e014      	b.n	8004376 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d108      	bne.n	800436e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0202 	orr.w	r2, r2, #2
 800436a:	65da      	str	r2, [r3, #92]	; 0x5c
 800436c:	e003      	b.n	8004376 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2203      	movs	r2, #3
 8004374:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	430a      	orrs	r2, r1
 8004390:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_FDCAN_ActivateNotification+0xec>)
 80043bc:	4013      	ands	r3, r2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6553      	str	r3, [r2, #84]	; 0x54
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0f9b      	lsrs	r3, r3, #30
 80043ce:	490b      	ldr	r1, [pc, #44]	; (80043fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e008      	b.n	80043ea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043de:	f043 0202 	orr.w	r2, r3, #2
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	3fcfffff 	.word	0x3fcfffff
 80043fc:	4000a800 	.word	0x4000a800

08004400 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004416:	4ba7      	ldr	r3, [pc, #668]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004418:	4013      	ands	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	0091      	lsls	r1, r2, #2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	430b      	orrs	r3, r1
 8004424:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	041a      	lsls	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	4413      	add	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004456:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	0091      	lsls	r1, r2, #2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	430b      	orrs	r3, r1
 8004464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004498:	4b86      	ldr	r3, [pc, #536]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	0091      	lsls	r1, r2, #2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044b2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044e0:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	0091      	lsls	r1, r2, #2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044fa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	041a      	lsls	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	0091      	lsls	r1, r2, #2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4413      	add	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004556:	4013      	ands	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	0091      	lsls	r1, r2, #2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	430b      	orrs	r3, r1
 8004562:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800456e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	041a      	lsls	r2, r3, #16
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	4413      	add	r3, r2
 800458c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004598:	4013      	ands	r3, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0091      	lsls	r1, r2, #2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045b0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	041a      	lsls	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045cc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	061a      	lsls	r2, r3, #24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80045e6:	4413      	add	r3, r2
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	4a04      	ldr	r2, [pc, #16]	; (80046bc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d915      	bls.n	80046dc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80046b0:	e006      	b.n	80046c0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80046b2:	bf00      	nop
 80046b4:	ffff0003 	.word	0xffff0003
 80046b8:	10002b00 	.word	0x10002b00
 80046bc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e010      	b.n	80046fe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e005      	b.n	80046f0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3f3      	bcc.n	80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800471a:	4b89      	ldr	r3, [pc, #548]	; (8004940 <HAL_GPIO_Init+0x234>)
 800471c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800471e:	e194      	b.n	8004a4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8186 	beq.w	8004a44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d005      	beq.n	8004750 <HAL_GPIO_Init+0x44>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d130      	bne.n	80047b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004786:	2201      	movs	r2, #1
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0201 	and.w	r2, r3, #1
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d017      	beq.n	80047ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d123      	bne.n	8004842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	08da      	lsrs	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3208      	adds	r2, #8
 8004802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	220f      	movs	r2, #15
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	69b9      	ldr	r1, [r7, #24]
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2203      	movs	r2, #3
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0203 	and.w	r2, r3, #3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80e0 	beq.w	8004a44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004884:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <HAL_GPIO_Init+0x238>)
 8004886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800488a:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <HAL_GPIO_Init+0x238>)
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004894:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_GPIO_Init+0x238>)
 8004896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <HAL_GPIO_Init+0x23c>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_GPIO_Init+0x240>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d052      	beq.n	8004974 <HAL_GPIO_Init+0x268>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_GPIO_Init+0x244>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d031      	beq.n	800493a <HAL_GPIO_Init+0x22e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_GPIO_Init+0x248>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02b      	beq.n	8004936 <HAL_GPIO_Init+0x22a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <HAL_GPIO_Init+0x24c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d025      	beq.n	8004932 <HAL_GPIO_Init+0x226>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <HAL_GPIO_Init+0x250>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <HAL_GPIO_Init+0x222>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_GPIO_Init+0x254>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d019      	beq.n	800492a <HAL_GPIO_Init+0x21e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_GPIO_Init+0x258>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_GPIO_Init+0x21a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_GPIO_Init+0x25c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00d      	beq.n	8004922 <HAL_GPIO_Init+0x216>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_GPIO_Init+0x260>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <HAL_GPIO_Init+0x212>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_GPIO_Init+0x264>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_GPIO_Init+0x20e>
 8004916:	2309      	movs	r3, #9
 8004918:	e02d      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800491a:	230a      	movs	r3, #10
 800491c:	e02b      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800491e:	2308      	movs	r3, #8
 8004920:	e029      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 8004922:	2307      	movs	r3, #7
 8004924:	e027      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 8004926:	2306      	movs	r3, #6
 8004928:	e025      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800492a:	2305      	movs	r3, #5
 800492c:	e023      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800492e:	2304      	movs	r3, #4
 8004930:	e021      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 8004932:	2303      	movs	r3, #3
 8004934:	e01f      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 8004936:	2302      	movs	r3, #2
 8004938:	e01d      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800493a:	2301      	movs	r3, #1
 800493c:	e01b      	b.n	8004976 <HAL_GPIO_Init+0x26a>
 800493e:	bf00      	nop
 8004940:	58000080 	.word	0x58000080
 8004944:	58024400 	.word	0x58024400
 8004948:	58000400 	.word	0x58000400
 800494c:	58020000 	.word	0x58020000
 8004950:	58020400 	.word	0x58020400
 8004954:	58020800 	.word	0x58020800
 8004958:	58020c00 	.word	0x58020c00
 800495c:	58021000 	.word	0x58021000
 8004960:	58021400 	.word	0x58021400
 8004964:	58021800 	.word	0x58021800
 8004968:	58021c00 	.word	0x58021c00
 800496c:	58022000 	.word	0x58022000
 8004970:	58022400 	.word	0x58022400
 8004974:	2300      	movs	r3, #0
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	f002 0203 	and.w	r2, r2, #3
 800497c:	0092      	lsls	r2, r2, #2
 800497e:	4093      	lsls	r3, r2
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004986:	4938      	ldr	r1, [pc, #224]	; (8004a68 <HAL_GPIO_Init+0x35c>)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f47f ae63 	bne.w	8004720 <HAL_GPIO_Init+0x14>
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	3724      	adds	r7, #36	; 0x24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	58000400 	.word	0x58000400

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a88:	e003      	b.n	8004a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a8a:	887b      	ldrh	r3, [r7, #2]
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	400b      	ands	r3, r1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004adc:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <HAL_HSEM_FastTake+0x2c>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3320      	adds	r3, #32
 8004ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_HSEM_FastTake+0x30>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	58026400 	.word	0x58026400
 8004b04:	80000300 	.word	0x80000300

08004b08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b12:	4906      	ldr	r1, [pc, #24]	; (8004b2c <HAL_HSEM_Release+0x24>)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	58026400 	.word	0x58026400

08004b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07f      	b.n	8004c42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fe fc20 	bl	800339c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	; 0x24
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	e006      	b.n	8004bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d104      	bne.n	8004bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <HAL_I2C_Init+0x11c>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	02008000 	.word	0x02008000

08004c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	817b      	strh	r3, [r7, #10]
 8004c62:	460b      	mov	r3, r1
 8004c64:	813b      	strh	r3, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	f040 80f9 	bne.w	8004e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x34>
 8004c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ed      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Mem_Write+0x4e>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0e6      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fe ff39 	bl	8003b1c <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2319      	movs	r3, #25
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fbcb 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d1      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2221      	movs	r2, #33	; 0x21
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf0:	88f8      	ldrh	r0, [r7, #6]
 8004cf2:	893a      	ldrh	r2, [r7, #8]
 8004cf4:	8979      	ldrh	r1, [r7, #10]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fadb 	bl	80052bc <I2C_RequestMemoryWrite>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0a9      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2bff      	cmp	r3, #255	; 0xff
 8004d20:	d90e      	bls.n	8004d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fd33 	bl	80057a4 <I2C_TransferConfig>
 8004d3e:	e00f      	b.n	8004d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	8979      	ldrh	r1, [r7, #10]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fd22 	bl	80057a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fbb5 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e07b      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d034      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d130      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fb47 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e04d      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2bff      	cmp	r3, #255	; 0xff
 8004dd8:	d90e      	bls.n	8004df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fcd7 	bl	80057a4 <I2C_TransferConfig>
 8004df6:	e00f      	b.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	8979      	ldrh	r1, [r7, #10]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fcc6 	bl	80057a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d19e      	bne.n	8004d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fb94 	bl	8005554 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e01a      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_I2C_Mem_Write+0x224>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	fe00e800 	.word	0xfe00e800

08004e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	f040 80fd 	bne.w	800509a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_I2C_Mem_Read+0x34>
 8004ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0f1      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2C_Mem_Read+0x4e>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0ea      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ece:	f7fe fe25 	bl	8003b1c <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2319      	movs	r3, #25
 8004eda:	2201      	movs	r2, #1
 8004edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fab7 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0d5      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2222      	movs	r2, #34	; 0x22
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f18:	88f8      	ldrh	r0, [r7, #6]
 8004f1a:	893a      	ldrh	r2, [r7, #8]
 8004f1c:	8979      	ldrh	r1, [r7, #10]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4603      	mov	r3, r0
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa1b 	bl	8005364 <I2C_RequestMemoryRead>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0ad      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2bff      	cmp	r3, #255	; 0xff
 8004f48:	d90e      	bls.n	8004f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	8979      	ldrh	r1, [r7, #10]
 8004f58:	4b52      	ldr	r3, [pc, #328]	; (80050a4 <HAL_I2C_Mem_Read+0x22c>)
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fc1f 	bl	80057a4 <I2C_TransferConfig>
 8004f66:	e00f      	b.n	8004f88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	8979      	ldrh	r1, [r7, #10]
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_I2C_Mem_Read+0x22c>)
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fc0e 	bl	80057a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2104      	movs	r1, #4
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa5e 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07c      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d034      	beq.n	8005048 <HAL_I2C_Mem_Read+0x1d0>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d130      	bne.n	8005048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fa2f 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e04d      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2bff      	cmp	r3, #255	; 0xff
 8005008:	d90e      	bls.n	8005028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	22ff      	movs	r2, #255	; 0xff
 800500e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	b2da      	uxtb	r2, r3
 8005016:	8979      	ldrh	r1, [r7, #10]
 8005018:	2300      	movs	r3, #0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fbbf 	bl	80057a4 <I2C_TransferConfig>
 8005026:	e00f      	b.n	8005048 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	b2da      	uxtb	r2, r3
 8005038:	8979      	ldrh	r1, [r7, #10]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fbae 	bl	80057a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d19a      	bne.n	8004f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fa7c 	bl	8005554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e01a      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2220      	movs	r2, #32
 800506c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_I2C_Mem_Read+0x230>)
 800507a:	400b      	ands	r3, r1
 800507c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	80002400 	.word	0x80002400
 80050a8:	fe00e800 	.word	0xfe00e800

080050ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	460b      	mov	r3, r1
 80050ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	f040 80ef 	bne.w	80052ac <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d101      	bne.n	80050e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
 80050e0:	e0e5      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2C_IsDeviceReady+0x44>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0de      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <HAL_I2C_IsDeviceReady+0x6e>
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005114:	4b68      	ldr	r3, [pc, #416]	; (80052b8 <HAL_I2C_IsDeviceReady+0x20c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	e004      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x78>
 800511a:	897b      	ldrh	r3, [r7, #10]
 800511c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005120:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800512a:	f7fe fcf7 	bl	8003b1c <HAL_GetTick>
 800512e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b20      	cmp	r3, #32
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800515c:	e034      	b.n	80051c8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d01a      	beq.n	800519c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fe fcd9 	bl	8003b1c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <HAL_I2C_IsDeviceReady+0xd0>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e088      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_I2C_IsDeviceReady+0x128>
 80051ce:	7fbb      	ldrb	r3, [r7, #30]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0c4      	beq.n	800515e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d01a      	beq.n	8005218 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2120      	movs	r1, #32
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f931 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e058      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2220      	movs	r2, #32
 8005202:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e04a      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	2120      	movs	r1, #32
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f916 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e03d      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2210      	movs	r2, #16
 8005238:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2220      	movs	r2, #32
 8005240:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d118      	bne.n	800527c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005258:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	2120      	movs	r1, #32
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f8f5 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e01c      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2220      	movs	r2, #32
 800527a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	f63f af3d 	bhi.w	8005106 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	02002000 	.word	0x02002000

080052bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	460b      	mov	r3, r1
 80052d0:	813b      	strh	r3, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	8979      	ldrh	r1, [r7, #10]
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <I2C_RequestMemoryWrite+0xa4>)
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa5d 	bl	80057a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f8f0 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e02c      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	629a      	str	r2, [r3, #40]	; 0x28
 800530e:	e015      	b.n	800533c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b29b      	uxth	r3, r3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f8d6 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e012      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f884 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	80002000 	.word	0x80002000

08005364 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	460b      	mov	r3, r1
 8005378:	813b      	strh	r3, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	8979      	ldrh	r1, [r7, #10]
 8005384:	4b20      	ldr	r3, [pc, #128]	; (8005408 <I2C_RequestMemoryRead+0xa4>)
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa0a 	bl	80057a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	69b9      	ldr	r1, [r7, #24]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f89d 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e02c      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053aa:	893b      	ldrh	r3, [r7, #8]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
 80053b4:	e015      	b.n	80053e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053b6:	893b      	ldrh	r3, [r7, #8]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f883 	bl	80054d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e012      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2140      	movs	r1, #64	; 0x40
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f831 	bl	8005454 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	80002000 	.word	0x80002000

0800540c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d007      	beq.n	8005448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	619a      	str	r2, [r3, #24]
  }
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005464:	e022      	b.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d01e      	beq.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fe fb55 	bl	8003b1c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d113      	bne.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e00f      	b.n	80054cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d0cd      	beq.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054e0:	e02c      	b.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f870 	bl	80055cc <I2C_IsErrorOccurred>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02a      	b.n	800554c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d01e      	beq.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fe fb0d 	bl	8003b1c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e007      	b.n	800554c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d1cb      	bne.n	80054e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005560:	e028      	b.n	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f830 	bl	80055cc <I2C_IsErrorOccurred>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e026      	b.n	80055c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fe fad1 	bl	8003b1c <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d113      	bne.n	80055b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e007      	b.n	80055c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d1cf      	bne.n	8005562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d075      	beq.n	80056e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2210      	movs	r2, #16
 80055fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005600:	e056      	b.n	80056b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d052      	beq.n	80056b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fe fa87 	bl	8003b1c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_IsErrorOccurred+0x54>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d147      	bne.n	80056b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005642:	d12e      	bne.n	80056a2 <I2C_IsErrorOccurred+0xd6>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d02a      	beq.n	80056a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b20      	cmp	r3, #32
 8005650:	d027      	beq.n	80056a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005660:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005662:	f7fe fa5b 	bl	8003b1c <HAL_GetTick>
 8005666:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005668:	e01b      	b.n	80056a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800566a:	f7fe fa57 	bl	8003b1c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b19      	cmp	r3, #25
 8005676:	d914      	bls.n	80056a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d1dc      	bne.n	800566a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d003      	beq.n	80056c6 <I2C_IsErrorOccurred+0xfa>
 80056be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d09d      	beq.n	8005602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2220      	movs	r2, #32
 80056d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f043 0304 	orr.w	r3, r3, #4
 80056dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f043 0308 	orr.w	r3, r3, #8
 800571e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005756:	2b00      	cmp	r3, #0
 8005758:	d01c      	beq.n	8005794 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fe56 	bl	800540c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6859      	ldr	r1, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <I2C_IsErrorOccurred+0x1d4>)
 800576c:	400b      	ands	r3, r1
 800576e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	431a      	orrs	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	fe00e800 	.word	0xfe00e800

080057a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	817b      	strh	r3, [r7, #10]
 80057b2:	4613      	mov	r3, r2
 80057b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057b6:	897b      	ldrh	r3, [r7, #10]
 80057b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057bc:	7a7b      	ldrb	r3, [r7, #9]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	0d5b      	lsrs	r3, r3, #21
 80057de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <I2C_TransferConfig+0x60>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	43db      	mvns	r3, r3
 80057e8:	ea02 0103 	and.w	r1, r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	03ff63ff 	.word	0x03ff63ff

08005808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b20      	cmp	r3, #32
 800581c:	d138      	bne.n	8005890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005828:	2302      	movs	r3, #2
 800582a:	e032      	b.n	8005892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800585a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d139      	bne.n	8005928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058be:	2302      	movs	r3, #2
 80058c0:	e033      	b.n	800592a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2224      	movs	r2, #36	; 0x24
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	2b06      	cmp	r3, #6
 800594a:	d00a      	beq.n	8005962 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800594c:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d001      	beq.n	800595e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e03e      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800596a:	491f      	ldr	r1, [pc, #124]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4313      	orrs	r3, r2
 8005970:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005972:	f7fe f8d3 	bl	8003b1c <HAL_GetTick>
 8005976:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005978:	e009      	b.n	800598e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800597a:	f7fe f8cf 	bl	8003b1c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005988:	d901      	bls.n	800598e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e028      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d1ee      	bne.n	800597a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b1e      	cmp	r3, #30
 80059a0:	d008      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d005      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b1d      	cmp	r3, #29
 80059ac:	d002      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b2d      	cmp	r3, #45	; 0x2d
 80059b2:	d114      	bne.n	80059de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80059b4:	f7fe f8b2 	bl	8003b1c <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80059ba:	e009      	b.n	80059d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059bc:	f7fe f8ae 	bl	8003b1c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	d901      	bls.n	80059d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d1ee      	bne.n	80059bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024800 	.word	0x58024800

080059ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08c      	sub	sp, #48	; 0x30
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f000 bc1d 	b.w	800623a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8087 	beq.w	8005b1c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0e:	4b99      	ldr	r3, [pc, #612]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a18:	4b96      	ldr	r3, [pc, #600]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d007      	beq.n	8005a34 <HAL_RCC_OscConfig+0x48>
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	2b18      	cmp	r3, #24
 8005a28:	d110      	bne.n	8005a4c <HAL_RCC_OscConfig+0x60>
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d10b      	bne.n	8005a4c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	4b8f      	ldr	r3, [pc, #572]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d06c      	beq.n	8005b1a <HAL_RCC_OscConfig+0x12e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d168      	bne.n	8005b1a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e3f6      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d106      	bne.n	8005a64 <HAL_RCC_OscConfig+0x78>
 8005a56:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a86      	ldr	r2, [pc, #536]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e02e      	b.n	8005ac2 <HAL_RCC_OscConfig+0xd6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCC_OscConfig+0x9a>
 8005a6c:	4b81      	ldr	r3, [pc, #516]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a80      	ldr	r2, [pc, #512]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b7e      	ldr	r3, [pc, #504]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7d      	ldr	r2, [pc, #500]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e01d      	b.n	8005ac2 <HAL_RCC_OscConfig+0xd6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a8e:	d10c      	bne.n	8005aaa <HAL_RCC_OscConfig+0xbe>
 8005a90:	4b78      	ldr	r3, [pc, #480]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a77      	ldr	r2, [pc, #476]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b75      	ldr	r3, [pc, #468]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a74      	ldr	r2, [pc, #464]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e00b      	b.n	8005ac2 <HAL_RCC_OscConfig+0xd6>
 8005aaa:	4b72      	ldr	r3, [pc, #456]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a71      	ldr	r2, [pc, #452]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6e      	ldr	r2, [pc, #440]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d013      	beq.n	8005af2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fe f827 	bl	8003b1c <HAL_GetTick>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad2:	f7fe f823 	bl	8003b1c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b64      	cmp	r3, #100	; 0x64
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e3aa      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae4:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0xe6>
 8005af0:	e014      	b.n	8005b1c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fe f813 	bl	8003b1c <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005afa:	f7fe f80f 	bl	8003b1c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	; 0x64
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e396      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b0c:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x10e>
 8005b18:	e000      	b.n	8005b1c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80cb 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2a:	4b52      	ldr	r3, [pc, #328]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b32:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b34:	4b4f      	ldr	r3, [pc, #316]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCC_OscConfig+0x164>
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b18      	cmp	r3, #24
 8005b44:	d156      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x208>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d151      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b50:	4b48      	ldr	r3, [pc, #288]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_OscConfig+0x17c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e368      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b68:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 0219 	bic.w	r2, r3, #25
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	493f      	ldr	r1, [pc, #252]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b7a:	f7fd ffcf 	bl	8003b1c <HAL_GetTick>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fd ffcb 	bl	8003b1c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e352      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b94:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	f7fd ffec 	bl	8003b7c <HAL_GetREVID>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d817      	bhi.n	8005bde <HAL_RCC_OscConfig+0x1f2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d108      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x1dc>
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bbe:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bc6:	e07b      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	031b      	lsls	r3, r3, #12
 8005bd6:	4927      	ldr	r1, [pc, #156]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bdc:	e070      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	4921      	ldr	r1, [pc, #132]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf2:	e065      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d048      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 0219 	bic.w	r2, r3, #25
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	491a      	ldr	r1, [pc, #104]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fd ff85 	bl	8003b1c <HAL_GetTick>
 8005c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c16:	f7fd ff81 	bl	8003b1c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e308      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c28:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	f7fd ffa2 	bl	8003b7c <HAL_GetREVID>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d81a      	bhi.n	8005c78 <HAL_RCC_OscConfig+0x28c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d108      	bne.n	8005c5c <HAL_RCC_OscConfig+0x270>
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	e031      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	4902      	ldr	r1, [pc, #8]	; (8005c74 <HAL_RCC_OscConfig+0x288>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	604b      	str	r3, [r1, #4]
 8005c70:	e026      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
 8005c78:	4b9a      	ldr	r3, [pc, #616]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	4997      	ldr	r1, [pc, #604]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	604b      	str	r3, [r1, #4]
 8005c8c:	e018      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8e:	4b95      	ldr	r3, [pc, #596]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a94      	ldr	r2, [pc, #592]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fd ff3f 	bl	8003b1c <HAL_GetTick>
 8005c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fd ff3b 	bl	8003b1c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e2c2      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb4:	4b8b      	ldr	r3, [pc, #556]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a9 	beq.w	8005e20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cce:	4b85      	ldr	r3, [pc, #532]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cd8:	4b82      	ldr	r3, [pc, #520]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d007      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x308>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b18      	cmp	r3, #24
 8005ce8:	d13a      	bne.n	8005d60 <HAL_RCC_OscConfig+0x374>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d135      	bne.n	8005d60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cf4:	4b7b      	ldr	r3, [pc, #492]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_OscConfig+0x320>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e296      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d0c:	f7fd ff36 	bl	8003b7c <HAL_GetREVID>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d817      	bhi.n	8005d4a <HAL_RCC_OscConfig+0x35e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d108      	bne.n	8005d34 <HAL_RCC_OscConfig+0x348>
 8005d22:	4b70      	ldr	r3, [pc, #448]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d2a:	4a6e      	ldr	r2, [pc, #440]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d32:	e075      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d34:	4b6b      	ldr	r3, [pc, #428]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	069b      	lsls	r3, r3, #26
 8005d42:	4968      	ldr	r1, [pc, #416]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d48:	e06a      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d4a:	4b66      	ldr	r3, [pc, #408]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	4962      	ldr	r1, [pc, #392]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d5e:	e05f      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d042      	beq.n	8005dee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d68:	4b5e      	ldr	r3, [pc, #376]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5d      	ldr	r2, [pc, #372]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fd fed2 	bl	8003b1c <HAL_GetTick>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d7c:	f7fd fece 	bl	8003b1c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e255      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d8e:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d9a:	f7fd feef 	bl	8003b7c <HAL_GetREVID>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d817      	bhi.n	8005dd8 <HAL_RCC_OscConfig+0x3ec>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d108      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3d6>
 8005db0:	4b4c      	ldr	r3, [pc, #304]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005db8:	4a4a      	ldr	r2, [pc, #296]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dbe:	6053      	str	r3, [r2, #4]
 8005dc0:	e02e      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
 8005dc2:	4b48      	ldr	r3, [pc, #288]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	069b      	lsls	r3, r3, #26
 8005dd0:	4944      	ldr	r1, [pc, #272]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	604b      	str	r3, [r1, #4]
 8005dd6:	e023      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
 8005dd8:	4b42      	ldr	r3, [pc, #264]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	493f      	ldr	r1, [pc, #252]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60cb      	str	r3, [r1, #12]
 8005dec:	e018      	b.n	8005e20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dee:	4b3d      	ldr	r3, [pc, #244]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fd fe8f 	bl	8003b1c <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e02:	f7fd fe8b 	bl	8003b1c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e212      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e14:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f0      	bne.n	8005e02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d036      	beq.n	8005e9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d019      	beq.n	8005e68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e34:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fd fe6c 	bl	8003b1c <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e48:	f7fd fe68 	bl	8003b1c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e1ef      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e5a:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x45c>
 8005e66:	e018      	b.n	8005e9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e74:	f7fd fe52 	bl	8003b1c <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e7c:	f7fd fe4e 	bl	8003b1c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1d5      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e8e:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d039      	beq.n	8005f1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01c      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005eba:	f7fd fe2f 	bl	8003b1c <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ec2:	f7fd fe2b 	bl	8003b1c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e1b2      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_RCC_OscConfig+0x4f8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x4d6>
 8005ee0:	e01b      	b.n	8005f1a <HAL_RCC_OscConfig+0x52e>
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ee8:	4b9b      	ldr	r3, [pc, #620]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a9a      	ldr	r2, [pc, #616]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ef4:	f7fd fe12 	bl	8003b1c <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005efc:	f7fd fe0e 	bl	8003b1c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e195      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f0e:	4b92      	ldr	r3, [pc, #584]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8081 	beq.w	800602a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f28:	4b8c      	ldr	r3, [pc, #560]	; (800615c <HAL_RCC_OscConfig+0x770>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a8b      	ldr	r2, [pc, #556]	; (800615c <HAL_RCC_OscConfig+0x770>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f34:	f7fd fdf2 	bl	8003b1c <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f3c:	f7fd fdee 	bl	8003b1c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	; 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e175      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4e:	4b83      	ldr	r3, [pc, #524]	; (800615c <HAL_RCC_OscConfig+0x770>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d106      	bne.n	8005f70 <HAL_RCC_OscConfig+0x584>
 8005f62:	4b7d      	ldr	r3, [pc, #500]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a7c      	ldr	r2, [pc, #496]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	e02d      	b.n	8005fcc <HAL_RCC_OscConfig+0x5e0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <HAL_RCC_OscConfig+0x5a6>
 8005f78:	4b77      	ldr	r3, [pc, #476]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	4a76      	ldr	r2, [pc, #472]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	6713      	str	r3, [r2, #112]	; 0x70
 8005f84:	4b74      	ldr	r3, [pc, #464]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a73      	ldr	r2, [pc, #460]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f8a:	f023 0304 	bic.w	r3, r3, #4
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	e01c      	b.n	8005fcc <HAL_RCC_OscConfig+0x5e0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x5c8>
 8005f9a:	4b6f      	ldr	r3, [pc, #444]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	4a6e      	ldr	r2, [pc, #440]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa6:	4b6c      	ldr	r3, [pc, #432]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a6b      	ldr	r2, [pc, #428]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0x5e0>
 8005fb4:	4b68      	ldr	r3, [pc, #416]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	4a67      	ldr	r2, [pc, #412]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc0:	4b65      	ldr	r3, [pc, #404]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a64      	ldr	r2, [pc, #400]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005fc6:	f023 0304 	bic.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fd fda2 	bl	8003b1c <HAL_GetTick>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fd fd9e 	bl	8003b1c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e123      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff2:	4b59      	ldr	r3, [pc, #356]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ee      	beq.n	8005fdc <HAL_RCC_OscConfig+0x5f0>
 8005ffe:	e014      	b.n	800602a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fd8c 	bl	8003b1c <HAL_GetTick>
 8006004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006006:	e00a      	b.n	800601e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fd fd88 	bl	8003b1c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e10d      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601e:	4b4e      	ldr	r3, [pc, #312]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ee      	bne.n	8006008 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8102 	beq.w	8006238 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006034:	4b48      	ldr	r3, [pc, #288]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800603c:	2b18      	cmp	r3, #24
 800603e:	f000 80bd 	beq.w	80061bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b02      	cmp	r3, #2
 8006048:	f040 809e 	bne.w	8006188 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604c:	4b42      	ldr	r3, [pc, #264]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a41      	ldr	r2, [pc, #260]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fd fd60 	bl	8003b1c <HAL_GetTick>
 800605c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006060:	f7fd fd5c 	bl	8003b1c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e0e3      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006072:	4b39      	ldr	r3, [pc, #228]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607e:	4b36      	ldr	r3, [pc, #216]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006082:	4b37      	ldr	r3, [pc, #220]	; (8006160 <HAL_RCC_OscConfig+0x774>)
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800608e:	0112      	lsls	r2, r2, #4
 8006090:	430a      	orrs	r2, r1
 8006092:	4931      	ldr	r1, [pc, #196]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	628b      	str	r3, [r1, #40]	; 0x28
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	3b01      	subs	r3, #1
 800609e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	3b01      	subs	r3, #1
 80060a8:	025b      	lsls	r3, r3, #9
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	3b01      	subs	r3, #1
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	3b01      	subs	r3, #1
 80060c2:	061b      	lsls	r3, r3, #24
 80060c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060c8:	4923      	ldr	r1, [pc, #140]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80060ce:	4b22      	ldr	r3, [pc, #136]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060da:	4b1f      	ldr	r3, [pc, #124]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060de:	4b21      	ldr	r3, [pc, #132]	; (8006164 <HAL_RCC_OscConfig+0x778>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060e6:	00d2      	lsls	r2, r2, #3
 80060e8:	491b      	ldr	r1, [pc, #108]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060ee:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	f023 020c 	bic.w	r2, r3, #12
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	4917      	ldr	r1, [pc, #92]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006100:	4b15      	ldr	r3, [pc, #84]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	f023 0202 	bic.w	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	4912      	ldr	r1, [pc, #72]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	4a10      	ldr	r2, [pc, #64]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800611c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	4a07      	ldr	r2, [pc, #28]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <HAL_RCC_OscConfig+0x76c>)
 8006148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fd fce5 	bl	8003b1c <HAL_GetTick>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006154:	e011      	b.n	800617a <HAL_RCC_OscConfig+0x78e>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	58024800 	.word	0x58024800
 8006160:	fffffc0c 	.word	0xfffffc0c
 8006164:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006168:	f7fd fcd8 	bl	8003b1c <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e05f      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800617a:	4b32      	ldr	r3, [pc, #200]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x77c>
 8006186:	e057      	b.n	8006238 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006188:	4b2e      	ldr	r3, [pc, #184]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 800618e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006194:	f7fd fcc2 	bl	8003b1c <HAL_GetTick>
 8006198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619c:	f7fd fcbe 	bl	8003b1c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e045      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ae:	4b25      	ldr	r3, [pc, #148]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x7b0>
 80061ba:	e03d      	b.n	8006238 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061bc:	4b21      	ldr	r3, [pc, #132]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061c2:	4b20      	ldr	r3, [pc, #128]	; (8006244 <HAL_RCC_OscConfig+0x858>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d031      	beq.n	8006234 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f003 0203 	and.w	r2, r3, #3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061da:	429a      	cmp	r2, r3
 80061dc:	d12a      	bne.n	8006234 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d122      	bne.n	8006234 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d11a      	bne.n	8006234 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	0a5b      	lsrs	r3, r3, #9
 8006202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d111      	bne.n	8006234 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0c1b      	lsrs	r3, r3, #16
 8006214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d108      	bne.n	8006234 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400

08006248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e19c      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800625c:	4b8a      	ldr	r3, [pc, #552]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d910      	bls.n	800628c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b87      	ldr	r3, [pc, #540]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 020f 	bic.w	r2, r3, #15
 8006272:	4985      	ldr	r1, [pc, #532]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b83      	ldr	r3, [pc, #524]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e184      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	4b7b      	ldr	r3, [pc, #492]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d908      	bls.n	80062ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062a8:	4b78      	ldr	r3, [pc, #480]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4975      	ldr	r1, [pc, #468]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	4b70      	ldr	r3, [pc, #448]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d908      	bls.n	80062e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062d6:	4b6d      	ldr	r3, [pc, #436]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	496a      	ldr	r1, [pc, #424]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	4b64      	ldr	r3, [pc, #400]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006300:	429a      	cmp	r2, r3
 8006302:	d908      	bls.n	8006316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006304:	4b61      	ldr	r3, [pc, #388]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	495e      	ldr	r1, [pc, #376]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006312:	4313      	orrs	r3, r2
 8006314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	4b59      	ldr	r3, [pc, #356]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800632e:	429a      	cmp	r2, r3
 8006330:	d908      	bls.n	8006344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006332:	4b56      	ldr	r3, [pc, #344]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	4953      	ldr	r1, [pc, #332]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006340:	4313      	orrs	r3, r2
 8006342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d010      	beq.n	8006372 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	4b4d      	ldr	r3, [pc, #308]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	429a      	cmp	r2, r3
 800635e:	d908      	bls.n	8006372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006360:	4b4a      	ldr	r3, [pc, #296]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f023 020f 	bic.w	r2, r3, #15
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4947      	ldr	r1, [pc, #284]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800636e:	4313      	orrs	r3, r2
 8006370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d055      	beq.n	800642a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800637e:	4b43      	ldr	r3, [pc, #268]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	4940      	ldr	r1, [pc, #256]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800638c:	4313      	orrs	r3, r2
 800638e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d107      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006398:	4b3c      	ldr	r3, [pc, #240]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d121      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0f6      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b0:	4b36      	ldr	r3, [pc, #216]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d115      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0ea      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d107      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0de      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d8:	4b2c      	ldr	r3, [pc, #176]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0d6      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063e8:	4b28      	ldr	r3, [pc, #160]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f023 0207 	bic.w	r2, r3, #7
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4925      	ldr	r1, [pc, #148]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fa:	f7fd fb8f 	bl	8003b1c <HAL_GetTick>
 80063fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006400:	e00a      	b.n	8006418 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006402:	f7fd fb8b 	bl	8003b1c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	4293      	cmp	r3, r2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e0be      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	429a      	cmp	r2, r3
 8006428:	d1eb      	bne.n	8006402 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	4b14      	ldr	r3, [pc, #80]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	429a      	cmp	r2, r3
 8006444:	d208      	bcs.n	8006458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f023 020f 	bic.w	r2, r3, #15
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	490e      	ldr	r1, [pc, #56]	; (800648c <HAL_RCC_ClockConfig+0x244>)
 8006454:	4313      	orrs	r3, r2
 8006456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d214      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f023 020f 	bic.w	r2, r3, #15
 800646e:	4906      	ldr	r1, [pc, #24]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <HAL_RCC_ClockConfig+0x240>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e086      	b.n	8006596 <HAL_RCC_ClockConfig+0x34e>
 8006488:	52002000 	.word	0x52002000
 800648c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d208      	bcs.n	80064be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064ac:	4b3c      	ldr	r3, [pc, #240]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	4939      	ldr	r1, [pc, #228]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d208      	bcs.n	80064ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	492e      	ldr	r1, [pc, #184]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d010      	beq.n	800651a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006504:	429a      	cmp	r2, r3
 8006506:	d208      	bcs.n	800651a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	4922      	ldr	r1, [pc, #136]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 8006516:	4313      	orrs	r3, r2
 8006518:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d010      	beq.n	8006548 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006532:	429a      	cmp	r2, r3
 8006534:	d208      	bcs.n	8006548 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	4917      	ldr	r1, [pc, #92]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 8006544:	4313      	orrs	r3, r2
 8006546:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006548:	f000 f834 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	4912      	ldr	r1, [pc, #72]	; (80065a4 <HAL_RCC_ClockConfig+0x35c>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
 8006564:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_RCC_ClockConfig+0x358>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <HAL_RCC_ClockConfig+0x35c>)
 8006570:	5cd3      	ldrb	r3, [r2, r3]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_RCC_ClockConfig+0x360>)
 800657e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <HAL_RCC_ClockConfig+0x364>)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCC_ClockConfig+0x368>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fd fa7c 	bl	8003a88 <HAL_InitTick>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	58024400 	.word	0x58024400
 80065a4:	0800f2ac 	.word	0x0800f2ac
 80065a8:	24000004 	.word	0x24000004
 80065ac:	24000000 	.word	0x24000000
 80065b0:	24000050 	.word	0x24000050

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	; 0x24
 80065b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065ba:	4bb3      	ldr	r3, [pc, #716]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c2:	2b18      	cmp	r3, #24
 80065c4:	f200 8155 	bhi.w	8006872 <HAL_RCC_GetSysClockFreq+0x2be>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006635 	.word	0x08006635
 80065d4:	08006873 	.word	0x08006873
 80065d8:	08006873 	.word	0x08006873
 80065dc:	08006873 	.word	0x08006873
 80065e0:	08006873 	.word	0x08006873
 80065e4:	08006873 	.word	0x08006873
 80065e8:	08006873 	.word	0x08006873
 80065ec:	08006873 	.word	0x08006873
 80065f0:	0800665b 	.word	0x0800665b
 80065f4:	08006873 	.word	0x08006873
 80065f8:	08006873 	.word	0x08006873
 80065fc:	08006873 	.word	0x08006873
 8006600:	08006873 	.word	0x08006873
 8006604:	08006873 	.word	0x08006873
 8006608:	08006873 	.word	0x08006873
 800660c:	08006873 	.word	0x08006873
 8006610:	08006661 	.word	0x08006661
 8006614:	08006873 	.word	0x08006873
 8006618:	08006873 	.word	0x08006873
 800661c:	08006873 	.word	0x08006873
 8006620:	08006873 	.word	0x08006873
 8006624:	08006873 	.word	0x08006873
 8006628:	08006873 	.word	0x08006873
 800662c:	08006873 	.word	0x08006873
 8006630:	08006667 	.word	0x08006667
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006634:	4b94      	ldr	r3, [pc, #592]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006640:	4b91      	ldr	r3, [pc, #580]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	08db      	lsrs	r3, r3, #3
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	4a90      	ldr	r2, [pc, #576]	; (800688c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
 8006650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006652:	e111      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006654:	4b8d      	ldr	r3, [pc, #564]	; (800688c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006656:	61bb      	str	r3, [r7, #24]
    break;
 8006658:	e10e      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800665a:	4b8d      	ldr	r3, [pc, #564]	; (8006890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800665c:	61bb      	str	r3, [r7, #24]
    break;
 800665e:	e10b      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006660:	4b8c      	ldr	r3, [pc, #560]	; (8006894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006662:	61bb      	str	r3, [r7, #24]
    break;
 8006664:	e108      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006666:	4b88      	ldr	r3, [pc, #544]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006670:	4b85      	ldr	r3, [pc, #532]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800667c:	4b82      	ldr	r3, [pc, #520]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006686:	4b80      	ldr	r3, [pc, #512]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668a:	08db      	lsrs	r3, r3, #3
 800668c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 80e1 	beq.w	800686c <HAL_RCC_GetSysClockFreq+0x2b8>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	f000 8083 	beq.w	80067b8 <HAL_RCC_GetSysClockFreq+0x204>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	f200 80a1 	bhi.w	80067fc <HAL_RCC_GetSysClockFreq+0x248>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x114>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d056      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066c6:	e099      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c8:	4b6f      	ldr	r3, [pc, #444]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02d      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d4:	4b6c      	ldr	r3, [pc, #432]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	4a6b      	ldr	r2, [pc, #428]	; (800688c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
 80066e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b62      	ldr	r3, [pc, #392]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006712:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800672e:	e087      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800689c <HAL_RCC_GetSysClockFreq+0x2e8>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a02 	vldr	s12, [r7, #8]
 8006756:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006772:	e065      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80068a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b40      	ldr	r3, [pc, #256]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a02 	vldr	s12, [r7, #8]
 800679a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b6:	e043      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80068a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067da:	ed97 6a02 	vldr	s12, [r7, #8]
 80067de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067fa:	e021      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006822:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800683e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	0a5b      	lsrs	r3, r3, #9
 8006846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684a:	3301      	adds	r3, #1
 800684c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006858:	edd7 6a07 	vldr	s13, [r7, #28]
 800685c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006864:	ee17 3a90 	vmov	r3, s15
 8006868:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800686a:	e005      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
    break;
 8006870:	e002      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006874:	61bb      	str	r3, [r7, #24]
    break;
 8006876:	bf00      	nop
  }

  return sysclockfreq;
 8006878:	69bb      	ldr	r3, [r7, #24]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3724      	adds	r7, #36	; 0x24
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	58024400 	.word	0x58024400
 800688c:	03d09000 	.word	0x03d09000
 8006890:	003d0900 	.word	0x003d0900
 8006894:	007a1200 	.word	0x007a1200
 8006898:	46000000 	.word	0x46000000
 800689c:	4c742400 	.word	0x4c742400
 80068a0:	4a742400 	.word	0x4a742400
 80068a4:	4af42400 	.word	0x4af42400

080068a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068ae:	f7ff fe81 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	0a1b      	lsrs	r3, r3, #8
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	490f      	ldr	r1, [pc, #60]	; (80068fc <HAL_RCC_GetHCLKFreq+0x54>)
 80068c0:	5ccb      	ldrb	r3, [r1, r3]
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	4a09      	ldr	r2, [pc, #36]	; (80068fc <HAL_RCC_GetHCLKFreq+0x54>)
 80068d6:	5cd3      	ldrb	r3, [r2, r3]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	4a07      	ldr	r2, [pc, #28]	; (8006900 <HAL_RCC_GetHCLKFreq+0x58>)
 80068e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068e6:	4a07      	ldr	r2, [pc, #28]	; (8006904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068ec:	4b04      	ldr	r3, [pc, #16]	; (8006900 <HAL_RCC_GetHCLKFreq+0x58>)
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	58024400 	.word	0x58024400
 80068fc:	0800f2ac 	.word	0x0800f2ac
 8006900:	24000004 	.word	0x24000004
 8006904:	24000000 	.word	0x24000000

08006908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800690c:	f7ff ffcc 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b06      	ldr	r3, [pc, #24]	; (800692c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4904      	ldr	r1, [pc, #16]	; (8006930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006928:	4618      	mov	r0, r3
 800692a:	bd80      	pop	{r7, pc}
 800692c:	58024400 	.word	0x58024400
 8006930:	0800f2ac 	.word	0x0800f2ac

08006934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006938:	f7ff ffb6 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 800693c:	4602      	mov	r2, r0
 800693e:	4b06      	ldr	r3, [pc, #24]	; (8006958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4904      	ldr	r1, [pc, #16]	; (800695c <HAL_RCC_GetPCLK2Freq+0x28>)
 800694a:	5ccb      	ldrb	r3, [r1, r3]
 800694c:	f003 031f 	and.w	r3, r3, #31
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	58024400 	.word	0x58024400
 800695c:	0800f2ac 	.word	0x0800f2ac

08006960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006968:	2300      	movs	r3, #0
 800696a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800696c:	2300      	movs	r3, #0
 800696e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d03f      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006984:	d02a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800698a:	d824      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800698c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006990:	d018      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006996:	d81e      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800699c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a0:	d007      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069a2:	e018      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a4:	4ba3      	ldr	r3, [pc, #652]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	4aa2      	ldr	r2, [pc, #648]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069b0:	e015      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3304      	adds	r3, #4
 80069b6:	2102      	movs	r1, #2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f9d5 	bl	8007d68 <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069c2:	e00c      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	2102      	movs	r1, #2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fa7e 	bl	8007ecc <RCCEx_PLL3_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069d4:	e003      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
      break;
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069e4:	4b93      	ldr	r3, [pc, #588]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f0:	4990      	ldr	r1, [pc, #576]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	650b      	str	r3, [r1, #80]	; 0x50
 80069f6:	e001      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d03d      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d826      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a10:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a16:	bf00      	nop
 8006a18:	08006a2d 	.word	0x08006a2d
 8006a1c:	08006a3b 	.word	0x08006a3b
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	08006a65 	.word	0x08006a65
 8006a28:	08006a65 	.word	0x08006a65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4b81      	ldr	r3, [pc, #516]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a80      	ldr	r2, [pc, #512]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a38:	e015      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f991 	bl	8007d68 <RCCEx_PLL2_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a4a:	e00c      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 fa3a 	bl	8007ecc <RCCEx_PLL3_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
      break;
 8006a62:	e000      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a6c:	4b71      	ldr	r3, [pc, #452]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	f023 0207 	bic.w	r2, r3, #7
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	496e      	ldr	r1, [pc, #440]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a7e:	e001      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d042      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a98:	d02b      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d825      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa2:	d028      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa6:	d821      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d016      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d81d      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d007      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ab8:	e018      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aba:	4b5e      	ldr	r3, [pc, #376]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	4a5d      	ldr	r2, [pc, #372]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ac6:	e017      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 f94a 	bl	8007d68 <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ad8:	e00e      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f9f3 	bl	8007ecc <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006aea:	e005      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
      break;
 8006af0:	e002      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006afe:	4b4d      	ldr	r3, [pc, #308]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	494a      	ldr	r1, [pc, #296]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8006b10:	e001      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d049      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b2c:	d030      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b32:	d82a      	bhi.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b38:	d02c      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006b3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b3e:	d824      	bhi.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b44:	d018      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b4a:	d81e      	bhi.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b54:	d007      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006b56:	e018      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b58:	4b36      	ldr	r3, [pc, #216]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4a35      	ldr	r2, [pc, #212]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b64:	e017      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f8fb 	bl	8007d68 <RCCEx_PLL2_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b76:	e00e      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f9a4 	bl	8007ecc <RCCEx_PLL3_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b88:	e005      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8e:	e002      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006baa:	4922      	ldr	r1, [pc, #136]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	658b      	str	r3, [r1, #88]	; 0x58
 8006bb0:	e001      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d04b      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bcc:	d030      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd2:	d82a      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bd8:	d02e      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006bda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bde:	d824      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006be4:	d018      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bea:	d81e      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bf4:	d007      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bf6:	e018      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c04:	e019      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f8ab 	bl	8007d68 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c16:	e010      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3324      	adds	r3, #36	; 0x24
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 f954 	bl	8007ecc <RCCEx_PLL3_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c28:	e007      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c34:	58024400 	.word	0x58024400
      break;
 8006c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c40:	4b99      	ldr	r3, [pc, #612]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c4e:	4996      	ldr	r1, [pc, #600]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	658b      	str	r3, [r1, #88]	; 0x58
 8006c54:	e001      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d032      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	2b30      	cmp	r3, #48	; 0x30
 8006c6c:	d01c      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006c6e:	2b30      	cmp	r3, #48	; 0x30
 8006c70:	d817      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d00c      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d813      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d10f      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4b89      	ldr	r3, [pc, #548]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4a88      	ldr	r2, [pc, #544]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c8e:	e00e      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f866 	bl	8007d68 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ca0:	e005      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	e002      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cb4:	4b7c      	ldr	r3, [pc, #496]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc0:	4979      	ldr	r1, [pc, #484]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d047      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ce0:	d030      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ce6:	d82a      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cec:	d02c      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006cee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cf2:	d824      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf8:	d018      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfe:	d81e      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d08:	d007      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006d0a:	e018      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d0c:	4b66      	ldr	r3, [pc, #408]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a65      	ldr	r2, [pc, #404]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d18:	e017      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f821 	bl	8007d68 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d2a:	e00e      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3324      	adds	r3, #36	; 0x24
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f8ca 	bl	8007ecc <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d3c:	e005      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
      break;
 8006d42:	e002      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d44:	bf00      	nop
 8006d46:	e000      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d50:	4b55      	ldr	r3, [pc, #340]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	4952      	ldr	r1, [pc, #328]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	650b      	str	r3, [r1, #80]	; 0x50
 8006d62:	e001      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d049      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7c:	d02e      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d82:	d828      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d88:	d02a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d8e:	d822      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d94:	d026      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d9a:	d81c      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da0:	d010      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da6:	d816      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01d      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d111      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	2101      	movs	r1, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 ffd5 	bl	8007d68 <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dc2:	e012      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 f87e 	bl	8007ecc <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dd4:	e009      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dda:	e006      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006ddc:	bf00      	nop
 8006dde:	e004      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006de0:	bf00      	nop
 8006de2:	e002      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006de4:	bf00      	nop
 8006de6:	e000      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006df0:	4b2d      	ldr	r3, [pc, #180]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfc:	492a      	ldr	r1, [pc, #168]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	650b      	str	r3, [r1, #80]	; 0x50
 8006e02:	e001      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d04d      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e1e:	d02e      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e24:	d828      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2a:	d02a      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	d822      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e36:	d026      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e3c:	d81c      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e42:	d010      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e48:	d816      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01d      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e52:	d111      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 ff84 	bl	8007d68 <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e64:	e012      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 f82d 	bl	8007ecc <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e76:	e009      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7c:	e006      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e004      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ea0:	4901      	ldr	r1, [pc, #4]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02f      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eca:	d814      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed6:	4baf      	ldr	r3, [pc, #700]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	4aae      	ldr	r2, [pc, #696]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ee2:	e00c      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	2101      	movs	r1, #1
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 ff3c 	bl	8007d68 <RCCEx_PLL2_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ef4:	e003      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f04:	4ba3      	ldr	r3, [pc, #652]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f10:	49a0      	ldr	r1, [pc, #640]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	650b      	str	r3, [r1, #80]	; 0x50
 8006f16:	e001      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d032      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d81b      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f6f 	.word	0x08006f6f
 8006f3c:	08006f49 	.word	0x08006f49
 8006f40:	08006f57 	.word	0x08006f57
 8006f44:	08006f6f 	.word	0x08006f6f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4b92      	ldr	r3, [pc, #584]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a91      	ldr	r2, [pc, #580]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f54:	e00c      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 ff03 	bl	8007d68 <RCCEx_PLL2_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f66:	e003      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f76:	4b87      	ldr	r3, [pc, #540]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	f023 0203 	bic.w	r2, r3, #3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	4984      	ldr	r1, [pc, #528]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f88:	e001      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8086 	beq.w	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f9c:	4b7e      	ldr	r3, [pc, #504]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7d      	ldr	r2, [pc, #500]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa8:	f7fc fdb8 	bl	8003b1c <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fae:	e009      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb0:	f7fc fdb4 	bl	8003b1c <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	; 0x64
 8006fbc:	d902      	bls.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8006fc2:	e005      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc4:	4b74      	ldr	r3, [pc, #464]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0ef      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d166      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fd6:	4b6f      	ldr	r3, [pc, #444]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe0:	4053      	eors	r3, r2
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d013      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fea:	4b6a      	ldr	r3, [pc, #424]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ff4:	4b67      	ldr	r3, [pc, #412]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4a66      	ldr	r2, [pc, #408]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007000:	4b64      	ldr	r3, [pc, #400]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	4a63      	ldr	r2, [pc, #396]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800700c:	4a61      	ldr	r2, [pc, #388]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701c:	d115      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701e:	f7fc fd7d 	bl	8003b1c <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007024:	e00b      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007026:	f7fc fd79 	bl	8003b1c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	4293      	cmp	r3, r2
 8007036:	d902      	bls.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	75fb      	strb	r3, [r7, #23]
            break;
 800703c:	e005      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800703e:	4b55      	ldr	r3, [pc, #340]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0ed      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d126      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705e:	d10d      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007060:	4b4c      	ldr	r3, [pc, #304]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800706e:	0919      	lsrs	r1, r3, #4
 8007070:	4b4a      	ldr	r3, [pc, #296]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007072:	400b      	ands	r3, r1
 8007074:	4947      	ldr	r1, [pc, #284]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007076:	4313      	orrs	r3, r2
 8007078:	610b      	str	r3, [r1, #16]
 800707a:	e005      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800707c:	4b45      	ldr	r3, [pc, #276]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	4a44      	ldr	r2, [pc, #272]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007082:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007086:	6113      	str	r3, [r2, #16]
 8007088:	4b42      	ldr	r3, [pc, #264]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800708a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007096:	493f      	ldr	r1, [pc, #252]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007098:	4313      	orrs	r3, r2
 800709a:	670b      	str	r3, [r1, #112]	; 0x70
 800709c:	e004      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	75bb      	strb	r3, [r7, #22]
 80070a2:	e001      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8085 	beq.w	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ba:	2b28      	cmp	r3, #40	; 0x28
 80070bc:	d866      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080071a1 	.word	0x080071a1
 80070c8:	0800718d 	.word	0x0800718d
 80070cc:	0800718d 	.word	0x0800718d
 80070d0:	0800718d 	.word	0x0800718d
 80070d4:	0800718d 	.word	0x0800718d
 80070d8:	0800718d 	.word	0x0800718d
 80070dc:	0800718d 	.word	0x0800718d
 80070e0:	0800718d 	.word	0x0800718d
 80070e4:	08007169 	.word	0x08007169
 80070e8:	0800718d 	.word	0x0800718d
 80070ec:	0800718d 	.word	0x0800718d
 80070f0:	0800718d 	.word	0x0800718d
 80070f4:	0800718d 	.word	0x0800718d
 80070f8:	0800718d 	.word	0x0800718d
 80070fc:	0800718d 	.word	0x0800718d
 8007100:	0800718d 	.word	0x0800718d
 8007104:	0800717b 	.word	0x0800717b
 8007108:	0800718d 	.word	0x0800718d
 800710c:	0800718d 	.word	0x0800718d
 8007110:	0800718d 	.word	0x0800718d
 8007114:	0800718d 	.word	0x0800718d
 8007118:	0800718d 	.word	0x0800718d
 800711c:	0800718d 	.word	0x0800718d
 8007120:	0800718d 	.word	0x0800718d
 8007124:	080071a1 	.word	0x080071a1
 8007128:	0800718d 	.word	0x0800718d
 800712c:	0800718d 	.word	0x0800718d
 8007130:	0800718d 	.word	0x0800718d
 8007134:	0800718d 	.word	0x0800718d
 8007138:	0800718d 	.word	0x0800718d
 800713c:	0800718d 	.word	0x0800718d
 8007140:	0800718d 	.word	0x0800718d
 8007144:	080071a1 	.word	0x080071a1
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800718d 	.word	0x0800718d
 8007150:	0800718d 	.word	0x0800718d
 8007154:	0800718d 	.word	0x0800718d
 8007158:	0800718d 	.word	0x0800718d
 800715c:	0800718d 	.word	0x0800718d
 8007160:	0800718d 	.word	0x0800718d
 8007164:	080071a1 	.word	0x080071a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	2101      	movs	r1, #1
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fdfa 	bl	8007d68 <RCCEx_PLL2_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007178:	e013      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3324      	adds	r3, #36	; 0x24
 800717e:	2101      	movs	r1, #1
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fea3 	bl	8007ecc <RCCEx_PLL3_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800718a:	e00a      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
      break;
 8007190:	e007      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
 8007198:	58024800 	.word	0x58024800
 800719c:	00ffffcf 	.word	0x00ffffcf
      break;
 80071a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071a8:	4b96      	ldr	r3, [pc, #600]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071b4:	4993      	ldr	r1, [pc, #588]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	654b      	str	r3, [r1, #84]	; 0x54
 80071ba:	e001      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d038      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	d821      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80071d4:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	0800721f 	.word	0x0800721f
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	08007207 	.word	0x08007207
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fdb4 	bl	8007d68 <RCCEx_PLL2_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007204:	e00c      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fe5d 	bl	8007ecc <RCCEx_PLL3_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	e000      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800721e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007226:	4b77      	ldr	r3, [pc, #476]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	f023 0207 	bic.w	r2, r3, #7
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	4974      	ldr	r1, [pc, #464]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007234:	4313      	orrs	r3, r2
 8007236:	654b      	str	r3, [r1, #84]	; 0x54
 8007238:	e001      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d03a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	2b05      	cmp	r3, #5
 8007252:	d821      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	0800729f 	.word	0x0800729f
 8007260:	08007275 	.word	0x08007275
 8007264:	08007287 	.word	0x08007287
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	2101      	movs	r1, #1
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fd74 	bl	8007d68 <RCCEx_PLL2_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007284:	e00c      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3324      	adds	r3, #36	; 0x24
 800728a:	2101      	movs	r1, #1
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fe1d 	bl	8007ecc <RCCEx_PLL3_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800729e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072a6:	4b57      	ldr	r3, [pc, #348]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	f023 0207 	bic.w	r2, r3, #7
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	4953      	ldr	r1, [pc, #332]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	658b      	str	r3, [r1, #88]	; 0x58
 80072ba:	e001      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d04b      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072d6:	d02e      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80072d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072dc:	d828      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e2:	d02a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e8:	d822      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80072ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ee:	d026      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80072f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072f4:	d81c      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80072f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fa:	d010      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80072fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007300:	d816      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01d      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730a:	d111      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fd28 	bl	8007d68 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800731c:	e012      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3324      	adds	r3, #36	; 0x24
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdd1 	bl	8007ecc <RCCEx_PLL3_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800732e:	e009      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
      break;
 8007334:	e006      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007336:	bf00      	nop
 8007338:	e004      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800733a:	bf00      	nop
 800733c:	e002      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800734a:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007358:	492a      	ldr	r1, [pc, #168]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800735a:	4313      	orrs	r3, r2
 800735c:	654b      	str	r3, [r1, #84]	; 0x54
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d04d      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007376:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800737a:	d02e      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800737c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007380:	d828      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007386:	d02a      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738c:	d822      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800738e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007392:	d026      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007398:	d81c      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800739a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739e:	d010      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80073a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a4:	d816      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01d      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ae:	d111      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fcd6 	bl	8007d68 <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073c0:	e012      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2102      	movs	r1, #2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fd7f 	bl	8007ecc <RCCEx_PLL3_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073d2:	e009      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
      break;
 80073d8:	e006      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073da:	bf00      	nop
 80073dc:	e004      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073de:	bf00      	nop
 80073e0:	e002      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10c      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073fc:	4901      	ldr	r1, [pc, #4]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	658b      	str	r3, [r1, #88]	; 0x58
 8007402:	e003      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b00      	cmp	r3, #0
 8007416:	d04b      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800741e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007422:	d02e      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007424:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007428:	d828      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742e:	d02a      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d822      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800743a:	d026      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800743c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007440:	d81c      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007446:	d010      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800744c:	d816      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01d      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007456:	d111      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fc82 	bl	8007d68 <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007468:	e012      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	2102      	movs	r1, #2
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fd2b 	bl	8007ecc <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800747a:	e009      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	e006      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007482:	bf00      	nop
 8007484:	e004      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800748e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007496:	4b9d      	ldr	r3, [pc, #628]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074a4:	4999      	ldr	r1, [pc, #612]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	658b      	str	r3, [r1, #88]	; 0x58
 80074aa:	e001      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01a      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c6:	d10a      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	2102      	movs	r1, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fcfc 	bl	8007ecc <RCCEx_PLL3_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074de:	4b8b      	ldr	r3, [pc, #556]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ec:	4987      	ldr	r1, [pc, #540]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007508:	d10a      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3324      	adds	r3, #36	; 0x24
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fcdb 	bl	8007ecc <RCCEx_PLL3_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007520:	4b7a      	ldr	r3, [pc, #488]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800752e:	4977      	ldr	r1, [pc, #476]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007530:	4313      	orrs	r3, r2
 8007532:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d034      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800754a:	d01d      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800754c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007550:	d817      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755a:	d009      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800755c:	e011      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3304      	adds	r3, #4
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fbff 	bl	8007d68 <RCCEx_PLL2_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800756e:	e00c      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3324      	adds	r3, #36	; 0x24
 8007574:	2102      	movs	r1, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fca8 	bl	8007ecc <RCCEx_PLL3_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007580:	e003      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
      break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007590:	4b5e      	ldr	r3, [pc, #376]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800759e:	495b      	ldr	r1, [pc, #364]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	658b      	str	r3, [r1, #88]	; 0x58
 80075a4:	e001      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d033      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075c0:	d01c      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80075c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075c6:	d816      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80075c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075cc:	d003      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80075ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075d2:	d007      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80075d4:	e00f      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d6:	4b4d      	ldr	r3, [pc, #308]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	4a4c      	ldr	r2, [pc, #304]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80075e2:	e00c      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3324      	adds	r3, #36	; 0x24
 80075e8:	2101      	movs	r1, #1
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fc6e 	bl	8007ecc <RCCEx_PLL3_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80075f4:	e003      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
      break;
 80075fa:	e000      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80075fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007604:	4b41      	ldr	r3, [pc, #260]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007612:	493e      	ldr	r1, [pc, #248]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007614:	4313      	orrs	r3, r2
 8007616:	654b      	str	r3, [r1, #84]	; 0x54
 8007618:	e001      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d029      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d007      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007638:	e00f      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800763a:	4b34      	ldr	r3, [pc, #208]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	4a33      	ldr	r2, [pc, #204]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007646:	e00b      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3304      	adds	r3, #4
 800764c:	2102      	movs	r1, #2
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fb8a 	bl	8007d68 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007658:	e002      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007666:	4b29      	ldr	r3, [pc, #164]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007672:	4926      	ldr	r1, [pc, #152]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007674:	4313      	orrs	r3, r2
 8007676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007678:	e001      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3324      	adds	r3, #36	; 0x24
 800768e:	2102      	movs	r1, #2
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fc1b 	bl	8007ecc <RCCEx_PLL3_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d033      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b4:	d017      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ba:	d811      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c0:	d013      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c6:	d80b      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80076cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d0:	d106      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80076de:	e007      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
      break;
 80076e4:	e004      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80076e6:	bf00      	nop
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80076ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10c      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007702:	4902      	ldr	r1, [pc, #8]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007704:	4313      	orrs	r3, r2
 8007706:	654b      	str	r3, [r1, #84]	; 0x54
 8007708:	e004      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007720:	4b31      	ldr	r3, [pc, #196]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772c:	492e      	ldr	r1, [pc, #184]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800772e:	4313      	orrs	r3, r2
 8007730:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800774c:	4926      	ldr	r1, [pc, #152]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800774e:	4313      	orrs	r3, r2
 8007750:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800775e:	4b22      	ldr	r3, [pc, #136]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776a:	491f      	ldr	r1, [pc, #124]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800776c:	4313      	orrs	r3, r2
 800776e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007782:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007786:	6113      	str	r3, [r2, #16]
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007792:	4915      	ldr	r1, [pc, #84]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007794:	4313      	orrs	r3, r2
 8007796:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	da08      	bge.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ac:	490e      	ldr	r1, [pc, #56]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077cc:	4906      	ldr	r1, [pc, #24]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	58024400 	.word	0x58024400

080077ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80077f0:	f7ff f85a 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b06      	ldr	r3, [pc, #24]	; (8007810 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	4904      	ldr	r1, [pc, #16]	; (8007814 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007802:	5ccb      	ldrb	r3, [r1, r3]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800780c:	4618      	mov	r0, r3
 800780e:	bd80      	pop	{r7, pc}
 8007810:	58024400 	.word	0x58024400
 8007814:	0800f2ac 	.word	0x0800f2ac

08007818 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007818:	b480      	push	{r7}
 800781a:	b089      	sub	sp, #36	; 0x24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007820:	4ba1      	ldr	r3, [pc, #644]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800782a:	4b9f      	ldr	r3, [pc, #636]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	0b1b      	lsrs	r3, r3, #12
 8007830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007834:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007836:	4b9c      	ldr	r3, [pc, #624]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007842:	4b99      	ldr	r3, [pc, #612]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	08db      	lsrs	r3, r3, #3
 8007848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	fb02 f303 	mul.w	r3, r2, r3
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8111 	beq.w	8007a88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b02      	cmp	r3, #2
 800786a:	f000 8083 	beq.w	8007974 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b02      	cmp	r3, #2
 8007872:	f200 80a1 	bhi.w	80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d056      	beq.n	8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007882:	e099      	b.n	80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007884:	4b88      	ldr	r3, [pc, #544]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02d      	beq.n	80078ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007890:	4b85      	ldr	r3, [pc, #532]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	4a84      	ldr	r2, [pc, #528]	; (8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ba:	4b7b      	ldr	r3, [pc, #492]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078ea:	e087      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b6a      	ldr	r3, [pc, #424]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007912:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800792e:	e065      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b59      	ldr	r3, [pc, #356]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	ed97 6a03 	vldr	s12, [r7, #12]
 8007956:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007972:	e043      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b48      	ldr	r3, [pc, #288]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a03 	vldr	s12, [r7, #12]
 800799a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b6:	e021      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ca:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079da:	ed97 6a03 	vldr	s12, [r7, #12]
 80079de:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80079fc:	4b2a      	ldr	r3, [pc, #168]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	0a5b      	lsrs	r3, r3, #9
 8007a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a22:	ee17 2a90 	vmov	r2, s15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a50:	ee17 2a90 	vmov	r2, s15
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7e:	ee17 2a90 	vmov	r2, s15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a86:	e008      	b.n	8007a9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	3724      	adds	r7, #36	; 0x24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	46000000 	.word	0x46000000
 8007ab4:	4c742400 	.word	0x4c742400
 8007ab8:	4a742400 	.word	0x4a742400
 8007abc:	4af42400 	.word	0x4af42400

08007ac0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	; 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ac8:	4ba1      	ldr	r3, [pc, #644]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ad2:	4b9f      	ldr	r3, [pc, #636]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	0d1b      	lsrs	r3, r3, #20
 8007ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007adc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ade:	4b9c      	ldr	r3, [pc, #624]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007aea:	4b99      	ldr	r3, [pc, #612]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8111 	beq.w	8007d30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	f000 8083 	beq.w	8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	f200 80a1 	bhi.w	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d056      	beq.n	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b2a:	e099      	b.n	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b2c:	4b88      	ldr	r3, [pc, #544]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d02d      	beq.n	8007b94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b38:	4b85      	ldr	r3, [pc, #532]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	4a84      	ldr	r2, [pc, #528]	; (8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
 8007b48:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b7b      	ldr	r3, [pc, #492]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b92:	e087      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b6a      	ldr	r3, [pc, #424]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd6:	e065      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b59      	ldr	r3, [pc, #356]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c1a:	e043      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b48      	ldr	r3, [pc, #288]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c5e:	e021      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b37      	ldr	r3, [pc, #220]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ca2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cca:	ee17 2a90 	vmov	r2, s15
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf8:	ee17 2a90 	vmov	r2, s15
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	0e1b      	lsrs	r3, r3, #24
 8007d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d26:	ee17 2a90 	vmov	r2, s15
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d2e:	e008      	b.n	8007d42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	609a      	str	r2, [r3, #8]
}
 8007d42:	bf00      	nop
 8007d44:	3724      	adds	r7, #36	; 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400
 8007d54:	03d09000 	.word	0x03d09000
 8007d58:	46000000 	.word	0x46000000
 8007d5c:	4c742400 	.word	0x4c742400
 8007d60:	4a742400 	.word	0x4a742400
 8007d64:	4af42400 	.word	0x4af42400

08007d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d76:	4b53      	ldr	r3, [pc, #332]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d101      	bne.n	8007d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e099      	b.n	8007eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d86:	4b4f      	ldr	r3, [pc, #316]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d92:	f7fb fec3 	bl	8003b1c <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d98:	e008      	b.n	8007dac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d9a:	f7fb febf 	bl	8003b1c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e086      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dac:	4b45      	ldr	r3, [pc, #276]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007db8:	4b42      	ldr	r3, [pc, #264]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	493f      	ldr	r1, [pc, #252]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	628b      	str	r3, [r1, #40]	; 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dfc:	4931      	ldr	r1, [pc, #196]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e02:	4b30      	ldr	r3, [pc, #192]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	492d      	ldr	r1, [pc, #180]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e14:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f023 0220 	bic.w	r2, r3, #32
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4928      	ldr	r1, [pc, #160]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e26:	4b27      	ldr	r3, [pc, #156]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a26      	ldr	r2, [pc, #152]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	f023 0310 	bic.w	r3, r3, #16
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <RCCEx_PLL2_Config+0x160>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4920      	ldr	r1, [pc, #128]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e46:	4b1f      	ldr	r3, [pc, #124]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e64:	e00f      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e6c:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e78:	e005      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	4a11      	ldr	r2, [pc, #68]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e92:	f7fb fe43 	bl	8003b1c <HAL_GetTick>
 8007e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e98:	e008      	b.n	8007eac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e9a:	f7fb fe3f 	bl	8003b1c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	ffff0007 	.word	0xffff0007

08007ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eda:	4b53      	ldr	r3, [pc, #332]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d101      	bne.n	8007eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e099      	b.n	800801e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eea:	4b4f      	ldr	r3, [pc, #316]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef6:	f7fb fe11 	bl	8003b1c <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007efc:	e008      	b.n	8007f10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007efe:	f7fb fe0d 	bl	8003b1c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e086      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f10:	4b45      	ldr	r3, [pc, #276]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f0      	bne.n	8007efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f1c:	4b42      	ldr	r3, [pc, #264]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	051b      	lsls	r3, r3, #20
 8007f2a:	493f      	ldr	r1, [pc, #252]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f60:	4931      	ldr	r1, [pc, #196]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f66:	4b30      	ldr	r3, [pc, #192]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	492d      	ldr	r1, [pc, #180]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4928      	ldr	r1, [pc, #160]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	4a26      	ldr	r2, [pc, #152]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <RCCEx_PLL3_Config+0x160>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	69d2      	ldr	r2, [r2, #28]
 8007fa2:	00d2      	lsls	r2, r2, #3
 8007fa4:	4920      	ldr	r1, [pc, #128]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007faa:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fc8:	e00f      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fd0:	4b15      	ldr	r3, [pc, #84]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a14      	ldr	r2, [pc, #80]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fdc:	e005      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	4a11      	ldr	r2, [pc, #68]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a0e      	ldr	r2, [pc, #56]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff6:	f7fb fd91 	bl	8003b1c <HAL_GetTick>
 8007ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ffe:	f7fb fd8d 	bl	8003b1c <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	ffff0007 	.word	0xffff0007

08008030 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e0f1      	b.n	8008226 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a78      	ldr	r2, [pc, #480]	; (8008230 <HAL_SPI_Init+0x200>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00f      	beq.n	8008072 <HAL_SPI_Init+0x42>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a77      	ldr	r2, [pc, #476]	; (8008234 <HAL_SPI_Init+0x204>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00a      	beq.n	8008072 <HAL_SPI_Init+0x42>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a75      	ldr	r2, [pc, #468]	; (8008238 <HAL_SPI_Init+0x208>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d005      	beq.n	8008072 <HAL_SPI_Init+0x42>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	d901      	bls.n	8008072 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e0d9      	b.n	8008226 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 ff66 	bl	8008f44 <SPI_GetPacketSize>
 8008078:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a6c      	ldr	r2, [pc, #432]	; (8008230 <HAL_SPI_Init+0x200>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00c      	beq.n	800809e <HAL_SPI_Init+0x6e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a6a      	ldr	r2, [pc, #424]	; (8008234 <HAL_SPI_Init+0x204>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d007      	beq.n	800809e <HAL_SPI_Init+0x6e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a69      	ldr	r2, [pc, #420]	; (8008238 <HAL_SPI_Init+0x208>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d002      	beq.n	800809e <HAL_SPI_Init+0x6e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b08      	cmp	r3, #8
 800809c:	d811      	bhi.n	80080c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080a2:	4a63      	ldr	r2, [pc, #396]	; (8008230 <HAL_SPI_Init+0x200>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a61      	ldr	r2, [pc, #388]	; (8008234 <HAL_SPI_Init+0x204>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_SPI_Init+0x8c>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a60      	ldr	r2, [pc, #384]	; (8008238 <HAL_SPI_Init+0x208>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d104      	bne.n	80080c6 <HAL_SPI_Init+0x96>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d901      	bls.n	80080c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0af      	b.n	8008226 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d106      	bne.n	80080e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fb f9d6 	bl	800348c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0201 	bic.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008102:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800810c:	d119      	bne.n	8008142 <HAL_SPI_Init+0x112>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008116:	d103      	bne.n	8008120 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008130:	d107      	bne.n	8008142 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	431a      	orrs	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	ea42 0103 	orr.w	r1, r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a2:	ea42 0103 	orr.w	r1, r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d113      	bne.n	80081e2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40013000 	.word	0x40013000
 8008234:	40003800 	.word	0x40003800
 8008238:	40003c00 	.word	0x40003c00

0800823c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3320      	adds	r3, #32
 8008252:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_SPI_Transmit+0x2a>
 8008262:	2302      	movs	r3, #2
 8008264:	e1d7      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800826e:	f7fb fc55 	bl	8003b1c <HAL_GetTick>
 8008272:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	d007      	beq.n	8008290 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008280:	2302      	movs	r3, #2
 8008282:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800828c:	7efb      	ldrb	r3, [r7, #27]
 800828e:	e1c2      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_SPI_Transmit+0x60>
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d107      	bne.n	80082ac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80082a8:	7efb      	ldrb	r3, [r7, #27]
 80082aa:	e1b4      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2203      	movs	r2, #3
 80082b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80082fc:	d107      	bne.n	800830e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800830c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	4b96      	ldr	r3, [pc, #600]	; (8008570 <HAL_SPI_Transmit+0x334>)
 8008316:	4013      	ands	r3, r2
 8008318:	88f9      	ldrh	r1, [r7, #6]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	430b      	orrs	r3, r1
 8008320:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800833a:	d107      	bne.n	800834c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800834a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d947      	bls.n	80083e4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008354:	e03f      	b.n	80083d6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b02      	cmp	r3, #2
 8008362:	d114      	bne.n	800838e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008374:	1d1a      	adds	r2, r3, #4
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800838c:	e023      	b.n	80083d6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800838e:	f7fb fbc5 	bl	8003b1c <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d803      	bhi.n	80083a6 <HAL_SPI_Transmit+0x16a>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d102      	bne.n	80083ac <HAL_SPI_Transmit+0x170>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d114      	bne.n	80083d6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fcfb 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e11f      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1b9      	bne.n	8008356 <HAL_SPI_Transmit+0x11a>
 80083e2:	e0f2      	b.n	80085ca <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	f240 80e7 	bls.w	80085bc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083ee:	e05d      	b.n	80084ac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d132      	bne.n	8008464 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b01      	cmp	r3, #1
 8008408:	d918      	bls.n	800843c <HAL_SPI_Transmit+0x200>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d014      	beq.n	800843c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b02      	subs	r3, #2
 8008432:	b29a      	uxth	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800843a:	e037      	b.n	80084ac <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008440:	881a      	ldrh	r2, [r3, #0]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844a:	1c9a      	adds	r2, r3, #2
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008462:	e023      	b.n	80084ac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008464:	f7fb fb5a 	bl	8003b1c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d803      	bhi.n	800847c <HAL_SPI_Transmit+0x240>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d102      	bne.n	8008482 <HAL_SPI_Transmit+0x246>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d114      	bne.n	80084ac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fc90 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e0b4      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d19b      	bne.n	80083f0 <HAL_SPI_Transmit+0x1b4>
 80084b8:	e087      	b.n	80085ca <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d155      	bne.n	8008574 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d918      	bls.n	8008506 <HAL_SPI_Transmit+0x2ca>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d914      	bls.n	8008506 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ec:	1d1a      	adds	r2, r3, #4
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b04      	subs	r3, #4
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008504:	e05a      	b.n	80085bc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	d917      	bls.n	8008542 <HAL_SPI_Transmit+0x306>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008528:	1c9a      	adds	r2, r3, #2
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b02      	subs	r3, #2
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008540:	e03c      	b.n	80085bc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3320      	adds	r3, #32
 800854c:	7812      	ldrb	r2, [r2, #0]
 800854e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800856c:	e026      	b.n	80085bc <HAL_SPI_Transmit+0x380>
 800856e:	bf00      	nop
 8008570:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008574:	f7fb fad2 	bl	8003b1c <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d803      	bhi.n	800858c <HAL_SPI_Transmit+0x350>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858a:	d102      	bne.n	8008592 <HAL_SPI_Transmit+0x356>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d114      	bne.n	80085bc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fc08 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e02c      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f47f af78 	bne.w	80084ba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2108      	movs	r1, #8
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fc87 	bl	8008ee8 <SPI_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fbd9 	bl	8008da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008614:	7efb      	ldrb	r3, [r7, #27]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3330      	adds	r3, #48	; 0x30
 800863a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008644:	d112      	bne.n	800866c <HAL_SPI_Receive+0x4c>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10e      	bne.n	800866c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2204      	movs	r2, #4
 8008652:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008656:	88fa      	ldrh	r2, [r7, #6]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f978 	bl	8008958 <HAL_SPI_TransmitReceive>
 8008668:	4603      	mov	r3, r0
 800866a:	e16f      	b.n	800894c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008672:	2b01      	cmp	r3, #1
 8008674:	d101      	bne.n	800867a <HAL_SPI_Receive+0x5a>
 8008676:	2302      	movs	r3, #2
 8008678:	e168      	b.n	800894c <HAL_SPI_Receive+0x32c>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008682:	f7fb fa4b 	bl	8003b1c <HAL_GetTick>
 8008686:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b01      	cmp	r3, #1
 8008692:	d007      	beq.n	80086a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008694:	2302      	movs	r3, #2
 8008696:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	e153      	b.n	800894c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_SPI_Receive+0x90>
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d107      	bne.n	80086c0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80086bc:	7ffb      	ldrb	r3, [r7, #31]
 80086be:	e145      	b.n	800894c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2204      	movs	r2, #4
 80086c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	88fa      	ldrh	r2, [r7, #6]
 80086e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008710:	d107      	bne.n	8008722 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008720:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	4b8a      	ldr	r3, [pc, #552]	; (8008954 <HAL_SPI_Receive+0x334>)
 800872a:	4013      	ands	r3, r2
 800872c:	88f9      	ldrh	r1, [r7, #6]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	430b      	orrs	r3, r1
 8008734:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800874e:	d107      	bne.n	8008760 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b0f      	cmp	r3, #15
 8008766:	d948      	bls.n	80087fa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008768:	e040      	b.n	80087ec <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	f248 0308 	movw	r3, #32776	; 0x8008
 8008774:	4013      	ands	r3, r2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d014      	beq.n	80087a4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008784:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087a2:	e023      	b.n	80087ec <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087a4:	f7fb f9ba 	bl	8003b1c <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d803      	bhi.n	80087bc <HAL_SPI_Receive+0x19c>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ba:	d102      	bne.n	80087c2 <HAL_SPI_Receive+0x1a2>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d114      	bne.n	80087ec <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 faf0 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e0af      	b.n	800894c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1b8      	bne.n	800876a <HAL_SPI_Receive+0x14a>
 80087f8:	e095      	b.n	8008926 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b07      	cmp	r3, #7
 8008800:	f240 808b 	bls.w	800891a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008804:	e03f      	b.n	8008886 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b01      	cmp	r3, #1
 8008812:	d114      	bne.n	800883e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	8812      	ldrh	r2, [r2, #0]
 800881c:	b292      	uxth	r2, r2
 800881e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008824:	1c9a      	adds	r2, r3, #2
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008830:	b29b      	uxth	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800883c:	e023      	b.n	8008886 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800883e:	f7fb f96d 	bl	8003b1c <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d803      	bhi.n	8008856 <HAL_SPI_Receive+0x236>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d102      	bne.n	800885c <HAL_SPI_Receive+0x23c>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d114      	bne.n	8008886 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 faa3 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e062      	b.n	800894c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1b9      	bne.n	8008806 <HAL_SPI_Receive+0x1e6>
 8008892:	e048      	b.n	8008926 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d117      	bne.n	80088d2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	b2d2      	uxtb	r2, r2
 80088b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80088d0:	e023      	b.n	800891a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d2:	f7fb f923 	bl	8003b1c <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d803      	bhi.n	80088ea <HAL_SPI_Receive+0x2ca>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d102      	bne.n	80088f0 <HAL_SPI_Receive+0x2d0>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d114      	bne.n	800891a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fa59 	bl	8008da8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e018      	b.n	800894c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b6      	bne.n	8008894 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fa3e 	bl	8008da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800894a:	7ffb      	ldrb	r3, [r7, #31]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3720      	adds	r7, #32
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	ffff0000 	.word	0xffff0000

08008958 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08e      	sub	sp, #56	; 0x38
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3320      	adds	r3, #32
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3330      	adds	r3, #48	; 0x30
 800897a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_SPI_TransmitReceive+0x32>
 8008986:	2302      	movs	r3, #2
 8008988:	e209      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008992:	f7fb f8c3 	bl	8003b1c <HAL_GetTick>
 8008996:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008998:	887b      	ldrh	r3, [r7, #2]
 800899a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089ae:	7efb      	ldrb	r3, [r7, #27]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d014      	beq.n	80089de <HAL_SPI_TransmitReceive+0x86>
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ba:	d106      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80089c4:	7efb      	ldrb	r3, [r7, #27]
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d009      	beq.n	80089de <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80089ca:	2302      	movs	r3, #2
 80089cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089dc:	e1df      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <HAL_SPI_TransmitReceive+0x98>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_TransmitReceive+0x98>
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a02:	e1cc      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d003      	beq.n	8008a18 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2205      	movs	r2, #5
 8008a14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	887a      	ldrh	r2, [r7, #2]
 8008a2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	887a      	ldrh	r2, [r7, #2]
 8008a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	887a      	ldrh	r2, [r7, #2]
 8008a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	887a      	ldrh	r2, [r7, #2]
 8008a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4b82      	ldr	r3, [pc, #520]	; (8008c68 <HAL_SPI_TransmitReceive+0x310>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	8879      	ldrh	r1, [r7, #2]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a84:	d107      	bne.n	8008a96 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b0f      	cmp	r3, #15
 8008a9c:	d970      	bls.n	8008b80 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a9e:	e068      	b.n	8008b72 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d11a      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x18c>
 8008aae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d017      	beq.n	8008ae4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac4:	1d1a      	adds	r2, r3, #4
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ae2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	f248 0308 	movw	r3, #32776	; 0x8008
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <HAL_SPI_TransmitReceive+0x1d2>
 8008af4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b28:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2a:	f7fa fff7 	bl	8003b1c <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d803      	bhi.n	8008b42 <HAL_SPI_TransmitReceive+0x1ea>
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d102      	bne.n	8008b48 <HAL_SPI_TransmitReceive+0x1f0>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d114      	bne.n	8008b72 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f92d 	bl	8008da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e115      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d193      	bne.n	8008aa0 <HAL_SPI_TransmitReceive+0x148>
 8008b78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d190      	bne.n	8008aa0 <HAL_SPI_TransmitReceive+0x148>
 8008b7e:	e0e7      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b07      	cmp	r3, #7
 8008b86:	f240 80dd 	bls.w	8008d44 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b8a:	e066      	b.n	8008c5a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d119      	bne.n	8008bce <HAL_SPI_TransmitReceive+0x276>
 8008b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d016      	beq.n	8008bce <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba4:	881a      	ldrh	r2, [r3, #0]
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bae:	1c9a      	adds	r2, r3, #2
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d11a      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x2ba>
 8008bdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d017      	beq.n	8008c12 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be6:	6a3a      	ldr	r2, [r7, #32]
 8008be8:	8812      	ldrh	r2, [r2, #0]
 8008bea:	b292      	uxth	r2, r2
 8008bec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c10:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c12:	f7fa ff83 	bl	8003b1c <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d803      	bhi.n	8008c2a <HAL_SPI_TransmitReceive+0x2d2>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d102      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x2d8>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d114      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f8b9 	bl	8008da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e0a1      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d195      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x234>
 8008c60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d192      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x234>
 8008c66:	e073      	b.n	8008d50 <HAL_SPI_TransmitReceive+0x3f8>
 8008c68:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d11b      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x35a>
 8008c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d018      	beq.n	8008cb2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3320      	adds	r3, #32
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d11d      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x3a4>
 8008cc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d01a      	beq.n	8008cfc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cfc:	f7fa ff0e 	bl	8003b1c <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d803      	bhi.n	8008d14 <HAL_SPI_TransmitReceive+0x3bc>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d102      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x3c2>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d114      	bne.n	8008d44 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f844 	bl	8008da8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e02c      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d190      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x314>
 8008d4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d18d      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2200      	movs	r2, #0
 8008d58:	2108      	movs	r1, #8
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f8c4 	bl	8008ee8 <SPI_WaitOnFlagUntilTimeout>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6c:	f043 0220 	orr.w	r2, r3, #32
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f816 	bl	8008da8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e001      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8008d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3730      	adds	r7, #48	; 0x30
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop

08008da8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0208 	orr.w	r2, r2, #8
 8008dc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0210 	orr.w	r2, r2, #16
 8008dd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6919      	ldr	r1, [r3, #16]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b3c      	ldr	r3, [pc, #240]	; (8008ee4 <SPI_CloseTransfer+0x13c>)
 8008df4:	400b      	ands	r3, r1
 8008df6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008e06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d014      	beq.n	8008e3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00f      	beq.n	8008e3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0220 	orr.w	r2, r2, #32
 8008e3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d014      	beq.n	8008e74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5a:	f043 0204 	orr.w	r2, r3, #4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00f      	beq.n	8008e9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e84:	f043 0201 	orr.w	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eae:	f043 0208 	orr.w	r2, r3, #8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ec6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	fffffc90 	.word	0xfffffc90

08008ee8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ef8:	e010      	b.n	8008f1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008efa:	f7fa fe0f 	bl	8003b1c <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d803      	bhi.n	8008f12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d102      	bne.n	8008f18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e00f      	b.n	8008f3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695a      	ldr	r2, [r3, #20]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d0df      	beq.n	8008efa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	3301      	adds	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3307      	adds	r3, #7
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e049      	b.n	8009020 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fa fad9 	bl	8003558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f000 fcf9 	bl	80099b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e049      	b.n	80090ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fa fac2 	bl	80035d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f000 fca2 	bl	80099b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <HAL_TIM_PWM_Start+0x24>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	bf14      	ite	ne
 80090f4:	2301      	movne	r3, #1
 80090f6:	2300      	moveq	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	e03c      	b.n	8009176 <HAL_TIM_PWM_Start+0x9e>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d109      	bne.n	8009116 <HAL_TIM_PWM_Start+0x3e>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b01      	cmp	r3, #1
 800910c:	bf14      	ite	ne
 800910e:	2301      	movne	r3, #1
 8009110:	2300      	moveq	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	e02f      	b.n	8009176 <HAL_TIM_PWM_Start+0x9e>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b08      	cmp	r3, #8
 800911a:	d109      	bne.n	8009130 <HAL_TIM_PWM_Start+0x58>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b01      	cmp	r3, #1
 8009126:	bf14      	ite	ne
 8009128:	2301      	movne	r3, #1
 800912a:	2300      	moveq	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	e022      	b.n	8009176 <HAL_TIM_PWM_Start+0x9e>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b0c      	cmp	r3, #12
 8009134:	d109      	bne.n	800914a <HAL_TIM_PWM_Start+0x72>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b01      	cmp	r3, #1
 8009140:	bf14      	ite	ne
 8009142:	2301      	movne	r3, #1
 8009144:	2300      	moveq	r3, #0
 8009146:	b2db      	uxtb	r3, r3
 8009148:	e015      	b.n	8009176 <HAL_TIM_PWM_Start+0x9e>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b10      	cmp	r3, #16
 800914e:	d109      	bne.n	8009164 <HAL_TIM_PWM_Start+0x8c>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b01      	cmp	r3, #1
 800915a:	bf14      	ite	ne
 800915c:	2301      	movne	r3, #1
 800915e:	2300      	moveq	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e008      	b.n	8009176 <HAL_TIM_PWM_Start+0x9e>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e0a1      	b.n	80092c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_TIM_PWM_Start+0xb6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800918c:	e023      	b.n	80091d6 <HAL_TIM_PWM_Start+0xfe>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b04      	cmp	r3, #4
 8009192:	d104      	bne.n	800919e <HAL_TIM_PWM_Start+0xc6>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800919c:	e01b      	b.n	80091d6 <HAL_TIM_PWM_Start+0xfe>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d104      	bne.n	80091ae <HAL_TIM_PWM_Start+0xd6>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ac:	e013      	b.n	80091d6 <HAL_TIM_PWM_Start+0xfe>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b0c      	cmp	r3, #12
 80091b2:	d104      	bne.n	80091be <HAL_TIM_PWM_Start+0xe6>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091bc:	e00b      	b.n	80091d6 <HAL_TIM_PWM_Start+0xfe>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d104      	bne.n	80091ce <HAL_TIM_PWM_Start+0xf6>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091cc:	e003      	b.n	80091d6 <HAL_TIM_PWM_Start+0xfe>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2201      	movs	r2, #1
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fff4 	bl	800a1cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a38      	ldr	r2, [pc, #224]	; (80092cc <HAL_TIM_PWM_Start+0x1f4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_TIM_PWM_Start+0x13e>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a37      	ldr	r2, [pc, #220]	; (80092d0 <HAL_TIM_PWM_Start+0x1f8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_TIM_PWM_Start+0x13e>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a35      	ldr	r2, [pc, #212]	; (80092d4 <HAL_TIM_PWM_Start+0x1fc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIM_PWM_Start+0x13e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a34      	ldr	r2, [pc, #208]	; (80092d8 <HAL_TIM_PWM_Start+0x200>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIM_PWM_Start+0x13e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a32      	ldr	r2, [pc, #200]	; (80092dc <HAL_TIM_PWM_Start+0x204>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d101      	bne.n	800921a <HAL_TIM_PWM_Start+0x142>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <HAL_TIM_PWM_Start+0x144>
 800921a:	2300      	movs	r3, #0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800922e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a25      	ldr	r2, [pc, #148]	; (80092cc <HAL_TIM_PWM_Start+0x1f4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d022      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009242:	d01d      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a25      	ldr	r2, [pc, #148]	; (80092e0 <HAL_TIM_PWM_Start+0x208>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d018      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a24      	ldr	r2, [pc, #144]	; (80092e4 <HAL_TIM_PWM_Start+0x20c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d013      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a22      	ldr	r2, [pc, #136]	; (80092e8 <HAL_TIM_PWM_Start+0x210>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00e      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a1a      	ldr	r2, [pc, #104]	; (80092d0 <HAL_TIM_PWM_Start+0x1f8>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d009      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1e      	ldr	r2, [pc, #120]	; (80092ec <HAL_TIM_PWM_Start+0x214>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d004      	beq.n	8009280 <HAL_TIM_PWM_Start+0x1a8>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <HAL_TIM_PWM_Start+0x1fc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d115      	bne.n	80092ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <HAL_TIM_PWM_Start+0x218>)
 8009288:	4013      	ands	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b06      	cmp	r3, #6
 8009290:	d015      	beq.n	80092be <HAL_TIM_PWM_Start+0x1e6>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009298:	d011      	beq.n	80092be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092aa:	e008      	b.n	80092be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e000      	b.n	80092c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40010400 	.word	0x40010400
 80092d4:	40014000 	.word	0x40014000
 80092d8:	40014400 	.word	0x40014400
 80092dc:	40014800 	.word	0x40014800
 80092e0:	40000400 	.word	0x40000400
 80092e4:	40000800 	.word	0x40000800
 80092e8:	40000c00 	.word	0x40000c00
 80092ec:	40001800 	.word	0x40001800
 80092f0:	00010007 	.word	0x00010007

080092f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b02      	cmp	r3, #2
 8009308:	d122      	bne.n	8009350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b02      	cmp	r3, #2
 8009316:	d11b      	bne.n	8009350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0202 	mvn.w	r2, #2
 8009320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fb1c 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 800933c:	e005      	b.n	800934a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb0e 	bl	8009960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fb1f 	bl	8009988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b04      	cmp	r3, #4
 800935c:	d122      	bne.n	80093a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b04      	cmp	r3, #4
 800936a:	d11b      	bne.n	80093a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f06f 0204 	mvn.w	r2, #4
 8009374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 faf2 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 8009390:	e005      	b.n	800939e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fae4 	bl	8009960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 faf5 	bl	8009988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d122      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d11b      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f06f 0208 	mvn.w	r2, #8
 80093c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2204      	movs	r2, #4
 80093ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fac8 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 80093e4:	e005      	b.n	80093f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 faba 	bl	8009960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 facb 	bl	8009988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0310 	and.w	r3, r3, #16
 8009402:	2b10      	cmp	r3, #16
 8009404:	d122      	bne.n	800944c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b10      	cmp	r3, #16
 8009412:	d11b      	bne.n	800944c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0210 	mvn.w	r2, #16
 800941c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2208      	movs	r2, #8
 8009422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa9e 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 8009438:	e005      	b.n	8009446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa90 	bl	8009960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 faa1 	bl	8009988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10e      	bne.n	8009478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b01      	cmp	r3, #1
 8009466:	d107      	bne.n	8009478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0201 	mvn.w	r2, #1
 8009470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa6a 	bl	800994c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	d10e      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009490:	2b80      	cmp	r3, #128	; 0x80
 8009492:	d107      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800949c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 ffd0 	bl	800a444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b2:	d10e      	bne.n	80094d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094be:	2b80      	cmp	r3, #128	; 0x80
 80094c0:	d107      	bne.n	80094d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 ffc3 	bl	800a458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d10e      	bne.n	80094fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d107      	bne.n	80094fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa4f 	bl	800999c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b20      	cmp	r3, #32
 800950a:	d10e      	bne.n	800952a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b20      	cmp	r3, #32
 8009518:	d107      	bne.n	800952a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f06f 0220 	mvn.w	r2, #32
 8009522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 ff83 	bl	800a430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800954e:	2302      	movs	r3, #2
 8009550:	e0ff      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b14      	cmp	r3, #20
 800955e:	f200 80f0 	bhi.w	8009742 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	080095bd 	.word	0x080095bd
 800956c:	08009743 	.word	0x08009743
 8009570:	08009743 	.word	0x08009743
 8009574:	08009743 	.word	0x08009743
 8009578:	080095fd 	.word	0x080095fd
 800957c:	08009743 	.word	0x08009743
 8009580:	08009743 	.word	0x08009743
 8009584:	08009743 	.word	0x08009743
 8009588:	0800963f 	.word	0x0800963f
 800958c:	08009743 	.word	0x08009743
 8009590:	08009743 	.word	0x08009743
 8009594:	08009743 	.word	0x08009743
 8009598:	0800967f 	.word	0x0800967f
 800959c:	08009743 	.word	0x08009743
 80095a0:	08009743 	.word	0x08009743
 80095a4:	08009743 	.word	0x08009743
 80095a8:	080096c1 	.word	0x080096c1
 80095ac:	08009743 	.word	0x08009743
 80095b0:	08009743 	.word	0x08009743
 80095b4:	08009743 	.word	0x08009743
 80095b8:	08009701 	.word	0x08009701
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fa8e 	bl	8009ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0208 	orr.w	r2, r2, #8
 80095d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0204 	bic.w	r2, r2, #4
 80095e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6999      	ldr	r1, [r3, #24]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	619a      	str	r2, [r3, #24]
      break;
 80095fa:	e0a5      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68b9      	ldr	r1, [r7, #8]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fafe 	bl	8009c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699a      	ldr	r2, [r3, #24]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6999      	ldr	r1, [r3, #24]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	021a      	lsls	r2, r3, #8
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	619a      	str	r2, [r3, #24]
      break;
 800963c:	e084      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fb67 	bl	8009d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0208 	orr.w	r2, r2, #8
 8009658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0204 	bic.w	r2, r2, #4
 8009668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69d9      	ldr	r1, [r3, #28]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	61da      	str	r2, [r3, #28]
      break;
 800967c:	e064      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fbcf 	bl	8009e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69d9      	ldr	r1, [r3, #28]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	021a      	lsls	r2, r3, #8
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	61da      	str	r2, [r3, #28]
      break;
 80096be:	e043      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fc18 	bl	8009efc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0208 	orr.w	r2, r2, #8
 80096da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0204 	bic.w	r2, r2, #4
 80096ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096fe:	e023      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fc5c 	bl	8009fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800971a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800972a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	021a      	lsls	r2, r3, #8
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009740:	e002      	b.n	8009748 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	75fb      	strb	r3, [r7, #23]
      break;
 8009746:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop

0800975c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_TIM_ConfigClockSource+0x1c>
 8009774:	2302      	movs	r3, #2
 8009776:	e0dc      	b.n	8009932 <HAL_TIM_ConfigClockSource+0x1d6>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	4b6a      	ldr	r3, [pc, #424]	; (800993c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009794:	4013      	ands	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800979e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a64      	ldr	r2, [pc, #400]	; (8009940 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	f000 80a9 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 80097b4:	4a62      	ldr	r2, [pc, #392]	; (8009940 <HAL_TIM_ConfigClockSource+0x1e4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	f200 80ae 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 80097bc:	4a61      	ldr	r2, [pc, #388]	; (8009944 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	f000 80a1 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 80097c4:	4a5f      	ldr	r2, [pc, #380]	; (8009944 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	f200 80a6 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 80097cc:	4a5e      	ldr	r2, [pc, #376]	; (8009948 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	f000 8099 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 80097d4:	4a5c      	ldr	r2, [pc, #368]	; (8009948 <HAL_TIM_ConfigClockSource+0x1ec>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	f200 809e 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 80097dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097e0:	f000 8091 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 80097e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097e8:	f200 8096 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 80097ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f0:	f000 8089 	beq.w	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 80097f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f8:	f200 808e 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 80097fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009800:	d03e      	beq.n	8009880 <HAL_TIM_ConfigClockSource+0x124>
 8009802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009806:	f200 8087 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 800980a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980e:	f000 8086 	beq.w	800991e <HAL_TIM_ConfigClockSource+0x1c2>
 8009812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009816:	d87f      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009818:	2b70      	cmp	r3, #112	; 0x70
 800981a:	d01a      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0xf6>
 800981c:	2b70      	cmp	r3, #112	; 0x70
 800981e:	d87b      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009820:	2b60      	cmp	r3, #96	; 0x60
 8009822:	d050      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x16a>
 8009824:	2b60      	cmp	r3, #96	; 0x60
 8009826:	d877      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009828:	2b50      	cmp	r3, #80	; 0x50
 800982a:	d03c      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x14a>
 800982c:	2b50      	cmp	r3, #80	; 0x50
 800982e:	d873      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	d058      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x18a>
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	d86f      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d064      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 800983c:	2b30      	cmp	r3, #48	; 0x30
 800983e:	d86b      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009840:	2b20      	cmp	r3, #32
 8009842:	d060      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 8009844:	2b20      	cmp	r3, #32
 8009846:	d867      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d05c      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 800984c:	2b10      	cmp	r3, #16
 800984e:	d05a      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x1aa>
 8009850:	e062      	b.n	8009918 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6899      	ldr	r1, [r3, #8]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f000 fc93 	bl	800a18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	609a      	str	r2, [r3, #8]
      break;
 800987e:	e04f      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6899      	ldr	r1, [r3, #8]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f000 fc7c 	bl	800a18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098a2:	609a      	str	r2, [r3, #8]
      break;
 80098a4:	e03c      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6859      	ldr	r1, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f000 fbec 	bl	800a090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2150      	movs	r1, #80	; 0x50
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fc46 	bl	800a150 <TIM_ITRx_SetConfig>
      break;
 80098c4:	e02c      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6859      	ldr	r1, [r3, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	461a      	mov	r2, r3
 80098d4:	f000 fc0b 	bl	800a0ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2160      	movs	r1, #96	; 0x60
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fc36 	bl	800a150 <TIM_ITRx_SetConfig>
      break;
 80098e4:	e01c      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6859      	ldr	r1, [r3, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	461a      	mov	r2, r3
 80098f4:	f000 fbcc 	bl	800a090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2140      	movs	r1, #64	; 0x40
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fc26 	bl	800a150 <TIM_ITRx_SetConfig>
      break;
 8009904:	e00c      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f000 fc1d 	bl	800a150 <TIM_ITRx_SetConfig>
      break;
 8009916:	e003      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
      break;
 800991c:	e000      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800991e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	ffceff88 	.word	0xffceff88
 8009940:	00100040 	.word	0x00100040
 8009944:	00100030 	.word	0x00100030
 8009948:	00100020 	.word	0x00100020

0800994c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a40      	ldr	r2, [pc, #256]	; (8009ac4 <TIM_Base_SetConfig+0x114>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d013      	beq.n	80099f0 <TIM_Base_SetConfig+0x40>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ce:	d00f      	beq.n	80099f0 <TIM_Base_SetConfig+0x40>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a3d      	ldr	r2, [pc, #244]	; (8009ac8 <TIM_Base_SetConfig+0x118>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00b      	beq.n	80099f0 <TIM_Base_SetConfig+0x40>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a3c      	ldr	r2, [pc, #240]	; (8009acc <TIM_Base_SetConfig+0x11c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <TIM_Base_SetConfig+0x40>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a3b      	ldr	r2, [pc, #236]	; (8009ad0 <TIM_Base_SetConfig+0x120>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_Base_SetConfig+0x40>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a3a      	ldr	r2, [pc, #232]	; (8009ad4 <TIM_Base_SetConfig+0x124>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d108      	bne.n	8009a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a2f      	ldr	r2, [pc, #188]	; (8009ac4 <TIM_Base_SetConfig+0x114>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01f      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a10:	d01b      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a2c      	ldr	r2, [pc, #176]	; (8009ac8 <TIM_Base_SetConfig+0x118>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d017      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a2b      	ldr	r2, [pc, #172]	; (8009acc <TIM_Base_SetConfig+0x11c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a2a      	ldr	r2, [pc, #168]	; (8009ad0 <TIM_Base_SetConfig+0x120>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a29      	ldr	r2, [pc, #164]	; (8009ad4 <TIM_Base_SetConfig+0x124>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a28      	ldr	r2, [pc, #160]	; (8009ad8 <TIM_Base_SetConfig+0x128>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a27      	ldr	r2, [pc, #156]	; (8009adc <TIM_Base_SetConfig+0x12c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_Base_SetConfig+0x9a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <TIM_Base_SetConfig+0x130>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d108      	bne.n	8009a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a10      	ldr	r2, [pc, #64]	; (8009ac4 <TIM_Base_SetConfig+0x114>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00f      	beq.n	8009aa8 <TIM_Base_SetConfig+0xf8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a12      	ldr	r2, [pc, #72]	; (8009ad4 <TIM_Base_SetConfig+0x124>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00b      	beq.n	8009aa8 <TIM_Base_SetConfig+0xf8>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a11      	ldr	r2, [pc, #68]	; (8009ad8 <TIM_Base_SetConfig+0x128>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d007      	beq.n	8009aa8 <TIM_Base_SetConfig+0xf8>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a10      	ldr	r2, [pc, #64]	; (8009adc <TIM_Base_SetConfig+0x12c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_Base_SetConfig+0xf8>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a0f      	ldr	r2, [pc, #60]	; (8009ae0 <TIM_Base_SetConfig+0x130>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d103      	bne.n	8009ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	615a      	str	r2, [r3, #20]
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	40010000 	.word	0x40010000
 8009ac8:	40000400 	.word	0x40000400
 8009acc:	40000800 	.word	0x40000800
 8009ad0:	40000c00 	.word	0x40000c00
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f023 0201 	bic.w	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4b37      	ldr	r3, [pc, #220]	; (8009bec <TIM_OC1_SetConfig+0x108>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0303 	bic.w	r3, r3, #3
 8009b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f023 0302 	bic.w	r3, r3, #2
 8009b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a2d      	ldr	r2, [pc, #180]	; (8009bf0 <TIM_OC1_SetConfig+0x10c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00f      	beq.n	8009b60 <TIM_OC1_SetConfig+0x7c>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a2c      	ldr	r2, [pc, #176]	; (8009bf4 <TIM_OC1_SetConfig+0x110>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00b      	beq.n	8009b60 <TIM_OC1_SetConfig+0x7c>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a2b      	ldr	r2, [pc, #172]	; (8009bf8 <TIM_OC1_SetConfig+0x114>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d007      	beq.n	8009b60 <TIM_OC1_SetConfig+0x7c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a2a      	ldr	r2, [pc, #168]	; (8009bfc <TIM_OC1_SetConfig+0x118>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d003      	beq.n	8009b60 <TIM_OC1_SetConfig+0x7c>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a29      	ldr	r2, [pc, #164]	; (8009c00 <TIM_OC1_SetConfig+0x11c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10c      	bne.n	8009b7a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f023 0308 	bic.w	r3, r3, #8
 8009b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f023 0304 	bic.w	r3, r3, #4
 8009b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a1c      	ldr	r2, [pc, #112]	; (8009bf0 <TIM_OC1_SetConfig+0x10c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00f      	beq.n	8009ba2 <TIM_OC1_SetConfig+0xbe>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <TIM_OC1_SetConfig+0x110>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d00b      	beq.n	8009ba2 <TIM_OC1_SetConfig+0xbe>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a1a      	ldr	r2, [pc, #104]	; (8009bf8 <TIM_OC1_SetConfig+0x114>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d007      	beq.n	8009ba2 <TIM_OC1_SetConfig+0xbe>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a19      	ldr	r2, [pc, #100]	; (8009bfc <TIM_OC1_SetConfig+0x118>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d003      	beq.n	8009ba2 <TIM_OC1_SetConfig+0xbe>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a18      	ldr	r2, [pc, #96]	; (8009c00 <TIM_OC1_SetConfig+0x11c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d111      	bne.n	8009bc6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	621a      	str	r2, [r3, #32]
}
 8009be0:	bf00      	nop
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	fffeff8f 	.word	0xfffeff8f
 8009bf0:	40010000 	.word	0x40010000
 8009bf4:	40010400 	.word	0x40010400
 8009bf8:	40014000 	.word	0x40014000
 8009bfc:	40014400 	.word	0x40014400
 8009c00:	40014800 	.word	0x40014800

08009c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f023 0210 	bic.w	r2, r3, #16
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4b34      	ldr	r3, [pc, #208]	; (8009d00 <TIM_OC2_SetConfig+0xfc>)
 8009c30:	4013      	ands	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f023 0320 	bic.w	r3, r3, #32
 8009c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a29      	ldr	r2, [pc, #164]	; (8009d04 <TIM_OC2_SetConfig+0x100>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d003      	beq.n	8009c6c <TIM_OC2_SetConfig+0x68>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a28      	ldr	r2, [pc, #160]	; (8009d08 <TIM_OC2_SetConfig+0x104>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d10d      	bne.n	8009c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a1e      	ldr	r2, [pc, #120]	; (8009d04 <TIM_OC2_SetConfig+0x100>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00f      	beq.n	8009cb0 <TIM_OC2_SetConfig+0xac>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <TIM_OC2_SetConfig+0x104>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00b      	beq.n	8009cb0 <TIM_OC2_SetConfig+0xac>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <TIM_OC2_SetConfig+0x108>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d007      	beq.n	8009cb0 <TIM_OC2_SetConfig+0xac>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a1b      	ldr	r2, [pc, #108]	; (8009d10 <TIM_OC2_SetConfig+0x10c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d003      	beq.n	8009cb0 <TIM_OC2_SetConfig+0xac>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a1a      	ldr	r2, [pc, #104]	; (8009d14 <TIM_OC2_SetConfig+0x110>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d113      	bne.n	8009cd8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	621a      	str	r2, [r3, #32]
}
 8009cf2:	bf00      	nop
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	feff8fff 	.word	0xfeff8fff
 8009d04:	40010000 	.word	0x40010000
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	40014000 	.word	0x40014000
 8009d10:	40014400 	.word	0x40014400
 8009d14:	40014800 	.word	0x40014800

08009d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4b33      	ldr	r3, [pc, #204]	; (8009e10 <TIM_OC3_SetConfig+0xf8>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a28      	ldr	r2, [pc, #160]	; (8009e14 <TIM_OC3_SetConfig+0xfc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d003      	beq.n	8009d7e <TIM_OC3_SetConfig+0x66>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a27      	ldr	r2, [pc, #156]	; (8009e18 <TIM_OC3_SetConfig+0x100>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d10d      	bne.n	8009d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a1d      	ldr	r2, [pc, #116]	; (8009e14 <TIM_OC3_SetConfig+0xfc>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00f      	beq.n	8009dc2 <TIM_OC3_SetConfig+0xaa>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a1c      	ldr	r2, [pc, #112]	; (8009e18 <TIM_OC3_SetConfig+0x100>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00b      	beq.n	8009dc2 <TIM_OC3_SetConfig+0xaa>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <TIM_OC3_SetConfig+0x104>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d007      	beq.n	8009dc2 <TIM_OC3_SetConfig+0xaa>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a1a      	ldr	r2, [pc, #104]	; (8009e20 <TIM_OC3_SetConfig+0x108>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d003      	beq.n	8009dc2 <TIM_OC3_SetConfig+0xaa>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <TIM_OC3_SetConfig+0x10c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d113      	bne.n	8009dea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	621a      	str	r2, [r3, #32]
}
 8009e04:	bf00      	nop
 8009e06:	371c      	adds	r7, #28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	fffeff8f 	.word	0xfffeff8f
 8009e14:	40010000 	.word	0x40010000
 8009e18:	40010400 	.word	0x40010400
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	40014400 	.word	0x40014400
 8009e24:	40014800 	.word	0x40014800

08009e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <TIM_OC4_SetConfig+0xbc>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	031b      	lsls	r3, r3, #12
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <TIM_OC4_SetConfig+0xc0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00f      	beq.n	8009ea8 <TIM_OC4_SetConfig+0x80>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a18      	ldr	r2, [pc, #96]	; (8009eec <TIM_OC4_SetConfig+0xc4>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00b      	beq.n	8009ea8 <TIM_OC4_SetConfig+0x80>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <TIM_OC4_SetConfig+0xc8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d007      	beq.n	8009ea8 <TIM_OC4_SetConfig+0x80>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <TIM_OC4_SetConfig+0xcc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_OC4_SetConfig+0x80>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <TIM_OC4_SetConfig+0xd0>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d109      	bne.n	8009ebc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	019b      	lsls	r3, r3, #6
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	621a      	str	r2, [r3, #32]
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	feff8fff 	.word	0xfeff8fff
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40014400 	.word	0x40014400
 8009ef8:	40014800 	.word	0x40014800

08009efc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4b21      	ldr	r3, [pc, #132]	; (8009fac <TIM_OC5_SetConfig+0xb0>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	041b      	lsls	r3, r3, #16
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <TIM_OC5_SetConfig+0xb4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00f      	beq.n	8009f72 <TIM_OC5_SetConfig+0x76>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <TIM_OC5_SetConfig+0xb8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00b      	beq.n	8009f72 <TIM_OC5_SetConfig+0x76>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a16      	ldr	r2, [pc, #88]	; (8009fb8 <TIM_OC5_SetConfig+0xbc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d007      	beq.n	8009f72 <TIM_OC5_SetConfig+0x76>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a15      	ldr	r2, [pc, #84]	; (8009fbc <TIM_OC5_SetConfig+0xc0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_OC5_SetConfig+0x76>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a14      	ldr	r2, [pc, #80]	; (8009fc0 <TIM_OC5_SetConfig+0xc4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d109      	bne.n	8009f86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	621a      	str	r2, [r3, #32]
}
 8009fa0:	bf00      	nop
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	fffeff8f 	.word	0xfffeff8f
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400
 8009fb8:	40014000 	.word	0x40014000
 8009fbc:	40014400 	.word	0x40014400
 8009fc0:	40014800 	.word	0x40014800

08009fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4b22      	ldr	r3, [pc, #136]	; (800a078 <TIM_OC6_SetConfig+0xb4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	051b      	lsls	r3, r3, #20
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a19      	ldr	r2, [pc, #100]	; (800a07c <TIM_OC6_SetConfig+0xb8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00f      	beq.n	800a03c <TIM_OC6_SetConfig+0x78>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a18      	ldr	r2, [pc, #96]	; (800a080 <TIM_OC6_SetConfig+0xbc>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00b      	beq.n	800a03c <TIM_OC6_SetConfig+0x78>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a17      	ldr	r2, [pc, #92]	; (800a084 <TIM_OC6_SetConfig+0xc0>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <TIM_OC6_SetConfig+0x78>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a16      	ldr	r2, [pc, #88]	; (800a088 <TIM_OC6_SetConfig+0xc4>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_OC6_SetConfig+0x78>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a15      	ldr	r2, [pc, #84]	; (800a08c <TIM_OC6_SetConfig+0xc8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d109      	bne.n	800a050 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	029b      	lsls	r3, r3, #10
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	621a      	str	r2, [r3, #32]
}
 800a06a:	bf00      	nop
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	feff8fff 	.word	0xfeff8fff
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400
 800a084:	40014000 	.word	0x40014000
 800a088:	40014400 	.word	0x40014400
 800a08c:	40014800 	.word	0x40014800

0800a090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	f023 0201 	bic.w	r2, r3, #1
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f023 030a 	bic.w	r3, r3, #10
 800a0cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	621a      	str	r2, [r3, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b087      	sub	sp, #28
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f023 0210 	bic.w	r2, r3, #16
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	031b      	lsls	r3, r3, #12
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4313      	orrs	r3, r2
 800a122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a12a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	621a      	str	r2, [r3, #32]
}
 800a142:	bf00      	nop
 800a144:	371c      	adds	r7, #28
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <TIM_ITRx_SetConfig+0x38>)
 800a164:	4013      	ands	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	f043 0307 	orr.w	r3, r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	609a      	str	r2, [r3, #8]
}
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	ffcfff8f 	.word	0xffcfff8f

0800a18c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	021a      	lsls	r2, r3, #8
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	609a      	str	r2, [r3, #8]
}
 800a1c0:	bf00      	nop
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 031f 	and.w	r3, r3, #31
 800a1de:	2201      	movs	r2, #1
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1a      	ldr	r2, [r3, #32]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	43db      	mvns	r3, r3
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 031f 	and.w	r3, r3, #31
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	fa01 f303 	lsl.w	r3, r1, r3
 800a204:	431a      	orrs	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e06d      	b.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a30      	ldr	r2, [pc, #192]	; (800a318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d004      	beq.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a2f      	ldr	r2, [pc, #188]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d108      	bne.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a26a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a20      	ldr	r2, [pc, #128]	; (800a318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d022      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a2:	d01d      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a1d      	ldr	r2, [pc, #116]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d018      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1a      	ldr	r2, [pc, #104]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00e      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a15      	ldr	r2, [pc, #84]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d009      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a16      	ldr	r2, [pc, #88]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d004      	beq.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a15      	ldr	r2, [pc, #84]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10c      	bne.n	800a2fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40010000 	.word	0x40010000
 800a31c:	40010400 	.word	0x40010400
 800a320:	40000400 	.word	0x40000400
 800a324:	40000800 	.word	0x40000800
 800a328:	40000c00 	.word	0x40000c00
 800a32c:	40001800 	.word	0x40001800
 800a330:	40014000 	.word	0x40014000

0800a334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e065      	b.n	800a41c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a16      	ldr	r2, [pc, #88]	; (800a428 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d004      	beq.n	800a3de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a14      	ldr	r2, [pc, #80]	; (800a42c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d115      	bne.n	800a40a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	051b      	lsls	r3, r3, #20
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	40010000 	.word	0x40010000
 800a42c:	40010400 	.word	0x40010400

0800a430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e042      	b.n	800a504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a484:	2b00      	cmp	r3, #0
 800a486:	d106      	bne.n	800a496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7f9 f927 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2224      	movs	r2, #36	; 0x24
 800a49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0201 	bic.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8c2 	bl	800a638 <UART_SetConfig>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e022      	b.n	800a504 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fe1e 	bl	800b108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fea5 	bl	800b24c <UART_CheckIdleState>
 800a502:	4603      	mov	r3, r0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	4613      	mov	r3, r2
 800a51a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a522:	2b20      	cmp	r3, #32
 800a524:	f040 8083 	bne.w	800a62e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_UART_Transmit+0x28>
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e07b      	b.n	800a630 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_UART_Transmit+0x3a>
 800a542:	2302      	movs	r3, #2
 800a544:	e074      	b.n	800a630 <HAL_UART_Transmit+0x124>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2221      	movs	r2, #33	; 0x21
 800a55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a55e:	f7f9 fadd 	bl	8003b1c <HAL_GetTick>
 800a562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	88fa      	ldrh	r2, [r7, #6]
 800a568:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	88fa      	ldrh	r2, [r7, #6]
 800a570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a57c:	d108      	bne.n	800a590 <HAL_UART_Transmit+0x84>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d104      	bne.n	800a590 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	e003      	b.n	800a598 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a594:	2300      	movs	r3, #0
 800a596:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a5a0:	e02c      	b.n	800a5fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2180      	movs	r1, #128	; 0x80
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fe98 	bl	800b2e2 <UART_WaitOnFlagUntilTimeout>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e039      	b.n	800a630 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	61bb      	str	r3, [r7, #24]
 800a5d8:	e007      	b.n	800a5ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	781a      	ldrb	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a602:	b29b      	uxth	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1cc      	bne.n	800a5a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2200      	movs	r2, #0
 800a610:	2140      	movs	r1, #64	; 0x40
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 fe65 	bl	800b2e2 <UART_WaitOnFlagUntilTimeout>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e006      	b.n	800a630 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e000      	b.n	800a630 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a62e:	2302      	movs	r3, #2
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3720      	adds	r7, #32
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a63c:	b092      	sub	sp, #72	; 0x48
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	431a      	orrs	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	431a      	orrs	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	4bbe      	ldr	r3, [pc, #760]	; (800a960 <UART_SetConfig+0x328>)
 800a668:	4013      	ands	r3, r2
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a670:	430b      	orrs	r3, r1
 800a672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4ab3      	ldr	r2, [pc, #716]	; (800a964 <UART_SetConfig+0x32c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	4baf      	ldr	r3, [pc, #700]	; (800a968 <UART_SetConfig+0x330>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	f023 010f 	bic.w	r1, r3, #15
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4aa6      	ldr	r2, [pc, #664]	; (800a96c <UART_SetConfig+0x334>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d177      	bne.n	800a7c8 <UART_SetConfig+0x190>
 800a6d8:	4ba5      	ldr	r3, [pc, #660]	; (800a970 <UART_SetConfig+0x338>)
 800a6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6e0:	2b28      	cmp	r3, #40	; 0x28
 800a6e2:	d86d      	bhi.n	800a7c0 <UART_SetConfig+0x188>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <UART_SetConfig+0xb4>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a791 	.word	0x0800a791
 800a6f0:	0800a7c1 	.word	0x0800a7c1
 800a6f4:	0800a7c1 	.word	0x0800a7c1
 800a6f8:	0800a7c1 	.word	0x0800a7c1
 800a6fc:	0800a7c1 	.word	0x0800a7c1
 800a700:	0800a7c1 	.word	0x0800a7c1
 800a704:	0800a7c1 	.word	0x0800a7c1
 800a708:	0800a7c1 	.word	0x0800a7c1
 800a70c:	0800a799 	.word	0x0800a799
 800a710:	0800a7c1 	.word	0x0800a7c1
 800a714:	0800a7c1 	.word	0x0800a7c1
 800a718:	0800a7c1 	.word	0x0800a7c1
 800a71c:	0800a7c1 	.word	0x0800a7c1
 800a720:	0800a7c1 	.word	0x0800a7c1
 800a724:	0800a7c1 	.word	0x0800a7c1
 800a728:	0800a7c1 	.word	0x0800a7c1
 800a72c:	0800a7a1 	.word	0x0800a7a1
 800a730:	0800a7c1 	.word	0x0800a7c1
 800a734:	0800a7c1 	.word	0x0800a7c1
 800a738:	0800a7c1 	.word	0x0800a7c1
 800a73c:	0800a7c1 	.word	0x0800a7c1
 800a740:	0800a7c1 	.word	0x0800a7c1
 800a744:	0800a7c1 	.word	0x0800a7c1
 800a748:	0800a7c1 	.word	0x0800a7c1
 800a74c:	0800a7a9 	.word	0x0800a7a9
 800a750:	0800a7c1 	.word	0x0800a7c1
 800a754:	0800a7c1 	.word	0x0800a7c1
 800a758:	0800a7c1 	.word	0x0800a7c1
 800a75c:	0800a7c1 	.word	0x0800a7c1
 800a760:	0800a7c1 	.word	0x0800a7c1
 800a764:	0800a7c1 	.word	0x0800a7c1
 800a768:	0800a7c1 	.word	0x0800a7c1
 800a76c:	0800a7b1 	.word	0x0800a7b1
 800a770:	0800a7c1 	.word	0x0800a7c1
 800a774:	0800a7c1 	.word	0x0800a7c1
 800a778:	0800a7c1 	.word	0x0800a7c1
 800a77c:	0800a7c1 	.word	0x0800a7c1
 800a780:	0800a7c1 	.word	0x0800a7c1
 800a784:	0800a7c1 	.word	0x0800a7c1
 800a788:	0800a7c1 	.word	0x0800a7c1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	2301      	movs	r3, #1
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e222      	b.n	800abde <UART_SetConfig+0x5a6>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e21e      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e21a      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e216      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e212      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e20e      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e20a      	b.n	800abde <UART_SetConfig+0x5a6>
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a69      	ldr	r2, [pc, #420]	; (800a974 <UART_SetConfig+0x33c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d130      	bne.n	800a834 <UART_SetConfig+0x1fc>
 800a7d2:	4b67      	ldr	r3, [pc, #412]	; (800a970 <UART_SetConfig+0x338>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d826      	bhi.n	800a82c <UART_SetConfig+0x1f4>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <UART_SetConfig+0x1ac>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a7fd 	.word	0x0800a7fd
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e1ec      	b.n	800abde <UART_SetConfig+0x5a6>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e1e8      	b.n	800abde <UART_SetConfig+0x5a6>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e1e4      	b.n	800abde <UART_SetConfig+0x5a6>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e1e0      	b.n	800abde <UART_SetConfig+0x5a6>
 800a81c:	2320      	movs	r3, #32
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a822:	e1dc      	b.n	800abde <UART_SetConfig+0x5a6>
 800a824:	2340      	movs	r3, #64	; 0x40
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82a:	e1d8      	b.n	800abde <UART_SetConfig+0x5a6>
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a832:	e1d4      	b.n	800abde <UART_SetConfig+0x5a6>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a4f      	ldr	r2, [pc, #316]	; (800a978 <UART_SetConfig+0x340>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d130      	bne.n	800a8a0 <UART_SetConfig+0x268>
 800a83e:	4b4c      	ldr	r3, [pc, #304]	; (800a970 <UART_SetConfig+0x338>)
 800a840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b05      	cmp	r3, #5
 800a848:	d826      	bhi.n	800a898 <UART_SetConfig+0x260>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0x218>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a869 	.word	0x0800a869
 800a854:	0800a871 	.word	0x0800a871
 800a858:	0800a879 	.word	0x0800a879
 800a85c:	0800a881 	.word	0x0800a881
 800a860:	0800a889 	.word	0x0800a889
 800a864:	0800a891 	.word	0x0800a891
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e1b6      	b.n	800abde <UART_SetConfig+0x5a6>
 800a870:	2304      	movs	r3, #4
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e1b2      	b.n	800abde <UART_SetConfig+0x5a6>
 800a878:	2308      	movs	r3, #8
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e1ae      	b.n	800abde <UART_SetConfig+0x5a6>
 800a880:	2310      	movs	r3, #16
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e1aa      	b.n	800abde <UART_SetConfig+0x5a6>
 800a888:	2320      	movs	r3, #32
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e1a6      	b.n	800abde <UART_SetConfig+0x5a6>
 800a890:	2340      	movs	r3, #64	; 0x40
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e1a2      	b.n	800abde <UART_SetConfig+0x5a6>
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89e:	e19e      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a35      	ldr	r2, [pc, #212]	; (800a97c <UART_SetConfig+0x344>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d130      	bne.n	800a90c <UART_SetConfig+0x2d4>
 800a8aa:	4b31      	ldr	r3, [pc, #196]	; (800a970 <UART_SetConfig+0x338>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d826      	bhi.n	800a904 <UART_SetConfig+0x2cc>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <UART_SetConfig+0x284>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8e5 	.word	0x0800a8e5
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8f5 	.word	0x0800a8f5
 800a8d0:	0800a8fd 	.word	0x0800a8fd
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e180      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e17c      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	e178      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e174      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e170      	b.n	800abde <UART_SetConfig+0x5a6>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e16c      	b.n	800abde <UART_SetConfig+0x5a6>
 800a904:	2380      	movs	r3, #128	; 0x80
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90a:	e168      	b.n	800abde <UART_SetConfig+0x5a6>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a1b      	ldr	r2, [pc, #108]	; (800a980 <UART_SetConfig+0x348>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d142      	bne.n	800a99c <UART_SetConfig+0x364>
 800a916:	4b16      	ldr	r3, [pc, #88]	; (800a970 <UART_SetConfig+0x338>)
 800a918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d838      	bhi.n	800a994 <UART_SetConfig+0x35c>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0x2f0>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a951 	.word	0x0800a951
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a985 	.word	0x0800a985
 800a93c:	0800a98d 	.word	0x0800a98d
 800a940:	2300      	movs	r3, #0
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e14a      	b.n	800abde <UART_SetConfig+0x5a6>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e146      	b.n	800abde <UART_SetConfig+0x5a6>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a956:	e142      	b.n	800abde <UART_SetConfig+0x5a6>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95e:	e13e      	b.n	800abde <UART_SetConfig+0x5a6>
 800a960:	cfff69f3 	.word	0xcfff69f3
 800a964:	58000c00 	.word	0x58000c00
 800a968:	11fff4ff 	.word	0x11fff4ff
 800a96c:	40011000 	.word	0x40011000
 800a970:	58024400 	.word	0x58024400
 800a974:	40004400 	.word	0x40004400
 800a978:	40004800 	.word	0x40004800
 800a97c:	40004c00 	.word	0x40004c00
 800a980:	40005000 	.word	0x40005000
 800a984:	2320      	movs	r3, #32
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98a:	e128      	b.n	800abde <UART_SetConfig+0x5a6>
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a992:	e124      	b.n	800abde <UART_SetConfig+0x5a6>
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99a:	e120      	b.n	800abde <UART_SetConfig+0x5a6>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4acb      	ldr	r2, [pc, #812]	; (800acd0 <UART_SetConfig+0x698>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d176      	bne.n	800aa94 <UART_SetConfig+0x45c>
 800a9a6:	4bcb      	ldr	r3, [pc, #812]	; (800acd4 <UART_SetConfig+0x69c>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9ae:	2b28      	cmp	r3, #40	; 0x28
 800a9b0:	d86c      	bhi.n	800aa8c <UART_SetConfig+0x454>
 800a9b2:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <UART_SetConfig+0x380>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800aa5d 	.word	0x0800aa5d
 800a9bc:	0800aa8d 	.word	0x0800aa8d
 800a9c0:	0800aa8d 	.word	0x0800aa8d
 800a9c4:	0800aa8d 	.word	0x0800aa8d
 800a9c8:	0800aa8d 	.word	0x0800aa8d
 800a9cc:	0800aa8d 	.word	0x0800aa8d
 800a9d0:	0800aa8d 	.word	0x0800aa8d
 800a9d4:	0800aa8d 	.word	0x0800aa8d
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa8d 	.word	0x0800aa8d
 800a9e0:	0800aa8d 	.word	0x0800aa8d
 800a9e4:	0800aa8d 	.word	0x0800aa8d
 800a9e8:	0800aa8d 	.word	0x0800aa8d
 800a9ec:	0800aa8d 	.word	0x0800aa8d
 800a9f0:	0800aa8d 	.word	0x0800aa8d
 800a9f4:	0800aa8d 	.word	0x0800aa8d
 800a9f8:	0800aa6d 	.word	0x0800aa6d
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa8d 	.word	0x0800aa8d
 800aa10:	0800aa8d 	.word	0x0800aa8d
 800aa14:	0800aa8d 	.word	0x0800aa8d
 800aa18:	0800aa75 	.word	0x0800aa75
 800aa1c:	0800aa8d 	.word	0x0800aa8d
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800aa8d 	.word	0x0800aa8d
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aa7d 	.word	0x0800aa7d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa8d 	.word	0x0800aa8d
 800aa54:	0800aa8d 	.word	0x0800aa8d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e0bc      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e0b8      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e0b4      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7a:	e0b0      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa82:	e0ac      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa84:	2340      	movs	r3, #64	; 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e0a8      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa8c:	2380      	movs	r3, #128	; 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e0a4      	b.n	800abde <UART_SetConfig+0x5a6>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a8f      	ldr	r2, [pc, #572]	; (800acd8 <UART_SetConfig+0x6a0>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d130      	bne.n	800ab00 <UART_SetConfig+0x4c8>
 800aa9e:	4b8d      	ldr	r3, [pc, #564]	; (800acd4 <UART_SetConfig+0x69c>)
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d826      	bhi.n	800aaf8 <UART_SetConfig+0x4c0>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <UART_SetConfig+0x478>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac9 	.word	0x0800aac9
 800aab4:	0800aad1 	.word	0x0800aad1
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800aae1 	.word	0x0800aae1
 800aac0:	0800aae9 	.word	0x0800aae9
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	2300      	movs	r3, #0
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aace:	e086      	b.n	800abde <UART_SetConfig+0x5a6>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad6:	e082      	b.n	800abde <UART_SetConfig+0x5a6>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aade:	e07e      	b.n	800abde <UART_SetConfig+0x5a6>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae6:	e07a      	b.n	800abde <UART_SetConfig+0x5a6>
 800aae8:	2320      	movs	r3, #32
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaee:	e076      	b.n	800abde <UART_SetConfig+0x5a6>
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf6:	e072      	b.n	800abde <UART_SetConfig+0x5a6>
 800aaf8:	2380      	movs	r3, #128	; 0x80
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafe:	e06e      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a75      	ldr	r2, [pc, #468]	; (800acdc <UART_SetConfig+0x6a4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d130      	bne.n	800ab6c <UART_SetConfig+0x534>
 800ab0a:	4b72      	ldr	r3, [pc, #456]	; (800acd4 <UART_SetConfig+0x69c>)
 800ab0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0e:	f003 0307 	and.w	r3, r3, #7
 800ab12:	2b05      	cmp	r3, #5
 800ab14:	d826      	bhi.n	800ab64 <UART_SetConfig+0x52c>
 800ab16:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <UART_SetConfig+0x4e4>)
 800ab18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1c:	0800ab35 	.word	0x0800ab35
 800ab20:	0800ab3d 	.word	0x0800ab3d
 800ab24:	0800ab45 	.word	0x0800ab45
 800ab28:	0800ab4d 	.word	0x0800ab4d
 800ab2c:	0800ab55 	.word	0x0800ab55
 800ab30:	0800ab5d 	.word	0x0800ab5d
 800ab34:	2300      	movs	r3, #0
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3a:	e050      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e04c      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab44:	2308      	movs	r3, #8
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4a:	e048      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab52:	e044      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab54:	2320      	movs	r3, #32
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5a:	e040      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab5c:	2340      	movs	r3, #64	; 0x40
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab62:	e03c      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab64:	2380      	movs	r3, #128	; 0x80
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e038      	b.n	800abde <UART_SetConfig+0x5a6>
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a5b      	ldr	r2, [pc, #364]	; (800ace0 <UART_SetConfig+0x6a8>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d130      	bne.n	800abd8 <UART_SetConfig+0x5a0>
 800ab76:	4b57      	ldr	r3, [pc, #348]	; (800acd4 <UART_SetConfig+0x69c>)
 800ab78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	2b05      	cmp	r3, #5
 800ab80:	d826      	bhi.n	800abd0 <UART_SetConfig+0x598>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <UART_SetConfig+0x550>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800aba1 	.word	0x0800aba1
 800ab8c:	0800aba9 	.word	0x0800aba9
 800ab90:	0800abb1 	.word	0x0800abb1
 800ab94:	0800abb9 	.word	0x0800abb9
 800ab98:	0800abc1 	.word	0x0800abc1
 800ab9c:	0800abc9 	.word	0x0800abc9
 800aba0:	2302      	movs	r3, #2
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba6:	e01a      	b.n	800abde <UART_SetConfig+0x5a6>
 800aba8:	2304      	movs	r3, #4
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abae:	e016      	b.n	800abde <UART_SetConfig+0x5a6>
 800abb0:	2308      	movs	r3, #8
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb6:	e012      	b.n	800abde <UART_SetConfig+0x5a6>
 800abb8:	2310      	movs	r3, #16
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abbe:	e00e      	b.n	800abde <UART_SetConfig+0x5a6>
 800abc0:	2320      	movs	r3, #32
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc6:	e00a      	b.n	800abde <UART_SetConfig+0x5a6>
 800abc8:	2340      	movs	r3, #64	; 0x40
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abce:	e006      	b.n	800abde <UART_SetConfig+0x5a6>
 800abd0:	2380      	movs	r3, #128	; 0x80
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd6:	e002      	b.n	800abde <UART_SetConfig+0x5a6>
 800abd8:	2380      	movs	r3, #128	; 0x80
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a3f      	ldr	r2, [pc, #252]	; (800ace0 <UART_SetConfig+0x6a8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	f040 80f8 	bne.w	800adda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abee:	2b20      	cmp	r3, #32
 800abf0:	dc46      	bgt.n	800ac80 <UART_SetConfig+0x648>
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	f2c0 8082 	blt.w	800acfc <UART_SetConfig+0x6c4>
 800abf8:	3b02      	subs	r3, #2
 800abfa:	2b1e      	cmp	r3, #30
 800abfc:	d87e      	bhi.n	800acfc <UART_SetConfig+0x6c4>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <UART_SetConfig+0x5cc>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac87 	.word	0x0800ac87
 800ac08:	0800acfd 	.word	0x0800acfd
 800ac0c:	0800ac8f 	.word	0x0800ac8f
 800ac10:	0800acfd 	.word	0x0800acfd
 800ac14:	0800acfd 	.word	0x0800acfd
 800ac18:	0800acfd 	.word	0x0800acfd
 800ac1c:	0800ac9f 	.word	0x0800ac9f
 800ac20:	0800acfd 	.word	0x0800acfd
 800ac24:	0800acfd 	.word	0x0800acfd
 800ac28:	0800acfd 	.word	0x0800acfd
 800ac2c:	0800acfd 	.word	0x0800acfd
 800ac30:	0800acfd 	.word	0x0800acfd
 800ac34:	0800acfd 	.word	0x0800acfd
 800ac38:	0800acfd 	.word	0x0800acfd
 800ac3c:	0800acaf 	.word	0x0800acaf
 800ac40:	0800acfd 	.word	0x0800acfd
 800ac44:	0800acfd 	.word	0x0800acfd
 800ac48:	0800acfd 	.word	0x0800acfd
 800ac4c:	0800acfd 	.word	0x0800acfd
 800ac50:	0800acfd 	.word	0x0800acfd
 800ac54:	0800acfd 	.word	0x0800acfd
 800ac58:	0800acfd 	.word	0x0800acfd
 800ac5c:	0800acfd 	.word	0x0800acfd
 800ac60:	0800acfd 	.word	0x0800acfd
 800ac64:	0800acfd 	.word	0x0800acfd
 800ac68:	0800acfd 	.word	0x0800acfd
 800ac6c:	0800acfd 	.word	0x0800acfd
 800ac70:	0800acfd 	.word	0x0800acfd
 800ac74:	0800acfd 	.word	0x0800acfd
 800ac78:	0800acfd 	.word	0x0800acfd
 800ac7c:	0800acef 	.word	0x0800acef
 800ac80:	2b40      	cmp	r3, #64	; 0x40
 800ac82:	d037      	beq.n	800acf4 <UART_SetConfig+0x6bc>
 800ac84:	e03a      	b.n	800acfc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac86:	f7fc fdb1 	bl	80077ec <HAL_RCCEx_GetD3PCLK1Freq>
 800ac8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac8c:	e03c      	b.n	800ad08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fc fdc0 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9c:	e034      	b.n	800ad08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9e:	f107 0318 	add.w	r3, r7, #24
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fc ff0c 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acac:	e02c      	b.n	800ad08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <UART_SetConfig+0x69c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d016      	beq.n	800ace8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acba:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <UART_SetConfig+0x69c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	08db      	lsrs	r3, r3, #3
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	4a07      	ldr	r2, [pc, #28]	; (800ace4 <UART_SetConfig+0x6ac>)
 800acc6:	fa22 f303 	lsr.w	r3, r2, r3
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800accc:	e01c      	b.n	800ad08 <UART_SetConfig+0x6d0>
 800acce:	bf00      	nop
 800acd0:	40011400 	.word	0x40011400
 800acd4:	58024400 	.word	0x58024400
 800acd8:	40007800 	.word	0x40007800
 800acdc:	40007c00 	.word	0x40007c00
 800ace0:	58000c00 	.word	0x58000c00
 800ace4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ace8:	4b9d      	ldr	r3, [pc, #628]	; (800af60 <UART_SetConfig+0x928>)
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acec:	e00c      	b.n	800ad08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acee:	4b9d      	ldr	r3, [pc, #628]	; (800af64 <UART_SetConfig+0x92c>)
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf2:	e009      	b.n	800ad08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfa:	e005      	b.n	800ad08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 81de 	beq.w	800b0cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	4a94      	ldr	r2, [pc, #592]	; (800af68 <UART_SetConfig+0x930>)
 800ad16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	4413      	add	r3, r2
 800ad2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d305      	bcc.n	800ad40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d903      	bls.n	800ad48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad46:	e1c1      	b.n	800b0cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	60fa      	str	r2, [r7, #12]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	4a84      	ldr	r2, [pc, #528]	; (800af68 <UART_SetConfig+0x930>)
 800ad56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad6a:	f7f5 fb11 	bl	8000390 <__aeabi_uldivmod>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4610      	mov	r0, r2
 800ad74:	4619      	mov	r1, r3
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	020b      	lsls	r3, r1, #8
 800ad80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad84:	0202      	lsls	r2, r0, #8
 800ad86:	6979      	ldr	r1, [r7, #20]
 800ad88:	6849      	ldr	r1, [r1, #4]
 800ad8a:	0849      	lsrs	r1, r1, #1
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	4605      	mov	r5, r0
 800ad92:	eb12 0804 	adds.w	r8, r2, r4
 800ad96:	eb43 0905 	adc.w	r9, r3, r5
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	469a      	mov	sl, r3
 800ada2:	4693      	mov	fp, r2
 800ada4:	4652      	mov	r2, sl
 800ada6:	465b      	mov	r3, fp
 800ada8:	4640      	mov	r0, r8
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 faf0 	bl	8000390 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4613      	mov	r3, r2
 800adb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adbe:	d308      	bcc.n	800add2 <UART_SetConfig+0x79a>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc6:	d204      	bcs.n	800add2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adce:	60da      	str	r2, [r3, #12]
 800add0:	e17c      	b.n	800b0cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800add8:	e178      	b.n	800b0cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ade2:	f040 80c5 	bne.w	800af70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ade6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adea:	2b20      	cmp	r3, #32
 800adec:	dc48      	bgt.n	800ae80 <UART_SetConfig+0x848>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	db7b      	blt.n	800aeea <UART_SetConfig+0x8b2>
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d879      	bhi.n	800aeea <UART_SetConfig+0x8b2>
 800adf6:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <UART_SetConfig+0x7c4>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae87 	.word	0x0800ae87
 800ae00:	0800ae8f 	.word	0x0800ae8f
 800ae04:	0800aeeb 	.word	0x0800aeeb
 800ae08:	0800aeeb 	.word	0x0800aeeb
 800ae0c:	0800ae97 	.word	0x0800ae97
 800ae10:	0800aeeb 	.word	0x0800aeeb
 800ae14:	0800aeeb 	.word	0x0800aeeb
 800ae18:	0800aeeb 	.word	0x0800aeeb
 800ae1c:	0800aea7 	.word	0x0800aea7
 800ae20:	0800aeeb 	.word	0x0800aeeb
 800ae24:	0800aeeb 	.word	0x0800aeeb
 800ae28:	0800aeeb 	.word	0x0800aeeb
 800ae2c:	0800aeeb 	.word	0x0800aeeb
 800ae30:	0800aeeb 	.word	0x0800aeeb
 800ae34:	0800aeeb 	.word	0x0800aeeb
 800ae38:	0800aeeb 	.word	0x0800aeeb
 800ae3c:	0800aeb7 	.word	0x0800aeb7
 800ae40:	0800aeeb 	.word	0x0800aeeb
 800ae44:	0800aeeb 	.word	0x0800aeeb
 800ae48:	0800aeeb 	.word	0x0800aeeb
 800ae4c:	0800aeeb 	.word	0x0800aeeb
 800ae50:	0800aeeb 	.word	0x0800aeeb
 800ae54:	0800aeeb 	.word	0x0800aeeb
 800ae58:	0800aeeb 	.word	0x0800aeeb
 800ae5c:	0800aeeb 	.word	0x0800aeeb
 800ae60:	0800aeeb 	.word	0x0800aeeb
 800ae64:	0800aeeb 	.word	0x0800aeeb
 800ae68:	0800aeeb 	.word	0x0800aeeb
 800ae6c:	0800aeeb 	.word	0x0800aeeb
 800ae70:	0800aeeb 	.word	0x0800aeeb
 800ae74:	0800aeeb 	.word	0x0800aeeb
 800ae78:	0800aeeb 	.word	0x0800aeeb
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	2b40      	cmp	r3, #64	; 0x40
 800ae82:	d02e      	beq.n	800aee2 <UART_SetConfig+0x8aa>
 800ae84:	e031      	b.n	800aeea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae86:	f7fb fd3f 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 800ae8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae8c:	e033      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae8e:	f7fb fd51 	bl	8006934 <HAL_RCC_GetPCLK2Freq>
 800ae92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae94:	e02f      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fc fcbc 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea4:	e027      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea6:	f107 0318 	add.w	r3, r7, #24
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fc fe08 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb4:	e01f      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb6:	4b2d      	ldr	r3, [pc, #180]	; (800af6c <UART_SetConfig+0x934>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0320 	and.w	r3, r3, #32
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d009      	beq.n	800aed6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aec2:	4b2a      	ldr	r3, [pc, #168]	; (800af6c <UART_SetConfig+0x934>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	08db      	lsrs	r3, r3, #3
 800aec8:	f003 0303 	and.w	r3, r3, #3
 800aecc:	4a24      	ldr	r2, [pc, #144]	; (800af60 <UART_SetConfig+0x928>)
 800aece:	fa22 f303 	lsr.w	r3, r2, r3
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed4:	e00f      	b.n	800aef6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aed6:	4b22      	ldr	r3, [pc, #136]	; (800af60 <UART_SetConfig+0x928>)
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeda:	e00c      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aedc:	4b21      	ldr	r3, [pc, #132]	; (800af64 <UART_SetConfig+0x92c>)
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee0:	e009      	b.n	800aef6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee8:	e005      	b.n	800aef6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80e7 	beq.w	800b0cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	4a19      	ldr	r2, [pc, #100]	; (800af68 <UART_SetConfig+0x930>)
 800af04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af08:	461a      	mov	r2, r3
 800af0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af10:	005a      	lsls	r2, r3, #1
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	441a      	add	r2, r3
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d916      	bls.n	800af58 <UART_SetConfig+0x920>
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d212      	bcs.n	800af58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	b29b      	uxth	r3, r3
 800af36:	f023 030f 	bic.w	r3, r3, #15
 800af3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	b29a      	uxth	r2, r3
 800af48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af4a:	4313      	orrs	r3, r2
 800af4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e0b9      	b.n	800b0cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af5e:	e0b5      	b.n	800b0cc <UART_SetConfig+0xa94>
 800af60:	03d09000 	.word	0x03d09000
 800af64:	003d0900 	.word	0x003d0900
 800af68:	0800f2cc 	.word	0x0800f2cc
 800af6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800af70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af74:	2b20      	cmp	r3, #32
 800af76:	dc49      	bgt.n	800b00c <UART_SetConfig+0x9d4>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	db7c      	blt.n	800b076 <UART_SetConfig+0xa3e>
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	d87a      	bhi.n	800b076 <UART_SetConfig+0xa3e>
 800af80:	a201      	add	r2, pc, #4	; (adr r2, 800af88 <UART_SetConfig+0x950>)
 800af82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af86:	bf00      	nop
 800af88:	0800b013 	.word	0x0800b013
 800af8c:	0800b01b 	.word	0x0800b01b
 800af90:	0800b077 	.word	0x0800b077
 800af94:	0800b077 	.word	0x0800b077
 800af98:	0800b023 	.word	0x0800b023
 800af9c:	0800b077 	.word	0x0800b077
 800afa0:	0800b077 	.word	0x0800b077
 800afa4:	0800b077 	.word	0x0800b077
 800afa8:	0800b033 	.word	0x0800b033
 800afac:	0800b077 	.word	0x0800b077
 800afb0:	0800b077 	.word	0x0800b077
 800afb4:	0800b077 	.word	0x0800b077
 800afb8:	0800b077 	.word	0x0800b077
 800afbc:	0800b077 	.word	0x0800b077
 800afc0:	0800b077 	.word	0x0800b077
 800afc4:	0800b077 	.word	0x0800b077
 800afc8:	0800b043 	.word	0x0800b043
 800afcc:	0800b077 	.word	0x0800b077
 800afd0:	0800b077 	.word	0x0800b077
 800afd4:	0800b077 	.word	0x0800b077
 800afd8:	0800b077 	.word	0x0800b077
 800afdc:	0800b077 	.word	0x0800b077
 800afe0:	0800b077 	.word	0x0800b077
 800afe4:	0800b077 	.word	0x0800b077
 800afe8:	0800b077 	.word	0x0800b077
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b077 	.word	0x0800b077
 800aff4:	0800b077 	.word	0x0800b077
 800aff8:	0800b077 	.word	0x0800b077
 800affc:	0800b077 	.word	0x0800b077
 800b000:	0800b077 	.word	0x0800b077
 800b004:	0800b077 	.word	0x0800b077
 800b008:	0800b069 	.word	0x0800b069
 800b00c:	2b40      	cmp	r3, #64	; 0x40
 800b00e:	d02e      	beq.n	800b06e <UART_SetConfig+0xa36>
 800b010:	e031      	b.n	800b076 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b012:	f7fb fc79 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 800b016:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b018:	e033      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b01a:	f7fb fc8b 	bl	8006934 <HAL_RCC_GetPCLK2Freq>
 800b01e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b020:	e02f      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b026:	4618      	mov	r0, r3
 800b028:	f7fc fbf6 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b030:	e027      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b032:	f107 0318 	add.w	r3, r7, #24
 800b036:	4618      	mov	r0, r3
 800b038:	f7fc fd42 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b040:	e01f      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b042:	4b2d      	ldr	r3, [pc, #180]	; (800b0f8 <UART_SetConfig+0xac0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0320 	and.w	r3, r3, #32
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b04e:	4b2a      	ldr	r3, [pc, #168]	; (800b0f8 <UART_SetConfig+0xac0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	08db      	lsrs	r3, r3, #3
 800b054:	f003 0303 	and.w	r3, r3, #3
 800b058:	4a28      	ldr	r2, [pc, #160]	; (800b0fc <UART_SetConfig+0xac4>)
 800b05a:	fa22 f303 	lsr.w	r3, r2, r3
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b060:	e00f      	b.n	800b082 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b062:	4b26      	ldr	r3, [pc, #152]	; (800b0fc <UART_SetConfig+0xac4>)
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b066:	e00c      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b068:	4b25      	ldr	r3, [pc, #148]	; (800b100 <UART_SetConfig+0xac8>)
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b06c:	e009      	b.n	800b082 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b074:	e005      	b.n	800b082 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b080:	bf00      	nop
    }

    if (pclk != 0U)
 800b082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d021      	beq.n	800b0cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <UART_SetConfig+0xacc>)
 800b08e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b092:	461a      	mov	r2, r3
 800b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b096:	fbb3 f2f2 	udiv	r2, r3, r2
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	085b      	lsrs	r3, r3, #1
 800b0a0:	441a      	add	r2, r3
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	2b0f      	cmp	r3, #15
 800b0b0:	d909      	bls.n	800b0c6 <UART_SetConfig+0xa8e>
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b8:	d205      	bcs.n	800b0c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60da      	str	r2, [r3, #12]
 800b0c4:	e002      	b.n	800b0cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3748      	adds	r7, #72	; 0x48
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	003d0900 	.word	0x003d0900
 800b104:	0800f2cc 	.word	0x0800f2cc

0800b108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00a      	beq.n	800b132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00a      	beq.n	800b176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	430a      	orrs	r2, r1
 800b174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	430a      	orrs	r2, r1
 800b196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19c:	f003 0310 	and.w	r3, r3, #16
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00a      	beq.n	800b1ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	430a      	orrs	r2, r1
 800b1da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01a      	beq.n	800b21e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b206:	d10a      	bne.n	800b21e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	430a      	orrs	r2, r1
 800b21c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	605a      	str	r2, [r3, #4]
  }
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af02      	add	r7, sp, #8
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b25c:	f7f8 fc5e 	bl	8003b1c <HAL_GetTick>
 800b260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d10e      	bne.n	800b28e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f82f 	bl	800b2e2 <UART_WaitOnFlagUntilTimeout>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e025      	b.n	800b2da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b04      	cmp	r3, #4
 800b29a:	d10e      	bne.n	800b2ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b29c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f819 	bl	800b2e2 <UART_WaitOnFlagUntilTimeout>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e00f      	b.n	800b2da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b09c      	sub	sp, #112	; 0x70
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	603b      	str	r3, [r7, #0]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2f2:	e0a9      	b.n	800b448 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fa:	f000 80a5 	beq.w	800b448 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2fe:	f7f8 fc0d 	bl	8003b1c <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d302      	bcc.n	800b314 <UART_WaitOnFlagUntilTimeout+0x32>
 800b30e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b310:	2b00      	cmp	r3, #0
 800b312:	d140      	bne.n	800b396 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b328:	667b      	str	r3, [r7, #100]	; 0x64
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b332:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b334:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e6      	bne.n	800b314 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3308      	adds	r3, #8
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	663b      	str	r3, [r7, #96]	; 0x60
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3308      	adds	r3, #8
 800b364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b366:	64ba      	str	r2, [r7, #72]	; 0x48
 800b368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e5      	bne.n	800b346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2220      	movs	r2, #32
 800b37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e069      	b.n	800b46a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d051      	beq.n	800b448 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b2:	d149      	bne.n	800b448 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e6      	bne.n	800b3be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f023 0301 	bic.w	r3, r3, #1
 800b406:	66bb      	str	r3, [r7, #104]	; 0x68
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3308      	adds	r3, #8
 800b40e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b410:	623a      	str	r2, [r7, #32]
 800b412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b414:	69f9      	ldr	r1, [r7, #28]
 800b416:	6a3a      	ldr	r2, [r7, #32]
 800b418:	e841 2300 	strex	r3, r2, [r1]
 800b41c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e5      	bne.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2220      	movs	r2, #32
 800b428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2220      	movs	r2, #32
 800b430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2220      	movs	r2, #32
 800b438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e010      	b.n	800b46a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	69da      	ldr	r2, [r3, #28]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	4013      	ands	r3, r2
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	429a      	cmp	r2, r3
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	461a      	mov	r2, r3
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	429a      	cmp	r2, r3
 800b464:	f43f af46 	beq.w	800b2f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3770      	adds	r7, #112	; 0x70
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_UARTEx_DisableFifoMode+0x16>
 800b484:	2302      	movs	r3, #2
 800b486:	e027      	b.n	800b4d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2224      	movs	r2, #36	; 0x24
 800b494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f022 0201 	bic.w	r2, r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d101      	bne.n	800b4fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	e02d      	b.n	800b558 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2224      	movs	r2, #36	; 0x24
 800b508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0201 	bic.w	r2, r2, #1
 800b522:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f84f 	bl	800b5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b574:	2302      	movs	r3, #2
 800b576:	e02d      	b.n	800b5d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2224      	movs	r2, #36	; 0x24
 800b584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f022 0201 	bic.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f811 	bl	800b5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5fc:	e031      	b.n	800b662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5fe:	2310      	movs	r3, #16
 800b600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b602:	2310      	movs	r3, #16
 800b604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	0e5b      	lsrs	r3, r3, #25
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0307 	and.w	r3, r3, #7
 800b614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	0f5b      	lsrs	r3, r3, #29
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0307 	and.w	r3, r3, #7
 800b624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	7b3a      	ldrb	r2, [r7, #12]
 800b62a:	4911      	ldr	r1, [pc, #68]	; (800b670 <UARTEx_SetNbDataToProcess+0x94>)
 800b62c:	5c8a      	ldrb	r2, [r1, r2]
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b632:	7b3a      	ldrb	r2, [r7, #12]
 800b634:	490f      	ldr	r1, [pc, #60]	; (800b674 <UARTEx_SetNbDataToProcess+0x98>)
 800b636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b638:	fb93 f3f2 	sdiv	r3, r3, r2
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	7b7a      	ldrb	r2, [r7, #13]
 800b648:	4909      	ldr	r1, [pc, #36]	; (800b670 <UARTEx_SetNbDataToProcess+0x94>)
 800b64a:	5c8a      	ldrb	r2, [r1, r2]
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b650:	7b7a      	ldrb	r2, [r7, #13]
 800b652:	4908      	ldr	r1, [pc, #32]	; (800b674 <UARTEx_SetNbDataToProcess+0x98>)
 800b654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b656:	fb93 f3f2 	sdiv	r3, r3, r2
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b662:	bf00      	nop
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	0800f2e4 	.word	0x0800f2e4
 800b674:	0800f2ec 	.word	0x0800f2ec

0800b678 <__errno>:
 800b678:	4b01      	ldr	r3, [pc, #4]	; (800b680 <__errno+0x8>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	24000058 	.word	0x24000058

0800b684 <__libc_init_array>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	4d0d      	ldr	r5, [pc, #52]	; (800b6bc <__libc_init_array+0x38>)
 800b688:	4c0d      	ldr	r4, [pc, #52]	; (800b6c0 <__libc_init_array+0x3c>)
 800b68a:	1b64      	subs	r4, r4, r5
 800b68c:	10a4      	asrs	r4, r4, #2
 800b68e:	2600      	movs	r6, #0
 800b690:	42a6      	cmp	r6, r4
 800b692:	d109      	bne.n	800b6a8 <__libc_init_array+0x24>
 800b694:	4d0b      	ldr	r5, [pc, #44]	; (800b6c4 <__libc_init_array+0x40>)
 800b696:	4c0c      	ldr	r4, [pc, #48]	; (800b6c8 <__libc_init_array+0x44>)
 800b698:	f003 fa3a 	bl	800eb10 <_init>
 800b69c:	1b64      	subs	r4, r4, r5
 800b69e:	10a4      	asrs	r4, r4, #2
 800b6a0:	2600      	movs	r6, #0
 800b6a2:	42a6      	cmp	r6, r4
 800b6a4:	d105      	bne.n	800b6b2 <__libc_init_array+0x2e>
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ac:	4798      	blx	r3
 800b6ae:	3601      	adds	r6, #1
 800b6b0:	e7ee      	b.n	800b690 <__libc_init_array+0xc>
 800b6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b6:	4798      	blx	r3
 800b6b8:	3601      	adds	r6, #1
 800b6ba:	e7f2      	b.n	800b6a2 <__libc_init_array+0x1e>
 800b6bc:	08010f90 	.word	0x08010f90
 800b6c0:	08010f90 	.word	0x08010f90
 800b6c4:	08010f90 	.word	0x08010f90
 800b6c8:	08010f94 	.word	0x08010f94

0800b6cc <memcpy>:
 800b6cc:	440a      	add	r2, r1
 800b6ce:	4291      	cmp	r1, r2
 800b6d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d4:	d100      	bne.n	800b6d8 <memcpy+0xc>
 800b6d6:	4770      	bx	lr
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	d1f9      	bne.n	800b6da <memcpy+0xe>
 800b6e6:	bd10      	pop	{r4, pc}

0800b6e8 <memset>:
 800b6e8:	4402      	add	r2, r0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d100      	bne.n	800b6f2 <memset+0xa>
 800b6f0:	4770      	bx	lr
 800b6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f6:	e7f9      	b.n	800b6ec <memset+0x4>

0800b6f8 <__cvt>:
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	ed2d 8b02 	vpush	{d8}
 800b6fe:	eeb0 8b40 	vmov.f64	d8, d0
 800b702:	b085      	sub	sp, #20
 800b704:	4617      	mov	r7, r2
 800b706:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b708:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b70a:	ee18 2a90 	vmov	r2, s17
 800b70e:	f025 0520 	bic.w	r5, r5, #32
 800b712:	2a00      	cmp	r2, #0
 800b714:	bfb6      	itet	lt
 800b716:	222d      	movlt	r2, #45	; 0x2d
 800b718:	2200      	movge	r2, #0
 800b71a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b71e:	2d46      	cmp	r5, #70	; 0x46
 800b720:	460c      	mov	r4, r1
 800b722:	701a      	strb	r2, [r3, #0]
 800b724:	d004      	beq.n	800b730 <__cvt+0x38>
 800b726:	2d45      	cmp	r5, #69	; 0x45
 800b728:	d100      	bne.n	800b72c <__cvt+0x34>
 800b72a:	3401      	adds	r4, #1
 800b72c:	2102      	movs	r1, #2
 800b72e:	e000      	b.n	800b732 <__cvt+0x3a>
 800b730:	2103      	movs	r1, #3
 800b732:	ab03      	add	r3, sp, #12
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	ab02      	add	r3, sp, #8
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	4622      	mov	r2, r4
 800b73c:	4633      	mov	r3, r6
 800b73e:	eeb0 0b48 	vmov.f64	d0, d8
 800b742:	f000 fe49 	bl	800c3d8 <_dtoa_r>
 800b746:	2d47      	cmp	r5, #71	; 0x47
 800b748:	d101      	bne.n	800b74e <__cvt+0x56>
 800b74a:	07fb      	lsls	r3, r7, #31
 800b74c:	d51a      	bpl.n	800b784 <__cvt+0x8c>
 800b74e:	2d46      	cmp	r5, #70	; 0x46
 800b750:	eb00 0204 	add.w	r2, r0, r4
 800b754:	d10c      	bne.n	800b770 <__cvt+0x78>
 800b756:	7803      	ldrb	r3, [r0, #0]
 800b758:	2b30      	cmp	r3, #48	; 0x30
 800b75a:	d107      	bne.n	800b76c <__cvt+0x74>
 800b75c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b764:	bf1c      	itt	ne
 800b766:	f1c4 0401 	rsbne	r4, r4, #1
 800b76a:	6034      	strne	r4, [r6, #0]
 800b76c:	6833      	ldr	r3, [r6, #0]
 800b76e:	441a      	add	r2, r3
 800b770:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b778:	bf08      	it	eq
 800b77a:	9203      	streq	r2, [sp, #12]
 800b77c:	2130      	movs	r1, #48	; 0x30
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	4293      	cmp	r3, r2
 800b782:	d307      	bcc.n	800b794 <__cvt+0x9c>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b788:	1a1b      	subs	r3, r3, r0
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	b005      	add	sp, #20
 800b78e:	ecbd 8b02 	vpop	{d8}
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b794:	1c5c      	adds	r4, r3, #1
 800b796:	9403      	str	r4, [sp, #12]
 800b798:	7019      	strb	r1, [r3, #0]
 800b79a:	e7f0      	b.n	800b77e <__cvt+0x86>

0800b79c <__exponent>:
 800b79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	bfb8      	it	lt
 800b7a4:	4249      	neglt	r1, r1
 800b7a6:	f803 2b02 	strb.w	r2, [r3], #2
 800b7aa:	bfb4      	ite	lt
 800b7ac:	222d      	movlt	r2, #45	; 0x2d
 800b7ae:	222b      	movge	r2, #43	; 0x2b
 800b7b0:	2909      	cmp	r1, #9
 800b7b2:	7042      	strb	r2, [r0, #1]
 800b7b4:	dd2a      	ble.n	800b80c <__exponent+0x70>
 800b7b6:	f10d 0407 	add.w	r4, sp, #7
 800b7ba:	46a4      	mov	ip, r4
 800b7bc:	270a      	movs	r7, #10
 800b7be:	46a6      	mov	lr, r4
 800b7c0:	460a      	mov	r2, r1
 800b7c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7c6:	fb07 1516 	mls	r5, r7, r6, r1
 800b7ca:	3530      	adds	r5, #48	; 0x30
 800b7cc:	2a63      	cmp	r2, #99	; 0x63
 800b7ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	dcf1      	bgt.n	800b7be <__exponent+0x22>
 800b7da:	3130      	adds	r1, #48	; 0x30
 800b7dc:	f1ae 0502 	sub.w	r5, lr, #2
 800b7e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b7e4:	1c44      	adds	r4, r0, #1
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4561      	cmp	r1, ip
 800b7ea:	d30a      	bcc.n	800b802 <__exponent+0x66>
 800b7ec:	f10d 0209 	add.w	r2, sp, #9
 800b7f0:	eba2 020e 	sub.w	r2, r2, lr
 800b7f4:	4565      	cmp	r5, ip
 800b7f6:	bf88      	it	hi
 800b7f8:	2200      	movhi	r2, #0
 800b7fa:	4413      	add	r3, r2
 800b7fc:	1a18      	subs	r0, r3, r0
 800b7fe:	b003      	add	sp, #12
 800b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b806:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b80a:	e7ed      	b.n	800b7e8 <__exponent+0x4c>
 800b80c:	2330      	movs	r3, #48	; 0x30
 800b80e:	3130      	adds	r1, #48	; 0x30
 800b810:	7083      	strb	r3, [r0, #2]
 800b812:	70c1      	strb	r1, [r0, #3]
 800b814:	1d03      	adds	r3, r0, #4
 800b816:	e7f1      	b.n	800b7fc <__exponent+0x60>

0800b818 <_printf_float>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	b08b      	sub	sp, #44	; 0x2c
 800b81e:	460c      	mov	r4, r1
 800b820:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b824:	4616      	mov	r6, r2
 800b826:	461f      	mov	r7, r3
 800b828:	4605      	mov	r5, r0
 800b82a:	f001 fcfb 	bl	800d224 <_localeconv_r>
 800b82e:	f8d0 b000 	ldr.w	fp, [r0]
 800b832:	4658      	mov	r0, fp
 800b834:	f7f4 fd54 	bl	80002e0 <strlen>
 800b838:	2300      	movs	r3, #0
 800b83a:	9308      	str	r3, [sp, #32]
 800b83c:	f8d8 3000 	ldr.w	r3, [r8]
 800b840:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b844:	6822      	ldr	r2, [r4, #0]
 800b846:	3307      	adds	r3, #7
 800b848:	f023 0307 	bic.w	r3, r3, #7
 800b84c:	f103 0108 	add.w	r1, r3, #8
 800b850:	f8c8 1000 	str.w	r1, [r8]
 800b854:	4682      	mov	sl, r0
 800b856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b85a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b85e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800bac0 <_printf_float+0x2a8>
 800b862:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b866:	eeb0 6bc0 	vabs.f64	d6, d0
 800b86a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b872:	dd24      	ble.n	800b8be <_printf_float+0xa6>
 800b874:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87c:	d502      	bpl.n	800b884 <_printf_float+0x6c>
 800b87e:	232d      	movs	r3, #45	; 0x2d
 800b880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b884:	4b90      	ldr	r3, [pc, #576]	; (800bac8 <_printf_float+0x2b0>)
 800b886:	4891      	ldr	r0, [pc, #580]	; (800bacc <_printf_float+0x2b4>)
 800b888:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b88c:	bf94      	ite	ls
 800b88e:	4698      	movls	r8, r3
 800b890:	4680      	movhi	r8, r0
 800b892:	2303      	movs	r3, #3
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	f022 0204 	bic.w	r2, r2, #4
 800b89a:	2300      	movs	r3, #0
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	9700      	str	r7, [sp, #0]
 800b8a2:	4633      	mov	r3, r6
 800b8a4:	aa09      	add	r2, sp, #36	; 0x24
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 f9d3 	bl	800bc54 <_printf_common>
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f040 808a 	bne.w	800b9c8 <_printf_float+0x1b0>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	b00b      	add	sp, #44	; 0x2c
 800b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8be:	eeb4 0b40 	vcmp.f64	d0, d0
 800b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c6:	d709      	bvc.n	800b8dc <_printf_float+0xc4>
 800b8c8:	ee10 3a90 	vmov	r3, s1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bfbc      	itt	lt
 800b8d0:	232d      	movlt	r3, #45	; 0x2d
 800b8d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8d6:	487e      	ldr	r0, [pc, #504]	; (800bad0 <_printf_float+0x2b8>)
 800b8d8:	4b7e      	ldr	r3, [pc, #504]	; (800bad4 <_printf_float+0x2bc>)
 800b8da:	e7d5      	b.n	800b888 <_printf_float+0x70>
 800b8dc:	6863      	ldr	r3, [r4, #4]
 800b8de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b8e2:	9104      	str	r1, [sp, #16]
 800b8e4:	1c59      	adds	r1, r3, #1
 800b8e6:	d13c      	bne.n	800b962 <_printf_float+0x14a>
 800b8e8:	2306      	movs	r3, #6
 800b8ea:	6063      	str	r3, [r4, #4]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9303      	str	r3, [sp, #12]
 800b8f0:	ab08      	add	r3, sp, #32
 800b8f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b8f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8fa:	ab07      	add	r3, sp, #28
 800b8fc:	6861      	ldr	r1, [r4, #4]
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	6022      	str	r2, [r4, #0]
 800b902:	f10d 031b 	add.w	r3, sp, #27
 800b906:	4628      	mov	r0, r5
 800b908:	f7ff fef6 	bl	800b6f8 <__cvt>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	9907      	ldr	r1, [sp, #28]
 800b910:	2b47      	cmp	r3, #71	; 0x47
 800b912:	4680      	mov	r8, r0
 800b914:	d108      	bne.n	800b928 <_printf_float+0x110>
 800b916:	1cc8      	adds	r0, r1, #3
 800b918:	db02      	blt.n	800b920 <_printf_float+0x108>
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	4299      	cmp	r1, r3
 800b91e:	dd41      	ble.n	800b9a4 <_printf_float+0x18c>
 800b920:	f1a9 0902 	sub.w	r9, r9, #2
 800b924:	fa5f f989 	uxtb.w	r9, r9
 800b928:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b92c:	d820      	bhi.n	800b970 <_printf_float+0x158>
 800b92e:	3901      	subs	r1, #1
 800b930:	464a      	mov	r2, r9
 800b932:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b936:	9107      	str	r1, [sp, #28]
 800b938:	f7ff ff30 	bl	800b79c <__exponent>
 800b93c:	9a08      	ldr	r2, [sp, #32]
 800b93e:	9004      	str	r0, [sp, #16]
 800b940:	1813      	adds	r3, r2, r0
 800b942:	2a01      	cmp	r2, #1
 800b944:	6123      	str	r3, [r4, #16]
 800b946:	dc02      	bgt.n	800b94e <_printf_float+0x136>
 800b948:	6822      	ldr	r2, [r4, #0]
 800b94a:	07d2      	lsls	r2, r2, #31
 800b94c:	d501      	bpl.n	800b952 <_printf_float+0x13a>
 800b94e:	3301      	adds	r3, #1
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0a2      	beq.n	800b8a0 <_printf_float+0x88>
 800b95a:	232d      	movs	r3, #45	; 0x2d
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b960:	e79e      	b.n	800b8a0 <_printf_float+0x88>
 800b962:	9904      	ldr	r1, [sp, #16]
 800b964:	2947      	cmp	r1, #71	; 0x47
 800b966:	d1c1      	bne.n	800b8ec <_printf_float+0xd4>
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1bf      	bne.n	800b8ec <_printf_float+0xd4>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e7bc      	b.n	800b8ea <_printf_float+0xd2>
 800b970:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b974:	d118      	bne.n	800b9a8 <_printf_float+0x190>
 800b976:	2900      	cmp	r1, #0
 800b978:	6863      	ldr	r3, [r4, #4]
 800b97a:	dd0b      	ble.n	800b994 <_printf_float+0x17c>
 800b97c:	6121      	str	r1, [r4, #16]
 800b97e:	b913      	cbnz	r3, 800b986 <_printf_float+0x16e>
 800b980:	6822      	ldr	r2, [r4, #0]
 800b982:	07d0      	lsls	r0, r2, #31
 800b984:	d502      	bpl.n	800b98c <_printf_float+0x174>
 800b986:	3301      	adds	r3, #1
 800b988:	440b      	add	r3, r1
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	2300      	movs	r3, #0
 800b98e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	e7de      	b.n	800b952 <_printf_float+0x13a>
 800b994:	b913      	cbnz	r3, 800b99c <_printf_float+0x184>
 800b996:	6822      	ldr	r2, [r4, #0]
 800b998:	07d2      	lsls	r2, r2, #31
 800b99a:	d501      	bpl.n	800b9a0 <_printf_float+0x188>
 800b99c:	3302      	adds	r3, #2
 800b99e:	e7f4      	b.n	800b98a <_printf_float+0x172>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e7f2      	b.n	800b98a <_printf_float+0x172>
 800b9a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b9a8:	9b08      	ldr	r3, [sp, #32]
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	db05      	blt.n	800b9ba <_printf_float+0x1a2>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	6121      	str	r1, [r4, #16]
 800b9b2:	07d8      	lsls	r0, r3, #31
 800b9b4:	d5ea      	bpl.n	800b98c <_printf_float+0x174>
 800b9b6:	1c4b      	adds	r3, r1, #1
 800b9b8:	e7e7      	b.n	800b98a <_printf_float+0x172>
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	bfd4      	ite	le
 800b9be:	f1c1 0202 	rsble	r2, r1, #2
 800b9c2:	2201      	movgt	r2, #1
 800b9c4:	4413      	add	r3, r2
 800b9c6:	e7e0      	b.n	800b98a <_printf_float+0x172>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	055a      	lsls	r2, r3, #21
 800b9cc:	d407      	bmi.n	800b9de <_printf_float+0x1c6>
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	d12a      	bne.n	800ba32 <_printf_float+0x21a>
 800b9dc:	e76a      	b.n	800b8b4 <_printf_float+0x9c>
 800b9de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b9e2:	f240 80e2 	bls.w	800bbaa <_printf_float+0x392>
 800b9e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b9ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f2:	d133      	bne.n	800ba5c <_printf_float+0x244>
 800b9f4:	4a38      	ldr	r2, [pc, #224]	; (800bad8 <_printf_float+0x2c0>)
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f af58 	beq.w	800b8b4 <_printf_float+0x9c>
 800ba04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	db02      	blt.n	800ba12 <_printf_float+0x1fa>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	07d8      	lsls	r0, r3, #31
 800ba10:	d50f      	bpl.n	800ba32 <_printf_float+0x21a>
 800ba12:	4653      	mov	r3, sl
 800ba14:	465a      	mov	r2, fp
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	f43f af49 	beq.w	800b8b4 <_printf_float+0x9c>
 800ba22:	f04f 0800 	mov.w	r8, #0
 800ba26:	f104 091a 	add.w	r9, r4, #26
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4543      	cmp	r3, r8
 800ba30:	dc09      	bgt.n	800ba46 <_printf_float+0x22e>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	079b      	lsls	r3, r3, #30
 800ba36:	f100 8108 	bmi.w	800bc4a <_printf_float+0x432>
 800ba3a:	68e0      	ldr	r0, [r4, #12]
 800ba3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3e:	4298      	cmp	r0, r3
 800ba40:	bfb8      	it	lt
 800ba42:	4618      	movlt	r0, r3
 800ba44:	e738      	b.n	800b8b8 <_printf_float+0xa0>
 800ba46:	2301      	movs	r3, #1
 800ba48:	464a      	mov	r2, r9
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b8      	blx	r7
 800ba50:	3001      	adds	r0, #1
 800ba52:	f43f af2f 	beq.w	800b8b4 <_printf_float+0x9c>
 800ba56:	f108 0801 	add.w	r8, r8, #1
 800ba5a:	e7e6      	b.n	800ba2a <_printf_float+0x212>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dc3c      	bgt.n	800badc <_printf_float+0x2c4>
 800ba62:	4a1d      	ldr	r2, [pc, #116]	; (800bad8 <_printf_float+0x2c0>)
 800ba64:	2301      	movs	r3, #1
 800ba66:	4631      	mov	r1, r6
 800ba68:	4628      	mov	r0, r5
 800ba6a:	47b8      	blx	r7
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	f43f af21 	beq.w	800b8b4 <_printf_float+0x9c>
 800ba72:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d102      	bne.n	800ba80 <_printf_float+0x268>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	07d9      	lsls	r1, r3, #31
 800ba7e:	d5d8      	bpl.n	800ba32 <_printf_float+0x21a>
 800ba80:	4653      	mov	r3, sl
 800ba82:	465a      	mov	r2, fp
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f af12 	beq.w	800b8b4 <_printf_float+0x9c>
 800ba90:	f04f 0900 	mov.w	r9, #0
 800ba94:	f104 0a1a 	add.w	sl, r4, #26
 800ba98:	9b07      	ldr	r3, [sp, #28]
 800ba9a:	425b      	negs	r3, r3
 800ba9c:	454b      	cmp	r3, r9
 800ba9e:	dc01      	bgt.n	800baa4 <_printf_float+0x28c>
 800baa0:	9b08      	ldr	r3, [sp, #32]
 800baa2:	e795      	b.n	800b9d0 <_printf_float+0x1b8>
 800baa4:	2301      	movs	r3, #1
 800baa6:	4652      	mov	r2, sl
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f af00 	beq.w	800b8b4 <_printf_float+0x9c>
 800bab4:	f109 0901 	add.w	r9, r9, #1
 800bab8:	e7ee      	b.n	800ba98 <_printf_float+0x280>
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w
 800bac0:	ffffffff 	.word	0xffffffff
 800bac4:	7fefffff 	.word	0x7fefffff
 800bac8:	0800f2f8 	.word	0x0800f2f8
 800bacc:	0800f2fc 	.word	0x0800f2fc
 800bad0:	0800f304 	.word	0x0800f304
 800bad4:	0800f300 	.word	0x0800f300
 800bad8:	0800f308 	.word	0x0800f308
 800badc:	9a08      	ldr	r2, [sp, #32]
 800bade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bae0:	429a      	cmp	r2, r3
 800bae2:	bfa8      	it	ge
 800bae4:	461a      	movge	r2, r3
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	4691      	mov	r9, r2
 800baea:	dc38      	bgt.n	800bb5e <_printf_float+0x346>
 800baec:	2300      	movs	r3, #0
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baf4:	f104 021a 	add.w	r2, r4, #26
 800baf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bafa:	9905      	ldr	r1, [sp, #20]
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	eba3 0309 	sub.w	r3, r3, r9
 800bb02:	428b      	cmp	r3, r1
 800bb04:	dc33      	bgt.n	800bb6e <_printf_float+0x356>
 800bb06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	db3c      	blt.n	800bb88 <_printf_float+0x370>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	07da      	lsls	r2, r3, #31
 800bb12:	d439      	bmi.n	800bb88 <_printf_float+0x370>
 800bb14:	9b08      	ldr	r3, [sp, #32]
 800bb16:	9a04      	ldr	r2, [sp, #16]
 800bb18:	9907      	ldr	r1, [sp, #28]
 800bb1a:	1a9a      	subs	r2, r3, r2
 800bb1c:	eba3 0901 	sub.w	r9, r3, r1
 800bb20:	4591      	cmp	r9, r2
 800bb22:	bfa8      	it	ge
 800bb24:	4691      	movge	r9, r2
 800bb26:	f1b9 0f00 	cmp.w	r9, #0
 800bb2a:	dc35      	bgt.n	800bb98 <_printf_float+0x380>
 800bb2c:	f04f 0800 	mov.w	r8, #0
 800bb30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb34:	f104 0a1a 	add.w	sl, r4, #26
 800bb38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bb3c:	1a9b      	subs	r3, r3, r2
 800bb3e:	eba3 0309 	sub.w	r3, r3, r9
 800bb42:	4543      	cmp	r3, r8
 800bb44:	f77f af75 	ble.w	800ba32 <_printf_float+0x21a>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	4652      	mov	r2, sl
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b8      	blx	r7
 800bb52:	3001      	adds	r0, #1
 800bb54:	f43f aeae 	beq.w	800b8b4 <_printf_float+0x9c>
 800bb58:	f108 0801 	add.w	r8, r8, #1
 800bb5c:	e7ec      	b.n	800bb38 <_printf_float+0x320>
 800bb5e:	4613      	mov	r3, r2
 800bb60:	4631      	mov	r1, r6
 800bb62:	4642      	mov	r2, r8
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b8      	blx	r7
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d1bf      	bne.n	800baec <_printf_float+0x2d4>
 800bb6c:	e6a2      	b.n	800b8b4 <_printf_float+0x9c>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	9204      	str	r2, [sp, #16]
 800bb76:	47b8      	blx	r7
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f43f ae9b 	beq.w	800b8b4 <_printf_float+0x9c>
 800bb7e:	9b05      	ldr	r3, [sp, #20]
 800bb80:	9a04      	ldr	r2, [sp, #16]
 800bb82:	3301      	adds	r3, #1
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	e7b7      	b.n	800baf8 <_printf_float+0x2e0>
 800bb88:	4653      	mov	r3, sl
 800bb8a:	465a      	mov	r2, fp
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	d1be      	bne.n	800bb14 <_printf_float+0x2fc>
 800bb96:	e68d      	b.n	800b8b4 <_printf_float+0x9c>
 800bb98:	9a04      	ldr	r2, [sp, #16]
 800bb9a:	464b      	mov	r3, r9
 800bb9c:	4442      	add	r2, r8
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	d1c1      	bne.n	800bb2c <_printf_float+0x314>
 800bba8:	e684      	b.n	800b8b4 <_printf_float+0x9c>
 800bbaa:	9a08      	ldr	r2, [sp, #32]
 800bbac:	2a01      	cmp	r2, #1
 800bbae:	dc01      	bgt.n	800bbb4 <_printf_float+0x39c>
 800bbb0:	07db      	lsls	r3, r3, #31
 800bbb2:	d537      	bpl.n	800bc24 <_printf_float+0x40c>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	4642      	mov	r2, r8
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	47b8      	blx	r7
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f43f ae78 	beq.w	800b8b4 <_printf_float+0x9c>
 800bbc4:	4653      	mov	r3, sl
 800bbc6:	465a      	mov	r2, fp
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b8      	blx	r7
 800bbce:	3001      	adds	r0, #1
 800bbd0:	f43f ae70 	beq.w	800b8b4 <_printf_float+0x9c>
 800bbd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bbd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe0:	d01b      	beq.n	800bc1a <_printf_float+0x402>
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	f108 0201 	add.w	r2, r8, #1
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b8      	blx	r7
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d10e      	bne.n	800bc12 <_printf_float+0x3fa>
 800bbf4:	e65e      	b.n	800b8b4 <_printf_float+0x9c>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	464a      	mov	r2, r9
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	47b8      	blx	r7
 800bc00:	3001      	adds	r0, #1
 800bc02:	f43f ae57 	beq.w	800b8b4 <_printf_float+0x9c>
 800bc06:	f108 0801 	add.w	r8, r8, #1
 800bc0a:	9b08      	ldr	r3, [sp, #32]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	4543      	cmp	r3, r8
 800bc10:	dcf1      	bgt.n	800bbf6 <_printf_float+0x3de>
 800bc12:	9b04      	ldr	r3, [sp, #16]
 800bc14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc18:	e6db      	b.n	800b9d2 <_printf_float+0x1ba>
 800bc1a:	f04f 0800 	mov.w	r8, #0
 800bc1e:	f104 091a 	add.w	r9, r4, #26
 800bc22:	e7f2      	b.n	800bc0a <_printf_float+0x3f2>
 800bc24:	2301      	movs	r3, #1
 800bc26:	4642      	mov	r2, r8
 800bc28:	e7df      	b.n	800bbea <_printf_float+0x3d2>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	464a      	mov	r2, r9
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b8      	blx	r7
 800bc34:	3001      	adds	r0, #1
 800bc36:	f43f ae3d 	beq.w	800b8b4 <_printf_float+0x9c>
 800bc3a:	f108 0801 	add.w	r8, r8, #1
 800bc3e:	68e3      	ldr	r3, [r4, #12]
 800bc40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	4543      	cmp	r3, r8
 800bc46:	dcf0      	bgt.n	800bc2a <_printf_float+0x412>
 800bc48:	e6f7      	b.n	800ba3a <_printf_float+0x222>
 800bc4a:	f04f 0800 	mov.w	r8, #0
 800bc4e:	f104 0919 	add.w	r9, r4, #25
 800bc52:	e7f4      	b.n	800bc3e <_printf_float+0x426>

0800bc54 <_printf_common>:
 800bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc58:	4616      	mov	r6, r2
 800bc5a:	4699      	mov	r9, r3
 800bc5c:	688a      	ldr	r2, [r1, #8]
 800bc5e:	690b      	ldr	r3, [r1, #16]
 800bc60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc64:	4293      	cmp	r3, r2
 800bc66:	bfb8      	it	lt
 800bc68:	4613      	movlt	r3, r2
 800bc6a:	6033      	str	r3, [r6, #0]
 800bc6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc70:	4607      	mov	r7, r0
 800bc72:	460c      	mov	r4, r1
 800bc74:	b10a      	cbz	r2, 800bc7a <_printf_common+0x26>
 800bc76:	3301      	adds	r3, #1
 800bc78:	6033      	str	r3, [r6, #0]
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	0699      	lsls	r1, r3, #26
 800bc7e:	bf42      	ittt	mi
 800bc80:	6833      	ldrmi	r3, [r6, #0]
 800bc82:	3302      	addmi	r3, #2
 800bc84:	6033      	strmi	r3, [r6, #0]
 800bc86:	6825      	ldr	r5, [r4, #0]
 800bc88:	f015 0506 	ands.w	r5, r5, #6
 800bc8c:	d106      	bne.n	800bc9c <_printf_common+0x48>
 800bc8e:	f104 0a19 	add.w	sl, r4, #25
 800bc92:	68e3      	ldr	r3, [r4, #12]
 800bc94:	6832      	ldr	r2, [r6, #0]
 800bc96:	1a9b      	subs	r3, r3, r2
 800bc98:	42ab      	cmp	r3, r5
 800bc9a:	dc26      	bgt.n	800bcea <_printf_common+0x96>
 800bc9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bca0:	1e13      	subs	r3, r2, #0
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	bf18      	it	ne
 800bca6:	2301      	movne	r3, #1
 800bca8:	0692      	lsls	r2, r2, #26
 800bcaa:	d42b      	bmi.n	800bd04 <_printf_common+0xb0>
 800bcac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	47c0      	blx	r8
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	d01e      	beq.n	800bcf8 <_printf_common+0xa4>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	68e5      	ldr	r5, [r4, #12]
 800bcbe:	6832      	ldr	r2, [r6, #0]
 800bcc0:	f003 0306 	and.w	r3, r3, #6
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	bf08      	it	eq
 800bcc8:	1aad      	subeq	r5, r5, r2
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	bf0c      	ite	eq
 800bcd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcd4:	2500      	movne	r5, #0
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfc4      	itt	gt
 800bcda:	1a9b      	subgt	r3, r3, r2
 800bcdc:	18ed      	addgt	r5, r5, r3
 800bcde:	2600      	movs	r6, #0
 800bce0:	341a      	adds	r4, #26
 800bce2:	42b5      	cmp	r5, r6
 800bce4:	d11a      	bne.n	800bd1c <_printf_common+0xc8>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e008      	b.n	800bcfc <_printf_common+0xa8>
 800bcea:	2301      	movs	r3, #1
 800bcec:	4652      	mov	r2, sl
 800bcee:	4649      	mov	r1, r9
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	47c0      	blx	r8
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d103      	bne.n	800bd00 <_printf_common+0xac>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd00:	3501      	adds	r5, #1
 800bd02:	e7c6      	b.n	800bc92 <_printf_common+0x3e>
 800bd04:	18e1      	adds	r1, r4, r3
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	2030      	movs	r0, #48	; 0x30
 800bd0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd0e:	4422      	add	r2, r4
 800bd10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd18:	3302      	adds	r3, #2
 800bd1a:	e7c7      	b.n	800bcac <_printf_common+0x58>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	4622      	mov	r2, r4
 800bd20:	4649      	mov	r1, r9
 800bd22:	4638      	mov	r0, r7
 800bd24:	47c0      	blx	r8
 800bd26:	3001      	adds	r0, #1
 800bd28:	d0e6      	beq.n	800bcf8 <_printf_common+0xa4>
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7d9      	b.n	800bce2 <_printf_common+0x8e>
	...

0800bd30 <_printf_i>:
 800bd30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	7e0f      	ldrb	r7, [r1, #24]
 800bd36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd38:	2f78      	cmp	r7, #120	; 0x78
 800bd3a:	4691      	mov	r9, r2
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	460c      	mov	r4, r1
 800bd40:	469a      	mov	sl, r3
 800bd42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd46:	d807      	bhi.n	800bd58 <_printf_i+0x28>
 800bd48:	2f62      	cmp	r7, #98	; 0x62
 800bd4a:	d80a      	bhi.n	800bd62 <_printf_i+0x32>
 800bd4c:	2f00      	cmp	r7, #0
 800bd4e:	f000 80d8 	beq.w	800bf02 <_printf_i+0x1d2>
 800bd52:	2f58      	cmp	r7, #88	; 0x58
 800bd54:	f000 80a3 	beq.w	800be9e <_printf_i+0x16e>
 800bd58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd60:	e03a      	b.n	800bdd8 <_printf_i+0xa8>
 800bd62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd66:	2b15      	cmp	r3, #21
 800bd68:	d8f6      	bhi.n	800bd58 <_printf_i+0x28>
 800bd6a:	a101      	add	r1, pc, #4	; (adr r1, 800bd70 <_printf_i+0x40>)
 800bd6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd70:	0800bdc9 	.word	0x0800bdc9
 800bd74:	0800bddd 	.word	0x0800bddd
 800bd78:	0800bd59 	.word	0x0800bd59
 800bd7c:	0800bd59 	.word	0x0800bd59
 800bd80:	0800bd59 	.word	0x0800bd59
 800bd84:	0800bd59 	.word	0x0800bd59
 800bd88:	0800bddd 	.word	0x0800bddd
 800bd8c:	0800bd59 	.word	0x0800bd59
 800bd90:	0800bd59 	.word	0x0800bd59
 800bd94:	0800bd59 	.word	0x0800bd59
 800bd98:	0800bd59 	.word	0x0800bd59
 800bd9c:	0800bee9 	.word	0x0800bee9
 800bda0:	0800be0d 	.word	0x0800be0d
 800bda4:	0800becb 	.word	0x0800becb
 800bda8:	0800bd59 	.word	0x0800bd59
 800bdac:	0800bd59 	.word	0x0800bd59
 800bdb0:	0800bf0b 	.word	0x0800bf0b
 800bdb4:	0800bd59 	.word	0x0800bd59
 800bdb8:	0800be0d 	.word	0x0800be0d
 800bdbc:	0800bd59 	.word	0x0800bd59
 800bdc0:	0800bd59 	.word	0x0800bd59
 800bdc4:	0800bed3 	.word	0x0800bed3
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	1d1a      	adds	r2, r3, #4
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	602a      	str	r2, [r5, #0]
 800bdd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e0a3      	b.n	800bf24 <_printf_i+0x1f4>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	6829      	ldr	r1, [r5, #0]
 800bde0:	0606      	lsls	r6, r0, #24
 800bde2:	f101 0304 	add.w	r3, r1, #4
 800bde6:	d50a      	bpl.n	800bdfe <_printf_i+0xce>
 800bde8:	680e      	ldr	r6, [r1, #0]
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	2e00      	cmp	r6, #0
 800bdee:	da03      	bge.n	800bdf8 <_printf_i+0xc8>
 800bdf0:	232d      	movs	r3, #45	; 0x2d
 800bdf2:	4276      	negs	r6, r6
 800bdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf8:	485e      	ldr	r0, [pc, #376]	; (800bf74 <_printf_i+0x244>)
 800bdfa:	230a      	movs	r3, #10
 800bdfc:	e019      	b.n	800be32 <_printf_i+0x102>
 800bdfe:	680e      	ldr	r6, [r1, #0]
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be06:	bf18      	it	ne
 800be08:	b236      	sxthne	r6, r6
 800be0a:	e7ef      	b.n	800bdec <_printf_i+0xbc>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	6820      	ldr	r0, [r4, #0]
 800be10:	1d19      	adds	r1, r3, #4
 800be12:	6029      	str	r1, [r5, #0]
 800be14:	0601      	lsls	r1, r0, #24
 800be16:	d501      	bpl.n	800be1c <_printf_i+0xec>
 800be18:	681e      	ldr	r6, [r3, #0]
 800be1a:	e002      	b.n	800be22 <_printf_i+0xf2>
 800be1c:	0646      	lsls	r6, r0, #25
 800be1e:	d5fb      	bpl.n	800be18 <_printf_i+0xe8>
 800be20:	881e      	ldrh	r6, [r3, #0]
 800be22:	4854      	ldr	r0, [pc, #336]	; (800bf74 <_printf_i+0x244>)
 800be24:	2f6f      	cmp	r7, #111	; 0x6f
 800be26:	bf0c      	ite	eq
 800be28:	2308      	moveq	r3, #8
 800be2a:	230a      	movne	r3, #10
 800be2c:	2100      	movs	r1, #0
 800be2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be32:	6865      	ldr	r5, [r4, #4]
 800be34:	60a5      	str	r5, [r4, #8]
 800be36:	2d00      	cmp	r5, #0
 800be38:	bfa2      	ittt	ge
 800be3a:	6821      	ldrge	r1, [r4, #0]
 800be3c:	f021 0104 	bicge.w	r1, r1, #4
 800be40:	6021      	strge	r1, [r4, #0]
 800be42:	b90e      	cbnz	r6, 800be48 <_printf_i+0x118>
 800be44:	2d00      	cmp	r5, #0
 800be46:	d04d      	beq.n	800bee4 <_printf_i+0x1b4>
 800be48:	4615      	mov	r5, r2
 800be4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be4e:	fb03 6711 	mls	r7, r3, r1, r6
 800be52:	5dc7      	ldrb	r7, [r0, r7]
 800be54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be58:	4637      	mov	r7, r6
 800be5a:	42bb      	cmp	r3, r7
 800be5c:	460e      	mov	r6, r1
 800be5e:	d9f4      	bls.n	800be4a <_printf_i+0x11a>
 800be60:	2b08      	cmp	r3, #8
 800be62:	d10b      	bne.n	800be7c <_printf_i+0x14c>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	07de      	lsls	r6, r3, #31
 800be68:	d508      	bpl.n	800be7c <_printf_i+0x14c>
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	6861      	ldr	r1, [r4, #4]
 800be6e:	4299      	cmp	r1, r3
 800be70:	bfde      	ittt	le
 800be72:	2330      	movle	r3, #48	; 0x30
 800be74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be7c:	1b52      	subs	r2, r2, r5
 800be7e:	6122      	str	r2, [r4, #16]
 800be80:	f8cd a000 	str.w	sl, [sp]
 800be84:	464b      	mov	r3, r9
 800be86:	aa03      	add	r2, sp, #12
 800be88:	4621      	mov	r1, r4
 800be8a:	4640      	mov	r0, r8
 800be8c:	f7ff fee2 	bl	800bc54 <_printf_common>
 800be90:	3001      	adds	r0, #1
 800be92:	d14c      	bne.n	800bf2e <_printf_i+0x1fe>
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	b004      	add	sp, #16
 800be9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9e:	4835      	ldr	r0, [pc, #212]	; (800bf74 <_printf_i+0x244>)
 800bea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bea4:	6829      	ldr	r1, [r5, #0]
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	f851 6b04 	ldr.w	r6, [r1], #4
 800beac:	6029      	str	r1, [r5, #0]
 800beae:	061d      	lsls	r5, r3, #24
 800beb0:	d514      	bpl.n	800bedc <_printf_i+0x1ac>
 800beb2:	07df      	lsls	r7, r3, #31
 800beb4:	bf44      	itt	mi
 800beb6:	f043 0320 	orrmi.w	r3, r3, #32
 800beba:	6023      	strmi	r3, [r4, #0]
 800bebc:	b91e      	cbnz	r6, 800bec6 <_printf_i+0x196>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	f023 0320 	bic.w	r3, r3, #32
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	2310      	movs	r3, #16
 800bec8:	e7b0      	b.n	800be2c <_printf_i+0xfc>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	f043 0320 	orr.w	r3, r3, #32
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	2378      	movs	r3, #120	; 0x78
 800bed4:	4828      	ldr	r0, [pc, #160]	; (800bf78 <_printf_i+0x248>)
 800bed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beda:	e7e3      	b.n	800bea4 <_printf_i+0x174>
 800bedc:	0659      	lsls	r1, r3, #25
 800bede:	bf48      	it	mi
 800bee0:	b2b6      	uxthmi	r6, r6
 800bee2:	e7e6      	b.n	800beb2 <_printf_i+0x182>
 800bee4:	4615      	mov	r5, r2
 800bee6:	e7bb      	b.n	800be60 <_printf_i+0x130>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	6826      	ldr	r6, [r4, #0]
 800beec:	6961      	ldr	r1, [r4, #20]
 800beee:	1d18      	adds	r0, r3, #4
 800bef0:	6028      	str	r0, [r5, #0]
 800bef2:	0635      	lsls	r5, r6, #24
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	d501      	bpl.n	800befc <_printf_i+0x1cc>
 800bef8:	6019      	str	r1, [r3, #0]
 800befa:	e002      	b.n	800bf02 <_printf_i+0x1d2>
 800befc:	0670      	lsls	r0, r6, #25
 800befe:	d5fb      	bpl.n	800bef8 <_printf_i+0x1c8>
 800bf00:	8019      	strh	r1, [r3, #0]
 800bf02:	2300      	movs	r3, #0
 800bf04:	6123      	str	r3, [r4, #16]
 800bf06:	4615      	mov	r5, r2
 800bf08:	e7ba      	b.n	800be80 <_printf_i+0x150>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	1d1a      	adds	r2, r3, #4
 800bf0e:	602a      	str	r2, [r5, #0]
 800bf10:	681d      	ldr	r5, [r3, #0]
 800bf12:	6862      	ldr	r2, [r4, #4]
 800bf14:	2100      	movs	r1, #0
 800bf16:	4628      	mov	r0, r5
 800bf18:	f7f4 f9ea 	bl	80002f0 <memchr>
 800bf1c:	b108      	cbz	r0, 800bf22 <_printf_i+0x1f2>
 800bf1e:	1b40      	subs	r0, r0, r5
 800bf20:	6060      	str	r0, [r4, #4]
 800bf22:	6863      	ldr	r3, [r4, #4]
 800bf24:	6123      	str	r3, [r4, #16]
 800bf26:	2300      	movs	r3, #0
 800bf28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf2c:	e7a8      	b.n	800be80 <_printf_i+0x150>
 800bf2e:	6923      	ldr	r3, [r4, #16]
 800bf30:	462a      	mov	r2, r5
 800bf32:	4649      	mov	r1, r9
 800bf34:	4640      	mov	r0, r8
 800bf36:	47d0      	blx	sl
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d0ab      	beq.n	800be94 <_printf_i+0x164>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	079b      	lsls	r3, r3, #30
 800bf40:	d413      	bmi.n	800bf6a <_printf_i+0x23a>
 800bf42:	68e0      	ldr	r0, [r4, #12]
 800bf44:	9b03      	ldr	r3, [sp, #12]
 800bf46:	4298      	cmp	r0, r3
 800bf48:	bfb8      	it	lt
 800bf4a:	4618      	movlt	r0, r3
 800bf4c:	e7a4      	b.n	800be98 <_printf_i+0x168>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4632      	mov	r2, r6
 800bf52:	4649      	mov	r1, r9
 800bf54:	4640      	mov	r0, r8
 800bf56:	47d0      	blx	sl
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d09b      	beq.n	800be94 <_printf_i+0x164>
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	68e3      	ldr	r3, [r4, #12]
 800bf60:	9903      	ldr	r1, [sp, #12]
 800bf62:	1a5b      	subs	r3, r3, r1
 800bf64:	42ab      	cmp	r3, r5
 800bf66:	dcf2      	bgt.n	800bf4e <_printf_i+0x21e>
 800bf68:	e7eb      	b.n	800bf42 <_printf_i+0x212>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	f104 0619 	add.w	r6, r4, #25
 800bf70:	e7f5      	b.n	800bf5e <_printf_i+0x22e>
 800bf72:	bf00      	nop
 800bf74:	0800f30a 	.word	0x0800f30a
 800bf78:	0800f31b 	.word	0x0800f31b

0800bf7c <iprintf>:
 800bf7c:	b40f      	push	{r0, r1, r2, r3}
 800bf7e:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <iprintf+0x2c>)
 800bf80:	b513      	push	{r0, r1, r4, lr}
 800bf82:	681c      	ldr	r4, [r3, #0]
 800bf84:	b124      	cbz	r4, 800bf90 <iprintf+0x14>
 800bf86:	69a3      	ldr	r3, [r4, #24]
 800bf88:	b913      	cbnz	r3, 800bf90 <iprintf+0x14>
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f001 f8ac 	bl	800d0e8 <__sinit>
 800bf90:	ab05      	add	r3, sp, #20
 800bf92:	9a04      	ldr	r2, [sp, #16]
 800bf94:	68a1      	ldr	r1, [r4, #8]
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f001 ffb7 	bl	800df0c <_vfiprintf_r>
 800bf9e:	b002      	add	sp, #8
 800bfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa4:	b004      	add	sp, #16
 800bfa6:	4770      	bx	lr
 800bfa8:	24000058 	.word	0x24000058

0800bfac <_puts_r>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	460e      	mov	r6, r1
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	b118      	cbz	r0, 800bfbc <_puts_r+0x10>
 800bfb4:	6983      	ldr	r3, [r0, #24]
 800bfb6:	b90b      	cbnz	r3, 800bfbc <_puts_r+0x10>
 800bfb8:	f001 f896 	bl	800d0e8 <__sinit>
 800bfbc:	69ab      	ldr	r3, [r5, #24]
 800bfbe:	68ac      	ldr	r4, [r5, #8]
 800bfc0:	b913      	cbnz	r3, 800bfc8 <_puts_r+0x1c>
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f001 f890 	bl	800d0e8 <__sinit>
 800bfc8:	4b2c      	ldr	r3, [pc, #176]	; (800c07c <_puts_r+0xd0>)
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d120      	bne.n	800c010 <_puts_r+0x64>
 800bfce:	686c      	ldr	r4, [r5, #4]
 800bfd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfd2:	07db      	lsls	r3, r3, #31
 800bfd4:	d405      	bmi.n	800bfe2 <_puts_r+0x36>
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	0598      	lsls	r0, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_puts_r+0x36>
 800bfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfde:	f001 f926 	bl	800d22e <__retarget_lock_acquire_recursive>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	0719      	lsls	r1, r3, #28
 800bfe6:	d51d      	bpl.n	800c024 <_puts_r+0x78>
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	b1db      	cbz	r3, 800c024 <_puts_r+0x78>
 800bfec:	3e01      	subs	r6, #1
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bff4:	3b01      	subs	r3, #1
 800bff6:	60a3      	str	r3, [r4, #8]
 800bff8:	bb39      	cbnz	r1, 800c04a <_puts_r+0x9e>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	da38      	bge.n	800c070 <_puts_r+0xc4>
 800bffe:	4622      	mov	r2, r4
 800c000:	210a      	movs	r1, #10
 800c002:	4628      	mov	r0, r5
 800c004:	f000 f89c 	bl	800c140 <__swbuf_r>
 800c008:	3001      	adds	r0, #1
 800c00a:	d011      	beq.n	800c030 <_puts_r+0x84>
 800c00c:	250a      	movs	r5, #10
 800c00e:	e011      	b.n	800c034 <_puts_r+0x88>
 800c010:	4b1b      	ldr	r3, [pc, #108]	; (800c080 <_puts_r+0xd4>)
 800c012:	429c      	cmp	r4, r3
 800c014:	d101      	bne.n	800c01a <_puts_r+0x6e>
 800c016:	68ac      	ldr	r4, [r5, #8]
 800c018:	e7da      	b.n	800bfd0 <_puts_r+0x24>
 800c01a:	4b1a      	ldr	r3, [pc, #104]	; (800c084 <_puts_r+0xd8>)
 800c01c:	429c      	cmp	r4, r3
 800c01e:	bf08      	it	eq
 800c020:	68ec      	ldreq	r4, [r5, #12]
 800c022:	e7d5      	b.n	800bfd0 <_puts_r+0x24>
 800c024:	4621      	mov	r1, r4
 800c026:	4628      	mov	r0, r5
 800c028:	f000 f8dc 	bl	800c1e4 <__swsetup_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d0dd      	beq.n	800bfec <_puts_r+0x40>
 800c030:	f04f 35ff 	mov.w	r5, #4294967295
 800c034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c036:	07da      	lsls	r2, r3, #31
 800c038:	d405      	bmi.n	800c046 <_puts_r+0x9a>
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	059b      	lsls	r3, r3, #22
 800c03e:	d402      	bmi.n	800c046 <_puts_r+0x9a>
 800c040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c042:	f001 f8f5 	bl	800d230 <__retarget_lock_release_recursive>
 800c046:	4628      	mov	r0, r5
 800c048:	bd70      	pop	{r4, r5, r6, pc}
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da04      	bge.n	800c058 <_puts_r+0xac>
 800c04e:	69a2      	ldr	r2, [r4, #24]
 800c050:	429a      	cmp	r2, r3
 800c052:	dc06      	bgt.n	800c062 <_puts_r+0xb6>
 800c054:	290a      	cmp	r1, #10
 800c056:	d004      	beq.n	800c062 <_puts_r+0xb6>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	6022      	str	r2, [r4, #0]
 800c05e:	7019      	strb	r1, [r3, #0]
 800c060:	e7c5      	b.n	800bfee <_puts_r+0x42>
 800c062:	4622      	mov	r2, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f86b 	bl	800c140 <__swbuf_r>
 800c06a:	3001      	adds	r0, #1
 800c06c:	d1bf      	bne.n	800bfee <_puts_r+0x42>
 800c06e:	e7df      	b.n	800c030 <_puts_r+0x84>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	250a      	movs	r5, #10
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	701d      	strb	r5, [r3, #0]
 800c07a:	e7db      	b.n	800c034 <_puts_r+0x88>
 800c07c:	0800f3dc 	.word	0x0800f3dc
 800c080:	0800f3fc 	.word	0x0800f3fc
 800c084:	0800f3bc 	.word	0x0800f3bc

0800c088 <puts>:
 800c088:	4b02      	ldr	r3, [pc, #8]	; (800c094 <puts+0xc>)
 800c08a:	4601      	mov	r1, r0
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	f7ff bf8d 	b.w	800bfac <_puts_r>
 800c092:	bf00      	nop
 800c094:	24000058 	.word	0x24000058

0800c098 <sniprintf>:
 800c098:	b40c      	push	{r2, r3}
 800c09a:	b530      	push	{r4, r5, lr}
 800c09c:	4b17      	ldr	r3, [pc, #92]	; (800c0fc <sniprintf+0x64>)
 800c09e:	1e0c      	subs	r4, r1, #0
 800c0a0:	681d      	ldr	r5, [r3, #0]
 800c0a2:	b09d      	sub	sp, #116	; 0x74
 800c0a4:	da08      	bge.n	800c0b8 <sniprintf+0x20>
 800c0a6:	238b      	movs	r3, #139	; 0x8b
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ae:	b01d      	add	sp, #116	; 0x74
 800c0b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0b4:	b002      	add	sp, #8
 800c0b6:	4770      	bx	lr
 800c0b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0c0:	bf14      	ite	ne
 800c0c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c0c6:	4623      	moveq	r3, r4
 800c0c8:	9304      	str	r3, [sp, #16]
 800c0ca:	9307      	str	r3, [sp, #28]
 800c0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0d0:	9002      	str	r0, [sp, #8]
 800c0d2:	9006      	str	r0, [sp, #24]
 800c0d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0da:	ab21      	add	r3, sp, #132	; 0x84
 800c0dc:	a902      	add	r1, sp, #8
 800c0de:	4628      	mov	r0, r5
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	f001 fde9 	bl	800dcb8 <_svfiprintf_r>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	bfbc      	itt	lt
 800c0ea:	238b      	movlt	r3, #139	; 0x8b
 800c0ec:	602b      	strlt	r3, [r5, #0]
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	d0dd      	beq.n	800c0ae <sniprintf+0x16>
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	701a      	strb	r2, [r3, #0]
 800c0f8:	e7d9      	b.n	800c0ae <sniprintf+0x16>
 800c0fa:	bf00      	nop
 800c0fc:	24000058 	.word	0x24000058

0800c100 <siprintf>:
 800c100:	b40e      	push	{r1, r2, r3}
 800c102:	b500      	push	{lr}
 800c104:	b09c      	sub	sp, #112	; 0x70
 800c106:	ab1d      	add	r3, sp, #116	; 0x74
 800c108:	9002      	str	r0, [sp, #8]
 800c10a:	9006      	str	r0, [sp, #24]
 800c10c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c110:	4809      	ldr	r0, [pc, #36]	; (800c138 <siprintf+0x38>)
 800c112:	9107      	str	r1, [sp, #28]
 800c114:	9104      	str	r1, [sp, #16]
 800c116:	4909      	ldr	r1, [pc, #36]	; (800c13c <siprintf+0x3c>)
 800c118:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11c:	9105      	str	r1, [sp, #20]
 800c11e:	6800      	ldr	r0, [r0, #0]
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	a902      	add	r1, sp, #8
 800c124:	f001 fdc8 	bl	800dcb8 <_svfiprintf_r>
 800c128:	9b02      	ldr	r3, [sp, #8]
 800c12a:	2200      	movs	r2, #0
 800c12c:	701a      	strb	r2, [r3, #0]
 800c12e:	b01c      	add	sp, #112	; 0x70
 800c130:	f85d eb04 	ldr.w	lr, [sp], #4
 800c134:	b003      	add	sp, #12
 800c136:	4770      	bx	lr
 800c138:	24000058 	.word	0x24000058
 800c13c:	ffff0208 	.word	0xffff0208

0800c140 <__swbuf_r>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	460e      	mov	r6, r1
 800c144:	4614      	mov	r4, r2
 800c146:	4605      	mov	r5, r0
 800c148:	b118      	cbz	r0, 800c152 <__swbuf_r+0x12>
 800c14a:	6983      	ldr	r3, [r0, #24]
 800c14c:	b90b      	cbnz	r3, 800c152 <__swbuf_r+0x12>
 800c14e:	f000 ffcb 	bl	800d0e8 <__sinit>
 800c152:	4b21      	ldr	r3, [pc, #132]	; (800c1d8 <__swbuf_r+0x98>)
 800c154:	429c      	cmp	r4, r3
 800c156:	d12b      	bne.n	800c1b0 <__swbuf_r+0x70>
 800c158:	686c      	ldr	r4, [r5, #4]
 800c15a:	69a3      	ldr	r3, [r4, #24]
 800c15c:	60a3      	str	r3, [r4, #8]
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	071a      	lsls	r2, r3, #28
 800c162:	d52f      	bpl.n	800c1c4 <__swbuf_r+0x84>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	b36b      	cbz	r3, 800c1c4 <__swbuf_r+0x84>
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	6820      	ldr	r0, [r4, #0]
 800c16c:	1ac0      	subs	r0, r0, r3
 800c16e:	6963      	ldr	r3, [r4, #20]
 800c170:	b2f6      	uxtb	r6, r6
 800c172:	4283      	cmp	r3, r0
 800c174:	4637      	mov	r7, r6
 800c176:	dc04      	bgt.n	800c182 <__swbuf_r+0x42>
 800c178:	4621      	mov	r1, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	f000 ff20 	bl	800cfc0 <_fflush_r>
 800c180:	bb30      	cbnz	r0, 800c1d0 <__swbuf_r+0x90>
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	3b01      	subs	r3, #1
 800c186:	60a3      	str	r3, [r4, #8]
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	6022      	str	r2, [r4, #0]
 800c18e:	701e      	strb	r6, [r3, #0]
 800c190:	6963      	ldr	r3, [r4, #20]
 800c192:	3001      	adds	r0, #1
 800c194:	4283      	cmp	r3, r0
 800c196:	d004      	beq.n	800c1a2 <__swbuf_r+0x62>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	07db      	lsls	r3, r3, #31
 800c19c:	d506      	bpl.n	800c1ac <__swbuf_r+0x6c>
 800c19e:	2e0a      	cmp	r6, #10
 800c1a0:	d104      	bne.n	800c1ac <__swbuf_r+0x6c>
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f000 ff0b 	bl	800cfc0 <_fflush_r>
 800c1aa:	b988      	cbnz	r0, 800c1d0 <__swbuf_r+0x90>
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	; (800c1dc <__swbuf_r+0x9c>)
 800c1b2:	429c      	cmp	r4, r3
 800c1b4:	d101      	bne.n	800c1ba <__swbuf_r+0x7a>
 800c1b6:	68ac      	ldr	r4, [r5, #8]
 800c1b8:	e7cf      	b.n	800c15a <__swbuf_r+0x1a>
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <__swbuf_r+0xa0>)
 800c1bc:	429c      	cmp	r4, r3
 800c1be:	bf08      	it	eq
 800c1c0:	68ec      	ldreq	r4, [r5, #12]
 800c1c2:	e7ca      	b.n	800c15a <__swbuf_r+0x1a>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f80c 	bl	800c1e4 <__swsetup_r>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d0cb      	beq.n	800c168 <__swbuf_r+0x28>
 800c1d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c1d4:	e7ea      	b.n	800c1ac <__swbuf_r+0x6c>
 800c1d6:	bf00      	nop
 800c1d8:	0800f3dc 	.word	0x0800f3dc
 800c1dc:	0800f3fc 	.word	0x0800f3fc
 800c1e0:	0800f3bc 	.word	0x0800f3bc

0800c1e4 <__swsetup_r>:
 800c1e4:	4b32      	ldr	r3, [pc, #200]	; (800c2b0 <__swsetup_r+0xcc>)
 800c1e6:	b570      	push	{r4, r5, r6, lr}
 800c1e8:	681d      	ldr	r5, [r3, #0]
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	b125      	cbz	r5, 800c1fa <__swsetup_r+0x16>
 800c1f0:	69ab      	ldr	r3, [r5, #24]
 800c1f2:	b913      	cbnz	r3, 800c1fa <__swsetup_r+0x16>
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f000 ff77 	bl	800d0e8 <__sinit>
 800c1fa:	4b2e      	ldr	r3, [pc, #184]	; (800c2b4 <__swsetup_r+0xd0>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d10f      	bne.n	800c220 <__swsetup_r+0x3c>
 800c200:	686c      	ldr	r4, [r5, #4]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c208:	0719      	lsls	r1, r3, #28
 800c20a:	d42c      	bmi.n	800c266 <__swsetup_r+0x82>
 800c20c:	06dd      	lsls	r5, r3, #27
 800c20e:	d411      	bmi.n	800c234 <__swsetup_r+0x50>
 800c210:	2309      	movs	r3, #9
 800c212:	6033      	str	r3, [r6, #0]
 800c214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	e03e      	b.n	800c29e <__swsetup_r+0xba>
 800c220:	4b25      	ldr	r3, [pc, #148]	; (800c2b8 <__swsetup_r+0xd4>)
 800c222:	429c      	cmp	r4, r3
 800c224:	d101      	bne.n	800c22a <__swsetup_r+0x46>
 800c226:	68ac      	ldr	r4, [r5, #8]
 800c228:	e7eb      	b.n	800c202 <__swsetup_r+0x1e>
 800c22a:	4b24      	ldr	r3, [pc, #144]	; (800c2bc <__swsetup_r+0xd8>)
 800c22c:	429c      	cmp	r4, r3
 800c22e:	bf08      	it	eq
 800c230:	68ec      	ldreq	r4, [r5, #12]
 800c232:	e7e6      	b.n	800c202 <__swsetup_r+0x1e>
 800c234:	0758      	lsls	r0, r3, #29
 800c236:	d512      	bpl.n	800c25e <__swsetup_r+0x7a>
 800c238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c23a:	b141      	cbz	r1, 800c24e <__swsetup_r+0x6a>
 800c23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c240:	4299      	cmp	r1, r3
 800c242:	d002      	beq.n	800c24a <__swsetup_r+0x66>
 800c244:	4630      	mov	r0, r6
 800c246:	f001 fbfb 	bl	800da40 <_free_r>
 800c24a:	2300      	movs	r3, #0
 800c24c:	6363      	str	r3, [r4, #52]	; 0x34
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c254:	81a3      	strh	r3, [r4, #12]
 800c256:	2300      	movs	r3, #0
 800c258:	6063      	str	r3, [r4, #4]
 800c25a:	6923      	ldr	r3, [r4, #16]
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f043 0308 	orr.w	r3, r3, #8
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	6923      	ldr	r3, [r4, #16]
 800c268:	b94b      	cbnz	r3, 800c27e <__swsetup_r+0x9a>
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c274:	d003      	beq.n	800c27e <__swsetup_r+0x9a>
 800c276:	4621      	mov	r1, r4
 800c278:	4630      	mov	r0, r6
 800c27a:	f000 ffff 	bl	800d27c <__smakebuf_r>
 800c27e:	89a0      	ldrh	r0, [r4, #12]
 800c280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c284:	f010 0301 	ands.w	r3, r0, #1
 800c288:	d00a      	beq.n	800c2a0 <__swsetup_r+0xbc>
 800c28a:	2300      	movs	r3, #0
 800c28c:	60a3      	str	r3, [r4, #8]
 800c28e:	6963      	ldr	r3, [r4, #20]
 800c290:	425b      	negs	r3, r3
 800c292:	61a3      	str	r3, [r4, #24]
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	b943      	cbnz	r3, 800c2aa <__swsetup_r+0xc6>
 800c298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c29c:	d1ba      	bne.n	800c214 <__swsetup_r+0x30>
 800c29e:	bd70      	pop	{r4, r5, r6, pc}
 800c2a0:	0781      	lsls	r1, r0, #30
 800c2a2:	bf58      	it	pl
 800c2a4:	6963      	ldrpl	r3, [r4, #20]
 800c2a6:	60a3      	str	r3, [r4, #8]
 800c2a8:	e7f4      	b.n	800c294 <__swsetup_r+0xb0>
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	e7f7      	b.n	800c29e <__swsetup_r+0xba>
 800c2ae:	bf00      	nop
 800c2b0:	24000058 	.word	0x24000058
 800c2b4:	0800f3dc 	.word	0x0800f3dc
 800c2b8:	0800f3fc 	.word	0x0800f3fc
 800c2bc:	0800f3bc 	.word	0x0800f3bc

0800c2c0 <quorem>:
 800c2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	6903      	ldr	r3, [r0, #16]
 800c2c6:	690c      	ldr	r4, [r1, #16]
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	f2c0 8081 	blt.w	800c3d2 <quorem+0x112>
 800c2d0:	3c01      	subs	r4, #1
 800c2d2:	f101 0814 	add.w	r8, r1, #20
 800c2d6:	f100 0514 	add.w	r5, r0, #20
 800c2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2f8:	d331      	bcc.n	800c35e <quorem+0x9e>
 800c2fa:	f04f 0e00 	mov.w	lr, #0
 800c2fe:	4640      	mov	r0, r8
 800c300:	46ac      	mov	ip, r5
 800c302:	46f2      	mov	sl, lr
 800c304:	f850 2b04 	ldr.w	r2, [r0], #4
 800c308:	b293      	uxth	r3, r2
 800c30a:	fb06 e303 	mla	r3, r6, r3, lr
 800c30e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c312:	b29b      	uxth	r3, r3
 800c314:	ebaa 0303 	sub.w	r3, sl, r3
 800c318:	f8dc a000 	ldr.w	sl, [ip]
 800c31c:	0c12      	lsrs	r2, r2, #16
 800c31e:	fa13 f38a 	uxtah	r3, r3, sl
 800c322:	fb06 e202 	mla	r2, r6, r2, lr
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c32e:	b292      	uxth	r2, r2
 800c330:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c338:	f8bd 3000 	ldrh.w	r3, [sp]
 800c33c:	4581      	cmp	r9, r0
 800c33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c342:	f84c 3b04 	str.w	r3, [ip], #4
 800c346:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c34a:	d2db      	bcs.n	800c304 <quorem+0x44>
 800c34c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c350:	b92b      	cbnz	r3, 800c35e <quorem+0x9e>
 800c352:	9b01      	ldr	r3, [sp, #4]
 800c354:	3b04      	subs	r3, #4
 800c356:	429d      	cmp	r5, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	d32e      	bcc.n	800c3ba <quorem+0xfa>
 800c35c:	613c      	str	r4, [r7, #16]
 800c35e:	4638      	mov	r0, r7
 800c360:	f001 fa56 	bl	800d810 <__mcmp>
 800c364:	2800      	cmp	r0, #0
 800c366:	db24      	blt.n	800c3b2 <quorem+0xf2>
 800c368:	3601      	adds	r6, #1
 800c36a:	4628      	mov	r0, r5
 800c36c:	f04f 0c00 	mov.w	ip, #0
 800c370:	f858 2b04 	ldr.w	r2, [r8], #4
 800c374:	f8d0 e000 	ldr.w	lr, [r0]
 800c378:	b293      	uxth	r3, r2
 800c37a:	ebac 0303 	sub.w	r3, ip, r3
 800c37e:	0c12      	lsrs	r2, r2, #16
 800c380:	fa13 f38e 	uxtah	r3, r3, lr
 800c384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c392:	45c1      	cmp	r9, r8
 800c394:	f840 3b04 	str.w	r3, [r0], #4
 800c398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c39c:	d2e8      	bcs.n	800c370 <quorem+0xb0>
 800c39e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3a6:	b922      	cbnz	r2, 800c3b2 <quorem+0xf2>
 800c3a8:	3b04      	subs	r3, #4
 800c3aa:	429d      	cmp	r5, r3
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	d30a      	bcc.n	800c3c6 <quorem+0x106>
 800c3b0:	613c      	str	r4, [r7, #16]
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	b003      	add	sp, #12
 800c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	3b04      	subs	r3, #4
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d1cc      	bne.n	800c35c <quorem+0x9c>
 800c3c2:	3c01      	subs	r4, #1
 800c3c4:	e7c7      	b.n	800c356 <quorem+0x96>
 800c3c6:	6812      	ldr	r2, [r2, #0]
 800c3c8:	3b04      	subs	r3, #4
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	d1f0      	bne.n	800c3b0 <quorem+0xf0>
 800c3ce:	3c01      	subs	r4, #1
 800c3d0:	e7eb      	b.n	800c3aa <quorem+0xea>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	e7ee      	b.n	800c3b4 <quorem+0xf4>
	...

0800c3d8 <_dtoa_r>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	ed2d 8b02 	vpush	{d8}
 800c3e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c3e2:	b091      	sub	sp, #68	; 0x44
 800c3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3e8:	ec59 8b10 	vmov	r8, r9, d0
 800c3ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c3ee:	9106      	str	r1, [sp, #24]
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	9208      	str	r2, [sp, #32]
 800c3f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c3f6:	b975      	cbnz	r5, 800c416 <_dtoa_r+0x3e>
 800c3f8:	2010      	movs	r0, #16
 800c3fa:	f000 ff7f 	bl	800d2fc <malloc>
 800c3fe:	4602      	mov	r2, r0
 800c400:	6270      	str	r0, [r6, #36]	; 0x24
 800c402:	b920      	cbnz	r0, 800c40e <_dtoa_r+0x36>
 800c404:	4baa      	ldr	r3, [pc, #680]	; (800c6b0 <_dtoa_r+0x2d8>)
 800c406:	21ea      	movs	r1, #234	; 0xea
 800c408:	48aa      	ldr	r0, [pc, #680]	; (800c6b4 <_dtoa_r+0x2dc>)
 800c40a:	f001 ff15 	bl	800e238 <__assert_func>
 800c40e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c412:	6005      	str	r5, [r0, #0]
 800c414:	60c5      	str	r5, [r0, #12]
 800c416:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c418:	6819      	ldr	r1, [r3, #0]
 800c41a:	b151      	cbz	r1, 800c432 <_dtoa_r+0x5a>
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	604a      	str	r2, [r1, #4]
 800c420:	2301      	movs	r3, #1
 800c422:	4093      	lsls	r3, r2
 800c424:	608b      	str	r3, [r1, #8]
 800c426:	4630      	mov	r0, r6
 800c428:	f000 ffb0 	bl	800d38c <_Bfree>
 800c42c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f1b9 0300 	subs.w	r3, r9, #0
 800c436:	bfbb      	ittet	lt
 800c438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c43c:	9303      	strlt	r3, [sp, #12]
 800c43e:	2300      	movge	r3, #0
 800c440:	2201      	movlt	r2, #1
 800c442:	bfac      	ite	ge
 800c444:	6023      	strge	r3, [r4, #0]
 800c446:	6022      	strlt	r2, [r4, #0]
 800c448:	4b9b      	ldr	r3, [pc, #620]	; (800c6b8 <_dtoa_r+0x2e0>)
 800c44a:	9c03      	ldr	r4, [sp, #12]
 800c44c:	43a3      	bics	r3, r4
 800c44e:	d11c      	bne.n	800c48a <_dtoa_r+0xb2>
 800c450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c452:	f242 730f 	movw	r3, #9999	; 0x270f
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c45c:	ea53 0308 	orrs.w	r3, r3, r8
 800c460:	f000 84fd 	beq.w	800ce5e <_dtoa_r+0xa86>
 800c464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c466:	b963      	cbnz	r3, 800c482 <_dtoa_r+0xaa>
 800c468:	4b94      	ldr	r3, [pc, #592]	; (800c6bc <_dtoa_r+0x2e4>)
 800c46a:	e01f      	b.n	800c4ac <_dtoa_r+0xd4>
 800c46c:	4b94      	ldr	r3, [pc, #592]	; (800c6c0 <_dtoa_r+0x2e8>)
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	3308      	adds	r3, #8
 800c472:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c474:	6013      	str	r3, [r2, #0]
 800c476:	9801      	ldr	r0, [sp, #4]
 800c478:	b011      	add	sp, #68	; 0x44
 800c47a:	ecbd 8b02 	vpop	{d8}
 800c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c482:	4b8e      	ldr	r3, [pc, #568]	; (800c6bc <_dtoa_r+0x2e4>)
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	3303      	adds	r3, #3
 800c488:	e7f3      	b.n	800c472 <_dtoa_r+0x9a>
 800c48a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c48e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	d10b      	bne.n	800c4b0 <_dtoa_r+0xd8>
 800c498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c49a:	2301      	movs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 84d9 	beq.w	800ce58 <_dtoa_r+0xa80>
 800c4a6:	4887      	ldr	r0, [pc, #540]	; (800c6c4 <_dtoa_r+0x2ec>)
 800c4a8:	6018      	str	r0, [r3, #0]
 800c4aa:	1e43      	subs	r3, r0, #1
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	e7e2      	b.n	800c476 <_dtoa_r+0x9e>
 800c4b0:	a90f      	add	r1, sp, #60	; 0x3c
 800c4b2:	aa0e      	add	r2, sp, #56	; 0x38
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	eeb0 0b48 	vmov.f64	d0, d8
 800c4ba:	f001 fa4f 	bl	800d95c <__d2b>
 800c4be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	d046      	beq.n	800c558 <_dtoa_r+0x180>
 800c4ca:	ee18 4a90 	vmov	r4, s17
 800c4ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4d2:	ec53 2b18 	vmov	r2, r3, d8
 800c4d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c4da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c4e2:	2400      	movs	r4, #0
 800c4e4:	ec43 2b16 	vmov	d6, r2, r3
 800c4e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c4ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c698 <_dtoa_r+0x2c0>
 800c4f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c4f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c6a0 <_dtoa_r+0x2c8>
 800c4f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c4fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c6a8 <_dtoa_r+0x2d0>
 800c500:	ee07 1a90 	vmov	s15, r1
 800c504:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c508:	eeb0 7b46 	vmov.f64	d7, d6
 800c50c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c510:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c514:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51c:	ee16 ba90 	vmov	fp, s13
 800c520:	940a      	str	r4, [sp, #40]	; 0x28
 800c522:	d508      	bpl.n	800c536 <_dtoa_r+0x15e>
 800c524:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c528:	eeb4 6b47 	vcmp.f64	d6, d7
 800c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c530:	bf18      	it	ne
 800c532:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c536:	f1bb 0f16 	cmp.w	fp, #22
 800c53a:	d82f      	bhi.n	800c59c <_dtoa_r+0x1c4>
 800c53c:	4b62      	ldr	r3, [pc, #392]	; (800c6c8 <_dtoa_r+0x2f0>)
 800c53e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c542:	ed93 7b00 	vldr	d7, [r3]
 800c546:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c54e:	d501      	bpl.n	800c554 <_dtoa_r+0x17c>
 800c550:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c554:	2300      	movs	r3, #0
 800c556:	e022      	b.n	800c59e <_dtoa_r+0x1c6>
 800c558:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c55a:	4401      	add	r1, r0
 800c55c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c560:	2b20      	cmp	r3, #32
 800c562:	bfc1      	itttt	gt
 800c564:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c568:	fa04 f303 	lslgt.w	r3, r4, r3
 800c56c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c570:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c574:	bfd6      	itet	le
 800c576:	f1c3 0320 	rsble	r3, r3, #32
 800c57a:	ea43 0808 	orrgt.w	r8, r3, r8
 800c57e:	fa08 f803 	lslle.w	r8, r8, r3
 800c582:	ee07 8a90 	vmov	s15, r8
 800c586:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c58a:	3901      	subs	r1, #1
 800c58c:	ee17 4a90 	vmov	r4, s15
 800c590:	ec53 2b17 	vmov	r2, r3, d7
 800c594:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c598:	2401      	movs	r4, #1
 800c59a:	e7a3      	b.n	800c4e4 <_dtoa_r+0x10c>
 800c59c:	2301      	movs	r3, #1
 800c59e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5a0:	1a43      	subs	r3, r0, r1
 800c5a2:	1e5a      	subs	r2, r3, #1
 800c5a4:	bf45      	ittet	mi
 800c5a6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c5aa:	9304      	strmi	r3, [sp, #16]
 800c5ac:	2300      	movpl	r3, #0
 800c5ae:	2300      	movmi	r3, #0
 800c5b0:	9205      	str	r2, [sp, #20]
 800c5b2:	bf54      	ite	pl
 800c5b4:	9304      	strpl	r3, [sp, #16]
 800c5b6:	9305      	strmi	r3, [sp, #20]
 800c5b8:	f1bb 0f00 	cmp.w	fp, #0
 800c5bc:	db18      	blt.n	800c5f0 <_dtoa_r+0x218>
 800c5be:	9b05      	ldr	r3, [sp, #20]
 800c5c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c5c4:	445b      	add	r3, fp
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	9a06      	ldr	r2, [sp, #24]
 800c5cc:	2a09      	cmp	r2, #9
 800c5ce:	d849      	bhi.n	800c664 <_dtoa_r+0x28c>
 800c5d0:	2a05      	cmp	r2, #5
 800c5d2:	bfc4      	itt	gt
 800c5d4:	3a04      	subgt	r2, #4
 800c5d6:	9206      	strgt	r2, [sp, #24]
 800c5d8:	9a06      	ldr	r2, [sp, #24]
 800c5da:	f1a2 0202 	sub.w	r2, r2, #2
 800c5de:	bfcc      	ite	gt
 800c5e0:	2400      	movgt	r4, #0
 800c5e2:	2401      	movle	r4, #1
 800c5e4:	2a03      	cmp	r2, #3
 800c5e6:	d848      	bhi.n	800c67a <_dtoa_r+0x2a2>
 800c5e8:	e8df f002 	tbb	[pc, r2]
 800c5ec:	3a2c2e0b 	.word	0x3a2c2e0b
 800c5f0:	9b04      	ldr	r3, [sp, #16]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	eba3 030b 	sub.w	r3, r3, fp
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	9209      	str	r2, [sp, #36]	; 0x24
 800c5fc:	f1cb 0300 	rsb	r3, fp, #0
 800c600:	e7e3      	b.n	800c5ca <_dtoa_r+0x1f2>
 800c602:	2200      	movs	r2, #0
 800c604:	9207      	str	r2, [sp, #28]
 800c606:	9a08      	ldr	r2, [sp, #32]
 800c608:	2a00      	cmp	r2, #0
 800c60a:	dc39      	bgt.n	800c680 <_dtoa_r+0x2a8>
 800c60c:	f04f 0a01 	mov.w	sl, #1
 800c610:	46d1      	mov	r9, sl
 800c612:	4652      	mov	r2, sl
 800c614:	f8cd a020 	str.w	sl, [sp, #32]
 800c618:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c61a:	2100      	movs	r1, #0
 800c61c:	6079      	str	r1, [r7, #4]
 800c61e:	2004      	movs	r0, #4
 800c620:	f100 0c14 	add.w	ip, r0, #20
 800c624:	4594      	cmp	ip, r2
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	d92f      	bls.n	800c68a <_dtoa_r+0x2b2>
 800c62a:	4630      	mov	r0, r6
 800c62c:	930d      	str	r3, [sp, #52]	; 0x34
 800c62e:	f000 fe6d 	bl	800d30c <_Balloc>
 800c632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c634:	9001      	str	r0, [sp, #4]
 800c636:	4602      	mov	r2, r0
 800c638:	2800      	cmp	r0, #0
 800c63a:	d149      	bne.n	800c6d0 <_dtoa_r+0x2f8>
 800c63c:	4b23      	ldr	r3, [pc, #140]	; (800c6cc <_dtoa_r+0x2f4>)
 800c63e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c642:	e6e1      	b.n	800c408 <_dtoa_r+0x30>
 800c644:	2201      	movs	r2, #1
 800c646:	e7dd      	b.n	800c604 <_dtoa_r+0x22c>
 800c648:	2200      	movs	r2, #0
 800c64a:	9207      	str	r2, [sp, #28]
 800c64c:	9a08      	ldr	r2, [sp, #32]
 800c64e:	eb0b 0a02 	add.w	sl, fp, r2
 800c652:	f10a 0901 	add.w	r9, sl, #1
 800c656:	464a      	mov	r2, r9
 800c658:	2a01      	cmp	r2, #1
 800c65a:	bfb8      	it	lt
 800c65c:	2201      	movlt	r2, #1
 800c65e:	e7db      	b.n	800c618 <_dtoa_r+0x240>
 800c660:	2201      	movs	r2, #1
 800c662:	e7f2      	b.n	800c64a <_dtoa_r+0x272>
 800c664:	2401      	movs	r4, #1
 800c666:	2200      	movs	r2, #0
 800c668:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c66c:	f04f 3aff 	mov.w	sl, #4294967295
 800c670:	2100      	movs	r1, #0
 800c672:	46d1      	mov	r9, sl
 800c674:	2212      	movs	r2, #18
 800c676:	9108      	str	r1, [sp, #32]
 800c678:	e7ce      	b.n	800c618 <_dtoa_r+0x240>
 800c67a:	2201      	movs	r2, #1
 800c67c:	9207      	str	r2, [sp, #28]
 800c67e:	e7f5      	b.n	800c66c <_dtoa_r+0x294>
 800c680:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c684:	46d1      	mov	r9, sl
 800c686:	4652      	mov	r2, sl
 800c688:	e7c6      	b.n	800c618 <_dtoa_r+0x240>
 800c68a:	3101      	adds	r1, #1
 800c68c:	6079      	str	r1, [r7, #4]
 800c68e:	0040      	lsls	r0, r0, #1
 800c690:	e7c6      	b.n	800c620 <_dtoa_r+0x248>
 800c692:	bf00      	nop
 800c694:	f3af 8000 	nop.w
 800c698:	636f4361 	.word	0x636f4361
 800c69c:	3fd287a7 	.word	0x3fd287a7
 800c6a0:	8b60c8b3 	.word	0x8b60c8b3
 800c6a4:	3fc68a28 	.word	0x3fc68a28
 800c6a8:	509f79fb 	.word	0x509f79fb
 800c6ac:	3fd34413 	.word	0x3fd34413
 800c6b0:	0800f339 	.word	0x0800f339
 800c6b4:	0800f350 	.word	0x0800f350
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	0800f335 	.word	0x0800f335
 800c6c0:	0800f32c 	.word	0x0800f32c
 800c6c4:	0800f309 	.word	0x0800f309
 800c6c8:	0800f4a0 	.word	0x0800f4a0
 800c6cc:	0800f3ab 	.word	0x0800f3ab
 800c6d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c6d2:	9901      	ldr	r1, [sp, #4]
 800c6d4:	6011      	str	r1, [r2, #0]
 800c6d6:	f1b9 0f0e 	cmp.w	r9, #14
 800c6da:	d86c      	bhi.n	800c7b6 <_dtoa_r+0x3de>
 800c6dc:	2c00      	cmp	r4, #0
 800c6de:	d06a      	beq.n	800c7b6 <_dtoa_r+0x3de>
 800c6e0:	f1bb 0f00 	cmp.w	fp, #0
 800c6e4:	f340 80a0 	ble.w	800c828 <_dtoa_r+0x450>
 800c6e8:	49c1      	ldr	r1, [pc, #772]	; (800c9f0 <_dtoa_r+0x618>)
 800c6ea:	f00b 020f 	and.w	r2, fp, #15
 800c6ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c6f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c6f6:	ed92 7b00 	vldr	d7, [r2]
 800c6fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c6fe:	f000 8087 	beq.w	800c810 <_dtoa_r+0x438>
 800c702:	4abc      	ldr	r2, [pc, #752]	; (800c9f4 <_dtoa_r+0x61c>)
 800c704:	ed92 6b08 	vldr	d6, [r2, #32]
 800c708:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c70c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c710:	f001 010f 	and.w	r1, r1, #15
 800c714:	2203      	movs	r2, #3
 800c716:	48b7      	ldr	r0, [pc, #732]	; (800c9f4 <_dtoa_r+0x61c>)
 800c718:	2900      	cmp	r1, #0
 800c71a:	d17b      	bne.n	800c814 <_dtoa_r+0x43c>
 800c71c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c720:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c724:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c72a:	2900      	cmp	r1, #0
 800c72c:	f000 80a2 	beq.w	800c874 <_dtoa_r+0x49c>
 800c730:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c734:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c738:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c740:	f140 8098 	bpl.w	800c874 <_dtoa_r+0x49c>
 800c744:	f1b9 0f00 	cmp.w	r9, #0
 800c748:	f000 8094 	beq.w	800c874 <_dtoa_r+0x49c>
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	dd2f      	ble.n	800c7b2 <_dtoa_r+0x3da>
 800c752:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c75a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c75e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c762:	3201      	adds	r2, #1
 800c764:	4650      	mov	r0, sl
 800c766:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c76a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c76e:	ee07 2a90 	vmov	s15, r2
 800c772:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c776:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c77a:	ee15 4a90 	vmov	r4, s11
 800c77e:	ec52 1b15 	vmov	r1, r2, d5
 800c782:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c786:	2800      	cmp	r0, #0
 800c788:	d177      	bne.n	800c87a <_dtoa_r+0x4a2>
 800c78a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c78e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c792:	ec42 1b17 	vmov	d7, r1, r2
 800c796:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79e:	f300 8263 	bgt.w	800cc68 <_dtoa_r+0x890>
 800c7a2:	eeb1 7b47 	vneg.f64	d7, d7
 800c7a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ae:	f100 8258 	bmi.w	800cc62 <_dtoa_r+0x88a>
 800c7b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c7b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7b8:	2a00      	cmp	r2, #0
 800c7ba:	f2c0 811d 	blt.w	800c9f8 <_dtoa_r+0x620>
 800c7be:	f1bb 0f0e 	cmp.w	fp, #14
 800c7c2:	f300 8119 	bgt.w	800c9f8 <_dtoa_r+0x620>
 800c7c6:	4b8a      	ldr	r3, [pc, #552]	; (800c9f0 <_dtoa_r+0x618>)
 800c7c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7cc:	ed93 6b00 	vldr	d6, [r3]
 800c7d0:	9b08      	ldr	r3, [sp, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f280 80b7 	bge.w	800c946 <_dtoa_r+0x56e>
 800c7d8:	f1b9 0f00 	cmp.w	r9, #0
 800c7dc:	f300 80b3 	bgt.w	800c946 <_dtoa_r+0x56e>
 800c7e0:	f040 823f 	bne.w	800cc62 <_dtoa_r+0x88a>
 800c7e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c7e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f8:	464c      	mov	r4, r9
 800c7fa:	464f      	mov	r7, r9
 800c7fc:	f280 8215 	bge.w	800cc2a <_dtoa_r+0x852>
 800c800:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c804:	2331      	movs	r3, #49	; 0x31
 800c806:	f808 3b01 	strb.w	r3, [r8], #1
 800c80a:	f10b 0b01 	add.w	fp, fp, #1
 800c80e:	e211      	b.n	800cc34 <_dtoa_r+0x85c>
 800c810:	2202      	movs	r2, #2
 800c812:	e780      	b.n	800c716 <_dtoa_r+0x33e>
 800c814:	07cc      	lsls	r4, r1, #31
 800c816:	d504      	bpl.n	800c822 <_dtoa_r+0x44a>
 800c818:	ed90 6b00 	vldr	d6, [r0]
 800c81c:	3201      	adds	r2, #1
 800c81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c822:	1049      	asrs	r1, r1, #1
 800c824:	3008      	adds	r0, #8
 800c826:	e777      	b.n	800c718 <_dtoa_r+0x340>
 800c828:	d022      	beq.n	800c870 <_dtoa_r+0x498>
 800c82a:	f1cb 0100 	rsb	r1, fp, #0
 800c82e:	4a70      	ldr	r2, [pc, #448]	; (800c9f0 <_dtoa_r+0x618>)
 800c830:	f001 000f 	and.w	r0, r1, #15
 800c834:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c838:	ed92 7b00 	vldr	d7, [r2]
 800c83c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c840:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c844:	486b      	ldr	r0, [pc, #428]	; (800c9f4 <_dtoa_r+0x61c>)
 800c846:	1109      	asrs	r1, r1, #4
 800c848:	2400      	movs	r4, #0
 800c84a:	2202      	movs	r2, #2
 800c84c:	b929      	cbnz	r1, 800c85a <_dtoa_r+0x482>
 800c84e:	2c00      	cmp	r4, #0
 800c850:	f43f af6a 	beq.w	800c728 <_dtoa_r+0x350>
 800c854:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c858:	e766      	b.n	800c728 <_dtoa_r+0x350>
 800c85a:	07cf      	lsls	r7, r1, #31
 800c85c:	d505      	bpl.n	800c86a <_dtoa_r+0x492>
 800c85e:	ed90 6b00 	vldr	d6, [r0]
 800c862:	3201      	adds	r2, #1
 800c864:	2401      	movs	r4, #1
 800c866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c86a:	1049      	asrs	r1, r1, #1
 800c86c:	3008      	adds	r0, #8
 800c86e:	e7ed      	b.n	800c84c <_dtoa_r+0x474>
 800c870:	2202      	movs	r2, #2
 800c872:	e759      	b.n	800c728 <_dtoa_r+0x350>
 800c874:	465f      	mov	r7, fp
 800c876:	4648      	mov	r0, r9
 800c878:	e775      	b.n	800c766 <_dtoa_r+0x38e>
 800c87a:	ec42 1b17 	vmov	d7, r1, r2
 800c87e:	4a5c      	ldr	r2, [pc, #368]	; (800c9f0 <_dtoa_r+0x618>)
 800c880:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c884:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c888:	9a01      	ldr	r2, [sp, #4]
 800c88a:	1814      	adds	r4, r2, r0
 800c88c:	9a07      	ldr	r2, [sp, #28]
 800c88e:	b352      	cbz	r2, 800c8e6 <_dtoa_r+0x50e>
 800c890:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c894:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c898:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c89c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c8a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c8a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c8a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c8ac:	ee14 2a90 	vmov	r2, s9
 800c8b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c8b4:	3230      	adds	r2, #48	; 0x30
 800c8b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c8ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c2:	f808 2b01 	strb.w	r2, [r8], #1
 800c8c6:	d439      	bmi.n	800c93c <_dtoa_r+0x564>
 800c8c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c8cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d4:	d472      	bmi.n	800c9bc <_dtoa_r+0x5e4>
 800c8d6:	45a0      	cmp	r8, r4
 800c8d8:	f43f af6b 	beq.w	800c7b2 <_dtoa_r+0x3da>
 800c8dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c8e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c8e4:	e7e0      	b.n	800c8a8 <_dtoa_r+0x4d0>
 800c8e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c8ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c8f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c8f8:	ee14 2a90 	vmov	r2, s9
 800c8fc:	3230      	adds	r2, #48	; 0x30
 800c8fe:	f808 2b01 	strb.w	r2, [r8], #1
 800c902:	45a0      	cmp	r8, r4
 800c904:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c908:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c90c:	d118      	bne.n	800c940 <_dtoa_r+0x568>
 800c90e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c912:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c916:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c91e:	dc4d      	bgt.n	800c9bc <_dtoa_r+0x5e4>
 800c920:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c924:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c92c:	f57f af41 	bpl.w	800c7b2 <_dtoa_r+0x3da>
 800c930:	4688      	mov	r8, r1
 800c932:	3901      	subs	r1, #1
 800c934:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c938:	2b30      	cmp	r3, #48	; 0x30
 800c93a:	d0f9      	beq.n	800c930 <_dtoa_r+0x558>
 800c93c:	46bb      	mov	fp, r7
 800c93e:	e02a      	b.n	800c996 <_dtoa_r+0x5be>
 800c940:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c944:	e7d6      	b.n	800c8f4 <_dtoa_r+0x51c>
 800c946:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c94a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c94e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c952:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c956:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c95a:	ee15 3a10 	vmov	r3, s10
 800c95e:	3330      	adds	r3, #48	; 0x30
 800c960:	f808 3b01 	strb.w	r3, [r8], #1
 800c964:	9b01      	ldr	r3, [sp, #4]
 800c966:	eba8 0303 	sub.w	r3, r8, r3
 800c96a:	4599      	cmp	r9, r3
 800c96c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c970:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c974:	d133      	bne.n	800c9de <_dtoa_r+0x606>
 800c976:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c97a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c982:	dc1a      	bgt.n	800c9ba <_dtoa_r+0x5e2>
 800c984:	eeb4 7b46 	vcmp.f64	d7, d6
 800c988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98c:	d103      	bne.n	800c996 <_dtoa_r+0x5be>
 800c98e:	ee15 3a10 	vmov	r3, s10
 800c992:	07d9      	lsls	r1, r3, #31
 800c994:	d411      	bmi.n	800c9ba <_dtoa_r+0x5e2>
 800c996:	4629      	mov	r1, r5
 800c998:	4630      	mov	r0, r6
 800c99a:	f000 fcf7 	bl	800d38c <_Bfree>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9a2:	f888 3000 	strb.w	r3, [r8]
 800c9a6:	f10b 0301 	add.w	r3, fp, #1
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f43f ad61 	beq.w	800c476 <_dtoa_r+0x9e>
 800c9b4:	f8c3 8000 	str.w	r8, [r3]
 800c9b8:	e55d      	b.n	800c476 <_dtoa_r+0x9e>
 800c9ba:	465f      	mov	r7, fp
 800c9bc:	4643      	mov	r3, r8
 800c9be:	4698      	mov	r8, r3
 800c9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9c4:	2a39      	cmp	r2, #57	; 0x39
 800c9c6:	d106      	bne.n	800c9d6 <_dtoa_r+0x5fe>
 800c9c8:	9a01      	ldr	r2, [sp, #4]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d1f7      	bne.n	800c9be <_dtoa_r+0x5e6>
 800c9ce:	9901      	ldr	r1, [sp, #4]
 800c9d0:	2230      	movs	r2, #48	; 0x30
 800c9d2:	3701      	adds	r7, #1
 800c9d4:	700a      	strb	r2, [r1, #0]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	3201      	adds	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	e7ae      	b.n	800c93c <_dtoa_r+0x564>
 800c9de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c9e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ea:	d1b2      	bne.n	800c952 <_dtoa_r+0x57a>
 800c9ec:	e7d3      	b.n	800c996 <_dtoa_r+0x5be>
 800c9ee:	bf00      	nop
 800c9f0:	0800f4a0 	.word	0x0800f4a0
 800c9f4:	0800f478 	.word	0x0800f478
 800c9f8:	9907      	ldr	r1, [sp, #28]
 800c9fa:	2900      	cmp	r1, #0
 800c9fc:	f000 80d0 	beq.w	800cba0 <_dtoa_r+0x7c8>
 800ca00:	9906      	ldr	r1, [sp, #24]
 800ca02:	2901      	cmp	r1, #1
 800ca04:	f300 80b4 	bgt.w	800cb70 <_dtoa_r+0x798>
 800ca08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca0a:	2900      	cmp	r1, #0
 800ca0c:	f000 80ac 	beq.w	800cb68 <_dtoa_r+0x790>
 800ca10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ca14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ca18:	461c      	mov	r4, r3
 800ca1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca1c:	9b04      	ldr	r3, [sp, #16]
 800ca1e:	4413      	add	r3, r2
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	9b05      	ldr	r3, [sp, #20]
 800ca24:	2101      	movs	r1, #1
 800ca26:	4413      	add	r3, r2
 800ca28:	4630      	mov	r0, r6
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	f000 fd66 	bl	800d4fc <__i2b>
 800ca30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca32:	4607      	mov	r7, r0
 800ca34:	f1b8 0f00 	cmp.w	r8, #0
 800ca38:	dd0d      	ble.n	800ca56 <_dtoa_r+0x67e>
 800ca3a:	9a05      	ldr	r2, [sp, #20]
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	dd0a      	ble.n	800ca56 <_dtoa_r+0x67e>
 800ca40:	4542      	cmp	r2, r8
 800ca42:	9904      	ldr	r1, [sp, #16]
 800ca44:	bfa8      	it	ge
 800ca46:	4642      	movge	r2, r8
 800ca48:	1a89      	subs	r1, r1, r2
 800ca4a:	9104      	str	r1, [sp, #16]
 800ca4c:	9905      	ldr	r1, [sp, #20]
 800ca4e:	eba8 0802 	sub.w	r8, r8, r2
 800ca52:	1a8a      	subs	r2, r1, r2
 800ca54:	9205      	str	r2, [sp, #20]
 800ca56:	b303      	cbz	r3, 800ca9a <_dtoa_r+0x6c2>
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	2a00      	cmp	r2, #0
 800ca5c:	f000 80a5 	beq.w	800cbaa <_dtoa_r+0x7d2>
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	dd13      	ble.n	800ca8c <_dtoa_r+0x6b4>
 800ca64:	4639      	mov	r1, r7
 800ca66:	4622      	mov	r2, r4
 800ca68:	4630      	mov	r0, r6
 800ca6a:	930d      	str	r3, [sp, #52]	; 0x34
 800ca6c:	f000 fe06 	bl	800d67c <__pow5mult>
 800ca70:	462a      	mov	r2, r5
 800ca72:	4601      	mov	r1, r0
 800ca74:	4607      	mov	r7, r0
 800ca76:	4630      	mov	r0, r6
 800ca78:	f000 fd56 	bl	800d528 <__multiply>
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	900a      	str	r0, [sp, #40]	; 0x28
 800ca80:	4630      	mov	r0, r6
 800ca82:	f000 fc83 	bl	800d38c <_Bfree>
 800ca86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca8a:	4615      	mov	r5, r2
 800ca8c:	1b1a      	subs	r2, r3, r4
 800ca8e:	d004      	beq.n	800ca9a <_dtoa_r+0x6c2>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4630      	mov	r0, r6
 800ca94:	f000 fdf2 	bl	800d67c <__pow5mult>
 800ca98:	4605      	mov	r5, r0
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f000 fd2d 	bl	800d4fc <__i2b>
 800caa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	4604      	mov	r4, r0
 800caa8:	f340 8081 	ble.w	800cbae <_dtoa_r+0x7d6>
 800caac:	461a      	mov	r2, r3
 800caae:	4601      	mov	r1, r0
 800cab0:	4630      	mov	r0, r6
 800cab2:	f000 fde3 	bl	800d67c <__pow5mult>
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	4604      	mov	r4, r0
 800cabc:	dd7a      	ble.n	800cbb4 <_dtoa_r+0x7dc>
 800cabe:	2300      	movs	r3, #0
 800cac0:	930a      	str	r3, [sp, #40]	; 0x28
 800cac2:	6922      	ldr	r2, [r4, #16]
 800cac4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cac8:	6910      	ldr	r0, [r2, #16]
 800caca:	f000 fcc7 	bl	800d45c <__hi0bits>
 800cace:	f1c0 0020 	rsb	r0, r0, #32
 800cad2:	9b05      	ldr	r3, [sp, #20]
 800cad4:	4418      	add	r0, r3
 800cad6:	f010 001f 	ands.w	r0, r0, #31
 800cada:	f000 808c 	beq.w	800cbf6 <_dtoa_r+0x81e>
 800cade:	f1c0 0220 	rsb	r2, r0, #32
 800cae2:	2a04      	cmp	r2, #4
 800cae4:	f340 8085 	ble.w	800cbf2 <_dtoa_r+0x81a>
 800cae8:	f1c0 001c 	rsb	r0, r0, #28
 800caec:	9b04      	ldr	r3, [sp, #16]
 800caee:	4403      	add	r3, r0
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	9b05      	ldr	r3, [sp, #20]
 800caf4:	4403      	add	r3, r0
 800caf6:	4480      	add	r8, r0
 800caf8:	9305      	str	r3, [sp, #20]
 800cafa:	9b04      	ldr	r3, [sp, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	dd05      	ble.n	800cb0c <_dtoa_r+0x734>
 800cb00:	4629      	mov	r1, r5
 800cb02:	461a      	mov	r2, r3
 800cb04:	4630      	mov	r0, r6
 800cb06:	f000 fe13 	bl	800d730 <__lshift>
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	9b05      	ldr	r3, [sp, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dd05      	ble.n	800cb1e <_dtoa_r+0x746>
 800cb12:	4621      	mov	r1, r4
 800cb14:	461a      	mov	r2, r3
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 fe0a 	bl	800d730 <__lshift>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d06a      	beq.n	800cbfa <_dtoa_r+0x822>
 800cb24:	4621      	mov	r1, r4
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 fe72 	bl	800d810 <__mcmp>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	da64      	bge.n	800cbfa <_dtoa_r+0x822>
 800cb30:	2300      	movs	r3, #0
 800cb32:	4629      	mov	r1, r5
 800cb34:	220a      	movs	r2, #10
 800cb36:	4630      	mov	r0, r6
 800cb38:	f000 fc4a 	bl	800d3d0 <__multadd>
 800cb3c:	9b07      	ldr	r3, [sp, #28]
 800cb3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb42:	4605      	mov	r5, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 8191 	beq.w	800ce6c <_dtoa_r+0xa94>
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	220a      	movs	r2, #10
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 fc3d 	bl	800d3d0 <__multadd>
 800cb56:	f1ba 0f00 	cmp.w	sl, #0
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	f300 808d 	bgt.w	800cc7a <_dtoa_r+0x8a2>
 800cb60:	9b06      	ldr	r3, [sp, #24]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	dc50      	bgt.n	800cc08 <_dtoa_r+0x830>
 800cb66:	e088      	b.n	800cc7a <_dtoa_r+0x8a2>
 800cb68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cb6e:	e751      	b.n	800ca14 <_dtoa_r+0x63c>
 800cb70:	f109 34ff 	add.w	r4, r9, #4294967295
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	bfbf      	itttt	lt
 800cb78:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800cb7a:	1ae3      	sublt	r3, r4, r3
 800cb7c:	18d2      	addlt	r2, r2, r3
 800cb7e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800cb80:	bfb6      	itet	lt
 800cb82:	4623      	movlt	r3, r4
 800cb84:	1b1c      	subge	r4, r3, r4
 800cb86:	2400      	movlt	r4, #0
 800cb88:	f1b9 0f00 	cmp.w	r9, #0
 800cb8c:	bfb5      	itete	lt
 800cb8e:	9a04      	ldrlt	r2, [sp, #16]
 800cb90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800cb94:	eba2 0809 	sublt.w	r8, r2, r9
 800cb98:	464a      	movge	r2, r9
 800cb9a:	bfb8      	it	lt
 800cb9c:	2200      	movlt	r2, #0
 800cb9e:	e73c      	b.n	800ca1a <_dtoa_r+0x642>
 800cba0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cba4:	9f07      	ldr	r7, [sp, #28]
 800cba6:	461c      	mov	r4, r3
 800cba8:	e744      	b.n	800ca34 <_dtoa_r+0x65c>
 800cbaa:	461a      	mov	r2, r3
 800cbac:	e770      	b.n	800ca90 <_dtoa_r+0x6b8>
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	dc18      	bgt.n	800cbe6 <_dtoa_r+0x80e>
 800cbb4:	9b02      	ldr	r3, [sp, #8]
 800cbb6:	b9b3      	cbnz	r3, 800cbe6 <_dtoa_r+0x80e>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cbbe:	b9a2      	cbnz	r2, 800cbea <_dtoa_r+0x812>
 800cbc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cbc4:	0d12      	lsrs	r2, r2, #20
 800cbc6:	0512      	lsls	r2, r2, #20
 800cbc8:	b18a      	cbz	r2, 800cbee <_dtoa_r+0x816>
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	9b05      	ldr	r3, [sp, #20]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	930a      	str	r3, [sp, #40]	; 0x28
 800cbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f47f af70 	bne.w	800cac2 <_dtoa_r+0x6ea>
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	e775      	b.n	800cad2 <_dtoa_r+0x6fa>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e7f6      	b.n	800cbd8 <_dtoa_r+0x800>
 800cbea:	9b02      	ldr	r3, [sp, #8]
 800cbec:	e7f4      	b.n	800cbd8 <_dtoa_r+0x800>
 800cbee:	920a      	str	r2, [sp, #40]	; 0x28
 800cbf0:	e7f3      	b.n	800cbda <_dtoa_r+0x802>
 800cbf2:	d082      	beq.n	800cafa <_dtoa_r+0x722>
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	301c      	adds	r0, #28
 800cbf8:	e778      	b.n	800caec <_dtoa_r+0x714>
 800cbfa:	f1b9 0f00 	cmp.w	r9, #0
 800cbfe:	dc37      	bgt.n	800cc70 <_dtoa_r+0x898>
 800cc00:	9b06      	ldr	r3, [sp, #24]
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	dd34      	ble.n	800cc70 <_dtoa_r+0x898>
 800cc06:	46ca      	mov	sl, r9
 800cc08:	f1ba 0f00 	cmp.w	sl, #0
 800cc0c:	d10d      	bne.n	800cc2a <_dtoa_r+0x852>
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4653      	mov	r3, sl
 800cc12:	2205      	movs	r2, #5
 800cc14:	4630      	mov	r0, r6
 800cc16:	f000 fbdb 	bl	800d3d0 <__multadd>
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f000 fdf6 	bl	800d810 <__mcmp>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f73f adeb 	bgt.w	800c800 <_dtoa_r+0x428>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc30:	ea6f 0b03 	mvn.w	fp, r3
 800cc34:	f04f 0900 	mov.w	r9, #0
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f000 fba6 	bl	800d38c <_Bfree>
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	f43f aea8 	beq.w	800c996 <_dtoa_r+0x5be>
 800cc46:	f1b9 0f00 	cmp.w	r9, #0
 800cc4a:	d005      	beq.n	800cc58 <_dtoa_r+0x880>
 800cc4c:	45b9      	cmp	r9, r7
 800cc4e:	d003      	beq.n	800cc58 <_dtoa_r+0x880>
 800cc50:	4649      	mov	r1, r9
 800cc52:	4630      	mov	r0, r6
 800cc54:	f000 fb9a 	bl	800d38c <_Bfree>
 800cc58:	4639      	mov	r1, r7
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f000 fb96 	bl	800d38c <_Bfree>
 800cc60:	e699      	b.n	800c996 <_dtoa_r+0x5be>
 800cc62:	2400      	movs	r4, #0
 800cc64:	4627      	mov	r7, r4
 800cc66:	e7e0      	b.n	800cc2a <_dtoa_r+0x852>
 800cc68:	46bb      	mov	fp, r7
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	e5c7      	b.n	800c800 <_dtoa_r+0x428>
 800cc70:	9b07      	ldr	r3, [sp, #28]
 800cc72:	46ca      	mov	sl, r9
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 8100 	beq.w	800ce7a <_dtoa_r+0xaa2>
 800cc7a:	f1b8 0f00 	cmp.w	r8, #0
 800cc7e:	dd05      	ble.n	800cc8c <_dtoa_r+0x8b4>
 800cc80:	4639      	mov	r1, r7
 800cc82:	4642      	mov	r2, r8
 800cc84:	4630      	mov	r0, r6
 800cc86:	f000 fd53 	bl	800d730 <__lshift>
 800cc8a:	4607      	mov	r7, r0
 800cc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d05d      	beq.n	800cd4e <_dtoa_r+0x976>
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 fb39 	bl	800d30c <_Balloc>
 800cc9a:	4680      	mov	r8, r0
 800cc9c:	b928      	cbnz	r0, 800ccaa <_dtoa_r+0x8d2>
 800cc9e:	4b82      	ldr	r3, [pc, #520]	; (800cea8 <_dtoa_r+0xad0>)
 800cca0:	4602      	mov	r2, r0
 800cca2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cca6:	f7ff bbaf 	b.w	800c408 <_dtoa_r+0x30>
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	3202      	adds	r2, #2
 800ccae:	0092      	lsls	r2, r2, #2
 800ccb0:	f107 010c 	add.w	r1, r7, #12
 800ccb4:	300c      	adds	r0, #12
 800ccb6:	f7fe fd09 	bl	800b6cc <memcpy>
 800ccba:	2201      	movs	r2, #1
 800ccbc:	4641      	mov	r1, r8
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f000 fd36 	bl	800d730 <__lshift>
 800ccc4:	9b01      	ldr	r3, [sp, #4]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	4453      	add	r3, sl
 800ccce:	9308      	str	r3, [sp, #32]
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	46b9      	mov	r9, r7
 800ccd8:	9307      	str	r3, [sp, #28]
 800ccda:	4607      	mov	r7, r0
 800ccdc:	9b04      	ldr	r3, [sp, #16]
 800ccde:	4621      	mov	r1, r4
 800cce0:	3b01      	subs	r3, #1
 800cce2:	4628      	mov	r0, r5
 800cce4:	9302      	str	r3, [sp, #8]
 800cce6:	f7ff faeb 	bl	800c2c0 <quorem>
 800ccea:	4603      	mov	r3, r0
 800ccec:	3330      	adds	r3, #48	; 0x30
 800ccee:	9005      	str	r0, [sp, #20]
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf6:	f000 fd8b 	bl	800d810 <__mcmp>
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4630      	mov	r0, r6
 800cd02:	f000 fda1 	bl	800d848 <__mdiff>
 800cd06:	68c2      	ldr	r2, [r0, #12]
 800cd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	bb0a      	cbnz	r2, 800cd52 <_dtoa_r+0x97a>
 800cd0e:	4601      	mov	r1, r0
 800cd10:	4628      	mov	r0, r5
 800cd12:	f000 fd7d 	bl	800d810 <__mcmp>
 800cd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd18:	4602      	mov	r2, r0
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800cd22:	f000 fb33 	bl	800d38c <_Bfree>
 800cd26:	9b06      	ldr	r3, [sp, #24]
 800cd28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cd2e:	ea43 0102 	orr.w	r1, r3, r2
 800cd32:	9b07      	ldr	r3, [sp, #28]
 800cd34:	430b      	orrs	r3, r1
 800cd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd38:	d10d      	bne.n	800cd56 <_dtoa_r+0x97e>
 800cd3a:	2b39      	cmp	r3, #57	; 0x39
 800cd3c:	d029      	beq.n	800cd92 <_dtoa_r+0x9ba>
 800cd3e:	f1ba 0f00 	cmp.w	sl, #0
 800cd42:	dd01      	ble.n	800cd48 <_dtoa_r+0x970>
 800cd44:	9b05      	ldr	r3, [sp, #20]
 800cd46:	3331      	adds	r3, #49	; 0x31
 800cd48:	9a02      	ldr	r2, [sp, #8]
 800cd4a:	7013      	strb	r3, [r2, #0]
 800cd4c:	e774      	b.n	800cc38 <_dtoa_r+0x860>
 800cd4e:	4638      	mov	r0, r7
 800cd50:	e7b8      	b.n	800ccc4 <_dtoa_r+0x8ec>
 800cd52:	2201      	movs	r2, #1
 800cd54:	e7e1      	b.n	800cd1a <_dtoa_r+0x942>
 800cd56:	f1ba 0f00 	cmp.w	sl, #0
 800cd5a:	db06      	blt.n	800cd6a <_dtoa_r+0x992>
 800cd5c:	9906      	ldr	r1, [sp, #24]
 800cd5e:	ea41 0a0a 	orr.w	sl, r1, sl
 800cd62:	9907      	ldr	r1, [sp, #28]
 800cd64:	ea5a 0101 	orrs.w	r1, sl, r1
 800cd68:	d120      	bne.n	800cdac <_dtoa_r+0x9d4>
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	ddec      	ble.n	800cd48 <_dtoa_r+0x970>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	2201      	movs	r2, #1
 800cd72:	4630      	mov	r0, r6
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	f000 fcdb 	bl	800d730 <__lshift>
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	f000 fd47 	bl	800d810 <__mcmp>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	dc02      	bgt.n	800cd8e <_dtoa_r+0x9b6>
 800cd88:	d1de      	bne.n	800cd48 <_dtoa_r+0x970>
 800cd8a:	07da      	lsls	r2, r3, #31
 800cd8c:	d5dc      	bpl.n	800cd48 <_dtoa_r+0x970>
 800cd8e:	2b39      	cmp	r3, #57	; 0x39
 800cd90:	d1d8      	bne.n	800cd44 <_dtoa_r+0x96c>
 800cd92:	9a02      	ldr	r2, [sp, #8]
 800cd94:	2339      	movs	r3, #57	; 0x39
 800cd96:	7013      	strb	r3, [r2, #0]
 800cd98:	4643      	mov	r3, r8
 800cd9a:	4698      	mov	r8, r3
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cda2:	2a39      	cmp	r2, #57	; 0x39
 800cda4:	d051      	beq.n	800ce4a <_dtoa_r+0xa72>
 800cda6:	3201      	adds	r2, #1
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e745      	b.n	800cc38 <_dtoa_r+0x860>
 800cdac:	2a00      	cmp	r2, #0
 800cdae:	dd03      	ble.n	800cdb8 <_dtoa_r+0x9e0>
 800cdb0:	2b39      	cmp	r3, #57	; 0x39
 800cdb2:	d0ee      	beq.n	800cd92 <_dtoa_r+0x9ba>
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	e7c7      	b.n	800cd48 <_dtoa_r+0x970>
 800cdb8:	9a04      	ldr	r2, [sp, #16]
 800cdba:	9908      	ldr	r1, [sp, #32]
 800cdbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cdc0:	428a      	cmp	r2, r1
 800cdc2:	d02b      	beq.n	800ce1c <_dtoa_r+0xa44>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	220a      	movs	r2, #10
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f000 fb00 	bl	800d3d0 <__multadd>
 800cdd0:	45b9      	cmp	r9, r7
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	f04f 0300 	mov.w	r3, #0
 800cdd8:	f04f 020a 	mov.w	r2, #10
 800cddc:	4649      	mov	r1, r9
 800cdde:	4630      	mov	r0, r6
 800cde0:	d107      	bne.n	800cdf2 <_dtoa_r+0xa1a>
 800cde2:	f000 faf5 	bl	800d3d0 <__multadd>
 800cde6:	4681      	mov	r9, r0
 800cde8:	4607      	mov	r7, r0
 800cdea:	9b04      	ldr	r3, [sp, #16]
 800cdec:	3301      	adds	r3, #1
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	e774      	b.n	800ccdc <_dtoa_r+0x904>
 800cdf2:	f000 faed 	bl	800d3d0 <__multadd>
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	4681      	mov	r9, r0
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	220a      	movs	r2, #10
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f000 fae6 	bl	800d3d0 <__multadd>
 800ce04:	4607      	mov	r7, r0
 800ce06:	e7f0      	b.n	800cdea <_dtoa_r+0xa12>
 800ce08:	f1ba 0f00 	cmp.w	sl, #0
 800ce0c:	9a01      	ldr	r2, [sp, #4]
 800ce0e:	bfcc      	ite	gt
 800ce10:	46d0      	movgt	r8, sl
 800ce12:	f04f 0801 	movle.w	r8, #1
 800ce16:	4490      	add	r8, r2
 800ce18:	f04f 0900 	mov.w	r9, #0
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	2201      	movs	r2, #1
 800ce20:	4630      	mov	r0, r6
 800ce22:	9302      	str	r3, [sp, #8]
 800ce24:	f000 fc84 	bl	800d730 <__lshift>
 800ce28:	4621      	mov	r1, r4
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	f000 fcf0 	bl	800d810 <__mcmp>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	dcb1      	bgt.n	800cd98 <_dtoa_r+0x9c0>
 800ce34:	d102      	bne.n	800ce3c <_dtoa_r+0xa64>
 800ce36:	9b02      	ldr	r3, [sp, #8]
 800ce38:	07db      	lsls	r3, r3, #31
 800ce3a:	d4ad      	bmi.n	800cd98 <_dtoa_r+0x9c0>
 800ce3c:	4643      	mov	r3, r8
 800ce3e:	4698      	mov	r8, r3
 800ce40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce44:	2a30      	cmp	r2, #48	; 0x30
 800ce46:	d0fa      	beq.n	800ce3e <_dtoa_r+0xa66>
 800ce48:	e6f6      	b.n	800cc38 <_dtoa_r+0x860>
 800ce4a:	9a01      	ldr	r2, [sp, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d1a4      	bne.n	800cd9a <_dtoa_r+0x9c2>
 800ce50:	f10b 0b01 	add.w	fp, fp, #1
 800ce54:	2331      	movs	r3, #49	; 0x31
 800ce56:	e778      	b.n	800cd4a <_dtoa_r+0x972>
 800ce58:	4b14      	ldr	r3, [pc, #80]	; (800ceac <_dtoa_r+0xad4>)
 800ce5a:	f7ff bb27 	b.w	800c4ac <_dtoa_r+0xd4>
 800ce5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f47f ab03 	bne.w	800c46c <_dtoa_r+0x94>
 800ce66:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <_dtoa_r+0xad8>)
 800ce68:	f7ff bb20 	b.w	800c4ac <_dtoa_r+0xd4>
 800ce6c:	f1ba 0f00 	cmp.w	sl, #0
 800ce70:	dc03      	bgt.n	800ce7a <_dtoa_r+0xaa2>
 800ce72:	9b06      	ldr	r3, [sp, #24]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	f73f aec7 	bgt.w	800cc08 <_dtoa_r+0x830>
 800ce7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f7ff fa1d 	bl	800c2c0 <quorem>
 800ce86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ce8a:	f808 3b01 	strb.w	r3, [r8], #1
 800ce8e:	9a01      	ldr	r2, [sp, #4]
 800ce90:	eba8 0202 	sub.w	r2, r8, r2
 800ce94:	4592      	cmp	sl, r2
 800ce96:	ddb7      	ble.n	800ce08 <_dtoa_r+0xa30>
 800ce98:	4629      	mov	r1, r5
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	220a      	movs	r2, #10
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f000 fa96 	bl	800d3d0 <__multadd>
 800cea4:	4605      	mov	r5, r0
 800cea6:	e7ea      	b.n	800ce7e <_dtoa_r+0xaa6>
 800cea8:	0800f3ab 	.word	0x0800f3ab
 800ceac:	0800f308 	.word	0x0800f308
 800ceb0:	0800f32c 	.word	0x0800f32c

0800ceb4 <__sflush_r>:
 800ceb4:	898a      	ldrh	r2, [r1, #12]
 800ceb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceba:	4605      	mov	r5, r0
 800cebc:	0710      	lsls	r0, r2, #28
 800cebe:	460c      	mov	r4, r1
 800cec0:	d458      	bmi.n	800cf74 <__sflush_r+0xc0>
 800cec2:	684b      	ldr	r3, [r1, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	dc05      	bgt.n	800ced4 <__sflush_r+0x20>
 800cec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	dc02      	bgt.n	800ced4 <__sflush_r+0x20>
 800cece:	2000      	movs	r0, #0
 800ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ced6:	2e00      	cmp	r6, #0
 800ced8:	d0f9      	beq.n	800cece <__sflush_r+0x1a>
 800ceda:	2300      	movs	r3, #0
 800cedc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cee0:	682f      	ldr	r7, [r5, #0]
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	d032      	beq.n	800cf4c <__sflush_r+0x98>
 800cee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	075a      	lsls	r2, r3, #29
 800ceec:	d505      	bpl.n	800cefa <__sflush_r+0x46>
 800ceee:	6863      	ldr	r3, [r4, #4]
 800cef0:	1ac0      	subs	r0, r0, r3
 800cef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cef4:	b10b      	cbz	r3, 800cefa <__sflush_r+0x46>
 800cef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cef8:	1ac0      	subs	r0, r0, r3
 800cefa:	2300      	movs	r3, #0
 800cefc:	4602      	mov	r2, r0
 800cefe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf00:	6a21      	ldr	r1, [r4, #32]
 800cf02:	4628      	mov	r0, r5
 800cf04:	47b0      	blx	r6
 800cf06:	1c43      	adds	r3, r0, #1
 800cf08:	89a3      	ldrh	r3, [r4, #12]
 800cf0a:	d106      	bne.n	800cf1a <__sflush_r+0x66>
 800cf0c:	6829      	ldr	r1, [r5, #0]
 800cf0e:	291d      	cmp	r1, #29
 800cf10:	d82c      	bhi.n	800cf6c <__sflush_r+0xb8>
 800cf12:	4a2a      	ldr	r2, [pc, #168]	; (800cfbc <__sflush_r+0x108>)
 800cf14:	40ca      	lsrs	r2, r1
 800cf16:	07d6      	lsls	r6, r2, #31
 800cf18:	d528      	bpl.n	800cf6c <__sflush_r+0xb8>
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	6062      	str	r2, [r4, #4]
 800cf1e:	04d9      	lsls	r1, r3, #19
 800cf20:	6922      	ldr	r2, [r4, #16]
 800cf22:	6022      	str	r2, [r4, #0]
 800cf24:	d504      	bpl.n	800cf30 <__sflush_r+0x7c>
 800cf26:	1c42      	adds	r2, r0, #1
 800cf28:	d101      	bne.n	800cf2e <__sflush_r+0x7a>
 800cf2a:	682b      	ldr	r3, [r5, #0]
 800cf2c:	b903      	cbnz	r3, 800cf30 <__sflush_r+0x7c>
 800cf2e:	6560      	str	r0, [r4, #84]	; 0x54
 800cf30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf32:	602f      	str	r7, [r5, #0]
 800cf34:	2900      	cmp	r1, #0
 800cf36:	d0ca      	beq.n	800cece <__sflush_r+0x1a>
 800cf38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d002      	beq.n	800cf46 <__sflush_r+0x92>
 800cf40:	4628      	mov	r0, r5
 800cf42:	f000 fd7d 	bl	800da40 <_free_r>
 800cf46:	2000      	movs	r0, #0
 800cf48:	6360      	str	r0, [r4, #52]	; 0x34
 800cf4a:	e7c1      	b.n	800ced0 <__sflush_r+0x1c>
 800cf4c:	6a21      	ldr	r1, [r4, #32]
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4628      	mov	r0, r5
 800cf52:	47b0      	blx	r6
 800cf54:	1c41      	adds	r1, r0, #1
 800cf56:	d1c7      	bne.n	800cee8 <__sflush_r+0x34>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0c4      	beq.n	800cee8 <__sflush_r+0x34>
 800cf5e:	2b1d      	cmp	r3, #29
 800cf60:	d001      	beq.n	800cf66 <__sflush_r+0xb2>
 800cf62:	2b16      	cmp	r3, #22
 800cf64:	d101      	bne.n	800cf6a <__sflush_r+0xb6>
 800cf66:	602f      	str	r7, [r5, #0]
 800cf68:	e7b1      	b.n	800cece <__sflush_r+0x1a>
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf70:	81a3      	strh	r3, [r4, #12]
 800cf72:	e7ad      	b.n	800ced0 <__sflush_r+0x1c>
 800cf74:	690f      	ldr	r7, [r1, #16]
 800cf76:	2f00      	cmp	r7, #0
 800cf78:	d0a9      	beq.n	800cece <__sflush_r+0x1a>
 800cf7a:	0793      	lsls	r3, r2, #30
 800cf7c:	680e      	ldr	r6, [r1, #0]
 800cf7e:	bf08      	it	eq
 800cf80:	694b      	ldreq	r3, [r1, #20]
 800cf82:	600f      	str	r7, [r1, #0]
 800cf84:	bf18      	it	ne
 800cf86:	2300      	movne	r3, #0
 800cf88:	eba6 0807 	sub.w	r8, r6, r7
 800cf8c:	608b      	str	r3, [r1, #8]
 800cf8e:	f1b8 0f00 	cmp.w	r8, #0
 800cf92:	dd9c      	ble.n	800cece <__sflush_r+0x1a>
 800cf94:	6a21      	ldr	r1, [r4, #32]
 800cf96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf98:	4643      	mov	r3, r8
 800cf9a:	463a      	mov	r2, r7
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	47b0      	blx	r6
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	dc06      	bgt.n	800cfb2 <__sflush_r+0xfe>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb0:	e78e      	b.n	800ced0 <__sflush_r+0x1c>
 800cfb2:	4407      	add	r7, r0
 800cfb4:	eba8 0800 	sub.w	r8, r8, r0
 800cfb8:	e7e9      	b.n	800cf8e <__sflush_r+0xda>
 800cfba:	bf00      	nop
 800cfbc:	20400001 	.word	0x20400001

0800cfc0 <_fflush_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	690b      	ldr	r3, [r1, #16]
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	b913      	cbnz	r3, 800cfd0 <_fflush_r+0x10>
 800cfca:	2500      	movs	r5, #0
 800cfcc:	4628      	mov	r0, r5
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	b118      	cbz	r0, 800cfda <_fflush_r+0x1a>
 800cfd2:	6983      	ldr	r3, [r0, #24]
 800cfd4:	b90b      	cbnz	r3, 800cfda <_fflush_r+0x1a>
 800cfd6:	f000 f887 	bl	800d0e8 <__sinit>
 800cfda:	4b14      	ldr	r3, [pc, #80]	; (800d02c <_fflush_r+0x6c>)
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	d11b      	bne.n	800d018 <_fflush_r+0x58>
 800cfe0:	686c      	ldr	r4, [r5, #4]
 800cfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0ef      	beq.n	800cfca <_fflush_r+0xa>
 800cfea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfec:	07d0      	lsls	r0, r2, #31
 800cfee:	d404      	bmi.n	800cffa <_fflush_r+0x3a>
 800cff0:	0599      	lsls	r1, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_fflush_r+0x3a>
 800cff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cff6:	f000 f91a 	bl	800d22e <__retarget_lock_acquire_recursive>
 800cffa:	4628      	mov	r0, r5
 800cffc:	4621      	mov	r1, r4
 800cffe:	f7ff ff59 	bl	800ceb4 <__sflush_r>
 800d002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d004:	07da      	lsls	r2, r3, #31
 800d006:	4605      	mov	r5, r0
 800d008:	d4e0      	bmi.n	800cfcc <_fflush_r+0xc>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	059b      	lsls	r3, r3, #22
 800d00e:	d4dd      	bmi.n	800cfcc <_fflush_r+0xc>
 800d010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d012:	f000 f90d 	bl	800d230 <__retarget_lock_release_recursive>
 800d016:	e7d9      	b.n	800cfcc <_fflush_r+0xc>
 800d018:	4b05      	ldr	r3, [pc, #20]	; (800d030 <_fflush_r+0x70>)
 800d01a:	429c      	cmp	r4, r3
 800d01c:	d101      	bne.n	800d022 <_fflush_r+0x62>
 800d01e:	68ac      	ldr	r4, [r5, #8]
 800d020:	e7df      	b.n	800cfe2 <_fflush_r+0x22>
 800d022:	4b04      	ldr	r3, [pc, #16]	; (800d034 <_fflush_r+0x74>)
 800d024:	429c      	cmp	r4, r3
 800d026:	bf08      	it	eq
 800d028:	68ec      	ldreq	r4, [r5, #12]
 800d02a:	e7da      	b.n	800cfe2 <_fflush_r+0x22>
 800d02c:	0800f3dc 	.word	0x0800f3dc
 800d030:	0800f3fc 	.word	0x0800f3fc
 800d034:	0800f3bc 	.word	0x0800f3bc

0800d038 <std>:
 800d038:	2300      	movs	r3, #0
 800d03a:	b510      	push	{r4, lr}
 800d03c:	4604      	mov	r4, r0
 800d03e:	e9c0 3300 	strd	r3, r3, [r0]
 800d042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d046:	6083      	str	r3, [r0, #8]
 800d048:	8181      	strh	r1, [r0, #12]
 800d04a:	6643      	str	r3, [r0, #100]	; 0x64
 800d04c:	81c2      	strh	r2, [r0, #14]
 800d04e:	6183      	str	r3, [r0, #24]
 800d050:	4619      	mov	r1, r3
 800d052:	2208      	movs	r2, #8
 800d054:	305c      	adds	r0, #92	; 0x5c
 800d056:	f7fe fb47 	bl	800b6e8 <memset>
 800d05a:	4b05      	ldr	r3, [pc, #20]	; (800d070 <std+0x38>)
 800d05c:	6263      	str	r3, [r4, #36]	; 0x24
 800d05e:	4b05      	ldr	r3, [pc, #20]	; (800d074 <std+0x3c>)
 800d060:	62a3      	str	r3, [r4, #40]	; 0x28
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <std+0x40>)
 800d064:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d066:	4b05      	ldr	r3, [pc, #20]	; (800d07c <std+0x44>)
 800d068:	6224      	str	r4, [r4, #32]
 800d06a:	6323      	str	r3, [r4, #48]	; 0x30
 800d06c:	bd10      	pop	{r4, pc}
 800d06e:	bf00      	nop
 800d070:	0800e18d 	.word	0x0800e18d
 800d074:	0800e1af 	.word	0x0800e1af
 800d078:	0800e1e7 	.word	0x0800e1e7
 800d07c:	0800e20b 	.word	0x0800e20b

0800d080 <_cleanup_r>:
 800d080:	4901      	ldr	r1, [pc, #4]	; (800d088 <_cleanup_r+0x8>)
 800d082:	f000 b8af 	b.w	800d1e4 <_fwalk_reent>
 800d086:	bf00      	nop
 800d088:	0800cfc1 	.word	0x0800cfc1

0800d08c <__sfmoreglue>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	2268      	movs	r2, #104	; 0x68
 800d090:	1e4d      	subs	r5, r1, #1
 800d092:	4355      	muls	r5, r2
 800d094:	460e      	mov	r6, r1
 800d096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d09a:	f000 fd3d 	bl	800db18 <_malloc_r>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	b140      	cbz	r0, 800d0b4 <__sfmoreglue+0x28>
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	e9c0 1600 	strd	r1, r6, [r0]
 800d0a8:	300c      	adds	r0, #12
 800d0aa:	60a0      	str	r0, [r4, #8]
 800d0ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0b0:	f7fe fb1a 	bl	800b6e8 <memset>
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}

0800d0b8 <__sfp_lock_acquire>:
 800d0b8:	4801      	ldr	r0, [pc, #4]	; (800d0c0 <__sfp_lock_acquire+0x8>)
 800d0ba:	f000 b8b8 	b.w	800d22e <__retarget_lock_acquire_recursive>
 800d0be:	bf00      	nop
 800d0c0:	24000801 	.word	0x24000801

0800d0c4 <__sfp_lock_release>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__sfp_lock_release+0x8>)
 800d0c6:	f000 b8b3 	b.w	800d230 <__retarget_lock_release_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	24000801 	.word	0x24000801

0800d0d0 <__sinit_lock_acquire>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	; (800d0d8 <__sinit_lock_acquire+0x8>)
 800d0d2:	f000 b8ac 	b.w	800d22e <__retarget_lock_acquire_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	24000802 	.word	0x24000802

0800d0dc <__sinit_lock_release>:
 800d0dc:	4801      	ldr	r0, [pc, #4]	; (800d0e4 <__sinit_lock_release+0x8>)
 800d0de:	f000 b8a7 	b.w	800d230 <__retarget_lock_release_recursive>
 800d0e2:	bf00      	nop
 800d0e4:	24000802 	.word	0x24000802

0800d0e8 <__sinit>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	f7ff fff0 	bl	800d0d0 <__sinit_lock_acquire>
 800d0f0:	69a3      	ldr	r3, [r4, #24]
 800d0f2:	b11b      	cbz	r3, 800d0fc <__sinit+0x14>
 800d0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f8:	f7ff bff0 	b.w	800d0dc <__sinit_lock_release>
 800d0fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d100:	6523      	str	r3, [r4, #80]	; 0x50
 800d102:	4b13      	ldr	r3, [pc, #76]	; (800d150 <__sinit+0x68>)
 800d104:	4a13      	ldr	r2, [pc, #76]	; (800d154 <__sinit+0x6c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	62a2      	str	r2, [r4, #40]	; 0x28
 800d10a:	42a3      	cmp	r3, r4
 800d10c:	bf04      	itt	eq
 800d10e:	2301      	moveq	r3, #1
 800d110:	61a3      	streq	r3, [r4, #24]
 800d112:	4620      	mov	r0, r4
 800d114:	f000 f820 	bl	800d158 <__sfp>
 800d118:	6060      	str	r0, [r4, #4]
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 f81c 	bl	800d158 <__sfp>
 800d120:	60a0      	str	r0, [r4, #8]
 800d122:	4620      	mov	r0, r4
 800d124:	f000 f818 	bl	800d158 <__sfp>
 800d128:	2200      	movs	r2, #0
 800d12a:	60e0      	str	r0, [r4, #12]
 800d12c:	2104      	movs	r1, #4
 800d12e:	6860      	ldr	r0, [r4, #4]
 800d130:	f7ff ff82 	bl	800d038 <std>
 800d134:	68a0      	ldr	r0, [r4, #8]
 800d136:	2201      	movs	r2, #1
 800d138:	2109      	movs	r1, #9
 800d13a:	f7ff ff7d 	bl	800d038 <std>
 800d13e:	68e0      	ldr	r0, [r4, #12]
 800d140:	2202      	movs	r2, #2
 800d142:	2112      	movs	r1, #18
 800d144:	f7ff ff78 	bl	800d038 <std>
 800d148:	2301      	movs	r3, #1
 800d14a:	61a3      	str	r3, [r4, #24]
 800d14c:	e7d2      	b.n	800d0f4 <__sinit+0xc>
 800d14e:	bf00      	nop
 800d150:	0800f2f4 	.word	0x0800f2f4
 800d154:	0800d081 	.word	0x0800d081

0800d158 <__sfp>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	4607      	mov	r7, r0
 800d15c:	f7ff ffac 	bl	800d0b8 <__sfp_lock_acquire>
 800d160:	4b1e      	ldr	r3, [pc, #120]	; (800d1dc <__sfp+0x84>)
 800d162:	681e      	ldr	r6, [r3, #0]
 800d164:	69b3      	ldr	r3, [r6, #24]
 800d166:	b913      	cbnz	r3, 800d16e <__sfp+0x16>
 800d168:	4630      	mov	r0, r6
 800d16a:	f7ff ffbd 	bl	800d0e8 <__sinit>
 800d16e:	3648      	adds	r6, #72	; 0x48
 800d170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d174:	3b01      	subs	r3, #1
 800d176:	d503      	bpl.n	800d180 <__sfp+0x28>
 800d178:	6833      	ldr	r3, [r6, #0]
 800d17a:	b30b      	cbz	r3, 800d1c0 <__sfp+0x68>
 800d17c:	6836      	ldr	r6, [r6, #0]
 800d17e:	e7f7      	b.n	800d170 <__sfp+0x18>
 800d180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d184:	b9d5      	cbnz	r5, 800d1bc <__sfp+0x64>
 800d186:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <__sfp+0x88>)
 800d188:	60e3      	str	r3, [r4, #12]
 800d18a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d18e:	6665      	str	r5, [r4, #100]	; 0x64
 800d190:	f000 f84c 	bl	800d22c <__retarget_lock_init_recursive>
 800d194:	f7ff ff96 	bl	800d0c4 <__sfp_lock_release>
 800d198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d19c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1a0:	6025      	str	r5, [r4, #0]
 800d1a2:	61a5      	str	r5, [r4, #24]
 800d1a4:	2208      	movs	r2, #8
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1ac:	f7fe fa9c 	bl	800b6e8 <memset>
 800d1b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1bc:	3468      	adds	r4, #104	; 0x68
 800d1be:	e7d9      	b.n	800d174 <__sfp+0x1c>
 800d1c0:	2104      	movs	r1, #4
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	f7ff ff62 	bl	800d08c <__sfmoreglue>
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	6030      	str	r0, [r6, #0]
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1d5      	bne.n	800d17c <__sfp+0x24>
 800d1d0:	f7ff ff78 	bl	800d0c4 <__sfp_lock_release>
 800d1d4:	230c      	movs	r3, #12
 800d1d6:	603b      	str	r3, [r7, #0]
 800d1d8:	e7ee      	b.n	800d1b8 <__sfp+0x60>
 800d1da:	bf00      	nop
 800d1dc:	0800f2f4 	.word	0x0800f2f4
 800d1e0:	ffff0001 	.word	0xffff0001

0800d1e4 <_fwalk_reent>:
 800d1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	4688      	mov	r8, r1
 800d1ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1f0:	2700      	movs	r7, #0
 800d1f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1f6:	f1b9 0901 	subs.w	r9, r9, #1
 800d1fa:	d505      	bpl.n	800d208 <_fwalk_reent+0x24>
 800d1fc:	6824      	ldr	r4, [r4, #0]
 800d1fe:	2c00      	cmp	r4, #0
 800d200:	d1f7      	bne.n	800d1f2 <_fwalk_reent+0xe>
 800d202:	4638      	mov	r0, r7
 800d204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d208:	89ab      	ldrh	r3, [r5, #12]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d907      	bls.n	800d21e <_fwalk_reent+0x3a>
 800d20e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d212:	3301      	adds	r3, #1
 800d214:	d003      	beq.n	800d21e <_fwalk_reent+0x3a>
 800d216:	4629      	mov	r1, r5
 800d218:	4630      	mov	r0, r6
 800d21a:	47c0      	blx	r8
 800d21c:	4307      	orrs	r7, r0
 800d21e:	3568      	adds	r5, #104	; 0x68
 800d220:	e7e9      	b.n	800d1f6 <_fwalk_reent+0x12>
	...

0800d224 <_localeconv_r>:
 800d224:	4800      	ldr	r0, [pc, #0]	; (800d228 <_localeconv_r+0x4>)
 800d226:	4770      	bx	lr
 800d228:	240001ac 	.word	0x240001ac

0800d22c <__retarget_lock_init_recursive>:
 800d22c:	4770      	bx	lr

0800d22e <__retarget_lock_acquire_recursive>:
 800d22e:	4770      	bx	lr

0800d230 <__retarget_lock_release_recursive>:
 800d230:	4770      	bx	lr

0800d232 <__swhatbuf_r>:
 800d232:	b570      	push	{r4, r5, r6, lr}
 800d234:	460e      	mov	r6, r1
 800d236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23a:	2900      	cmp	r1, #0
 800d23c:	b096      	sub	sp, #88	; 0x58
 800d23e:	4614      	mov	r4, r2
 800d240:	461d      	mov	r5, r3
 800d242:	da08      	bge.n	800d256 <__swhatbuf_r+0x24>
 800d244:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	602a      	str	r2, [r5, #0]
 800d24c:	061a      	lsls	r2, r3, #24
 800d24e:	d410      	bmi.n	800d272 <__swhatbuf_r+0x40>
 800d250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d254:	e00e      	b.n	800d274 <__swhatbuf_r+0x42>
 800d256:	466a      	mov	r2, sp
 800d258:	f001 f82e 	bl	800e2b8 <_fstat_r>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	dbf1      	blt.n	800d244 <__swhatbuf_r+0x12>
 800d260:	9a01      	ldr	r2, [sp, #4]
 800d262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d26a:	425a      	negs	r2, r3
 800d26c:	415a      	adcs	r2, r3
 800d26e:	602a      	str	r2, [r5, #0]
 800d270:	e7ee      	b.n	800d250 <__swhatbuf_r+0x1e>
 800d272:	2340      	movs	r3, #64	; 0x40
 800d274:	2000      	movs	r0, #0
 800d276:	6023      	str	r3, [r4, #0]
 800d278:	b016      	add	sp, #88	; 0x58
 800d27a:	bd70      	pop	{r4, r5, r6, pc}

0800d27c <__smakebuf_r>:
 800d27c:	898b      	ldrh	r3, [r1, #12]
 800d27e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d280:	079d      	lsls	r5, r3, #30
 800d282:	4606      	mov	r6, r0
 800d284:	460c      	mov	r4, r1
 800d286:	d507      	bpl.n	800d298 <__smakebuf_r+0x1c>
 800d288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	2301      	movs	r3, #1
 800d292:	6163      	str	r3, [r4, #20]
 800d294:	b002      	add	sp, #8
 800d296:	bd70      	pop	{r4, r5, r6, pc}
 800d298:	ab01      	add	r3, sp, #4
 800d29a:	466a      	mov	r2, sp
 800d29c:	f7ff ffc9 	bl	800d232 <__swhatbuf_r>
 800d2a0:	9900      	ldr	r1, [sp, #0]
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f000 fc37 	bl	800db18 <_malloc_r>
 800d2aa:	b948      	cbnz	r0, 800d2c0 <__smakebuf_r+0x44>
 800d2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b0:	059a      	lsls	r2, r3, #22
 800d2b2:	d4ef      	bmi.n	800d294 <__smakebuf_r+0x18>
 800d2b4:	f023 0303 	bic.w	r3, r3, #3
 800d2b8:	f043 0302 	orr.w	r3, r3, #2
 800d2bc:	81a3      	strh	r3, [r4, #12]
 800d2be:	e7e3      	b.n	800d288 <__smakebuf_r+0xc>
 800d2c0:	4b0d      	ldr	r3, [pc, #52]	; (800d2f8 <__smakebuf_r+0x7c>)
 800d2c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	6020      	str	r0, [r4, #0]
 800d2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2cc:	81a3      	strh	r3, [r4, #12]
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	6163      	str	r3, [r4, #20]
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	6120      	str	r0, [r4, #16]
 800d2d6:	b15b      	cbz	r3, 800d2f0 <__smakebuf_r+0x74>
 800d2d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f000 fffd 	bl	800e2dc <_isatty_r>
 800d2e2:	b128      	cbz	r0, 800d2f0 <__smakebuf_r+0x74>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	f023 0303 	bic.w	r3, r3, #3
 800d2ea:	f043 0301 	orr.w	r3, r3, #1
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	89a0      	ldrh	r0, [r4, #12]
 800d2f2:	4305      	orrs	r5, r0
 800d2f4:	81a5      	strh	r5, [r4, #12]
 800d2f6:	e7cd      	b.n	800d294 <__smakebuf_r+0x18>
 800d2f8:	0800d081 	.word	0x0800d081

0800d2fc <malloc>:
 800d2fc:	4b02      	ldr	r3, [pc, #8]	; (800d308 <malloc+0xc>)
 800d2fe:	4601      	mov	r1, r0
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	f000 bc09 	b.w	800db18 <_malloc_r>
 800d306:	bf00      	nop
 800d308:	24000058 	.word	0x24000058

0800d30c <_Balloc>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d310:	4604      	mov	r4, r0
 800d312:	460d      	mov	r5, r1
 800d314:	b976      	cbnz	r6, 800d334 <_Balloc+0x28>
 800d316:	2010      	movs	r0, #16
 800d318:	f7ff fff0 	bl	800d2fc <malloc>
 800d31c:	4602      	mov	r2, r0
 800d31e:	6260      	str	r0, [r4, #36]	; 0x24
 800d320:	b920      	cbnz	r0, 800d32c <_Balloc+0x20>
 800d322:	4b18      	ldr	r3, [pc, #96]	; (800d384 <_Balloc+0x78>)
 800d324:	4818      	ldr	r0, [pc, #96]	; (800d388 <_Balloc+0x7c>)
 800d326:	2166      	movs	r1, #102	; 0x66
 800d328:	f000 ff86 	bl	800e238 <__assert_func>
 800d32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d330:	6006      	str	r6, [r0, #0]
 800d332:	60c6      	str	r6, [r0, #12]
 800d334:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d336:	68f3      	ldr	r3, [r6, #12]
 800d338:	b183      	cbz	r3, 800d35c <_Balloc+0x50>
 800d33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d342:	b9b8      	cbnz	r0, 800d374 <_Balloc+0x68>
 800d344:	2101      	movs	r1, #1
 800d346:	fa01 f605 	lsl.w	r6, r1, r5
 800d34a:	1d72      	adds	r2, r6, #5
 800d34c:	0092      	lsls	r2, r2, #2
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 fb60 	bl	800da14 <_calloc_r>
 800d354:	b160      	cbz	r0, 800d370 <_Balloc+0x64>
 800d356:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d35a:	e00e      	b.n	800d37a <_Balloc+0x6e>
 800d35c:	2221      	movs	r2, #33	; 0x21
 800d35e:	2104      	movs	r1, #4
 800d360:	4620      	mov	r0, r4
 800d362:	f000 fb57 	bl	800da14 <_calloc_r>
 800d366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d368:	60f0      	str	r0, [r6, #12]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e4      	bne.n	800d33a <_Balloc+0x2e>
 800d370:	2000      	movs	r0, #0
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	6802      	ldr	r2, [r0, #0]
 800d376:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d37a:	2300      	movs	r3, #0
 800d37c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d380:	e7f7      	b.n	800d372 <_Balloc+0x66>
 800d382:	bf00      	nop
 800d384:	0800f339 	.word	0x0800f339
 800d388:	0800f41c 	.word	0x0800f41c

0800d38c <_Bfree>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d390:	4605      	mov	r5, r0
 800d392:	460c      	mov	r4, r1
 800d394:	b976      	cbnz	r6, 800d3b4 <_Bfree+0x28>
 800d396:	2010      	movs	r0, #16
 800d398:	f7ff ffb0 	bl	800d2fc <malloc>
 800d39c:	4602      	mov	r2, r0
 800d39e:	6268      	str	r0, [r5, #36]	; 0x24
 800d3a0:	b920      	cbnz	r0, 800d3ac <_Bfree+0x20>
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <_Bfree+0x3c>)
 800d3a4:	4809      	ldr	r0, [pc, #36]	; (800d3cc <_Bfree+0x40>)
 800d3a6:	218a      	movs	r1, #138	; 0x8a
 800d3a8:	f000 ff46 	bl	800e238 <__assert_func>
 800d3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b0:	6006      	str	r6, [r0, #0]
 800d3b2:	60c6      	str	r6, [r0, #12]
 800d3b4:	b13c      	cbz	r4, 800d3c6 <_Bfree+0x3a>
 800d3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3b8:	6862      	ldr	r2, [r4, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3c0:	6021      	str	r1, [r4, #0]
 800d3c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	0800f339 	.word	0x0800f339
 800d3cc:	0800f41c 	.word	0x0800f41c

0800d3d0 <__multadd>:
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	690d      	ldr	r5, [r1, #16]
 800d3d6:	4607      	mov	r7, r0
 800d3d8:	460c      	mov	r4, r1
 800d3da:	461e      	mov	r6, r3
 800d3dc:	f101 0c14 	add.w	ip, r1, #20
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	f8dc 3000 	ldr.w	r3, [ip]
 800d3e6:	b299      	uxth	r1, r3
 800d3e8:	fb02 6101 	mla	r1, r2, r1, r6
 800d3ec:	0c1e      	lsrs	r6, r3, #16
 800d3ee:	0c0b      	lsrs	r3, r1, #16
 800d3f0:	fb02 3306 	mla	r3, r2, r6, r3
 800d3f4:	b289      	uxth	r1, r1
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3fc:	4285      	cmp	r5, r0
 800d3fe:	f84c 1b04 	str.w	r1, [ip], #4
 800d402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d406:	dcec      	bgt.n	800d3e2 <__multadd+0x12>
 800d408:	b30e      	cbz	r6, 800d44e <__multadd+0x7e>
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	42ab      	cmp	r3, r5
 800d40e:	dc19      	bgt.n	800d444 <__multadd+0x74>
 800d410:	6861      	ldr	r1, [r4, #4]
 800d412:	4638      	mov	r0, r7
 800d414:	3101      	adds	r1, #1
 800d416:	f7ff ff79 	bl	800d30c <_Balloc>
 800d41a:	4680      	mov	r8, r0
 800d41c:	b928      	cbnz	r0, 800d42a <__multadd+0x5a>
 800d41e:	4602      	mov	r2, r0
 800d420:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <__multadd+0x84>)
 800d422:	480d      	ldr	r0, [pc, #52]	; (800d458 <__multadd+0x88>)
 800d424:	21b5      	movs	r1, #181	; 0xb5
 800d426:	f000 ff07 	bl	800e238 <__assert_func>
 800d42a:	6922      	ldr	r2, [r4, #16]
 800d42c:	3202      	adds	r2, #2
 800d42e:	f104 010c 	add.w	r1, r4, #12
 800d432:	0092      	lsls	r2, r2, #2
 800d434:	300c      	adds	r0, #12
 800d436:	f7fe f949 	bl	800b6cc <memcpy>
 800d43a:	4621      	mov	r1, r4
 800d43c:	4638      	mov	r0, r7
 800d43e:	f7ff ffa5 	bl	800d38c <_Bfree>
 800d442:	4644      	mov	r4, r8
 800d444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d448:	3501      	adds	r5, #1
 800d44a:	615e      	str	r6, [r3, #20]
 800d44c:	6125      	str	r5, [r4, #16]
 800d44e:	4620      	mov	r0, r4
 800d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d454:	0800f3ab 	.word	0x0800f3ab
 800d458:	0800f41c 	.word	0x0800f41c

0800d45c <__hi0bits>:
 800d45c:	0c03      	lsrs	r3, r0, #16
 800d45e:	041b      	lsls	r3, r3, #16
 800d460:	b9d3      	cbnz	r3, 800d498 <__hi0bits+0x3c>
 800d462:	0400      	lsls	r0, r0, #16
 800d464:	2310      	movs	r3, #16
 800d466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d46a:	bf04      	itt	eq
 800d46c:	0200      	lsleq	r0, r0, #8
 800d46e:	3308      	addeq	r3, #8
 800d470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d474:	bf04      	itt	eq
 800d476:	0100      	lsleq	r0, r0, #4
 800d478:	3304      	addeq	r3, #4
 800d47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d47e:	bf04      	itt	eq
 800d480:	0080      	lsleq	r0, r0, #2
 800d482:	3302      	addeq	r3, #2
 800d484:	2800      	cmp	r0, #0
 800d486:	db05      	blt.n	800d494 <__hi0bits+0x38>
 800d488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d48c:	f103 0301 	add.w	r3, r3, #1
 800d490:	bf08      	it	eq
 800d492:	2320      	moveq	r3, #32
 800d494:	4618      	mov	r0, r3
 800d496:	4770      	bx	lr
 800d498:	2300      	movs	r3, #0
 800d49a:	e7e4      	b.n	800d466 <__hi0bits+0xa>

0800d49c <__lo0bits>:
 800d49c:	6803      	ldr	r3, [r0, #0]
 800d49e:	f013 0207 	ands.w	r2, r3, #7
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	d00b      	beq.n	800d4be <__lo0bits+0x22>
 800d4a6:	07da      	lsls	r2, r3, #31
 800d4a8:	d423      	bmi.n	800d4f2 <__lo0bits+0x56>
 800d4aa:	0798      	lsls	r0, r3, #30
 800d4ac:	bf49      	itett	mi
 800d4ae:	085b      	lsrmi	r3, r3, #1
 800d4b0:	089b      	lsrpl	r3, r3, #2
 800d4b2:	2001      	movmi	r0, #1
 800d4b4:	600b      	strmi	r3, [r1, #0]
 800d4b6:	bf5c      	itt	pl
 800d4b8:	600b      	strpl	r3, [r1, #0]
 800d4ba:	2002      	movpl	r0, #2
 800d4bc:	4770      	bx	lr
 800d4be:	b298      	uxth	r0, r3
 800d4c0:	b9a8      	cbnz	r0, 800d4ee <__lo0bits+0x52>
 800d4c2:	0c1b      	lsrs	r3, r3, #16
 800d4c4:	2010      	movs	r0, #16
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	b90a      	cbnz	r2, 800d4ce <__lo0bits+0x32>
 800d4ca:	3008      	adds	r0, #8
 800d4cc:	0a1b      	lsrs	r3, r3, #8
 800d4ce:	071a      	lsls	r2, r3, #28
 800d4d0:	bf04      	itt	eq
 800d4d2:	091b      	lsreq	r3, r3, #4
 800d4d4:	3004      	addeq	r0, #4
 800d4d6:	079a      	lsls	r2, r3, #30
 800d4d8:	bf04      	itt	eq
 800d4da:	089b      	lsreq	r3, r3, #2
 800d4dc:	3002      	addeq	r0, #2
 800d4de:	07da      	lsls	r2, r3, #31
 800d4e0:	d403      	bmi.n	800d4ea <__lo0bits+0x4e>
 800d4e2:	085b      	lsrs	r3, r3, #1
 800d4e4:	f100 0001 	add.w	r0, r0, #1
 800d4e8:	d005      	beq.n	800d4f6 <__lo0bits+0x5a>
 800d4ea:	600b      	str	r3, [r1, #0]
 800d4ec:	4770      	bx	lr
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	e7e9      	b.n	800d4c6 <__lo0bits+0x2a>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	4770      	bx	lr
 800d4f6:	2020      	movs	r0, #32
 800d4f8:	4770      	bx	lr
	...

0800d4fc <__i2b>:
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	460c      	mov	r4, r1
 800d500:	2101      	movs	r1, #1
 800d502:	f7ff ff03 	bl	800d30c <_Balloc>
 800d506:	4602      	mov	r2, r0
 800d508:	b928      	cbnz	r0, 800d516 <__i2b+0x1a>
 800d50a:	4b05      	ldr	r3, [pc, #20]	; (800d520 <__i2b+0x24>)
 800d50c:	4805      	ldr	r0, [pc, #20]	; (800d524 <__i2b+0x28>)
 800d50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d512:	f000 fe91 	bl	800e238 <__assert_func>
 800d516:	2301      	movs	r3, #1
 800d518:	6144      	str	r4, [r0, #20]
 800d51a:	6103      	str	r3, [r0, #16]
 800d51c:	bd10      	pop	{r4, pc}
 800d51e:	bf00      	nop
 800d520:	0800f3ab 	.word	0x0800f3ab
 800d524:	0800f41c 	.word	0x0800f41c

0800d528 <__multiply>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	4691      	mov	r9, r2
 800d52e:	690a      	ldr	r2, [r1, #16]
 800d530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d534:	429a      	cmp	r2, r3
 800d536:	bfb8      	it	lt
 800d538:	460b      	movlt	r3, r1
 800d53a:	460c      	mov	r4, r1
 800d53c:	bfbc      	itt	lt
 800d53e:	464c      	movlt	r4, r9
 800d540:	4699      	movlt	r9, r3
 800d542:	6927      	ldr	r7, [r4, #16]
 800d544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d548:	68a3      	ldr	r3, [r4, #8]
 800d54a:	6861      	ldr	r1, [r4, #4]
 800d54c:	eb07 060a 	add.w	r6, r7, sl
 800d550:	42b3      	cmp	r3, r6
 800d552:	b085      	sub	sp, #20
 800d554:	bfb8      	it	lt
 800d556:	3101      	addlt	r1, #1
 800d558:	f7ff fed8 	bl	800d30c <_Balloc>
 800d55c:	b930      	cbnz	r0, 800d56c <__multiply+0x44>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b44      	ldr	r3, [pc, #272]	; (800d674 <__multiply+0x14c>)
 800d562:	4845      	ldr	r0, [pc, #276]	; (800d678 <__multiply+0x150>)
 800d564:	f240 115d 	movw	r1, #349	; 0x15d
 800d568:	f000 fe66 	bl	800e238 <__assert_func>
 800d56c:	f100 0514 	add.w	r5, r0, #20
 800d570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d574:	462b      	mov	r3, r5
 800d576:	2200      	movs	r2, #0
 800d578:	4543      	cmp	r3, r8
 800d57a:	d321      	bcc.n	800d5c0 <__multiply+0x98>
 800d57c:	f104 0314 	add.w	r3, r4, #20
 800d580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d584:	f109 0314 	add.w	r3, r9, #20
 800d588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d58c:	9202      	str	r2, [sp, #8]
 800d58e:	1b3a      	subs	r2, r7, r4
 800d590:	3a15      	subs	r2, #21
 800d592:	f022 0203 	bic.w	r2, r2, #3
 800d596:	3204      	adds	r2, #4
 800d598:	f104 0115 	add.w	r1, r4, #21
 800d59c:	428f      	cmp	r7, r1
 800d59e:	bf38      	it	cc
 800d5a0:	2204      	movcc	r2, #4
 800d5a2:	9201      	str	r2, [sp, #4]
 800d5a4:	9a02      	ldr	r2, [sp, #8]
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d80c      	bhi.n	800d5c6 <__multiply+0x9e>
 800d5ac:	2e00      	cmp	r6, #0
 800d5ae:	dd03      	ble.n	800d5b8 <__multiply+0x90>
 800d5b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d05a      	beq.n	800d66e <__multiply+0x146>
 800d5b8:	6106      	str	r6, [r0, #16]
 800d5ba:	b005      	add	sp, #20
 800d5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	f843 2b04 	str.w	r2, [r3], #4
 800d5c4:	e7d8      	b.n	800d578 <__multiply+0x50>
 800d5c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5ca:	f1ba 0f00 	cmp.w	sl, #0
 800d5ce:	d024      	beq.n	800d61a <__multiply+0xf2>
 800d5d0:	f104 0e14 	add.w	lr, r4, #20
 800d5d4:	46a9      	mov	r9, r5
 800d5d6:	f04f 0c00 	mov.w	ip, #0
 800d5da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5de:	f8d9 1000 	ldr.w	r1, [r9]
 800d5e2:	fa1f fb82 	uxth.w	fp, r2
 800d5e6:	b289      	uxth	r1, r1
 800d5e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800d5f4:	4461      	add	r1, ip
 800d5f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d602:	b289      	uxth	r1, r1
 800d604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d608:	4577      	cmp	r7, lr
 800d60a:	f849 1b04 	str.w	r1, [r9], #4
 800d60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d612:	d8e2      	bhi.n	800d5da <__multiply+0xb2>
 800d614:	9a01      	ldr	r2, [sp, #4]
 800d616:	f845 c002 	str.w	ip, [r5, r2]
 800d61a:	9a03      	ldr	r2, [sp, #12]
 800d61c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d620:	3304      	adds	r3, #4
 800d622:	f1b9 0f00 	cmp.w	r9, #0
 800d626:	d020      	beq.n	800d66a <__multiply+0x142>
 800d628:	6829      	ldr	r1, [r5, #0]
 800d62a:	f104 0c14 	add.w	ip, r4, #20
 800d62e:	46ae      	mov	lr, r5
 800d630:	f04f 0a00 	mov.w	sl, #0
 800d634:	f8bc b000 	ldrh.w	fp, [ip]
 800d638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d63c:	fb09 220b 	mla	r2, r9, fp, r2
 800d640:	4492      	add	sl, r2
 800d642:	b289      	uxth	r1, r1
 800d644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d648:	f84e 1b04 	str.w	r1, [lr], #4
 800d64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d650:	f8be 1000 	ldrh.w	r1, [lr]
 800d654:	0c12      	lsrs	r2, r2, #16
 800d656:	fb09 1102 	mla	r1, r9, r2, r1
 800d65a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d65e:	4567      	cmp	r7, ip
 800d660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d664:	d8e6      	bhi.n	800d634 <__multiply+0x10c>
 800d666:	9a01      	ldr	r2, [sp, #4]
 800d668:	50a9      	str	r1, [r5, r2]
 800d66a:	3504      	adds	r5, #4
 800d66c:	e79a      	b.n	800d5a4 <__multiply+0x7c>
 800d66e:	3e01      	subs	r6, #1
 800d670:	e79c      	b.n	800d5ac <__multiply+0x84>
 800d672:	bf00      	nop
 800d674:	0800f3ab 	.word	0x0800f3ab
 800d678:	0800f41c 	.word	0x0800f41c

0800d67c <__pow5mult>:
 800d67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d680:	4615      	mov	r5, r2
 800d682:	f012 0203 	ands.w	r2, r2, #3
 800d686:	4606      	mov	r6, r0
 800d688:	460f      	mov	r7, r1
 800d68a:	d007      	beq.n	800d69c <__pow5mult+0x20>
 800d68c:	4c25      	ldr	r4, [pc, #148]	; (800d724 <__pow5mult+0xa8>)
 800d68e:	3a01      	subs	r2, #1
 800d690:	2300      	movs	r3, #0
 800d692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d696:	f7ff fe9b 	bl	800d3d0 <__multadd>
 800d69a:	4607      	mov	r7, r0
 800d69c:	10ad      	asrs	r5, r5, #2
 800d69e:	d03d      	beq.n	800d71c <__pow5mult+0xa0>
 800d6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6a2:	b97c      	cbnz	r4, 800d6c4 <__pow5mult+0x48>
 800d6a4:	2010      	movs	r0, #16
 800d6a6:	f7ff fe29 	bl	800d2fc <malloc>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ae:	b928      	cbnz	r0, 800d6bc <__pow5mult+0x40>
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <__pow5mult+0xac>)
 800d6b2:	481e      	ldr	r0, [pc, #120]	; (800d72c <__pow5mult+0xb0>)
 800d6b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d6b8:	f000 fdbe 	bl	800e238 <__assert_func>
 800d6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6c0:	6004      	str	r4, [r0, #0]
 800d6c2:	60c4      	str	r4, [r0, #12]
 800d6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6cc:	b94c      	cbnz	r4, 800d6e2 <__pow5mult+0x66>
 800d6ce:	f240 2171 	movw	r1, #625	; 0x271
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f7ff ff12 	bl	800d4fc <__i2b>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6de:	4604      	mov	r4, r0
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	f04f 0900 	mov.w	r9, #0
 800d6e6:	07eb      	lsls	r3, r5, #31
 800d6e8:	d50a      	bpl.n	800d700 <__pow5mult+0x84>
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ff1a 	bl	800d528 <__multiply>
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	4680      	mov	r8, r0
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f7ff fe47 	bl	800d38c <_Bfree>
 800d6fe:	4647      	mov	r7, r8
 800d700:	106d      	asrs	r5, r5, #1
 800d702:	d00b      	beq.n	800d71c <__pow5mult+0xa0>
 800d704:	6820      	ldr	r0, [r4, #0]
 800d706:	b938      	cbnz	r0, 800d718 <__pow5mult+0x9c>
 800d708:	4622      	mov	r2, r4
 800d70a:	4621      	mov	r1, r4
 800d70c:	4630      	mov	r0, r6
 800d70e:	f7ff ff0b 	bl	800d528 <__multiply>
 800d712:	6020      	str	r0, [r4, #0]
 800d714:	f8c0 9000 	str.w	r9, [r0]
 800d718:	4604      	mov	r4, r0
 800d71a:	e7e4      	b.n	800d6e6 <__pow5mult+0x6a>
 800d71c:	4638      	mov	r0, r7
 800d71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d722:	bf00      	nop
 800d724:	0800f568 	.word	0x0800f568
 800d728:	0800f339 	.word	0x0800f339
 800d72c:	0800f41c 	.word	0x0800f41c

0800d730 <__lshift>:
 800d730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	6849      	ldr	r1, [r1, #4]
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d73e:	68a3      	ldr	r3, [r4, #8]
 800d740:	4607      	mov	r7, r0
 800d742:	4691      	mov	r9, r2
 800d744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d748:	f108 0601 	add.w	r6, r8, #1
 800d74c:	42b3      	cmp	r3, r6
 800d74e:	db0b      	blt.n	800d768 <__lshift+0x38>
 800d750:	4638      	mov	r0, r7
 800d752:	f7ff fddb 	bl	800d30c <_Balloc>
 800d756:	4605      	mov	r5, r0
 800d758:	b948      	cbnz	r0, 800d76e <__lshift+0x3e>
 800d75a:	4602      	mov	r2, r0
 800d75c:	4b2a      	ldr	r3, [pc, #168]	; (800d808 <__lshift+0xd8>)
 800d75e:	482b      	ldr	r0, [pc, #172]	; (800d80c <__lshift+0xdc>)
 800d760:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d764:	f000 fd68 	bl	800e238 <__assert_func>
 800d768:	3101      	adds	r1, #1
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	e7ee      	b.n	800d74c <__lshift+0x1c>
 800d76e:	2300      	movs	r3, #0
 800d770:	f100 0114 	add.w	r1, r0, #20
 800d774:	f100 0210 	add.w	r2, r0, #16
 800d778:	4618      	mov	r0, r3
 800d77a:	4553      	cmp	r3, sl
 800d77c:	db37      	blt.n	800d7ee <__lshift+0xbe>
 800d77e:	6920      	ldr	r0, [r4, #16]
 800d780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d784:	f104 0314 	add.w	r3, r4, #20
 800d788:	f019 091f 	ands.w	r9, r9, #31
 800d78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d794:	d02f      	beq.n	800d7f6 <__lshift+0xc6>
 800d796:	f1c9 0e20 	rsb	lr, r9, #32
 800d79a:	468a      	mov	sl, r1
 800d79c:	f04f 0c00 	mov.w	ip, #0
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	fa02 f209 	lsl.w	r2, r2, r9
 800d7a6:	ea42 020c 	orr.w	r2, r2, ip
 800d7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800d7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b2:	4298      	cmp	r0, r3
 800d7b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d7b8:	d8f2      	bhi.n	800d7a0 <__lshift+0x70>
 800d7ba:	1b03      	subs	r3, r0, r4
 800d7bc:	3b15      	subs	r3, #21
 800d7be:	f023 0303 	bic.w	r3, r3, #3
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	f104 0215 	add.w	r2, r4, #21
 800d7c8:	4290      	cmp	r0, r2
 800d7ca:	bf38      	it	cc
 800d7cc:	2304      	movcc	r3, #4
 800d7ce:	f841 c003 	str.w	ip, [r1, r3]
 800d7d2:	f1bc 0f00 	cmp.w	ip, #0
 800d7d6:	d001      	beq.n	800d7dc <__lshift+0xac>
 800d7d8:	f108 0602 	add.w	r6, r8, #2
 800d7dc:	3e01      	subs	r6, #1
 800d7de:	4638      	mov	r0, r7
 800d7e0:	612e      	str	r6, [r5, #16]
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	f7ff fdd2 	bl	800d38c <_Bfree>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	e7c1      	b.n	800d77a <__lshift+0x4a>
 800d7f6:	3904      	subs	r1, #4
 800d7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d800:	4298      	cmp	r0, r3
 800d802:	d8f9      	bhi.n	800d7f8 <__lshift+0xc8>
 800d804:	e7ea      	b.n	800d7dc <__lshift+0xac>
 800d806:	bf00      	nop
 800d808:	0800f3ab 	.word	0x0800f3ab
 800d80c:	0800f41c 	.word	0x0800f41c

0800d810 <__mcmp>:
 800d810:	b530      	push	{r4, r5, lr}
 800d812:	6902      	ldr	r2, [r0, #16]
 800d814:	690c      	ldr	r4, [r1, #16]
 800d816:	1b12      	subs	r2, r2, r4
 800d818:	d10e      	bne.n	800d838 <__mcmp+0x28>
 800d81a:	f100 0314 	add.w	r3, r0, #20
 800d81e:	3114      	adds	r1, #20
 800d820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d82c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d830:	42a5      	cmp	r5, r4
 800d832:	d003      	beq.n	800d83c <__mcmp+0x2c>
 800d834:	d305      	bcc.n	800d842 <__mcmp+0x32>
 800d836:	2201      	movs	r2, #1
 800d838:	4610      	mov	r0, r2
 800d83a:	bd30      	pop	{r4, r5, pc}
 800d83c:	4283      	cmp	r3, r0
 800d83e:	d3f3      	bcc.n	800d828 <__mcmp+0x18>
 800d840:	e7fa      	b.n	800d838 <__mcmp+0x28>
 800d842:	f04f 32ff 	mov.w	r2, #4294967295
 800d846:	e7f7      	b.n	800d838 <__mcmp+0x28>

0800d848 <__mdiff>:
 800d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	460c      	mov	r4, r1
 800d84e:	4606      	mov	r6, r0
 800d850:	4611      	mov	r1, r2
 800d852:	4620      	mov	r0, r4
 800d854:	4690      	mov	r8, r2
 800d856:	f7ff ffdb 	bl	800d810 <__mcmp>
 800d85a:	1e05      	subs	r5, r0, #0
 800d85c:	d110      	bne.n	800d880 <__mdiff+0x38>
 800d85e:	4629      	mov	r1, r5
 800d860:	4630      	mov	r0, r6
 800d862:	f7ff fd53 	bl	800d30c <_Balloc>
 800d866:	b930      	cbnz	r0, 800d876 <__mdiff+0x2e>
 800d868:	4b3a      	ldr	r3, [pc, #232]	; (800d954 <__mdiff+0x10c>)
 800d86a:	4602      	mov	r2, r0
 800d86c:	f240 2132 	movw	r1, #562	; 0x232
 800d870:	4839      	ldr	r0, [pc, #228]	; (800d958 <__mdiff+0x110>)
 800d872:	f000 fce1 	bl	800e238 <__assert_func>
 800d876:	2301      	movs	r3, #1
 800d878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	bfa4      	itt	ge
 800d882:	4643      	movge	r3, r8
 800d884:	46a0      	movge	r8, r4
 800d886:	4630      	mov	r0, r6
 800d888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d88c:	bfa6      	itte	ge
 800d88e:	461c      	movge	r4, r3
 800d890:	2500      	movge	r5, #0
 800d892:	2501      	movlt	r5, #1
 800d894:	f7ff fd3a 	bl	800d30c <_Balloc>
 800d898:	b920      	cbnz	r0, 800d8a4 <__mdiff+0x5c>
 800d89a:	4b2e      	ldr	r3, [pc, #184]	; (800d954 <__mdiff+0x10c>)
 800d89c:	4602      	mov	r2, r0
 800d89e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d8a2:	e7e5      	b.n	800d870 <__mdiff+0x28>
 800d8a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8a8:	6926      	ldr	r6, [r4, #16]
 800d8aa:	60c5      	str	r5, [r0, #12]
 800d8ac:	f104 0914 	add.w	r9, r4, #20
 800d8b0:	f108 0514 	add.w	r5, r8, #20
 800d8b4:	f100 0e14 	add.w	lr, r0, #20
 800d8b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d8bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8c0:	f108 0210 	add.w	r2, r8, #16
 800d8c4:	46f2      	mov	sl, lr
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8d0:	fa1f f883 	uxth.w	r8, r3
 800d8d4:	fa11 f18b 	uxtah	r1, r1, fp
 800d8d8:	0c1b      	lsrs	r3, r3, #16
 800d8da:	eba1 0808 	sub.w	r8, r1, r8
 800d8de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8e6:	fa1f f888 	uxth.w	r8, r8
 800d8ea:	1419      	asrs	r1, r3, #16
 800d8ec:	454e      	cmp	r6, r9
 800d8ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8f2:	f84a 3b04 	str.w	r3, [sl], #4
 800d8f6:	d8e7      	bhi.n	800d8c8 <__mdiff+0x80>
 800d8f8:	1b33      	subs	r3, r6, r4
 800d8fa:	3b15      	subs	r3, #21
 800d8fc:	f023 0303 	bic.w	r3, r3, #3
 800d900:	3304      	adds	r3, #4
 800d902:	3415      	adds	r4, #21
 800d904:	42a6      	cmp	r6, r4
 800d906:	bf38      	it	cc
 800d908:	2304      	movcc	r3, #4
 800d90a:	441d      	add	r5, r3
 800d90c:	4473      	add	r3, lr
 800d90e:	469e      	mov	lr, r3
 800d910:	462e      	mov	r6, r5
 800d912:	4566      	cmp	r6, ip
 800d914:	d30e      	bcc.n	800d934 <__mdiff+0xec>
 800d916:	f10c 0203 	add.w	r2, ip, #3
 800d91a:	1b52      	subs	r2, r2, r5
 800d91c:	f022 0203 	bic.w	r2, r2, #3
 800d920:	3d03      	subs	r5, #3
 800d922:	45ac      	cmp	ip, r5
 800d924:	bf38      	it	cc
 800d926:	2200      	movcc	r2, #0
 800d928:	441a      	add	r2, r3
 800d92a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d92e:	b17b      	cbz	r3, 800d950 <__mdiff+0x108>
 800d930:	6107      	str	r7, [r0, #16]
 800d932:	e7a3      	b.n	800d87c <__mdiff+0x34>
 800d934:	f856 8b04 	ldr.w	r8, [r6], #4
 800d938:	fa11 f288 	uxtah	r2, r1, r8
 800d93c:	1414      	asrs	r4, r2, #16
 800d93e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d942:	b292      	uxth	r2, r2
 800d944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d948:	f84e 2b04 	str.w	r2, [lr], #4
 800d94c:	1421      	asrs	r1, r4, #16
 800d94e:	e7e0      	b.n	800d912 <__mdiff+0xca>
 800d950:	3f01      	subs	r7, #1
 800d952:	e7ea      	b.n	800d92a <__mdiff+0xe2>
 800d954:	0800f3ab 	.word	0x0800f3ab
 800d958:	0800f41c 	.word	0x0800f41c

0800d95c <__d2b>:
 800d95c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d960:	4689      	mov	r9, r1
 800d962:	2101      	movs	r1, #1
 800d964:	ec57 6b10 	vmov	r6, r7, d0
 800d968:	4690      	mov	r8, r2
 800d96a:	f7ff fccf 	bl	800d30c <_Balloc>
 800d96e:	4604      	mov	r4, r0
 800d970:	b930      	cbnz	r0, 800d980 <__d2b+0x24>
 800d972:	4602      	mov	r2, r0
 800d974:	4b25      	ldr	r3, [pc, #148]	; (800da0c <__d2b+0xb0>)
 800d976:	4826      	ldr	r0, [pc, #152]	; (800da10 <__d2b+0xb4>)
 800d978:	f240 310a 	movw	r1, #778	; 0x30a
 800d97c:	f000 fc5c 	bl	800e238 <__assert_func>
 800d980:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d988:	bb35      	cbnz	r5, 800d9d8 <__d2b+0x7c>
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	d028      	beq.n	800d9e2 <__d2b+0x86>
 800d990:	4668      	mov	r0, sp
 800d992:	9600      	str	r6, [sp, #0]
 800d994:	f7ff fd82 	bl	800d49c <__lo0bits>
 800d998:	9900      	ldr	r1, [sp, #0]
 800d99a:	b300      	cbz	r0, 800d9de <__d2b+0x82>
 800d99c:	9a01      	ldr	r2, [sp, #4]
 800d99e:	f1c0 0320 	rsb	r3, r0, #32
 800d9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a6:	430b      	orrs	r3, r1
 800d9a8:	40c2      	lsrs	r2, r0
 800d9aa:	6163      	str	r3, [r4, #20]
 800d9ac:	9201      	str	r2, [sp, #4]
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	61a3      	str	r3, [r4, #24]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	bf14      	ite	ne
 800d9b6:	2202      	movne	r2, #2
 800d9b8:	2201      	moveq	r2, #1
 800d9ba:	6122      	str	r2, [r4, #16]
 800d9bc:	b1d5      	cbz	r5, 800d9f4 <__d2b+0x98>
 800d9be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9c2:	4405      	add	r5, r0
 800d9c4:	f8c9 5000 	str.w	r5, [r9]
 800d9c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9cc:	f8c8 0000 	str.w	r0, [r8]
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	b003      	add	sp, #12
 800d9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9dc:	e7d5      	b.n	800d98a <__d2b+0x2e>
 800d9de:	6161      	str	r1, [r4, #20]
 800d9e0:	e7e5      	b.n	800d9ae <__d2b+0x52>
 800d9e2:	a801      	add	r0, sp, #4
 800d9e4:	f7ff fd5a 	bl	800d49c <__lo0bits>
 800d9e8:	9b01      	ldr	r3, [sp, #4]
 800d9ea:	6163      	str	r3, [r4, #20]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	6122      	str	r2, [r4, #16]
 800d9f0:	3020      	adds	r0, #32
 800d9f2:	e7e3      	b.n	800d9bc <__d2b+0x60>
 800d9f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9fc:	f8c9 0000 	str.w	r0, [r9]
 800da00:	6918      	ldr	r0, [r3, #16]
 800da02:	f7ff fd2b 	bl	800d45c <__hi0bits>
 800da06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da0a:	e7df      	b.n	800d9cc <__d2b+0x70>
 800da0c:	0800f3ab 	.word	0x0800f3ab
 800da10:	0800f41c 	.word	0x0800f41c

0800da14 <_calloc_r>:
 800da14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da16:	fba1 2402 	umull	r2, r4, r1, r2
 800da1a:	b94c      	cbnz	r4, 800da30 <_calloc_r+0x1c>
 800da1c:	4611      	mov	r1, r2
 800da1e:	9201      	str	r2, [sp, #4]
 800da20:	f000 f87a 	bl	800db18 <_malloc_r>
 800da24:	9a01      	ldr	r2, [sp, #4]
 800da26:	4605      	mov	r5, r0
 800da28:	b930      	cbnz	r0, 800da38 <_calloc_r+0x24>
 800da2a:	4628      	mov	r0, r5
 800da2c:	b003      	add	sp, #12
 800da2e:	bd30      	pop	{r4, r5, pc}
 800da30:	220c      	movs	r2, #12
 800da32:	6002      	str	r2, [r0, #0]
 800da34:	2500      	movs	r5, #0
 800da36:	e7f8      	b.n	800da2a <_calloc_r+0x16>
 800da38:	4621      	mov	r1, r4
 800da3a:	f7fd fe55 	bl	800b6e8 <memset>
 800da3e:	e7f4      	b.n	800da2a <_calloc_r+0x16>

0800da40 <_free_r>:
 800da40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da42:	2900      	cmp	r1, #0
 800da44:	d044      	beq.n	800dad0 <_free_r+0x90>
 800da46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da4a:	9001      	str	r0, [sp, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f1a1 0404 	sub.w	r4, r1, #4
 800da52:	bfb8      	it	lt
 800da54:	18e4      	addlt	r4, r4, r3
 800da56:	f000 fc8f 	bl	800e378 <__malloc_lock>
 800da5a:	4a1e      	ldr	r2, [pc, #120]	; (800dad4 <_free_r+0x94>)
 800da5c:	9801      	ldr	r0, [sp, #4]
 800da5e:	6813      	ldr	r3, [r2, #0]
 800da60:	b933      	cbnz	r3, 800da70 <_free_r+0x30>
 800da62:	6063      	str	r3, [r4, #4]
 800da64:	6014      	str	r4, [r2, #0]
 800da66:	b003      	add	sp, #12
 800da68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da6c:	f000 bc8a 	b.w	800e384 <__malloc_unlock>
 800da70:	42a3      	cmp	r3, r4
 800da72:	d908      	bls.n	800da86 <_free_r+0x46>
 800da74:	6825      	ldr	r5, [r4, #0]
 800da76:	1961      	adds	r1, r4, r5
 800da78:	428b      	cmp	r3, r1
 800da7a:	bf01      	itttt	eq
 800da7c:	6819      	ldreq	r1, [r3, #0]
 800da7e:	685b      	ldreq	r3, [r3, #4]
 800da80:	1949      	addeq	r1, r1, r5
 800da82:	6021      	streq	r1, [r4, #0]
 800da84:	e7ed      	b.n	800da62 <_free_r+0x22>
 800da86:	461a      	mov	r2, r3
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	b10b      	cbz	r3, 800da90 <_free_r+0x50>
 800da8c:	42a3      	cmp	r3, r4
 800da8e:	d9fa      	bls.n	800da86 <_free_r+0x46>
 800da90:	6811      	ldr	r1, [r2, #0]
 800da92:	1855      	adds	r5, r2, r1
 800da94:	42a5      	cmp	r5, r4
 800da96:	d10b      	bne.n	800dab0 <_free_r+0x70>
 800da98:	6824      	ldr	r4, [r4, #0]
 800da9a:	4421      	add	r1, r4
 800da9c:	1854      	adds	r4, r2, r1
 800da9e:	42a3      	cmp	r3, r4
 800daa0:	6011      	str	r1, [r2, #0]
 800daa2:	d1e0      	bne.n	800da66 <_free_r+0x26>
 800daa4:	681c      	ldr	r4, [r3, #0]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	6053      	str	r3, [r2, #4]
 800daaa:	4421      	add	r1, r4
 800daac:	6011      	str	r1, [r2, #0]
 800daae:	e7da      	b.n	800da66 <_free_r+0x26>
 800dab0:	d902      	bls.n	800dab8 <_free_r+0x78>
 800dab2:	230c      	movs	r3, #12
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	e7d6      	b.n	800da66 <_free_r+0x26>
 800dab8:	6825      	ldr	r5, [r4, #0]
 800daba:	1961      	adds	r1, r4, r5
 800dabc:	428b      	cmp	r3, r1
 800dabe:	bf04      	itt	eq
 800dac0:	6819      	ldreq	r1, [r3, #0]
 800dac2:	685b      	ldreq	r3, [r3, #4]
 800dac4:	6063      	str	r3, [r4, #4]
 800dac6:	bf04      	itt	eq
 800dac8:	1949      	addeq	r1, r1, r5
 800daca:	6021      	streq	r1, [r4, #0]
 800dacc:	6054      	str	r4, [r2, #4]
 800dace:	e7ca      	b.n	800da66 <_free_r+0x26>
 800dad0:	b003      	add	sp, #12
 800dad2:	bd30      	pop	{r4, r5, pc}
 800dad4:	24000804 	.word	0x24000804

0800dad8 <sbrk_aligned>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	4e0e      	ldr	r6, [pc, #56]	; (800db14 <sbrk_aligned+0x3c>)
 800dadc:	460c      	mov	r4, r1
 800dade:	6831      	ldr	r1, [r6, #0]
 800dae0:	4605      	mov	r5, r0
 800dae2:	b911      	cbnz	r1, 800daea <sbrk_aligned+0x12>
 800dae4:	f000 fb42 	bl	800e16c <_sbrk_r>
 800dae8:	6030      	str	r0, [r6, #0]
 800daea:	4621      	mov	r1, r4
 800daec:	4628      	mov	r0, r5
 800daee:	f000 fb3d 	bl	800e16c <_sbrk_r>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d00a      	beq.n	800db0c <sbrk_aligned+0x34>
 800daf6:	1cc4      	adds	r4, r0, #3
 800daf8:	f024 0403 	bic.w	r4, r4, #3
 800dafc:	42a0      	cmp	r0, r4
 800dafe:	d007      	beq.n	800db10 <sbrk_aligned+0x38>
 800db00:	1a21      	subs	r1, r4, r0
 800db02:	4628      	mov	r0, r5
 800db04:	f000 fb32 	bl	800e16c <_sbrk_r>
 800db08:	3001      	adds	r0, #1
 800db0a:	d101      	bne.n	800db10 <sbrk_aligned+0x38>
 800db0c:	f04f 34ff 	mov.w	r4, #4294967295
 800db10:	4620      	mov	r0, r4
 800db12:	bd70      	pop	{r4, r5, r6, pc}
 800db14:	24000808 	.word	0x24000808

0800db18 <_malloc_r>:
 800db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db1c:	1ccd      	adds	r5, r1, #3
 800db1e:	f025 0503 	bic.w	r5, r5, #3
 800db22:	3508      	adds	r5, #8
 800db24:	2d0c      	cmp	r5, #12
 800db26:	bf38      	it	cc
 800db28:	250c      	movcc	r5, #12
 800db2a:	2d00      	cmp	r5, #0
 800db2c:	4607      	mov	r7, r0
 800db2e:	db01      	blt.n	800db34 <_malloc_r+0x1c>
 800db30:	42a9      	cmp	r1, r5
 800db32:	d905      	bls.n	800db40 <_malloc_r+0x28>
 800db34:	230c      	movs	r3, #12
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	2600      	movs	r6, #0
 800db3a:	4630      	mov	r0, r6
 800db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db40:	4e2e      	ldr	r6, [pc, #184]	; (800dbfc <_malloc_r+0xe4>)
 800db42:	f000 fc19 	bl	800e378 <__malloc_lock>
 800db46:	6833      	ldr	r3, [r6, #0]
 800db48:	461c      	mov	r4, r3
 800db4a:	bb34      	cbnz	r4, 800db9a <_malloc_r+0x82>
 800db4c:	4629      	mov	r1, r5
 800db4e:	4638      	mov	r0, r7
 800db50:	f7ff ffc2 	bl	800dad8 <sbrk_aligned>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	4604      	mov	r4, r0
 800db58:	d14d      	bne.n	800dbf6 <_malloc_r+0xde>
 800db5a:	6834      	ldr	r4, [r6, #0]
 800db5c:	4626      	mov	r6, r4
 800db5e:	2e00      	cmp	r6, #0
 800db60:	d140      	bne.n	800dbe4 <_malloc_r+0xcc>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	4631      	mov	r1, r6
 800db66:	4638      	mov	r0, r7
 800db68:	eb04 0803 	add.w	r8, r4, r3
 800db6c:	f000 fafe 	bl	800e16c <_sbrk_r>
 800db70:	4580      	cmp	r8, r0
 800db72:	d13a      	bne.n	800dbea <_malloc_r+0xd2>
 800db74:	6821      	ldr	r1, [r4, #0]
 800db76:	3503      	adds	r5, #3
 800db78:	1a6d      	subs	r5, r5, r1
 800db7a:	f025 0503 	bic.w	r5, r5, #3
 800db7e:	3508      	adds	r5, #8
 800db80:	2d0c      	cmp	r5, #12
 800db82:	bf38      	it	cc
 800db84:	250c      	movcc	r5, #12
 800db86:	4629      	mov	r1, r5
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff ffa5 	bl	800dad8 <sbrk_aligned>
 800db8e:	3001      	adds	r0, #1
 800db90:	d02b      	beq.n	800dbea <_malloc_r+0xd2>
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	442b      	add	r3, r5
 800db96:	6023      	str	r3, [r4, #0]
 800db98:	e00e      	b.n	800dbb8 <_malloc_r+0xa0>
 800db9a:	6822      	ldr	r2, [r4, #0]
 800db9c:	1b52      	subs	r2, r2, r5
 800db9e:	d41e      	bmi.n	800dbde <_malloc_r+0xc6>
 800dba0:	2a0b      	cmp	r2, #11
 800dba2:	d916      	bls.n	800dbd2 <_malloc_r+0xba>
 800dba4:	1961      	adds	r1, r4, r5
 800dba6:	42a3      	cmp	r3, r4
 800dba8:	6025      	str	r5, [r4, #0]
 800dbaa:	bf18      	it	ne
 800dbac:	6059      	strne	r1, [r3, #4]
 800dbae:	6863      	ldr	r3, [r4, #4]
 800dbb0:	bf08      	it	eq
 800dbb2:	6031      	streq	r1, [r6, #0]
 800dbb4:	5162      	str	r2, [r4, r5]
 800dbb6:	604b      	str	r3, [r1, #4]
 800dbb8:	4638      	mov	r0, r7
 800dbba:	f104 060b 	add.w	r6, r4, #11
 800dbbe:	f000 fbe1 	bl	800e384 <__malloc_unlock>
 800dbc2:	f026 0607 	bic.w	r6, r6, #7
 800dbc6:	1d23      	adds	r3, r4, #4
 800dbc8:	1af2      	subs	r2, r6, r3
 800dbca:	d0b6      	beq.n	800db3a <_malloc_r+0x22>
 800dbcc:	1b9b      	subs	r3, r3, r6
 800dbce:	50a3      	str	r3, [r4, r2]
 800dbd0:	e7b3      	b.n	800db3a <_malloc_r+0x22>
 800dbd2:	6862      	ldr	r2, [r4, #4]
 800dbd4:	42a3      	cmp	r3, r4
 800dbd6:	bf0c      	ite	eq
 800dbd8:	6032      	streq	r2, [r6, #0]
 800dbda:	605a      	strne	r2, [r3, #4]
 800dbdc:	e7ec      	b.n	800dbb8 <_malloc_r+0xa0>
 800dbde:	4623      	mov	r3, r4
 800dbe0:	6864      	ldr	r4, [r4, #4]
 800dbe2:	e7b2      	b.n	800db4a <_malloc_r+0x32>
 800dbe4:	4634      	mov	r4, r6
 800dbe6:	6876      	ldr	r6, [r6, #4]
 800dbe8:	e7b9      	b.n	800db5e <_malloc_r+0x46>
 800dbea:	230c      	movs	r3, #12
 800dbec:	603b      	str	r3, [r7, #0]
 800dbee:	4638      	mov	r0, r7
 800dbf0:	f000 fbc8 	bl	800e384 <__malloc_unlock>
 800dbf4:	e7a1      	b.n	800db3a <_malloc_r+0x22>
 800dbf6:	6025      	str	r5, [r4, #0]
 800dbf8:	e7de      	b.n	800dbb8 <_malloc_r+0xa0>
 800dbfa:	bf00      	nop
 800dbfc:	24000804 	.word	0x24000804

0800dc00 <__ssputs_r>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	688e      	ldr	r6, [r1, #8]
 800dc06:	429e      	cmp	r6, r3
 800dc08:	4682      	mov	sl, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	461f      	mov	r7, r3
 800dc10:	d838      	bhi.n	800dc84 <__ssputs_r+0x84>
 800dc12:	898a      	ldrh	r2, [r1, #12]
 800dc14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc18:	d032      	beq.n	800dc80 <__ssputs_r+0x80>
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	6909      	ldr	r1, [r1, #16]
 800dc1e:	eba5 0901 	sub.w	r9, r5, r1
 800dc22:	6965      	ldr	r5, [r4, #20]
 800dc24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	444b      	add	r3, r9
 800dc30:	106d      	asrs	r5, r5, #1
 800dc32:	429d      	cmp	r5, r3
 800dc34:	bf38      	it	cc
 800dc36:	461d      	movcc	r5, r3
 800dc38:	0553      	lsls	r3, r2, #21
 800dc3a:	d531      	bpl.n	800dca0 <__ssputs_r+0xa0>
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7ff ff6b 	bl	800db18 <_malloc_r>
 800dc42:	4606      	mov	r6, r0
 800dc44:	b950      	cbnz	r0, 800dc5c <__ssputs_r+0x5c>
 800dc46:	230c      	movs	r3, #12
 800dc48:	f8ca 3000 	str.w	r3, [sl]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5c:	6921      	ldr	r1, [r4, #16]
 800dc5e:	464a      	mov	r2, r9
 800dc60:	f7fd fd34 	bl	800b6cc <memcpy>
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	6126      	str	r6, [r4, #16]
 800dc72:	6165      	str	r5, [r4, #20]
 800dc74:	444e      	add	r6, r9
 800dc76:	eba5 0509 	sub.w	r5, r5, r9
 800dc7a:	6026      	str	r6, [r4, #0]
 800dc7c:	60a5      	str	r5, [r4, #8]
 800dc7e:	463e      	mov	r6, r7
 800dc80:	42be      	cmp	r6, r7
 800dc82:	d900      	bls.n	800dc86 <__ssputs_r+0x86>
 800dc84:	463e      	mov	r6, r7
 800dc86:	6820      	ldr	r0, [r4, #0]
 800dc88:	4632      	mov	r2, r6
 800dc8a:	4641      	mov	r1, r8
 800dc8c:	f000 fb5a 	bl	800e344 <memmove>
 800dc90:	68a3      	ldr	r3, [r4, #8]
 800dc92:	1b9b      	subs	r3, r3, r6
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	4433      	add	r3, r6
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7db      	b.n	800dc58 <__ssputs_r+0x58>
 800dca0:	462a      	mov	r2, r5
 800dca2:	f000 fb75 	bl	800e390 <_realloc_r>
 800dca6:	4606      	mov	r6, r0
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d1e1      	bne.n	800dc70 <__ssputs_r+0x70>
 800dcac:	6921      	ldr	r1, [r4, #16]
 800dcae:	4650      	mov	r0, sl
 800dcb0:	f7ff fec6 	bl	800da40 <_free_r>
 800dcb4:	e7c7      	b.n	800dc46 <__ssputs_r+0x46>
	...

0800dcb8 <_svfiprintf_r>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	4698      	mov	r8, r3
 800dcbe:	898b      	ldrh	r3, [r1, #12]
 800dcc0:	061b      	lsls	r3, r3, #24
 800dcc2:	b09d      	sub	sp, #116	; 0x74
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	4614      	mov	r4, r2
 800dcca:	d50e      	bpl.n	800dcea <_svfiprintf_r+0x32>
 800dccc:	690b      	ldr	r3, [r1, #16]
 800dcce:	b963      	cbnz	r3, 800dcea <_svfiprintf_r+0x32>
 800dcd0:	2140      	movs	r1, #64	; 0x40
 800dcd2:	f7ff ff21 	bl	800db18 <_malloc_r>
 800dcd6:	6028      	str	r0, [r5, #0]
 800dcd8:	6128      	str	r0, [r5, #16]
 800dcda:	b920      	cbnz	r0, 800dce6 <_svfiprintf_r+0x2e>
 800dcdc:	230c      	movs	r3, #12
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	e0d1      	b.n	800de8a <_svfiprintf_r+0x1d2>
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	616b      	str	r3, [r5, #20]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9309      	str	r3, [sp, #36]	; 0x24
 800dcee:	2320      	movs	r3, #32
 800dcf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcf8:	2330      	movs	r3, #48	; 0x30
 800dcfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dea4 <_svfiprintf_r+0x1ec>
 800dcfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd02:	f04f 0901 	mov.w	r9, #1
 800dd06:	4623      	mov	r3, r4
 800dd08:	469a      	mov	sl, r3
 800dd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0e:	b10a      	cbz	r2, 800dd14 <_svfiprintf_r+0x5c>
 800dd10:	2a25      	cmp	r2, #37	; 0x25
 800dd12:	d1f9      	bne.n	800dd08 <_svfiprintf_r+0x50>
 800dd14:	ebba 0b04 	subs.w	fp, sl, r4
 800dd18:	d00b      	beq.n	800dd32 <_svfiprintf_r+0x7a>
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff ff6d 	bl	800dc00 <__ssputs_r>
 800dd26:	3001      	adds	r0, #1
 800dd28:	f000 80aa 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2e:	445a      	add	r2, fp
 800dd30:	9209      	str	r2, [sp, #36]	; 0x24
 800dd32:	f89a 3000 	ldrb.w	r3, [sl]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 80a2 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	f10a 0a01 	add.w	sl, sl, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	9307      	str	r3, [sp, #28]
 800dd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd52:	931a      	str	r3, [sp, #104]	; 0x68
 800dd54:	4654      	mov	r4, sl
 800dd56:	2205      	movs	r2, #5
 800dd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5c:	4851      	ldr	r0, [pc, #324]	; (800dea4 <_svfiprintf_r+0x1ec>)
 800dd5e:	f7f2 fac7 	bl	80002f0 <memchr>
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	b9d8      	cbnz	r0, 800dd9e <_svfiprintf_r+0xe6>
 800dd66:	06d0      	lsls	r0, r2, #27
 800dd68:	bf44      	itt	mi
 800dd6a:	2320      	movmi	r3, #32
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd70:	0711      	lsls	r1, r2, #28
 800dd72:	bf44      	itt	mi
 800dd74:	232b      	movmi	r3, #43	; 0x2b
 800dd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd80:	d015      	beq.n	800ddae <_svfiprintf_r+0xf6>
 800dd82:	9a07      	ldr	r2, [sp, #28]
 800dd84:	4654      	mov	r4, sl
 800dd86:	2000      	movs	r0, #0
 800dd88:	f04f 0c0a 	mov.w	ip, #10
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd92:	3b30      	subs	r3, #48	; 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d94e      	bls.n	800de36 <_svfiprintf_r+0x17e>
 800dd98:	b1b0      	cbz	r0, 800ddc8 <_svfiprintf_r+0x110>
 800dd9a:	9207      	str	r2, [sp, #28]
 800dd9c:	e014      	b.n	800ddc8 <_svfiprintf_r+0x110>
 800dd9e:	eba0 0308 	sub.w	r3, r0, r8
 800dda2:	fa09 f303 	lsl.w	r3, r9, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	46a2      	mov	sl, r4
 800ddac:	e7d2      	b.n	800dd54 <_svfiprintf_r+0x9c>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bfbb      	ittet	lt
 800ddba:	425b      	neglt	r3, r3
 800ddbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc0:	9307      	strge	r3, [sp, #28]
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfb8      	it	lt
 800ddc6:	9204      	strlt	r2, [sp, #16]
 800ddc8:	7823      	ldrb	r3, [r4, #0]
 800ddca:	2b2e      	cmp	r3, #46	; 0x2e
 800ddcc:	d10c      	bne.n	800dde8 <_svfiprintf_r+0x130>
 800ddce:	7863      	ldrb	r3, [r4, #1]
 800ddd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd2:	d135      	bne.n	800de40 <_svfiprintf_r+0x188>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	9203      	str	r2, [sp, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bfb8      	it	lt
 800dde0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde4:	3402      	adds	r4, #2
 800dde6:	9305      	str	r3, [sp, #20]
 800dde8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800deb4 <_svfiprintf_r+0x1fc>
 800ddec:	7821      	ldrb	r1, [r4, #0]
 800ddee:	2203      	movs	r2, #3
 800ddf0:	4650      	mov	r0, sl
 800ddf2:	f7f2 fa7d 	bl	80002f0 <memchr>
 800ddf6:	b140      	cbz	r0, 800de0a <_svfiprintf_r+0x152>
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	eba0 000a 	sub.w	r0, r0, sl
 800ddfe:	fa03 f000 	lsl.w	r0, r3, r0
 800de02:	9b04      	ldr	r3, [sp, #16]
 800de04:	4303      	orrs	r3, r0
 800de06:	3401      	adds	r4, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	4826      	ldr	r0, [pc, #152]	; (800dea8 <_svfiprintf_r+0x1f0>)
 800de10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de14:	2206      	movs	r2, #6
 800de16:	f7f2 fa6b 	bl	80002f0 <memchr>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d038      	beq.n	800de90 <_svfiprintf_r+0x1d8>
 800de1e:	4b23      	ldr	r3, [pc, #140]	; (800deac <_svfiprintf_r+0x1f4>)
 800de20:	bb1b      	cbnz	r3, 800de6a <_svfiprintf_r+0x1b2>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	3307      	adds	r3, #7
 800de26:	f023 0307 	bic.w	r3, r3, #7
 800de2a:	3308      	adds	r3, #8
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de30:	4433      	add	r3, r6
 800de32:	9309      	str	r3, [sp, #36]	; 0x24
 800de34:	e767      	b.n	800dd06 <_svfiprintf_r+0x4e>
 800de36:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3a:	460c      	mov	r4, r1
 800de3c:	2001      	movs	r0, #1
 800de3e:	e7a5      	b.n	800dd8c <_svfiprintf_r+0xd4>
 800de40:	2300      	movs	r3, #0
 800de42:	3401      	adds	r4, #1
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	4619      	mov	r1, r3
 800de48:	f04f 0c0a 	mov.w	ip, #10
 800de4c:	4620      	mov	r0, r4
 800de4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de52:	3a30      	subs	r2, #48	; 0x30
 800de54:	2a09      	cmp	r2, #9
 800de56:	d903      	bls.n	800de60 <_svfiprintf_r+0x1a8>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0c5      	beq.n	800dde8 <_svfiprintf_r+0x130>
 800de5c:	9105      	str	r1, [sp, #20]
 800de5e:	e7c3      	b.n	800dde8 <_svfiprintf_r+0x130>
 800de60:	fb0c 2101 	mla	r1, ip, r1, r2
 800de64:	4604      	mov	r4, r0
 800de66:	2301      	movs	r3, #1
 800de68:	e7f0      	b.n	800de4c <_svfiprintf_r+0x194>
 800de6a:	ab03      	add	r3, sp, #12
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	462a      	mov	r2, r5
 800de70:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <_svfiprintf_r+0x1f8>)
 800de72:	a904      	add	r1, sp, #16
 800de74:	4638      	mov	r0, r7
 800de76:	f7fd fccf 	bl	800b818 <_printf_float>
 800de7a:	1c42      	adds	r2, r0, #1
 800de7c:	4606      	mov	r6, r0
 800de7e:	d1d6      	bne.n	800de2e <_svfiprintf_r+0x176>
 800de80:	89ab      	ldrh	r3, [r5, #12]
 800de82:	065b      	lsls	r3, r3, #25
 800de84:	f53f af2c 	bmi.w	800dce0 <_svfiprintf_r+0x28>
 800de88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de8a:	b01d      	add	sp, #116	; 0x74
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	ab03      	add	r3, sp, #12
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	462a      	mov	r2, r5
 800de96:	4b06      	ldr	r3, [pc, #24]	; (800deb0 <_svfiprintf_r+0x1f8>)
 800de98:	a904      	add	r1, sp, #16
 800de9a:	4638      	mov	r0, r7
 800de9c:	f7fd ff48 	bl	800bd30 <_printf_i>
 800dea0:	e7eb      	b.n	800de7a <_svfiprintf_r+0x1c2>
 800dea2:	bf00      	nop
 800dea4:	0800f574 	.word	0x0800f574
 800dea8:	0800f57e 	.word	0x0800f57e
 800deac:	0800b819 	.word	0x0800b819
 800deb0:	0800dc01 	.word	0x0800dc01
 800deb4:	0800f57a 	.word	0x0800f57a

0800deb8 <__sfputc_r>:
 800deb8:	6893      	ldr	r3, [r2, #8]
 800deba:	3b01      	subs	r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	b410      	push	{r4}
 800dec0:	6093      	str	r3, [r2, #8]
 800dec2:	da08      	bge.n	800ded6 <__sfputc_r+0x1e>
 800dec4:	6994      	ldr	r4, [r2, #24]
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	db01      	blt.n	800dece <__sfputc_r+0x16>
 800deca:	290a      	cmp	r1, #10
 800decc:	d103      	bne.n	800ded6 <__sfputc_r+0x1e>
 800dece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded2:	f7fe b935 	b.w	800c140 <__swbuf_r>
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	1c58      	adds	r0, r3, #1
 800deda:	6010      	str	r0, [r2, #0]
 800dedc:	7019      	strb	r1, [r3, #0]
 800dede:	4608      	mov	r0, r1
 800dee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <__sfputs_r>:
 800dee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	4614      	mov	r4, r2
 800deee:	18d5      	adds	r5, r2, r3
 800def0:	42ac      	cmp	r4, r5
 800def2:	d101      	bne.n	800def8 <__sfputs_r+0x12>
 800def4:	2000      	movs	r0, #0
 800def6:	e007      	b.n	800df08 <__sfputs_r+0x22>
 800def8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800defc:	463a      	mov	r2, r7
 800defe:	4630      	mov	r0, r6
 800df00:	f7ff ffda 	bl	800deb8 <__sfputc_r>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d1f3      	bne.n	800def0 <__sfputs_r+0xa>
 800df08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df0c <_vfiprintf_r>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	b09d      	sub	sp, #116	; 0x74
 800df14:	4614      	mov	r4, r2
 800df16:	4698      	mov	r8, r3
 800df18:	4606      	mov	r6, r0
 800df1a:	b118      	cbz	r0, 800df24 <_vfiprintf_r+0x18>
 800df1c:	6983      	ldr	r3, [r0, #24]
 800df1e:	b90b      	cbnz	r3, 800df24 <_vfiprintf_r+0x18>
 800df20:	f7ff f8e2 	bl	800d0e8 <__sinit>
 800df24:	4b89      	ldr	r3, [pc, #548]	; (800e14c <_vfiprintf_r+0x240>)
 800df26:	429d      	cmp	r5, r3
 800df28:	d11b      	bne.n	800df62 <_vfiprintf_r+0x56>
 800df2a:	6875      	ldr	r5, [r6, #4]
 800df2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2e:	07d9      	lsls	r1, r3, #31
 800df30:	d405      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	059a      	lsls	r2, r3, #22
 800df36:	d402      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df3a:	f7ff f978 	bl	800d22e <__retarget_lock_acquire_recursive>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	071b      	lsls	r3, r3, #28
 800df42:	d501      	bpl.n	800df48 <_vfiprintf_r+0x3c>
 800df44:	692b      	ldr	r3, [r5, #16]
 800df46:	b9eb      	cbnz	r3, 800df84 <_vfiprintf_r+0x78>
 800df48:	4629      	mov	r1, r5
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7fe f94a 	bl	800c1e4 <__swsetup_r>
 800df50:	b1c0      	cbz	r0, 800df84 <_vfiprintf_r+0x78>
 800df52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df54:	07dc      	lsls	r4, r3, #31
 800df56:	d50e      	bpl.n	800df76 <_vfiprintf_r+0x6a>
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	b01d      	add	sp, #116	; 0x74
 800df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df62:	4b7b      	ldr	r3, [pc, #492]	; (800e150 <_vfiprintf_r+0x244>)
 800df64:	429d      	cmp	r5, r3
 800df66:	d101      	bne.n	800df6c <_vfiprintf_r+0x60>
 800df68:	68b5      	ldr	r5, [r6, #8]
 800df6a:	e7df      	b.n	800df2c <_vfiprintf_r+0x20>
 800df6c:	4b79      	ldr	r3, [pc, #484]	; (800e154 <_vfiprintf_r+0x248>)
 800df6e:	429d      	cmp	r5, r3
 800df70:	bf08      	it	eq
 800df72:	68f5      	ldreq	r5, [r6, #12]
 800df74:	e7da      	b.n	800df2c <_vfiprintf_r+0x20>
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	0598      	lsls	r0, r3, #22
 800df7a:	d4ed      	bmi.n	800df58 <_vfiprintf_r+0x4c>
 800df7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df7e:	f7ff f957 	bl	800d230 <__retarget_lock_release_recursive>
 800df82:	e7e9      	b.n	800df58 <_vfiprintf_r+0x4c>
 800df84:	2300      	movs	r3, #0
 800df86:	9309      	str	r3, [sp, #36]	; 0x24
 800df88:	2320      	movs	r3, #32
 800df8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800df92:	2330      	movs	r3, #48	; 0x30
 800df94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e158 <_vfiprintf_r+0x24c>
 800df98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df9c:	f04f 0901 	mov.w	r9, #1
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	469a      	mov	sl, r3
 800dfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa8:	b10a      	cbz	r2, 800dfae <_vfiprintf_r+0xa2>
 800dfaa:	2a25      	cmp	r2, #37	; 0x25
 800dfac:	d1f9      	bne.n	800dfa2 <_vfiprintf_r+0x96>
 800dfae:	ebba 0b04 	subs.w	fp, sl, r4
 800dfb2:	d00b      	beq.n	800dfcc <_vfiprintf_r+0xc0>
 800dfb4:	465b      	mov	r3, fp
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7ff ff93 	bl	800dee6 <__sfputs_r>
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	f000 80aa 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfc8:	445a      	add	r2, fp
 800dfca:	9209      	str	r2, [sp, #36]	; 0x24
 800dfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 80a2 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfe0:	f10a 0a01 	add.w	sl, sl, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfec:	931a      	str	r3, [sp, #104]	; 0x68
 800dfee:	4654      	mov	r4, sl
 800dff0:	2205      	movs	r2, #5
 800dff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff6:	4858      	ldr	r0, [pc, #352]	; (800e158 <_vfiprintf_r+0x24c>)
 800dff8:	f7f2 f97a 	bl	80002f0 <memchr>
 800dffc:	9a04      	ldr	r2, [sp, #16]
 800dffe:	b9d8      	cbnz	r0, 800e038 <_vfiprintf_r+0x12c>
 800e000:	06d1      	lsls	r1, r2, #27
 800e002:	bf44      	itt	mi
 800e004:	2320      	movmi	r3, #32
 800e006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e00a:	0713      	lsls	r3, r2, #28
 800e00c:	bf44      	itt	mi
 800e00e:	232b      	movmi	r3, #43	; 0x2b
 800e010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e014:	f89a 3000 	ldrb.w	r3, [sl]
 800e018:	2b2a      	cmp	r3, #42	; 0x2a
 800e01a:	d015      	beq.n	800e048 <_vfiprintf_r+0x13c>
 800e01c:	9a07      	ldr	r2, [sp, #28]
 800e01e:	4654      	mov	r4, sl
 800e020:	2000      	movs	r0, #0
 800e022:	f04f 0c0a 	mov.w	ip, #10
 800e026:	4621      	mov	r1, r4
 800e028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e02c:	3b30      	subs	r3, #48	; 0x30
 800e02e:	2b09      	cmp	r3, #9
 800e030:	d94e      	bls.n	800e0d0 <_vfiprintf_r+0x1c4>
 800e032:	b1b0      	cbz	r0, 800e062 <_vfiprintf_r+0x156>
 800e034:	9207      	str	r2, [sp, #28]
 800e036:	e014      	b.n	800e062 <_vfiprintf_r+0x156>
 800e038:	eba0 0308 	sub.w	r3, r0, r8
 800e03c:	fa09 f303 	lsl.w	r3, r9, r3
 800e040:	4313      	orrs	r3, r2
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	46a2      	mov	sl, r4
 800e046:	e7d2      	b.n	800dfee <_vfiprintf_r+0xe2>
 800e048:	9b03      	ldr	r3, [sp, #12]
 800e04a:	1d19      	adds	r1, r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	9103      	str	r1, [sp, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	bfbb      	ittet	lt
 800e054:	425b      	neglt	r3, r3
 800e056:	f042 0202 	orrlt.w	r2, r2, #2
 800e05a:	9307      	strge	r3, [sp, #28]
 800e05c:	9307      	strlt	r3, [sp, #28]
 800e05e:	bfb8      	it	lt
 800e060:	9204      	strlt	r2, [sp, #16]
 800e062:	7823      	ldrb	r3, [r4, #0]
 800e064:	2b2e      	cmp	r3, #46	; 0x2e
 800e066:	d10c      	bne.n	800e082 <_vfiprintf_r+0x176>
 800e068:	7863      	ldrb	r3, [r4, #1]
 800e06a:	2b2a      	cmp	r3, #42	; 0x2a
 800e06c:	d135      	bne.n	800e0da <_vfiprintf_r+0x1ce>
 800e06e:	9b03      	ldr	r3, [sp, #12]
 800e070:	1d1a      	adds	r2, r3, #4
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	9203      	str	r2, [sp, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfb8      	it	lt
 800e07a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e07e:	3402      	adds	r4, #2
 800e080:	9305      	str	r3, [sp, #20]
 800e082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e168 <_vfiprintf_r+0x25c>
 800e086:	7821      	ldrb	r1, [r4, #0]
 800e088:	2203      	movs	r2, #3
 800e08a:	4650      	mov	r0, sl
 800e08c:	f7f2 f930 	bl	80002f0 <memchr>
 800e090:	b140      	cbz	r0, 800e0a4 <_vfiprintf_r+0x198>
 800e092:	2340      	movs	r3, #64	; 0x40
 800e094:	eba0 000a 	sub.w	r0, r0, sl
 800e098:	fa03 f000 	lsl.w	r0, r3, r0
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	4303      	orrs	r3, r0
 800e0a0:	3401      	adds	r4, #1
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a8:	482c      	ldr	r0, [pc, #176]	; (800e15c <_vfiprintf_r+0x250>)
 800e0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ae:	2206      	movs	r2, #6
 800e0b0:	f7f2 f91e 	bl	80002f0 <memchr>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d03f      	beq.n	800e138 <_vfiprintf_r+0x22c>
 800e0b8:	4b29      	ldr	r3, [pc, #164]	; (800e160 <_vfiprintf_r+0x254>)
 800e0ba:	bb1b      	cbnz	r3, 800e104 <_vfiprintf_r+0x1f8>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	3307      	adds	r3, #7
 800e0c0:	f023 0307 	bic.w	r3, r3, #7
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	9303      	str	r3, [sp, #12]
 800e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ca:	443b      	add	r3, r7
 800e0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ce:	e767      	b.n	800dfa0 <_vfiprintf_r+0x94>
 800e0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0d4:	460c      	mov	r4, r1
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	e7a5      	b.n	800e026 <_vfiprintf_r+0x11a>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	3401      	adds	r4, #1
 800e0de:	9305      	str	r3, [sp, #20]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	f04f 0c0a 	mov.w	ip, #10
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ec:	3a30      	subs	r2, #48	; 0x30
 800e0ee:	2a09      	cmp	r2, #9
 800e0f0:	d903      	bls.n	800e0fa <_vfiprintf_r+0x1ee>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d0c5      	beq.n	800e082 <_vfiprintf_r+0x176>
 800e0f6:	9105      	str	r1, [sp, #20]
 800e0f8:	e7c3      	b.n	800e082 <_vfiprintf_r+0x176>
 800e0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0fe:	4604      	mov	r4, r0
 800e100:	2301      	movs	r3, #1
 800e102:	e7f0      	b.n	800e0e6 <_vfiprintf_r+0x1da>
 800e104:	ab03      	add	r3, sp, #12
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	462a      	mov	r2, r5
 800e10a:	4b16      	ldr	r3, [pc, #88]	; (800e164 <_vfiprintf_r+0x258>)
 800e10c:	a904      	add	r1, sp, #16
 800e10e:	4630      	mov	r0, r6
 800e110:	f7fd fb82 	bl	800b818 <_printf_float>
 800e114:	4607      	mov	r7, r0
 800e116:	1c78      	adds	r0, r7, #1
 800e118:	d1d6      	bne.n	800e0c8 <_vfiprintf_r+0x1bc>
 800e11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e11c:	07d9      	lsls	r1, r3, #31
 800e11e:	d405      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e120:	89ab      	ldrh	r3, [r5, #12]
 800e122:	059a      	lsls	r2, r3, #22
 800e124:	d402      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e128:	f7ff f882 	bl	800d230 <__retarget_lock_release_recursive>
 800e12c:	89ab      	ldrh	r3, [r5, #12]
 800e12e:	065b      	lsls	r3, r3, #25
 800e130:	f53f af12 	bmi.w	800df58 <_vfiprintf_r+0x4c>
 800e134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e136:	e711      	b.n	800df5c <_vfiprintf_r+0x50>
 800e138:	ab03      	add	r3, sp, #12
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	462a      	mov	r2, r5
 800e13e:	4b09      	ldr	r3, [pc, #36]	; (800e164 <_vfiprintf_r+0x258>)
 800e140:	a904      	add	r1, sp, #16
 800e142:	4630      	mov	r0, r6
 800e144:	f7fd fdf4 	bl	800bd30 <_printf_i>
 800e148:	e7e4      	b.n	800e114 <_vfiprintf_r+0x208>
 800e14a:	bf00      	nop
 800e14c:	0800f3dc 	.word	0x0800f3dc
 800e150:	0800f3fc 	.word	0x0800f3fc
 800e154:	0800f3bc 	.word	0x0800f3bc
 800e158:	0800f574 	.word	0x0800f574
 800e15c:	0800f57e 	.word	0x0800f57e
 800e160:	0800b819 	.word	0x0800b819
 800e164:	0800dee7 	.word	0x0800dee7
 800e168:	0800f57a 	.word	0x0800f57a

0800e16c <_sbrk_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d06      	ldr	r5, [pc, #24]	; (800e188 <_sbrk_r+0x1c>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	f7f5 fbea 	bl	8003950 <_sbrk>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_sbrk_r+0x1a>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_sbrk_r+0x1a>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	2400080c 	.word	0x2400080c

0800e18c <__sread>:
 800e18c:	b510      	push	{r4, lr}
 800e18e:	460c      	mov	r4, r1
 800e190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e194:	f000 f92c 	bl	800e3f0 <_read_r>
 800e198:	2800      	cmp	r0, #0
 800e19a:	bfab      	itete	ge
 800e19c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e19e:	89a3      	ldrhlt	r3, [r4, #12]
 800e1a0:	181b      	addge	r3, r3, r0
 800e1a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1a6:	bfac      	ite	ge
 800e1a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1aa:	81a3      	strhlt	r3, [r4, #12]
 800e1ac:	bd10      	pop	{r4, pc}

0800e1ae <__swrite>:
 800e1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b2:	461f      	mov	r7, r3
 800e1b4:	898b      	ldrh	r3, [r1, #12]
 800e1b6:	05db      	lsls	r3, r3, #23
 800e1b8:	4605      	mov	r5, r0
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	4616      	mov	r6, r2
 800e1be:	d505      	bpl.n	800e1cc <__swrite+0x1e>
 800e1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f000 f898 	bl	800e2fc <_lseek_r>
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	4632      	mov	r2, r6
 800e1da:	463b      	mov	r3, r7
 800e1dc:	4628      	mov	r0, r5
 800e1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e2:	f000 b817 	b.w	800e214 <_write_r>

0800e1e6 <__sseek>:
 800e1e6:	b510      	push	{r4, lr}
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ee:	f000 f885 	bl	800e2fc <_lseek_r>
 800e1f2:	1c43      	adds	r3, r0, #1
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	bf15      	itete	ne
 800e1f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e202:	81a3      	strheq	r3, [r4, #12]
 800e204:	bf18      	it	ne
 800e206:	81a3      	strhne	r3, [r4, #12]
 800e208:	bd10      	pop	{r4, pc}

0800e20a <__sclose>:
 800e20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e20e:	f000 b831 	b.w	800e274 <_close_r>
	...

0800e214 <_write_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4d07      	ldr	r5, [pc, #28]	; (800e234 <_write_r+0x20>)
 800e218:	4604      	mov	r4, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	602a      	str	r2, [r5, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f7f5 fb43 	bl	80038ae <_write>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d102      	bne.n	800e232 <_write_r+0x1e>
 800e22c:	682b      	ldr	r3, [r5, #0]
 800e22e:	b103      	cbz	r3, 800e232 <_write_r+0x1e>
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	bd38      	pop	{r3, r4, r5, pc}
 800e234:	2400080c 	.word	0x2400080c

0800e238 <__assert_func>:
 800e238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e23a:	4614      	mov	r4, r2
 800e23c:	461a      	mov	r2, r3
 800e23e:	4b09      	ldr	r3, [pc, #36]	; (800e264 <__assert_func+0x2c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4605      	mov	r5, r0
 800e244:	68d8      	ldr	r0, [r3, #12]
 800e246:	b14c      	cbz	r4, 800e25c <__assert_func+0x24>
 800e248:	4b07      	ldr	r3, [pc, #28]	; (800e268 <__assert_func+0x30>)
 800e24a:	9100      	str	r1, [sp, #0]
 800e24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e250:	4906      	ldr	r1, [pc, #24]	; (800e26c <__assert_func+0x34>)
 800e252:	462b      	mov	r3, r5
 800e254:	f000 f81e 	bl	800e294 <fiprintf>
 800e258:	f000 f8e9 	bl	800e42e <abort>
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <__assert_func+0x38>)
 800e25e:	461c      	mov	r4, r3
 800e260:	e7f3      	b.n	800e24a <__assert_func+0x12>
 800e262:	bf00      	nop
 800e264:	24000058 	.word	0x24000058
 800e268:	0800f585 	.word	0x0800f585
 800e26c:	0800f592 	.word	0x0800f592
 800e270:	0800f5c0 	.word	0x0800f5c0

0800e274 <_close_r>:
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4d06      	ldr	r5, [pc, #24]	; (800e290 <_close_r+0x1c>)
 800e278:	2300      	movs	r3, #0
 800e27a:	4604      	mov	r4, r0
 800e27c:	4608      	mov	r0, r1
 800e27e:	602b      	str	r3, [r5, #0]
 800e280:	f7f5 fb31 	bl	80038e6 <_close>
 800e284:	1c43      	adds	r3, r0, #1
 800e286:	d102      	bne.n	800e28e <_close_r+0x1a>
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	b103      	cbz	r3, 800e28e <_close_r+0x1a>
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	bd38      	pop	{r3, r4, r5, pc}
 800e290:	2400080c 	.word	0x2400080c

0800e294 <fiprintf>:
 800e294:	b40e      	push	{r1, r2, r3}
 800e296:	b503      	push	{r0, r1, lr}
 800e298:	4601      	mov	r1, r0
 800e29a:	ab03      	add	r3, sp, #12
 800e29c:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <fiprintf+0x20>)
 800e29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2a2:	6800      	ldr	r0, [r0, #0]
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	f7ff fe31 	bl	800df0c <_vfiprintf_r>
 800e2aa:	b002      	add	sp, #8
 800e2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2b0:	b003      	add	sp, #12
 800e2b2:	4770      	bx	lr
 800e2b4:	24000058 	.word	0x24000058

0800e2b8 <_fstat_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d07      	ldr	r5, [pc, #28]	; (800e2d8 <_fstat_r+0x20>)
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	602b      	str	r3, [r5, #0]
 800e2c6:	f7f5 fb1a 	bl	80038fe <_fstat>
 800e2ca:	1c43      	adds	r3, r0, #1
 800e2cc:	d102      	bne.n	800e2d4 <_fstat_r+0x1c>
 800e2ce:	682b      	ldr	r3, [r5, #0]
 800e2d0:	b103      	cbz	r3, 800e2d4 <_fstat_r+0x1c>
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	bd38      	pop	{r3, r4, r5, pc}
 800e2d6:	bf00      	nop
 800e2d8:	2400080c 	.word	0x2400080c

0800e2dc <_isatty_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d06      	ldr	r5, [pc, #24]	; (800e2f8 <_isatty_r+0x1c>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	602b      	str	r3, [r5, #0]
 800e2e8:	f7f5 fb19 	bl	800391e <_isatty>
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	d102      	bne.n	800e2f6 <_isatty_r+0x1a>
 800e2f0:	682b      	ldr	r3, [r5, #0]
 800e2f2:	b103      	cbz	r3, 800e2f6 <_isatty_r+0x1a>
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	2400080c 	.word	0x2400080c

0800e2fc <_lseek_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4d07      	ldr	r5, [pc, #28]	; (800e31c <_lseek_r+0x20>)
 800e300:	4604      	mov	r4, r0
 800e302:	4608      	mov	r0, r1
 800e304:	4611      	mov	r1, r2
 800e306:	2200      	movs	r2, #0
 800e308:	602a      	str	r2, [r5, #0]
 800e30a:	461a      	mov	r2, r3
 800e30c:	f7f5 fb12 	bl	8003934 <_lseek>
 800e310:	1c43      	adds	r3, r0, #1
 800e312:	d102      	bne.n	800e31a <_lseek_r+0x1e>
 800e314:	682b      	ldr	r3, [r5, #0]
 800e316:	b103      	cbz	r3, 800e31a <_lseek_r+0x1e>
 800e318:	6023      	str	r3, [r4, #0]
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
 800e31c:	2400080c 	.word	0x2400080c

0800e320 <__ascii_mbtowc>:
 800e320:	b082      	sub	sp, #8
 800e322:	b901      	cbnz	r1, 800e326 <__ascii_mbtowc+0x6>
 800e324:	a901      	add	r1, sp, #4
 800e326:	b142      	cbz	r2, 800e33a <__ascii_mbtowc+0x1a>
 800e328:	b14b      	cbz	r3, 800e33e <__ascii_mbtowc+0x1e>
 800e32a:	7813      	ldrb	r3, [r2, #0]
 800e32c:	600b      	str	r3, [r1, #0]
 800e32e:	7812      	ldrb	r2, [r2, #0]
 800e330:	1e10      	subs	r0, r2, #0
 800e332:	bf18      	it	ne
 800e334:	2001      	movne	r0, #1
 800e336:	b002      	add	sp, #8
 800e338:	4770      	bx	lr
 800e33a:	4610      	mov	r0, r2
 800e33c:	e7fb      	b.n	800e336 <__ascii_mbtowc+0x16>
 800e33e:	f06f 0001 	mvn.w	r0, #1
 800e342:	e7f8      	b.n	800e336 <__ascii_mbtowc+0x16>

0800e344 <memmove>:
 800e344:	4288      	cmp	r0, r1
 800e346:	b510      	push	{r4, lr}
 800e348:	eb01 0402 	add.w	r4, r1, r2
 800e34c:	d902      	bls.n	800e354 <memmove+0x10>
 800e34e:	4284      	cmp	r4, r0
 800e350:	4623      	mov	r3, r4
 800e352:	d807      	bhi.n	800e364 <memmove+0x20>
 800e354:	1e43      	subs	r3, r0, #1
 800e356:	42a1      	cmp	r1, r4
 800e358:	d008      	beq.n	800e36c <memmove+0x28>
 800e35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e362:	e7f8      	b.n	800e356 <memmove+0x12>
 800e364:	4402      	add	r2, r0
 800e366:	4601      	mov	r1, r0
 800e368:	428a      	cmp	r2, r1
 800e36a:	d100      	bne.n	800e36e <memmove+0x2a>
 800e36c:	bd10      	pop	{r4, pc}
 800e36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e376:	e7f7      	b.n	800e368 <memmove+0x24>

0800e378 <__malloc_lock>:
 800e378:	4801      	ldr	r0, [pc, #4]	; (800e380 <__malloc_lock+0x8>)
 800e37a:	f7fe bf58 	b.w	800d22e <__retarget_lock_acquire_recursive>
 800e37e:	bf00      	nop
 800e380:	24000800 	.word	0x24000800

0800e384 <__malloc_unlock>:
 800e384:	4801      	ldr	r0, [pc, #4]	; (800e38c <__malloc_unlock+0x8>)
 800e386:	f7fe bf53 	b.w	800d230 <__retarget_lock_release_recursive>
 800e38a:	bf00      	nop
 800e38c:	24000800 	.word	0x24000800

0800e390 <_realloc_r>:
 800e390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e394:	4680      	mov	r8, r0
 800e396:	4614      	mov	r4, r2
 800e398:	460e      	mov	r6, r1
 800e39a:	b921      	cbnz	r1, 800e3a6 <_realloc_r+0x16>
 800e39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	f7ff bbb9 	b.w	800db18 <_malloc_r>
 800e3a6:	b92a      	cbnz	r2, 800e3b4 <_realloc_r+0x24>
 800e3a8:	f7ff fb4a 	bl	800da40 <_free_r>
 800e3ac:	4625      	mov	r5, r4
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b4:	f000 f842 	bl	800e43c <_malloc_usable_size_r>
 800e3b8:	4284      	cmp	r4, r0
 800e3ba:	4607      	mov	r7, r0
 800e3bc:	d802      	bhi.n	800e3c4 <_realloc_r+0x34>
 800e3be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3c2:	d812      	bhi.n	800e3ea <_realloc_r+0x5a>
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	f7ff fba6 	bl	800db18 <_malloc_r>
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0ed      	beq.n	800e3ae <_realloc_r+0x1e>
 800e3d2:	42bc      	cmp	r4, r7
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	bf28      	it	cs
 800e3da:	463a      	movcs	r2, r7
 800e3dc:	f7fd f976 	bl	800b6cc <memcpy>
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	f7ff fb2c 	bl	800da40 <_free_r>
 800e3e8:	e7e1      	b.n	800e3ae <_realloc_r+0x1e>
 800e3ea:	4635      	mov	r5, r6
 800e3ec:	e7df      	b.n	800e3ae <_realloc_r+0x1e>
	...

0800e3f0 <_read_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4d07      	ldr	r5, [pc, #28]	; (800e410 <_read_r+0x20>)
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	4608      	mov	r0, r1
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	602a      	str	r2, [r5, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	f7f5 fa38 	bl	8003874 <_read>
 800e404:	1c43      	adds	r3, r0, #1
 800e406:	d102      	bne.n	800e40e <_read_r+0x1e>
 800e408:	682b      	ldr	r3, [r5, #0]
 800e40a:	b103      	cbz	r3, 800e40e <_read_r+0x1e>
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	2400080c 	.word	0x2400080c

0800e414 <__ascii_wctomb>:
 800e414:	b149      	cbz	r1, 800e42a <__ascii_wctomb+0x16>
 800e416:	2aff      	cmp	r2, #255	; 0xff
 800e418:	bf85      	ittet	hi
 800e41a:	238a      	movhi	r3, #138	; 0x8a
 800e41c:	6003      	strhi	r3, [r0, #0]
 800e41e:	700a      	strbls	r2, [r1, #0]
 800e420:	f04f 30ff 	movhi.w	r0, #4294967295
 800e424:	bf98      	it	ls
 800e426:	2001      	movls	r0, #1
 800e428:	4770      	bx	lr
 800e42a:	4608      	mov	r0, r1
 800e42c:	4770      	bx	lr

0800e42e <abort>:
 800e42e:	b508      	push	{r3, lr}
 800e430:	2006      	movs	r0, #6
 800e432:	f000 f833 	bl	800e49c <raise>
 800e436:	2001      	movs	r0, #1
 800e438:	f7f5 fa12 	bl	8003860 <_exit>

0800e43c <_malloc_usable_size_r>:
 800e43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e440:	1f18      	subs	r0, r3, #4
 800e442:	2b00      	cmp	r3, #0
 800e444:	bfbc      	itt	lt
 800e446:	580b      	ldrlt	r3, [r1, r0]
 800e448:	18c0      	addlt	r0, r0, r3
 800e44a:	4770      	bx	lr

0800e44c <_raise_r>:
 800e44c:	291f      	cmp	r1, #31
 800e44e:	b538      	push	{r3, r4, r5, lr}
 800e450:	4604      	mov	r4, r0
 800e452:	460d      	mov	r5, r1
 800e454:	d904      	bls.n	800e460 <_raise_r+0x14>
 800e456:	2316      	movs	r3, #22
 800e458:	6003      	str	r3, [r0, #0]
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e462:	b112      	cbz	r2, 800e46a <_raise_r+0x1e>
 800e464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e468:	b94b      	cbnz	r3, 800e47e <_raise_r+0x32>
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 f830 	bl	800e4d0 <_getpid_r>
 800e470:	462a      	mov	r2, r5
 800e472:	4601      	mov	r1, r0
 800e474:	4620      	mov	r0, r4
 800e476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e47a:	f000 b817 	b.w	800e4ac <_kill_r>
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d00a      	beq.n	800e498 <_raise_r+0x4c>
 800e482:	1c59      	adds	r1, r3, #1
 800e484:	d103      	bne.n	800e48e <_raise_r+0x42>
 800e486:	2316      	movs	r3, #22
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	2001      	movs	r0, #1
 800e48c:	e7e7      	b.n	800e45e <_raise_r+0x12>
 800e48e:	2400      	movs	r4, #0
 800e490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e494:	4628      	mov	r0, r5
 800e496:	4798      	blx	r3
 800e498:	2000      	movs	r0, #0
 800e49a:	e7e0      	b.n	800e45e <_raise_r+0x12>

0800e49c <raise>:
 800e49c:	4b02      	ldr	r3, [pc, #8]	; (800e4a8 <raise+0xc>)
 800e49e:	4601      	mov	r1, r0
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	f7ff bfd3 	b.w	800e44c <_raise_r>
 800e4a6:	bf00      	nop
 800e4a8:	24000058 	.word	0x24000058

0800e4ac <_kill_r>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	4d07      	ldr	r5, [pc, #28]	; (800e4cc <_kill_r+0x20>)
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	602b      	str	r3, [r5, #0]
 800e4ba:	f7f5 f9c1 	bl	8003840 <_kill>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	d102      	bne.n	800e4c8 <_kill_r+0x1c>
 800e4c2:	682b      	ldr	r3, [r5, #0]
 800e4c4:	b103      	cbz	r3, 800e4c8 <_kill_r+0x1c>
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ca:	bf00      	nop
 800e4cc:	2400080c 	.word	0x2400080c

0800e4d0 <_getpid_r>:
 800e4d0:	f7f5 b9ae 	b.w	8003830 <_getpid>

0800e4d4 <checkint>:
 800e4d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4d8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	b570      	push	{r4, r5, r6, lr}
 800e4e0:	dd2a      	ble.n	800e538 <checkint+0x64>
 800e4e2:	f240 4333 	movw	r3, #1075	; 0x433
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	dc24      	bgt.n	800e534 <checkint+0x60>
 800e4ea:	1a9b      	subs	r3, r3, r2
 800e4ec:	f1a3 0620 	sub.w	r6, r3, #32
 800e4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f4:	fa02 f403 	lsl.w	r4, r2, r3
 800e4f8:	fa02 f606 	lsl.w	r6, r2, r6
 800e4fc:	f1c3 0520 	rsb	r5, r3, #32
 800e500:	fa22 f505 	lsr.w	r5, r2, r5
 800e504:	4334      	orrs	r4, r6
 800e506:	432c      	orrs	r4, r5
 800e508:	409a      	lsls	r2, r3
 800e50a:	ea20 0202 	bic.w	r2, r0, r2
 800e50e:	ea21 0404 	bic.w	r4, r1, r4
 800e512:	4322      	orrs	r2, r4
 800e514:	f1a3 0420 	sub.w	r4, r3, #32
 800e518:	f1c3 0220 	rsb	r2, r3, #32
 800e51c:	d10c      	bne.n	800e538 <checkint+0x64>
 800e51e:	40d8      	lsrs	r0, r3
 800e520:	fa01 f302 	lsl.w	r3, r1, r2
 800e524:	4318      	orrs	r0, r3
 800e526:	40e1      	lsrs	r1, r4
 800e528:	4308      	orrs	r0, r1
 800e52a:	f000 0001 	and.w	r0, r0, #1
 800e52e:	f1d0 0002 	rsbs	r0, r0, #2
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	2002      	movs	r0, #2
 800e536:	e7fc      	b.n	800e532 <checkint+0x5e>
 800e538:	2000      	movs	r0, #0
 800e53a:	e7fa      	b.n	800e532 <checkint+0x5e>
 800e53c:	0000      	movs	r0, r0
	...

0800e540 <pow>:
 800e540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e544:	ee10 4a90 	vmov	r4, s1
 800e548:	ed2d 8b0a 	vpush	{d8-d12}
 800e54c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800e550:	ee11 7a90 	vmov	r7, s3
 800e554:	f10a 32ff 	add.w	r2, sl, #4294967295
 800e558:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800e55c:	429a      	cmp	r2, r3
 800e55e:	ee10 6a10 	vmov	r6, s0
 800e562:	ee11 0a10 	vmov	r0, s2
 800e566:	b086      	sub	sp, #24
 800e568:	46d4      	mov	ip, sl
 800e56a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800e56e:	d806      	bhi.n	800e57e <pow+0x3e>
 800e570:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800e574:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800e578:	2b7f      	cmp	r3, #127	; 0x7f
 800e57a:	f240 8156 	bls.w	800e82a <pow+0x2ea>
 800e57e:	1802      	adds	r2, r0, r0
 800e580:	eb47 0107 	adc.w	r1, r7, r7
 800e584:	f06f 0e01 	mvn.w	lr, #1
 800e588:	f112 39ff 	adds.w	r9, r2, #4294967295
 800e58c:	f141 38ff 	adc.w	r8, r1, #4294967295
 800e590:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800e594:	45ce      	cmp	lr, r9
 800e596:	eb73 0808 	sbcs.w	r8, r3, r8
 800e59a:	d23f      	bcs.n	800e61c <pow+0xdc>
 800e59c:	ea52 0301 	orrs.w	r3, r2, r1
 800e5a0:	f04f 0300 	mov.w	r3, #0
 800e5a4:	d10c      	bne.n	800e5c0 <pow+0x80>
 800e5a6:	19b6      	adds	r6, r6, r6
 800e5a8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800e5ac:	4164      	adcs	r4, r4
 800e5ae:	42b3      	cmp	r3, r6
 800e5b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e5b4:	41a3      	sbcs	r3, r4
 800e5b6:	f0c0 808c 	bcc.w	800e6d2 <pow+0x192>
 800e5ba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e5be:	e028      	b.n	800e612 <pow+0xd2>
 800e5c0:	4da3      	ldr	r5, [pc, #652]	; (800e850 <pow+0x310>)
 800e5c2:	42ac      	cmp	r4, r5
 800e5c4:	bf08      	it	eq
 800e5c6:	429e      	cmpeq	r6, r3
 800e5c8:	d107      	bne.n	800e5da <pow+0x9a>
 800e5ca:	1800      	adds	r0, r0, r0
 800e5cc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800e5d0:	417f      	adcs	r7, r7
 800e5d2:	4283      	cmp	r3, r0
 800e5d4:	4b9f      	ldr	r3, [pc, #636]	; (800e854 <pow+0x314>)
 800e5d6:	41bb      	sbcs	r3, r7
 800e5d8:	e7ed      	b.n	800e5b6 <pow+0x76>
 800e5da:	19b6      	adds	r6, r6, r6
 800e5dc:	489e      	ldr	r0, [pc, #632]	; (800e858 <pow+0x318>)
 800e5de:	4164      	adcs	r4, r4
 800e5e0:	42b3      	cmp	r3, r6
 800e5e2:	eb70 0504 	sbcs.w	r5, r0, r4
 800e5e6:	d374      	bcc.n	800e6d2 <pow+0x192>
 800e5e8:	4281      	cmp	r1, r0
 800e5ea:	bf08      	it	eq
 800e5ec:	429a      	cmpeq	r2, r3
 800e5ee:	d170      	bne.n	800e6d2 <pow+0x192>
 800e5f0:	4a9a      	ldr	r2, [pc, #616]	; (800e85c <pow+0x31c>)
 800e5f2:	4294      	cmp	r4, r2
 800e5f4:	bf08      	it	eq
 800e5f6:	429e      	cmpeq	r6, r3
 800e5f8:	d0df      	beq.n	800e5ba <pow+0x7a>
 800e5fa:	4294      	cmp	r4, r2
 800e5fc:	ea6f 0707 	mvn.w	r7, r7
 800e600:	bf34      	ite	cc
 800e602:	2400      	movcc	r4, #0
 800e604:	2401      	movcs	r4, #1
 800e606:	0fff      	lsrs	r7, r7, #31
 800e608:	42bc      	cmp	r4, r7
 800e60a:	f040 81d9 	bne.w	800e9c0 <pow+0x480>
 800e60e:	ee21 0b01 	vmul.f64	d0, d1, d1
 800e612:	b006      	add	sp, #24
 800e614:	ecbd 8b0a 	vpop	{d8-d12}
 800e618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e61c:	eb16 0806 	adds.w	r8, r6, r6
 800e620:	eb44 0904 	adc.w	r9, r4, r4
 800e624:	f118 31ff 	adds.w	r1, r8, #4294967295
 800e628:	f169 0200 	sbc.w	r2, r9, #0
 800e62c:	458e      	cmp	lr, r1
 800e62e:	4193      	sbcs	r3, r2
 800e630:	d223      	bcs.n	800e67a <pow+0x13a>
 800e632:	ee20 0b00 	vmul.f64	d0, d0, d0
 800e636:	2c00      	cmp	r4, #0
 800e638:	da12      	bge.n	800e660 <pow+0x120>
 800e63a:	4639      	mov	r1, r7
 800e63c:	f7ff ff4a 	bl	800e4d4 <checkint>
 800e640:	2801      	cmp	r0, #1
 800e642:	d10d      	bne.n	800e660 <pow+0x120>
 800e644:	eeb1 0b40 	vneg.f64	d0, d0
 800e648:	ea58 0309 	orrs.w	r3, r8, r9
 800e64c:	d10a      	bne.n	800e664 <pow+0x124>
 800e64e:	2f00      	cmp	r7, #0
 800e650:	dadf      	bge.n	800e612 <pow+0xd2>
 800e652:	b006      	add	sp, #24
 800e654:	ecbd 8b0a 	vpop	{d8-d12}
 800e658:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65c:	f000 ba14 	b.w	800ea88 <__math_divzero>
 800e660:	2000      	movs	r0, #0
 800e662:	e7f1      	b.n	800e648 <pow+0x108>
 800e664:	2f00      	cmp	r7, #0
 800e666:	dad4      	bge.n	800e612 <pow+0xd2>
 800e668:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e66c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e670:	ed8d 7b00 	vstr	d7, [sp]
 800e674:	ed9d 0b00 	vldr	d0, [sp]
 800e678:	e7cb      	b.n	800e612 <pow+0xd2>
 800e67a:	2c00      	cmp	r4, #0
 800e67c:	da2c      	bge.n	800e6d8 <pow+0x198>
 800e67e:	4639      	mov	r1, r7
 800e680:	f7ff ff28 	bl	800e4d4 <checkint>
 800e684:	b930      	cbnz	r0, 800e694 <pow+0x154>
 800e686:	b006      	add	sp, #24
 800e688:	ecbd 8b0a 	vpop	{d8-d12}
 800e68c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e690:	f000 ba12 	b.w	800eab8 <__math_invalid>
 800e694:	2801      	cmp	r0, #1
 800e696:	bf14      	ite	ne
 800e698:	2000      	movne	r0, #0
 800e69a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e69e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e6a2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800e6a6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800e6aa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800e6ae:	2b7f      	cmp	r3, #127	; 0x7f
 800e6b0:	d92d      	bls.n	800e70e <pow+0x1ce>
 800e6b2:	4b67      	ldr	r3, [pc, #412]	; (800e850 <pow+0x310>)
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	429c      	cmp	r4, r3
 800e6b8:	bf08      	it	eq
 800e6ba:	4286      	cmpeq	r6, r0
 800e6bc:	f43f af7d 	beq.w	800e5ba <pow+0x7a>
 800e6c0:	f240 31bd 	movw	r1, #957	; 0x3bd
 800e6c4:	428a      	cmp	r2, r1
 800e6c6:	d80c      	bhi.n	800e6e2 <pow+0x1a2>
 800e6c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e6cc:	42b0      	cmp	r0, r6
 800e6ce:	41a3      	sbcs	r3, r4
 800e6d0:	d204      	bcs.n	800e6dc <pow+0x19c>
 800e6d2:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e6d6:	e79c      	b.n	800e612 <pow+0xd2>
 800e6d8:	2000      	movs	r0, #0
 800e6da:	e7e4      	b.n	800e6a6 <pow+0x166>
 800e6dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e6e0:	e797      	b.n	800e612 <pow+0xd2>
 800e6e2:	2e01      	cmp	r6, #1
 800e6e4:	eb74 0303 	sbcs.w	r3, r4, r3
 800e6e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e6ec:	bf34      	ite	cc
 800e6ee:	2301      	movcc	r3, #1
 800e6f0:	2300      	movcs	r3, #0
 800e6f2:	4295      	cmp	r5, r2
 800e6f4:	bf8c      	ite	hi
 800e6f6:	2500      	movhi	r5, #0
 800e6f8:	2501      	movls	r5, #1
 800e6fa:	42ab      	cmp	r3, r5
 800e6fc:	f000 809d 	beq.w	800e83a <pow+0x2fa>
 800e700:	b006      	add	sp, #24
 800e702:	ecbd 8b0a 	vpop	{d8-d12}
 800e706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e70a:	f000 b9b5 	b.w	800ea78 <__math_oflow>
 800e70e:	f1bc 0f00 	cmp.w	ip, #0
 800e712:	d10b      	bne.n	800e72c <pow+0x1ec>
 800e714:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e848 <pow+0x308>
 800e718:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e71c:	ec53 2b17 	vmov	r2, r3, d7
 800e720:	ee17 6a10 	vmov	r6, s14
 800e724:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e728:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800e72c:	4b4c      	ldr	r3, [pc, #304]	; (800e860 <pow+0x320>)
 800e72e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e732:	4423      	add	r3, r4
 800e734:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e738:	1519      	asrs	r1, r3, #20
 800e73a:	0d1b      	lsrs	r3, r3, #20
 800e73c:	051b      	lsls	r3, r3, #20
 800e73e:	eba4 0903 	sub.w	r9, r4, r3
 800e742:	4b48      	ldr	r3, [pc, #288]	; (800e864 <pow+0x324>)
 800e744:	ee04 1a10 	vmov	s8, r1
 800e748:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800e74c:	f1b6 0800 	subs.w	r8, r6, #0
 800e750:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800e754:	ec49 8b15 	vmov	d5, r8, r9
 800e758:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800e75c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e760:	ed93 7b00 	vldr	d7, [r3]
 800e764:	ed93 5b02 	vldr	d5, [r3, #8]
 800e768:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800e76c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800e770:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800e774:	ee36 ab02 	vadd.f64	d10, d6, d2
 800e778:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800e77c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e780:	ed93 5b04 	vldr	d5, [r3, #16]
 800e784:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e788:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e78c:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e790:	ed93 4b08 	vldr	d4, [r3, #32]
 800e794:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e798:	eeb0 9b40 	vmov.f64	d9, d0
 800e79c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800e7a0:	ed93 5b06 	vldr	d5, [r3, #24]
 800e7a4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800e7a8:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e7ac:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e7b0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e7b4:	ee3a ab48 	vsub.f64	d10, d10, d8
 800e7b8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800e7bc:	ee37 9b09 	vadd.f64	d9, d7, d9
 800e7c0:	ee3a ab00 	vadd.f64	d10, d10, d0
 800e7c4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e7c8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e7cc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800e7d0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e7d4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e7d8:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e7dc:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e7e0:	eeab ab05 	vfma.f64	d10, d11, d5
 800e7e4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800e7e8:	ee21 7b06 	vmul.f64	d7, d1, d6
 800e7ec:	ee17 3a90 	vmov	r3, s15
 800e7f0:	eeb0 5b47 	vmov.f64	d5, d7
 800e7f4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e7f8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800e7fc:	18b2      	adds	r2, r6, r2
 800e7fe:	2a3e      	cmp	r2, #62	; 0x3e
 800e800:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800e804:	ee38 8b46 	vsub.f64	d8, d8, d6
 800e808:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800e80c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800e810:	d92b      	bls.n	800e86a <pow+0x32a>
 800e812:	2a00      	cmp	r2, #0
 800e814:	da0b      	bge.n	800e82e <pow+0x2ee>
 800e816:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e81a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e81e:	2800      	cmp	r0, #0
 800e820:	f43f aef7 	beq.w	800e612 <pow+0xd2>
 800e824:	eeb1 0b40 	vneg.f64	d0, d0
 800e828:	e6f3      	b.n	800e612 <pow+0xd2>
 800e82a:	2000      	movs	r0, #0
 800e82c:	e77e      	b.n	800e72c <pow+0x1ec>
 800e82e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800e832:	d919      	bls.n	800e868 <pow+0x328>
 800e834:	2b00      	cmp	r3, #0
 800e836:	f6bf af63 	bge.w	800e700 <pow+0x1c0>
 800e83a:	b006      	add	sp, #24
 800e83c:	ecbd 8b0a 	vpop	{d8-d12}
 800e840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e844:	f000 b910 	b.w	800ea68 <__math_uflow>
 800e848:	00000000 	.word	0x00000000
 800e84c:	43300000 	.word	0x43300000
 800e850:	3ff00000 	.word	0x3ff00000
 800e854:	fff00000 	.word	0xfff00000
 800e858:	ffe00000 	.word	0xffe00000
 800e85c:	7fe00000 	.word	0x7fe00000
 800e860:	c0196aab 	.word	0xc0196aab
 800e864:	0800f6d0 	.word	0x0800f6d0
 800e868:	2600      	movs	r6, #0
 800e86a:	495d      	ldr	r1, [pc, #372]	; (800e9e0 <pow+0x4a0>)
 800e86c:	ed91 4b02 	vldr	d4, [r1, #8]
 800e870:	ed91 3b00 	vldr	d3, [r1]
 800e874:	eeb0 6b44 	vmov.f64	d6, d4
 800e878:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e87c:	ee16 5a10 	vmov	r5, s12
 800e880:	ee36 6b44 	vsub.f64	d6, d6, d4
 800e884:	ed91 4b04 	vldr	d4, [r1, #16]
 800e888:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800e88c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e890:	eeb0 0b47 	vmov.f64	d0, d7
 800e894:	ed91 7b06 	vldr	d7, [r1, #24]
 800e898:	18dc      	adds	r4, r3, r3
 800e89a:	f104 030f 	add.w	r3, r4, #15
 800e89e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e8a2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e8a6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800e8aa:	ee35 0b00 	vadd.f64	d0, d5, d0
 800e8ae:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e8b2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800e8b6:	ed91 5b08 	vldr	d5, [r1, #32]
 800e8ba:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e8be:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e8c2:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e8c6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800e8ca:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e8ce:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e8d2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800e8d6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e8da:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e8de:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e8e2:	1940      	adds	r0, r0, r5
 800e8e4:	2700      	movs	r7, #0
 800e8e6:	eb17 020c 	adds.w	r2, r7, ip
 800e8ea:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e8ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e8f2:	2e00      	cmp	r6, #0
 800e8f4:	d15f      	bne.n	800e9b6 <pow+0x476>
 800e8f6:	42bd      	cmp	r5, r7
 800e8f8:	db13      	blt.n	800e922 <pow+0x3e2>
 800e8fa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800e8fe:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800e902:	4610      	mov	r0, r2
 800e904:	ec41 0b10 	vmov	d0, r0, r1
 800e908:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e90c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e9c8 <pow+0x488>
 800e910:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e914:	b006      	add	sp, #24
 800e916:	ecbd 8b0a 	vpop	{d8-d12}
 800e91a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e91e:	f000 b8e3 	b.w	800eae8 <__math_check_oflow>
 800e922:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e926:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e92a:	4610      	mov	r0, r2
 800e92c:	ec41 0b15 	vmov	d5, r0, r1
 800e930:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e934:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e938:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e93c:	eeb0 3bc7 	vabs.f64	d3, d7
 800e940:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e948:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e9d0 <pow+0x490>
 800e94c:	d52a      	bpl.n	800e9a4 <pow+0x464>
 800e94e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e952:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e95e:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e962:	bf48      	it	mi
 800e964:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e968:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e96c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e970:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e974:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e978:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e97c:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e980:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e988:	d104      	bne.n	800e994 <pow+0x454>
 800e98a:	4632      	mov	r2, r6
 800e98c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e990:	ec43 2b17 	vmov	d7, r2, r3
 800e994:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e998:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e99c:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e9a0:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e9a4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e9a8:	b006      	add	sp, #24
 800e9aa:	ecbd 8b0a 	vpop	{d8-d12}
 800e9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b2:	f000 b890 	b.w	800ead6 <__math_check_uflow>
 800e9b6:	ec43 2b10 	vmov	d0, r2, r3
 800e9ba:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e9be:	e628      	b.n	800e612 <pow+0xd2>
 800e9c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e9d8 <pow+0x498>
 800e9c4:	e625      	b.n	800e612 <pow+0xd2>
 800e9c6:	bf00      	nop
 800e9c8:	00000000 	.word	0x00000000
 800e9cc:	7f000000 	.word	0x7f000000
 800e9d0:	00000000 	.word	0x00000000
 800e9d4:	00100000 	.word	0x00100000
	...
 800e9e0:	08010718 	.word	0x08010718
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <sqrt>:
 800e9e8:	b508      	push	{r3, lr}
 800e9ea:	ed2d 8b04 	vpush	{d8-d9}
 800e9ee:	eeb0 8b40 	vmov.f64	d8, d0
 800e9f2:	f000 f819 	bl	800ea28 <__ieee754_sqrt>
 800e9f6:	eeb4 8b48 	vcmp.f64	d8, d8
 800e9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fe:	d60c      	bvs.n	800ea1a <sqrt+0x32>
 800ea00:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800ea20 <sqrt+0x38>
 800ea04:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ea08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0c:	d505      	bpl.n	800ea1a <sqrt+0x32>
 800ea0e:	f7fc fe33 	bl	800b678 <__errno>
 800ea12:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ea16:	2321      	movs	r3, #33	; 0x21
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	ecbd 8b04 	vpop	{d8-d9}
 800ea1e:	bd08      	pop	{r3, pc}
	...

0800ea28 <__ieee754_sqrt>:
 800ea28:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ea2c:	4770      	bx	lr

0800ea2e <with_errno>:
 800ea2e:	b513      	push	{r0, r1, r4, lr}
 800ea30:	4604      	mov	r4, r0
 800ea32:	ed8d 0b00 	vstr	d0, [sp]
 800ea36:	f7fc fe1f 	bl	800b678 <__errno>
 800ea3a:	ed9d 0b00 	vldr	d0, [sp]
 800ea3e:	6004      	str	r4, [r0, #0]
 800ea40:	b002      	add	sp, #8
 800ea42:	bd10      	pop	{r4, pc}

0800ea44 <xflow>:
 800ea44:	b082      	sub	sp, #8
 800ea46:	b158      	cbz	r0, 800ea60 <xflow+0x1c>
 800ea48:	eeb1 7b40 	vneg.f64	d7, d0
 800ea4c:	ed8d 7b00 	vstr	d7, [sp]
 800ea50:	ed9d 7b00 	vldr	d7, [sp]
 800ea54:	2022      	movs	r0, #34	; 0x22
 800ea56:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea5a:	b002      	add	sp, #8
 800ea5c:	f7ff bfe7 	b.w	800ea2e <with_errno>
 800ea60:	eeb0 7b40 	vmov.f64	d7, d0
 800ea64:	e7f2      	b.n	800ea4c <xflow+0x8>
	...

0800ea68 <__math_uflow>:
 800ea68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea70 <__math_uflow+0x8>
 800ea6c:	f7ff bfea 	b.w	800ea44 <xflow>
 800ea70:	00000000 	.word	0x00000000
 800ea74:	10000000 	.word	0x10000000

0800ea78 <__math_oflow>:
 800ea78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea80 <__math_oflow+0x8>
 800ea7c:	f7ff bfe2 	b.w	800ea44 <xflow>
 800ea80:	00000000 	.word	0x00000000
 800ea84:	70000000 	.word	0x70000000

0800ea88 <__math_divzero>:
 800ea88:	b082      	sub	sp, #8
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ea90:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ea94:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ea98:	ed8d 7b00 	vstr	d7, [sp]
 800ea9c:	ed9d 0b00 	vldr	d0, [sp]
 800eaa0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800eab0 <__math_divzero+0x28>
 800eaa4:	2022      	movs	r0, #34	; 0x22
 800eaa6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800eaaa:	b002      	add	sp, #8
 800eaac:	f7ff bfbf 	b.w	800ea2e <with_errno>
	...

0800eab8 <__math_invalid>:
 800eab8:	eeb0 7b40 	vmov.f64	d7, d0
 800eabc:	eeb4 7b47 	vcmp.f64	d7, d7
 800eac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800eac8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800eacc:	d602      	bvs.n	800ead4 <__math_invalid+0x1c>
 800eace:	2021      	movs	r0, #33	; 0x21
 800ead0:	f7ff bfad 	b.w	800ea2e <with_errno>
 800ead4:	4770      	bx	lr

0800ead6 <__math_check_uflow>:
 800ead6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eade:	d102      	bne.n	800eae6 <__math_check_uflow+0x10>
 800eae0:	2022      	movs	r0, #34	; 0x22
 800eae2:	f7ff bfa4 	b.w	800ea2e <with_errno>
 800eae6:	4770      	bx	lr

0800eae8 <__math_check_oflow>:
 800eae8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800eb08 <__math_check_oflow+0x20>
 800eaec:	eeb0 7bc0 	vabs.f64	d7, d0
 800eaf0:	eeb4 7b46 	vcmp.f64	d7, d6
 800eaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf8:	dd02      	ble.n	800eb00 <__math_check_oflow+0x18>
 800eafa:	2022      	movs	r0, #34	; 0x22
 800eafc:	f7ff bf97 	b.w	800ea2e <with_errno>
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	ffffffff 	.word	0xffffffff
 800eb0c:	7fefffff 	.word	0x7fefffff

0800eb10 <_init>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	bf00      	nop
 800eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb16:	bc08      	pop	{r3}
 800eb18:	469e      	mov	lr, r3
 800eb1a:	4770      	bx	lr

0800eb1c <_fini>:
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	bf00      	nop
 800eb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb22:	bc08      	pop	{r3}
 800eb24:	469e      	mov	lr, r3
 800eb26:	4770      	bx	lr
