
tractorrabioso_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102a68  08102a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102a78  08102a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102a7c  08102a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08102a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  10000010  08102a90  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000007c  08102a90  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d6de  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a9d  00000000  00000000  0002d71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bd8  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003945a  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000dec5  00000000  00000000  00069e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00183603  00000000  00000000  00077d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001fb35a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000360c  00000000  00000000  001fb3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102a50 	.word	0x08102a50

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08102a50 	.word	0x08102a50

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__aeabi_d2uiz>:
 8100a74:	004a      	lsls	r2, r1, #1
 8100a76:	d211      	bcs.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100a7c:	d211      	bcs.n	8100aa2 <__aeabi_d2uiz+0x2e>
 8100a7e:	d50d      	bpl.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100a88:	d40e      	bmi.n	8100aa8 <__aeabi_d2uiz+0x34>
 8100a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100a96:	fa23 f002 	lsr.w	r0, r3, r2
 8100a9a:	4770      	bx	lr
 8100a9c:	f04f 0000 	mov.w	r0, #0
 8100aa0:	4770      	bx	lr
 8100aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100aa6:	d102      	bne.n	8100aae <__aeabi_d2uiz+0x3a>
 8100aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8100aac:	4770      	bx	lr
 8100aae:	f04f 0000 	mov.w	r0, #0
 8100ab2:	4770      	bx	lr

08100ab4 <__aeabi_d2f>:
 8100ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100abc:	bf24      	itt	cs
 8100abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100ac6:	d90d      	bls.n	8100ae4 <__aeabi_d2f+0x30>
 8100ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100adc:	bf08      	it	eq
 8100ade:	f020 0001 	biceq.w	r0, r0, #1
 8100ae2:	4770      	bx	lr
 8100ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100ae8:	d121      	bne.n	8100b2e <__aeabi_d2f+0x7a>
 8100aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100aee:	bfbc      	itt	lt
 8100af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100af4:	4770      	bxlt	lr
 8100af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100afe:	f1c2 0218 	rsb	r2, r2, #24
 8100b02:	f1c2 0c20 	rsb	ip, r2, #32
 8100b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8100b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8100b0e:	bf18      	it	ne
 8100b10:	f040 0001 	orrne.w	r0, r0, #1
 8100b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100b20:	ea40 000c 	orr.w	r0, r0, ip
 8100b24:	fa23 f302 	lsr.w	r3, r3, r2
 8100b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100b2c:	e7cc      	b.n	8100ac8 <__aeabi_d2f+0x14>
 8100b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100b32:	d107      	bne.n	8100b44 <__aeabi_d2f+0x90>
 8100b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100b38:	bf1e      	ittt	ne
 8100b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100b42:	4770      	bxne	lr
 8100b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100b50:	4770      	bx	lr
 8100b52:	bf00      	nop

08100b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100b54:	b480      	push	{r7}
 8100b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100b58:	4b09      	ldr	r3, [pc, #36]	; (8100b80 <SystemInit+0x2c>)
 8100b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100b5e:	4a08      	ldr	r2, [pc, #32]	; (8100b80 <SystemInit+0x2c>)
 8100b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100b68:	4b05      	ldr	r3, [pc, #20]	; (8100b80 <SystemInit+0x2c>)
 8100b6a:	691b      	ldr	r3, [r3, #16]
 8100b6c:	4a04      	ldr	r2, [pc, #16]	; (8100b80 <SystemInit+0x2c>)
 8100b6e:	f043 0310 	orr.w	r3, r3, #16
 8100b72:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100b74:	bf00      	nop
 8100b76:	46bd      	mov	sp, r7
 8100b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b7c:	4770      	bx	lr
 8100b7e:	bf00      	nop
 8100b80:	e000ed00 	.word	0xe000ed00

08100b84 <Turning_SetAngle.0>:
  MX_GPIO_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);

  void Turning_SetAngle(float angle) {
 8100b84:	b5b0      	push	{r4, r5, r7, lr}
 8100b86:	b086      	sub	sp, #24
 8100b88:	af00      	add	r7, sp, #0
 8100b8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8100b8e:	f8c7 c000 	str.w	ip, [r7]
      // Map angle (-90° to 90°) to pulse width (1 to 2 ms)
      float pulseWidth = 1.5 + (angle / 180.0);
 8100b92:	6878      	ldr	r0, [r7, #4]
 8100b94:	f7ff fd04 	bl	81005a0 <__aeabi_f2d>
 8100b98:	f04f 0200 	mov.w	r2, #0
 8100b9c:	4b1f      	ldr	r3, [pc, #124]	; (8100c1c <Turning_SetAngle.0+0x98>)
 8100b9e:	f7ff fe81 	bl	81008a4 <__aeabi_ddiv>
 8100ba2:	4602      	mov	r2, r0
 8100ba4:	460b      	mov	r3, r1
 8100ba6:	4610      	mov	r0, r2
 8100ba8:	4619      	mov	r1, r3
 8100baa:	f04f 0200 	mov.w	r2, #0
 8100bae:	4b1c      	ldr	r3, [pc, #112]	; (8100c20 <Turning_SetAngle.0+0x9c>)
 8100bb0:	f7ff fb98 	bl	81002e4 <__adddf3>
 8100bb4:	4602      	mov	r2, r0
 8100bb6:	460b      	mov	r3, r1
 8100bb8:	4610      	mov	r0, r2
 8100bba:	4619      	mov	r1, r3
 8100bbc:	f7ff ff7a 	bl	8100ab4 <__aeabi_d2f>
 8100bc0:	4603      	mov	r3, r0
 8100bc2:	617b      	str	r3, [r7, #20]
      // 1.5ms is the center pulse width

      // Get the autoreload register value
      uint32_t ARR = __HAL_TIM_GET_AUTORELOAD(&htim16);
 8100bc4:	4b17      	ldr	r3, [pc, #92]	; (8100c24 <Turning_SetAngle.0+0xa0>)
 8100bc6:	681b      	ldr	r3, [r3, #0]
 8100bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100bca:	613b      	str	r3, [r7, #16]

      // Calculate the new compare value to be written to the compare register
      uint32_t value = (uint32_t)((pulseWidth / 20.0) * (ARR + 1));
 8100bcc:	6978      	ldr	r0, [r7, #20]
 8100bce:	f7ff fce7 	bl	81005a0 <__aeabi_f2d>
 8100bd2:	f04f 0200 	mov.w	r2, #0
 8100bd6:	4b14      	ldr	r3, [pc, #80]	; (8100c28 <Turning_SetAngle.0+0xa4>)
 8100bd8:	f7ff fe64 	bl	81008a4 <__aeabi_ddiv>
 8100bdc:	4602      	mov	r2, r0
 8100bde:	460b      	mov	r3, r1
 8100be0:	4614      	mov	r4, r2
 8100be2:	461d      	mov	r5, r3
 8100be4:	693b      	ldr	r3, [r7, #16]
 8100be6:	3301      	adds	r3, #1
 8100be8:	4618      	mov	r0, r3
 8100bea:	f7ff fcb7 	bl	810055c <__aeabi_ui2d>
 8100bee:	4602      	mov	r2, r0
 8100bf0:	460b      	mov	r3, r1
 8100bf2:	4620      	mov	r0, r4
 8100bf4:	4629      	mov	r1, r5
 8100bf6:	f7ff fd2b 	bl	8100650 <__aeabi_dmul>
 8100bfa:	4602      	mov	r2, r0
 8100bfc:	460b      	mov	r3, r1
 8100bfe:	4610      	mov	r0, r2
 8100c00:	4619      	mov	r1, r3
 8100c02:	f7ff ff37 	bl	8100a74 <__aeabi_d2uiz>
 8100c06:	4603      	mov	r3, r0
 8100c08:	60fb      	str	r3, [r7, #12]
      // Convert pulse width to compare value

      // Set the compare value (duty cycle) on TIM13, Channel 1
      __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, value);
 8100c0a:	4b06      	ldr	r3, [pc, #24]	; (8100c24 <Turning_SetAngle.0+0xa0>)
 8100c0c:	681b      	ldr	r3, [r3, #0]
 8100c0e:	68fa      	ldr	r2, [r7, #12]
 8100c10:	635a      	str	r2, [r3, #52]	; 0x34
  }
 8100c12:	bf00      	nop
 8100c14:	3718      	adds	r7, #24
 8100c16:	46bd      	mov	sp, r7
 8100c18:	bdb0      	pop	{r4, r5, r7, pc}
 8100c1a:	bf00      	nop
 8100c1c:	40668000 	.word	0x40668000
 8100c20:	3ff80000 	.word	0x3ff80000
 8100c24:	1000002c 	.word	0x1000002c
 8100c28:	40340000 	.word	0x40340000

08100c2c <main>:
{
 8100c2c:	b580      	push	{r7, lr}
 8100c2e:	b082      	sub	sp, #8
 8100c30:	af00      	add	r7, sp, #0
int main(void)
 8100c32:	f107 0310 	add.w	r3, r7, #16
 8100c36:	607b      	str	r3, [r7, #4]
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c38:	4b38      	ldr	r3, [pc, #224]	; (8100d1c <main+0xf0>)
 8100c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3e:	4a37      	ldr	r2, [pc, #220]	; (8100d1c <main+0xf0>)
 8100c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c48:	4b34      	ldr	r3, [pc, #208]	; (8100d1c <main+0xf0>)
 8100c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100c52:	603b      	str	r3, [r7, #0]
 8100c54:	683b      	ldr	r3, [r7, #0]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c56:	2001      	movs	r0, #1
 8100c58:	f000 fdd6 	bl	8101808 <HAL_HSEM_ActivateNotification>
  HAL_PWREx_ClearPendingEvent();
 8100c5c:	f000 fe60 	bl	8101920 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c60:	2201      	movs	r2, #1
 8100c62:	2102      	movs	r1, #2
 8100c64:	2000      	movs	r0, #0
 8100c66:	f000 fde1 	bl	810182c <HAL_PWREx_EnterSTOPMode>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c6a:	4b2d      	ldr	r3, [pc, #180]	; (8100d20 <main+0xf4>)
 8100c6c:	681b      	ldr	r3, [r3, #0]
 8100c6e:	091b      	lsrs	r3, r3, #4
 8100c70:	f003 030f 	and.w	r3, r3, #15
 8100c74:	2b07      	cmp	r3, #7
 8100c76:	d108      	bne.n	8100c8a <main+0x5e>
 8100c78:	4b2a      	ldr	r3, [pc, #168]	; (8100d24 <main+0xf8>)
 8100c7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100c7e:	4a29      	ldr	r2, [pc, #164]	; (8100d24 <main+0xf8>)
 8100c80:	f043 0301 	orr.w	r3, r3, #1
 8100c84:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100c88:	e007      	b.n	8100c9a <main+0x6e>
 8100c8a:	4b26      	ldr	r3, [pc, #152]	; (8100d24 <main+0xf8>)
 8100c8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100c90:	4a24      	ldr	r2, [pc, #144]	; (8100d24 <main+0xf8>)
 8100c92:	f043 0301 	orr.w	r3, r3, #1
 8100c96:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  HAL_Init();
 8100c9a:	f000 fa01 	bl	81010a0 <HAL_Init>
  MX_GPIO_Init();
 8100c9e:	f000 f8c9 	bl	8100e34 <MX_GPIO_Init>
  MX_TIM16_Init();
 8100ca2:	f000 f84d 	bl	8100d40 <MX_TIM16_Init>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8100ca6:	2100      	movs	r1, #0
 8100ca8:	481f      	ldr	r0, [pc, #124]	; (8100d28 <main+0xfc>)
 8100caa:	f001 f86f 	bl	8101d8c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100cae:	2102      	movs	r1, #2
 8100cb0:	481e      	ldr	r0, [pc, #120]	; (8100d2c <main+0x100>)
 8100cb2:	f000 fd8e 	bl	81017d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8100cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100cba:	f000 faa5 	bl	8101208 <HAL_Delay>
	 }
	*/

	 	 // Fast Movement
	 // Set the servo to the initial angle (0°)
	 Turning_SetAngle(0.0);
 8100cbe:	1d3b      	adds	r3, r7, #4
 8100cc0:	469c      	mov	ip, r3
 8100cc2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8100d30 <main+0x104>
 8100cc6:	f7ff ff5d 	bl	8100b84 <Turning_SetAngle.0>
	 // Move servo to 40° (right)
	 Turning_SetAngle(40.0);
 8100cca:	1d3b      	adds	r3, r7, #4
 8100ccc:	469c      	mov	ip, r3
 8100cce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8100d34 <main+0x108>
 8100cd2:	f7ff ff57 	bl	8100b84 <Turning_SetAngle.0>
	 HAL_Delay(1000);  // 1-second delay
 8100cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cda:	f000 fa95 	bl	8101208 <HAL_Delay>

	 // Move servo to -35° (center)
	 Turning_SetAngle(-35.0);
 8100cde:	1d3b      	adds	r3, r7, #4
 8100ce0:	469c      	mov	ip, r3
 8100ce2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8100d38 <main+0x10c>
 8100ce6:	f7ff ff4d 	bl	8100b84 <Turning_SetAngle.0>
	 HAL_Delay(1000);  // 1-second delay
 8100cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cee:	f000 fa8b 	bl	8101208 <HAL_Delay>

	 // Move servo to -180° (left)
	 Turning_SetAngle(-180.0);
 8100cf2:	1d3b      	adds	r3, r7, #4
 8100cf4:	469c      	mov	ip, r3
 8100cf6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8100d3c <main+0x110>
 8100cfa:	f7ff ff43 	bl	8100b84 <Turning_SetAngle.0>
	 HAL_Delay(1000);  // 1-second delay
 8100cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100d02:	f000 fa81 	bl	8101208 <HAL_Delay>

	 // Move servo to -35° (center)
	 Turning_SetAngle(-35.0);
 8100d06:	1d3b      	adds	r3, r7, #4
 8100d08:	469c      	mov	ip, r3
 8100d0a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8100d38 <main+0x10c>
 8100d0e:	f7ff ff39 	bl	8100b84 <Turning_SetAngle.0>
	 HAL_Delay(1000);  // 1-second delay
 8100d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100d16:	f000 fa77 	bl	8101208 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100d1a:	e7c8      	b.n	8100cae <main+0x82>
 8100d1c:	58024400 	.word	0x58024400
 8100d20:	e000ed00 	.word	0xe000ed00
 8100d24:	58026400 	.word	0x58026400
 8100d28:	1000002c 	.word	0x1000002c
 8100d2c:	58021000 	.word	0x58021000
 8100d30:	00000000 	.word	0x00000000
 8100d34:	42200000 	.word	0x42200000
 8100d38:	c20c0000 	.word	0xc20c0000
 8100d3c:	c3340000 	.word	0xc3340000

08100d40 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8100d40:	b580      	push	{r7, lr}
 8100d42:	b092      	sub	sp, #72	; 0x48
 8100d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8100d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100d4a:	2200      	movs	r2, #0
 8100d4c:	601a      	str	r2, [r3, #0]
 8100d4e:	605a      	str	r2, [r3, #4]
 8100d50:	609a      	str	r2, [r3, #8]
 8100d52:	60da      	str	r2, [r3, #12]
 8100d54:	611a      	str	r2, [r3, #16]
 8100d56:	615a      	str	r2, [r3, #20]
 8100d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100d5a:	463b      	mov	r3, r7
 8100d5c:	222c      	movs	r2, #44	; 0x2c
 8100d5e:	2100      	movs	r1, #0
 8100d60:	4618      	mov	r0, r3
 8100d62:	f001 fe6d 	bl	8102a40 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8100d66:	4b31      	ldr	r3, [pc, #196]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d68:	4a31      	ldr	r2, [pc, #196]	; (8100e30 <MX_TIM16_Init+0xf0>)
 8100d6a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 73;
 8100d6c:	4b2f      	ldr	r3, [pc, #188]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d6e:	2249      	movs	r2, #73	; 0x49
 8100d70:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100d72:	4b2e      	ldr	r3, [pc, #184]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d74:	2200      	movs	r2, #0
 8100d76:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64863;
 8100d78:	4b2c      	ldr	r3, [pc, #176]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d7a:	f64f 525f 	movw	r2, #64863	; 0xfd5f
 8100d7e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100d80:	4b2a      	ldr	r3, [pc, #168]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d82:	2200      	movs	r2, #0
 8100d84:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8100d86:	4b29      	ldr	r3, [pc, #164]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100d8c:	4b27      	ldr	r3, [pc, #156]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d8e:	2200      	movs	r2, #0
 8100d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8100d92:	4826      	ldr	r0, [pc, #152]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100d94:	f000 ff4c 	bl	8101c30 <HAL_TIM_Base_Init>
 8100d98:	4603      	mov	r3, r0
 8100d9a:	2b00      	cmp	r3, #0
 8100d9c:	d001      	beq.n	8100da2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8100d9e:	f000 f88d 	bl	8100ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8100da2:	4822      	ldr	r0, [pc, #136]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100da4:	f000 ff9b 	bl	8101cde <HAL_TIM_PWM_Init>
 8100da8:	4603      	mov	r3, r0
 8100daa:	2b00      	cmp	r3, #0
 8100dac:	d001      	beq.n	8100db2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8100dae:	f000 f885 	bl	8100ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100db2:	2360      	movs	r3, #96	; 0x60
 8100db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8100db6:	2300      	movs	r3, #0
 8100db8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100dba:	2300      	movs	r3, #0
 8100dbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100dbe:	2300      	movs	r3, #0
 8100dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100dc2:	2300      	movs	r3, #0
 8100dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100dc6:	2300      	movs	r3, #0
 8100dc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100dca:	2300      	movs	r3, #0
 8100dcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100dd2:	2200      	movs	r2, #0
 8100dd4:	4619      	mov	r1, r3
 8100dd6:	4815      	ldr	r0, [pc, #84]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100dd8:	f001 f8e6 	bl	8101fa8 <HAL_TIM_PWM_ConfigChannel>
 8100ddc:	4603      	mov	r3, r0
 8100dde:	2b00      	cmp	r3, #0
 8100de0:	d001      	beq.n	8100de6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8100de2:	f000 f86b 	bl	8100ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100de6:	2300      	movs	r3, #0
 8100de8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100dea:	2300      	movs	r3, #0
 8100dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100dee:	2300      	movs	r3, #0
 8100df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100df2:	2300      	movs	r3, #0
 8100df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100df6:	2300      	movs	r3, #0
 8100df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100e00:	2300      	movs	r3, #0
 8100e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100e04:	2300      	movs	r3, #0
 8100e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8100e08:	463b      	mov	r3, r7
 8100e0a:	4619      	mov	r1, r3
 8100e0c:	4807      	ldr	r0, [pc, #28]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100e0e:	f001 fd75 	bl	81028fc <HAL_TIMEx_ConfigBreakDeadTime>
 8100e12:	4603      	mov	r3, r0
 8100e14:	2b00      	cmp	r3, #0
 8100e16:	d001      	beq.n	8100e1c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8100e18:	f000 f850 	bl	8100ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8100e1c:	4803      	ldr	r0, [pc, #12]	; (8100e2c <MX_TIM16_Init+0xec>)
 8100e1e:	f000 f8b1 	bl	8100f84 <HAL_TIM_MspPostInit>

}
 8100e22:	bf00      	nop
 8100e24:	3748      	adds	r7, #72	; 0x48
 8100e26:	46bd      	mov	sp, r7
 8100e28:	bd80      	pop	{r7, pc}
 8100e2a:	bf00      	nop
 8100e2c:	1000002c 	.word	0x1000002c
 8100e30:	40014400 	.word	0x40014400

08100e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b088      	sub	sp, #32
 8100e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e3a:	f107 030c 	add.w	r3, r7, #12
 8100e3e:	2200      	movs	r2, #0
 8100e40:	601a      	str	r2, [r3, #0]
 8100e42:	605a      	str	r2, [r3, #4]
 8100e44:	609a      	str	r2, [r3, #8]
 8100e46:	60da      	str	r2, [r3, #12]
 8100e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100e4a:	4b1a      	ldr	r3, [pc, #104]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e50:	4a18      	ldr	r2, [pc, #96]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e52:	f043 0320 	orr.w	r3, r3, #32
 8100e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e5a:	4b16      	ldr	r3, [pc, #88]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e60:	f003 0320 	and.w	r3, r3, #32
 8100e64:	60bb      	str	r3, [r7, #8]
 8100e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100e68:	4b12      	ldr	r3, [pc, #72]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e6e:	4a11      	ldr	r2, [pc, #68]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e70:	f043 0310 	orr.w	r3, r3, #16
 8100e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e78:	4b0e      	ldr	r3, [pc, #56]	; (8100eb4 <MX_GPIO_Init+0x80>)
 8100e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e7e:	f003 0310 	and.w	r3, r3, #16
 8100e82:	607b      	str	r3, [r7, #4]
 8100e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100e86:	2200      	movs	r2, #0
 8100e88:	2102      	movs	r1, #2
 8100e8a:	480b      	ldr	r0, [pc, #44]	; (8100eb8 <MX_GPIO_Init+0x84>)
 8100e8c:	f000 fc88 	bl	81017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100e90:	2302      	movs	r3, #2
 8100e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100e94:	2301      	movs	r3, #1
 8100e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e98:	2300      	movs	r3, #0
 8100e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e9c:	2300      	movs	r3, #0
 8100e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100ea0:	f107 030c 	add.w	r3, r7, #12
 8100ea4:	4619      	mov	r1, r3
 8100ea6:	4804      	ldr	r0, [pc, #16]	; (8100eb8 <MX_GPIO_Init+0x84>)
 8100ea8:	f000 faca 	bl	8101440 <HAL_GPIO_Init>

}
 8100eac:	bf00      	nop
 8100eae:	3720      	adds	r7, #32
 8100eb0:	46bd      	mov	sp, r7
 8100eb2:	bd80      	pop	{r7, pc}
 8100eb4:	58024400 	.word	0x58024400
 8100eb8:	58021000 	.word	0x58021000

08100ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100ebc:	b480      	push	{r7}
 8100ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100ec0:	b672      	cpsid	i
}
 8100ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100ec4:	e7fe      	b.n	8100ec4 <Error_Handler+0x8>
	...

08100ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100ec8:	b480      	push	{r7}
 8100eca:	b083      	sub	sp, #12
 8100ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ece:	4b0a      	ldr	r3, [pc, #40]	; (8100ef8 <HAL_MspInit+0x30>)
 8100ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ed4:	4a08      	ldr	r2, [pc, #32]	; (8100ef8 <HAL_MspInit+0x30>)
 8100ed6:	f043 0302 	orr.w	r3, r3, #2
 8100eda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ede:	4b06      	ldr	r3, [pc, #24]	; (8100ef8 <HAL_MspInit+0x30>)
 8100ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ee4:	f003 0302 	and.w	r3, r3, #2
 8100ee8:	607b      	str	r3, [r7, #4]
 8100eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100eec:	bf00      	nop
 8100eee:	370c      	adds	r7, #12
 8100ef0:	46bd      	mov	sp, r7
 8100ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef6:	4770      	bx	lr
 8100ef8:	58024400 	.word	0x58024400

08100efc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8100efc:	b480      	push	{r7}
 8100efe:	b085      	sub	sp, #20
 8100f00:	af00      	add	r7, sp, #0
 8100f02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8100f04:	687b      	ldr	r3, [r7, #4]
 8100f06:	681b      	ldr	r3, [r3, #0]
 8100f08:	4a0b      	ldr	r2, [pc, #44]	; (8100f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8100f0a:	4293      	cmp	r3, r2
 8100f0c:	d10e      	bne.n	8100f2c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8100f0e:	4b0b      	ldr	r3, [pc, #44]	; (8100f3c <HAL_TIM_PWM_MspInit+0x40>)
 8100f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f14:	4a09      	ldr	r2, [pc, #36]	; (8100f3c <HAL_TIM_PWM_MspInit+0x40>)
 8100f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100f1e:	4b07      	ldr	r3, [pc, #28]	; (8100f3c <HAL_TIM_PWM_MspInit+0x40>)
 8100f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100f28:	60fb      	str	r3, [r7, #12]
 8100f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8100f2c:	bf00      	nop
 8100f2e:	3714      	adds	r7, #20
 8100f30:	46bd      	mov	sp, r7
 8100f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f36:	4770      	bx	lr
 8100f38:	40014000 	.word	0x40014000
 8100f3c:	58024400 	.word	0x58024400

08100f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100f40:	b480      	push	{r7}
 8100f42:	b085      	sub	sp, #20
 8100f44:	af00      	add	r7, sp, #0
 8100f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	681b      	ldr	r3, [r3, #0]
 8100f4c:	4a0b      	ldr	r2, [pc, #44]	; (8100f7c <HAL_TIM_Base_MspInit+0x3c>)
 8100f4e:	4293      	cmp	r3, r2
 8100f50:	d10e      	bne.n	8100f70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8100f52:	4b0b      	ldr	r3, [pc, #44]	; (8100f80 <HAL_TIM_Base_MspInit+0x40>)
 8100f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f58:	4a09      	ldr	r2, [pc, #36]	; (8100f80 <HAL_TIM_Base_MspInit+0x40>)
 8100f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100f62:	4b07      	ldr	r3, [pc, #28]	; (8100f80 <HAL_TIM_Base_MspInit+0x40>)
 8100f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100f6c:	60fb      	str	r3, [r7, #12]
 8100f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8100f70:	bf00      	nop
 8100f72:	3714      	adds	r7, #20
 8100f74:	46bd      	mov	sp, r7
 8100f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f7a:	4770      	bx	lr
 8100f7c:	40014400 	.word	0x40014400
 8100f80:	58024400 	.word	0x58024400

08100f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100f84:	b580      	push	{r7, lr}
 8100f86:	b088      	sub	sp, #32
 8100f88:	af00      	add	r7, sp, #0
 8100f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f8c:	f107 030c 	add.w	r3, r7, #12
 8100f90:	2200      	movs	r2, #0
 8100f92:	601a      	str	r2, [r3, #0]
 8100f94:	605a      	str	r2, [r3, #4]
 8100f96:	609a      	str	r2, [r3, #8]
 8100f98:	60da      	str	r2, [r3, #12]
 8100f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8100f9c:	687b      	ldr	r3, [r7, #4]
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	4a12      	ldr	r2, [pc, #72]	; (8100fec <HAL_TIM_MspPostInit+0x68>)
 8100fa2:	4293      	cmp	r3, r2
 8100fa4:	d11e      	bne.n	8100fe4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100fa6:	4b12      	ldr	r3, [pc, #72]	; (8100ff0 <HAL_TIM_MspPostInit+0x6c>)
 8100fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fac:	4a10      	ldr	r2, [pc, #64]	; (8100ff0 <HAL_TIM_MspPostInit+0x6c>)
 8100fae:	f043 0320 	orr.w	r3, r3, #32
 8100fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fb6:	4b0e      	ldr	r3, [pc, #56]	; (8100ff0 <HAL_TIM_MspPostInit+0x6c>)
 8100fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fbc:	f003 0320 	and.w	r3, r3, #32
 8100fc0:	60bb      	str	r3, [r7, #8]
 8100fc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PF6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8100fc4:	2340      	movs	r3, #64	; 0x40
 8100fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fc8:	2302      	movs	r3, #2
 8100fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fcc:	2300      	movs	r3, #0
 8100fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fd0:	2300      	movs	r3, #0
 8100fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8100fd4:	2301      	movs	r3, #1
 8100fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100fd8:	f107 030c 	add.w	r3, r7, #12
 8100fdc:	4619      	mov	r1, r3
 8100fde:	4805      	ldr	r0, [pc, #20]	; (8100ff4 <HAL_TIM_MspPostInit+0x70>)
 8100fe0:	f000 fa2e 	bl	8101440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8100fe4:	bf00      	nop
 8100fe6:	3720      	adds	r7, #32
 8100fe8:	46bd      	mov	sp, r7
 8100fea:	bd80      	pop	{r7, pc}
 8100fec:	40014400 	.word	0x40014400
 8100ff0:	58024400 	.word	0x58024400
 8100ff4:	58021400 	.word	0x58021400

08100ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100ff8:	b480      	push	{r7}
 8100ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100ffc:	e7fe      	b.n	8100ffc <NMI_Handler+0x4>

08100ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100ffe:	b480      	push	{r7}
 8101000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101002:	e7fe      	b.n	8101002 <HardFault_Handler+0x4>

08101004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101004:	b480      	push	{r7}
 8101006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101008:	e7fe      	b.n	8101008 <MemManage_Handler+0x4>

0810100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810100a:	b480      	push	{r7}
 810100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810100e:	e7fe      	b.n	810100e <BusFault_Handler+0x4>

08101010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101010:	b480      	push	{r7}
 8101012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101014:	e7fe      	b.n	8101014 <UsageFault_Handler+0x4>

08101016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101016:	b480      	push	{r7}
 8101018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810101a:	bf00      	nop
 810101c:	46bd      	mov	sp, r7
 810101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101022:	4770      	bx	lr

08101024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101024:	b480      	push	{r7}
 8101026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101028:	bf00      	nop
 810102a:	46bd      	mov	sp, r7
 810102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101030:	4770      	bx	lr

08101032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101032:	b480      	push	{r7}
 8101034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101036:	bf00      	nop
 8101038:	46bd      	mov	sp, r7
 810103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103e:	4770      	bx	lr

08101040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101040:	b580      	push	{r7, lr}
 8101042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101044:	f000 f8c0 	bl	81011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101048:	bf00      	nop
 810104a:	bd80      	pop	{r7, pc}

0810104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101050:	f7ff fd80 	bl	8100b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101054:	480c      	ldr	r0, [pc, #48]	; (8101088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101056:	490d      	ldr	r1, [pc, #52]	; (810108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101058:	4a0d      	ldr	r2, [pc, #52]	; (8101090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810105c:	e002      	b.n	8101064 <LoopCopyDataInit>

0810105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101062:	3304      	adds	r3, #4

08101064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101068:	d3f9      	bcc.n	810105e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810106a:	4a0a      	ldr	r2, [pc, #40]	; (8101094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810106c:	4c0a      	ldr	r4, [pc, #40]	; (8101098 <LoopFillZerobss+0x22>)
  movs r3, #0
 810106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101070:	e001      	b.n	8101076 <LoopFillZerobss>

08101072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101074:	3204      	adds	r2, #4

08101076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101078:	d3fb      	bcc.n	8101072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810107a:	f001 fcbd 	bl	81029f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810107e:	f7ff fdd5 	bl	8100c2c <main>
  bx  lr
 8101082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101084:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101088:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810108c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101090:	08102a80 	.word	0x08102a80
  ldr r2, =_sbss
 8101094:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101098:	1000007c 	.word	0x1000007c

0810109c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810109c:	e7fe      	b.n	810109c <ADC3_IRQHandler>
	...

081010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81010a0:	b580      	push	{r7, lr}
 81010a2:	b082      	sub	sp, #8
 81010a4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81010a6:	4b28      	ldr	r3, [pc, #160]	; (8101148 <HAL_Init+0xa8>)
 81010a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81010ac:	4a26      	ldr	r2, [pc, #152]	; (8101148 <HAL_Init+0xa8>)
 81010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81010b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81010b6:	4b24      	ldr	r3, [pc, #144]	; (8101148 <HAL_Init+0xa8>)
 81010b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81010c0:	603b      	str	r3, [r7, #0]
 81010c2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81010c4:	4b21      	ldr	r3, [pc, #132]	; (810114c <HAL_Init+0xac>)
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81010cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81010d0:	4a1e      	ldr	r2, [pc, #120]	; (810114c <HAL_Init+0xac>)
 81010d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81010d6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81010d8:	4b1c      	ldr	r3, [pc, #112]	; (810114c <HAL_Init+0xac>)
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	4a1b      	ldr	r2, [pc, #108]	; (810114c <HAL_Init+0xac>)
 81010de:	f043 0301 	orr.w	r3, r3, #1
 81010e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81010e4:	2003      	movs	r0, #3
 81010e6:	f000 f965 	bl	81013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81010ea:	f000 fc27 	bl	810193c <HAL_RCC_GetSysClockFreq>
 81010ee:	4602      	mov	r2, r0
 81010f0:	4b15      	ldr	r3, [pc, #84]	; (8101148 <HAL_Init+0xa8>)
 81010f2:	699b      	ldr	r3, [r3, #24]
 81010f4:	0a1b      	lsrs	r3, r3, #8
 81010f6:	f003 030f 	and.w	r3, r3, #15
 81010fa:	4915      	ldr	r1, [pc, #84]	; (8101150 <HAL_Init+0xb0>)
 81010fc:	5ccb      	ldrb	r3, [r1, r3]
 81010fe:	f003 031f 	and.w	r3, r3, #31
 8101102:	fa22 f303 	lsr.w	r3, r2, r3
 8101106:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101108:	4b0f      	ldr	r3, [pc, #60]	; (8101148 <HAL_Init+0xa8>)
 810110a:	699b      	ldr	r3, [r3, #24]
 810110c:	f003 030f 	and.w	r3, r3, #15
 8101110:	4a0f      	ldr	r2, [pc, #60]	; (8101150 <HAL_Init+0xb0>)
 8101112:	5cd3      	ldrb	r3, [r2, r3]
 8101114:	f003 031f 	and.w	r3, r3, #31
 8101118:	687a      	ldr	r2, [r7, #4]
 810111a:	fa22 f303 	lsr.w	r3, r2, r3
 810111e:	4a0d      	ldr	r2, [pc, #52]	; (8101154 <HAL_Init+0xb4>)
 8101120:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101122:	4b0c      	ldr	r3, [pc, #48]	; (8101154 <HAL_Init+0xb4>)
 8101124:	681b      	ldr	r3, [r3, #0]
 8101126:	4a0c      	ldr	r2, [pc, #48]	; (8101158 <HAL_Init+0xb8>)
 8101128:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810112a:	200f      	movs	r0, #15
 810112c:	f000 f816 	bl	810115c <HAL_InitTick>
 8101130:	4603      	mov	r3, r0
 8101132:	2b00      	cmp	r3, #0
 8101134:	d001      	beq.n	810113a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101136:	2301      	movs	r3, #1
 8101138:	e002      	b.n	8101140 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810113a:	f7ff fec5 	bl	8100ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810113e:	2300      	movs	r3, #0
}
 8101140:	4618      	mov	r0, r3
 8101142:	3708      	adds	r7, #8
 8101144:	46bd      	mov	sp, r7
 8101146:	bd80      	pop	{r7, pc}
 8101148:	58024400 	.word	0x58024400
 810114c:	40024400 	.word	0x40024400
 8101150:	08102a68 	.word	0x08102a68
 8101154:	10000004 	.word	0x10000004
 8101158:	10000000 	.word	0x10000000

0810115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810115c:	b580      	push	{r7, lr}
 810115e:	b082      	sub	sp, #8
 8101160:	af00      	add	r7, sp, #0
 8101162:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101164:	4b15      	ldr	r3, [pc, #84]	; (81011bc <HAL_InitTick+0x60>)
 8101166:	781b      	ldrb	r3, [r3, #0]
 8101168:	2b00      	cmp	r3, #0
 810116a:	d101      	bne.n	8101170 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810116c:	2301      	movs	r3, #1
 810116e:	e021      	b.n	81011b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101170:	4b13      	ldr	r3, [pc, #76]	; (81011c0 <HAL_InitTick+0x64>)
 8101172:	681a      	ldr	r2, [r3, #0]
 8101174:	4b11      	ldr	r3, [pc, #68]	; (81011bc <HAL_InitTick+0x60>)
 8101176:	781b      	ldrb	r3, [r3, #0]
 8101178:	4619      	mov	r1, r3
 810117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101182:	fbb2 f3f3 	udiv	r3, r2, r3
 8101186:	4618      	mov	r0, r3
 8101188:	f000 f939 	bl	81013fe <HAL_SYSTICK_Config>
 810118c:	4603      	mov	r3, r0
 810118e:	2b00      	cmp	r3, #0
 8101190:	d001      	beq.n	8101196 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101192:	2301      	movs	r3, #1
 8101194:	e00e      	b.n	81011b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	2b0f      	cmp	r3, #15
 810119a:	d80a      	bhi.n	81011b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810119c:	2200      	movs	r2, #0
 810119e:	6879      	ldr	r1, [r7, #4]
 81011a0:	f04f 30ff 	mov.w	r0, #4294967295
 81011a4:	f000 f911 	bl	81013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81011a8:	4a06      	ldr	r2, [pc, #24]	; (81011c4 <HAL_InitTick+0x68>)
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81011ae:	2300      	movs	r3, #0
 81011b0:	e000      	b.n	81011b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81011b2:	2301      	movs	r3, #1
}
 81011b4:	4618      	mov	r0, r3
 81011b6:	3708      	adds	r7, #8
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd80      	pop	{r7, pc}
 81011bc:	1000000c 	.word	0x1000000c
 81011c0:	10000000 	.word	0x10000000
 81011c4:	10000008 	.word	0x10000008

081011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81011c8:	b480      	push	{r7}
 81011ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81011cc:	4b06      	ldr	r3, [pc, #24]	; (81011e8 <HAL_IncTick+0x20>)
 81011ce:	781b      	ldrb	r3, [r3, #0]
 81011d0:	461a      	mov	r2, r3
 81011d2:	4b06      	ldr	r3, [pc, #24]	; (81011ec <HAL_IncTick+0x24>)
 81011d4:	681b      	ldr	r3, [r3, #0]
 81011d6:	4413      	add	r3, r2
 81011d8:	4a04      	ldr	r2, [pc, #16]	; (81011ec <HAL_IncTick+0x24>)
 81011da:	6013      	str	r3, [r2, #0]
}
 81011dc:	bf00      	nop
 81011de:	46bd      	mov	sp, r7
 81011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e4:	4770      	bx	lr
 81011e6:	bf00      	nop
 81011e8:	1000000c 	.word	0x1000000c
 81011ec:	10000078 	.word	0x10000078

081011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81011f0:	b480      	push	{r7}
 81011f2:	af00      	add	r7, sp, #0
  return uwTick;
 81011f4:	4b03      	ldr	r3, [pc, #12]	; (8101204 <HAL_GetTick+0x14>)
 81011f6:	681b      	ldr	r3, [r3, #0]
}
 81011f8:	4618      	mov	r0, r3
 81011fa:	46bd      	mov	sp, r7
 81011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop
 8101204:	10000078 	.word	0x10000078

08101208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	b084      	sub	sp, #16
 810120c:	af00      	add	r7, sp, #0
 810120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101210:	f7ff ffee 	bl	81011f0 <HAL_GetTick>
 8101214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810121a:	68fb      	ldr	r3, [r7, #12]
 810121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101220:	d005      	beq.n	810122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101222:	4b0a      	ldr	r3, [pc, #40]	; (810124c <HAL_Delay+0x44>)
 8101224:	781b      	ldrb	r3, [r3, #0]
 8101226:	461a      	mov	r2, r3
 8101228:	68fb      	ldr	r3, [r7, #12]
 810122a:	4413      	add	r3, r2
 810122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810122e:	bf00      	nop
 8101230:	f7ff ffde 	bl	81011f0 <HAL_GetTick>
 8101234:	4602      	mov	r2, r0
 8101236:	68bb      	ldr	r3, [r7, #8]
 8101238:	1ad3      	subs	r3, r2, r3
 810123a:	68fa      	ldr	r2, [r7, #12]
 810123c:	429a      	cmp	r2, r3
 810123e:	d8f7      	bhi.n	8101230 <HAL_Delay+0x28>
  {
  }
}
 8101240:	bf00      	nop
 8101242:	bf00      	nop
 8101244:	3710      	adds	r7, #16
 8101246:	46bd      	mov	sp, r7
 8101248:	bd80      	pop	{r7, pc}
 810124a:	bf00      	nop
 810124c:	1000000c 	.word	0x1000000c

08101250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101250:	b480      	push	{r7}
 8101252:	b085      	sub	sp, #20
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	f003 0307 	and.w	r3, r3, #7
 810125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101260:	4b0c      	ldr	r3, [pc, #48]	; (8101294 <__NVIC_SetPriorityGrouping+0x44>)
 8101262:	68db      	ldr	r3, [r3, #12]
 8101264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101266:	68ba      	ldr	r2, [r7, #8]
 8101268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810126c:	4013      	ands	r3, r2
 810126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101270:	68fb      	ldr	r3, [r7, #12]
 8101272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101274:	68bb      	ldr	r3, [r7, #8]
 8101276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101282:	4a04      	ldr	r2, [pc, #16]	; (8101294 <__NVIC_SetPriorityGrouping+0x44>)
 8101284:	68bb      	ldr	r3, [r7, #8]
 8101286:	60d3      	str	r3, [r2, #12]
}
 8101288:	bf00      	nop
 810128a:	3714      	adds	r7, #20
 810128c:	46bd      	mov	sp, r7
 810128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101292:	4770      	bx	lr
 8101294:	e000ed00 	.word	0xe000ed00

08101298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101298:	b480      	push	{r7}
 810129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810129c:	4b04      	ldr	r3, [pc, #16]	; (81012b0 <__NVIC_GetPriorityGrouping+0x18>)
 810129e:	68db      	ldr	r3, [r3, #12]
 81012a0:	0a1b      	lsrs	r3, r3, #8
 81012a2:	f003 0307 	and.w	r3, r3, #7
}
 81012a6:	4618      	mov	r0, r3
 81012a8:	46bd      	mov	sp, r7
 81012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ae:	4770      	bx	lr
 81012b0:	e000ed00 	.word	0xe000ed00

081012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81012b4:	b480      	push	{r7}
 81012b6:	b083      	sub	sp, #12
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	4603      	mov	r3, r0
 81012bc:	6039      	str	r1, [r7, #0]
 81012be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	db0a      	blt.n	81012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81012c8:	683b      	ldr	r3, [r7, #0]
 81012ca:	b2da      	uxtb	r2, r3
 81012cc:	490c      	ldr	r1, [pc, #48]	; (8101300 <__NVIC_SetPriority+0x4c>)
 81012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81012d2:	0112      	lsls	r2, r2, #4
 81012d4:	b2d2      	uxtb	r2, r2
 81012d6:	440b      	add	r3, r1
 81012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81012dc:	e00a      	b.n	81012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81012de:	683b      	ldr	r3, [r7, #0]
 81012e0:	b2da      	uxtb	r2, r3
 81012e2:	4908      	ldr	r1, [pc, #32]	; (8101304 <__NVIC_SetPriority+0x50>)
 81012e4:	88fb      	ldrh	r3, [r7, #6]
 81012e6:	f003 030f 	and.w	r3, r3, #15
 81012ea:	3b04      	subs	r3, #4
 81012ec:	0112      	lsls	r2, r2, #4
 81012ee:	b2d2      	uxtb	r2, r2
 81012f0:	440b      	add	r3, r1
 81012f2:	761a      	strb	r2, [r3, #24]
}
 81012f4:	bf00      	nop
 81012f6:	370c      	adds	r7, #12
 81012f8:	46bd      	mov	sp, r7
 81012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fe:	4770      	bx	lr
 8101300:	e000e100 	.word	0xe000e100
 8101304:	e000ed00 	.word	0xe000ed00

08101308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101308:	b480      	push	{r7}
 810130a:	b089      	sub	sp, #36	; 0x24
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	60b9      	str	r1, [r7, #8]
 8101312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101314:	68fb      	ldr	r3, [r7, #12]
 8101316:	f003 0307 	and.w	r3, r3, #7
 810131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810131c:	69fb      	ldr	r3, [r7, #28]
 810131e:	f1c3 0307 	rsb	r3, r3, #7
 8101322:	2b04      	cmp	r3, #4
 8101324:	bf28      	it	cs
 8101326:	2304      	movcs	r3, #4
 8101328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810132a:	69fb      	ldr	r3, [r7, #28]
 810132c:	3304      	adds	r3, #4
 810132e:	2b06      	cmp	r3, #6
 8101330:	d902      	bls.n	8101338 <NVIC_EncodePriority+0x30>
 8101332:	69fb      	ldr	r3, [r7, #28]
 8101334:	3b03      	subs	r3, #3
 8101336:	e000      	b.n	810133a <NVIC_EncodePriority+0x32>
 8101338:	2300      	movs	r3, #0
 810133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810133c:	f04f 32ff 	mov.w	r2, #4294967295
 8101340:	69bb      	ldr	r3, [r7, #24]
 8101342:	fa02 f303 	lsl.w	r3, r2, r3
 8101346:	43da      	mvns	r2, r3
 8101348:	68bb      	ldr	r3, [r7, #8]
 810134a:	401a      	ands	r2, r3
 810134c:	697b      	ldr	r3, [r7, #20]
 810134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101350:	f04f 31ff 	mov.w	r1, #4294967295
 8101354:	697b      	ldr	r3, [r7, #20]
 8101356:	fa01 f303 	lsl.w	r3, r1, r3
 810135a:	43d9      	mvns	r1, r3
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101360:	4313      	orrs	r3, r2
         );
}
 8101362:	4618      	mov	r0, r3
 8101364:	3724      	adds	r7, #36	; 0x24
 8101366:	46bd      	mov	sp, r7
 8101368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136c:	4770      	bx	lr
	...

08101370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101370:	b580      	push	{r7, lr}
 8101372:	b082      	sub	sp, #8
 8101374:	af00      	add	r7, sp, #0
 8101376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	3b01      	subs	r3, #1
 810137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101380:	d301      	bcc.n	8101386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101382:	2301      	movs	r3, #1
 8101384:	e00f      	b.n	81013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101386:	4a0a      	ldr	r2, [pc, #40]	; (81013b0 <SysTick_Config+0x40>)
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	3b01      	subs	r3, #1
 810138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810138e:	210f      	movs	r1, #15
 8101390:	f04f 30ff 	mov.w	r0, #4294967295
 8101394:	f7ff ff8e 	bl	81012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101398:	4b05      	ldr	r3, [pc, #20]	; (81013b0 <SysTick_Config+0x40>)
 810139a:	2200      	movs	r2, #0
 810139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810139e:	4b04      	ldr	r3, [pc, #16]	; (81013b0 <SysTick_Config+0x40>)
 81013a0:	2207      	movs	r2, #7
 81013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81013a4:	2300      	movs	r3, #0
}
 81013a6:	4618      	mov	r0, r3
 81013a8:	3708      	adds	r7, #8
 81013aa:	46bd      	mov	sp, r7
 81013ac:	bd80      	pop	{r7, pc}
 81013ae:	bf00      	nop
 81013b0:	e000e010 	.word	0xe000e010

081013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81013b4:	b580      	push	{r7, lr}
 81013b6:	b082      	sub	sp, #8
 81013b8:	af00      	add	r7, sp, #0
 81013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81013bc:	6878      	ldr	r0, [r7, #4]
 81013be:	f7ff ff47 	bl	8101250 <__NVIC_SetPriorityGrouping>
}
 81013c2:	bf00      	nop
 81013c4:	3708      	adds	r7, #8
 81013c6:	46bd      	mov	sp, r7
 81013c8:	bd80      	pop	{r7, pc}

081013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81013ca:	b580      	push	{r7, lr}
 81013cc:	b086      	sub	sp, #24
 81013ce:	af00      	add	r7, sp, #0
 81013d0:	4603      	mov	r3, r0
 81013d2:	60b9      	str	r1, [r7, #8]
 81013d4:	607a      	str	r2, [r7, #4]
 81013d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81013d8:	f7ff ff5e 	bl	8101298 <__NVIC_GetPriorityGrouping>
 81013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81013de:	687a      	ldr	r2, [r7, #4]
 81013e0:	68b9      	ldr	r1, [r7, #8]
 81013e2:	6978      	ldr	r0, [r7, #20]
 81013e4:	f7ff ff90 	bl	8101308 <NVIC_EncodePriority>
 81013e8:	4602      	mov	r2, r0
 81013ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81013ee:	4611      	mov	r1, r2
 81013f0:	4618      	mov	r0, r3
 81013f2:	f7ff ff5f 	bl	81012b4 <__NVIC_SetPriority>
}
 81013f6:	bf00      	nop
 81013f8:	3718      	adds	r7, #24
 81013fa:	46bd      	mov	sp, r7
 81013fc:	bd80      	pop	{r7, pc}

081013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81013fe:	b580      	push	{r7, lr}
 8101400:	b082      	sub	sp, #8
 8101402:	af00      	add	r7, sp, #0
 8101404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101406:	6878      	ldr	r0, [r7, #4]
 8101408:	f7ff ffb2 	bl	8101370 <SysTick_Config>
 810140c:	4603      	mov	r3, r0
}
 810140e:	4618      	mov	r0, r3
 8101410:	3708      	adds	r7, #8
 8101412:	46bd      	mov	sp, r7
 8101414:	bd80      	pop	{r7, pc}
	...

08101418 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101418:	b480      	push	{r7}
 810141a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810141c:	4b07      	ldr	r3, [pc, #28]	; (810143c <HAL_GetCurrentCPUID+0x24>)
 810141e:	681b      	ldr	r3, [r3, #0]
 8101420:	091b      	lsrs	r3, r3, #4
 8101422:	f003 030f 	and.w	r3, r3, #15
 8101426:	2b07      	cmp	r3, #7
 8101428:	d101      	bne.n	810142e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810142a:	2303      	movs	r3, #3
 810142c:	e000      	b.n	8101430 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810142e:	2301      	movs	r3, #1
  }
}
 8101430:	4618      	mov	r0, r3
 8101432:	46bd      	mov	sp, r7
 8101434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101438:	4770      	bx	lr
 810143a:	bf00      	nop
 810143c:	e000ed00 	.word	0xe000ed00

08101440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101440:	b480      	push	{r7}
 8101442:	b089      	sub	sp, #36	; 0x24
 8101444:	af00      	add	r7, sp, #0
 8101446:	6078      	str	r0, [r7, #4]
 8101448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810144a:	2300      	movs	r3, #0
 810144c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810144e:	4b89      	ldr	r3, [pc, #548]	; (8101674 <HAL_GPIO_Init+0x234>)
 8101450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101452:	e194      	b.n	810177e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101454:	683b      	ldr	r3, [r7, #0]
 8101456:	681a      	ldr	r2, [r3, #0]
 8101458:	2101      	movs	r1, #1
 810145a:	69fb      	ldr	r3, [r7, #28]
 810145c:	fa01 f303 	lsl.w	r3, r1, r3
 8101460:	4013      	ands	r3, r2
 8101462:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101464:	693b      	ldr	r3, [r7, #16]
 8101466:	2b00      	cmp	r3, #0
 8101468:	f000 8186 	beq.w	8101778 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810146c:	683b      	ldr	r3, [r7, #0]
 810146e:	685b      	ldr	r3, [r3, #4]
 8101470:	f003 0303 	and.w	r3, r3, #3
 8101474:	2b01      	cmp	r3, #1
 8101476:	d005      	beq.n	8101484 <HAL_GPIO_Init+0x44>
 8101478:	683b      	ldr	r3, [r7, #0]
 810147a:	685b      	ldr	r3, [r3, #4]
 810147c:	f003 0303 	and.w	r3, r3, #3
 8101480:	2b02      	cmp	r3, #2
 8101482:	d130      	bne.n	81014e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	689b      	ldr	r3, [r3, #8]
 8101488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810148a:	69fb      	ldr	r3, [r7, #28]
 810148c:	005b      	lsls	r3, r3, #1
 810148e:	2203      	movs	r2, #3
 8101490:	fa02 f303 	lsl.w	r3, r2, r3
 8101494:	43db      	mvns	r3, r3
 8101496:	69ba      	ldr	r2, [r7, #24]
 8101498:	4013      	ands	r3, r2
 810149a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810149c:	683b      	ldr	r3, [r7, #0]
 810149e:	68da      	ldr	r2, [r3, #12]
 81014a0:	69fb      	ldr	r3, [r7, #28]
 81014a2:	005b      	lsls	r3, r3, #1
 81014a4:	fa02 f303 	lsl.w	r3, r2, r3
 81014a8:	69ba      	ldr	r2, [r7, #24]
 81014aa:	4313      	orrs	r3, r2
 81014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	69ba      	ldr	r2, [r7, #24]
 81014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81014b4:	687b      	ldr	r3, [r7, #4]
 81014b6:	685b      	ldr	r3, [r3, #4]
 81014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81014ba:	2201      	movs	r2, #1
 81014bc:	69fb      	ldr	r3, [r7, #28]
 81014be:	fa02 f303 	lsl.w	r3, r2, r3
 81014c2:	43db      	mvns	r3, r3
 81014c4:	69ba      	ldr	r2, [r7, #24]
 81014c6:	4013      	ands	r3, r2
 81014c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81014ca:	683b      	ldr	r3, [r7, #0]
 81014cc:	685b      	ldr	r3, [r3, #4]
 81014ce:	091b      	lsrs	r3, r3, #4
 81014d0:	f003 0201 	and.w	r2, r3, #1
 81014d4:	69fb      	ldr	r3, [r7, #28]
 81014d6:	fa02 f303 	lsl.w	r3, r2, r3
 81014da:	69ba      	ldr	r2, [r7, #24]
 81014dc:	4313      	orrs	r3, r2
 81014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81014e0:	687b      	ldr	r3, [r7, #4]
 81014e2:	69ba      	ldr	r2, [r7, #24]
 81014e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81014e6:	683b      	ldr	r3, [r7, #0]
 81014e8:	685b      	ldr	r3, [r3, #4]
 81014ea:	f003 0303 	and.w	r3, r3, #3
 81014ee:	2b03      	cmp	r3, #3
 81014f0:	d017      	beq.n	8101522 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	68db      	ldr	r3, [r3, #12]
 81014f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81014f8:	69fb      	ldr	r3, [r7, #28]
 81014fa:	005b      	lsls	r3, r3, #1
 81014fc:	2203      	movs	r2, #3
 81014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101502:	43db      	mvns	r3, r3
 8101504:	69ba      	ldr	r2, [r7, #24]
 8101506:	4013      	ands	r3, r2
 8101508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810150a:	683b      	ldr	r3, [r7, #0]
 810150c:	689a      	ldr	r2, [r3, #8]
 810150e:	69fb      	ldr	r3, [r7, #28]
 8101510:	005b      	lsls	r3, r3, #1
 8101512:	fa02 f303 	lsl.w	r3, r2, r3
 8101516:	69ba      	ldr	r2, [r7, #24]
 8101518:	4313      	orrs	r3, r2
 810151a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	69ba      	ldr	r2, [r7, #24]
 8101520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101522:	683b      	ldr	r3, [r7, #0]
 8101524:	685b      	ldr	r3, [r3, #4]
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	2b02      	cmp	r3, #2
 810152c:	d123      	bne.n	8101576 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810152e:	69fb      	ldr	r3, [r7, #28]
 8101530:	08da      	lsrs	r2, r3, #3
 8101532:	687b      	ldr	r3, [r7, #4]
 8101534:	3208      	adds	r2, #8
 8101536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810153c:	69fb      	ldr	r3, [r7, #28]
 810153e:	f003 0307 	and.w	r3, r3, #7
 8101542:	009b      	lsls	r3, r3, #2
 8101544:	220f      	movs	r2, #15
 8101546:	fa02 f303 	lsl.w	r3, r2, r3
 810154a:	43db      	mvns	r3, r3
 810154c:	69ba      	ldr	r2, [r7, #24]
 810154e:	4013      	ands	r3, r2
 8101550:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101552:	683b      	ldr	r3, [r7, #0]
 8101554:	691a      	ldr	r2, [r3, #16]
 8101556:	69fb      	ldr	r3, [r7, #28]
 8101558:	f003 0307 	and.w	r3, r3, #7
 810155c:	009b      	lsls	r3, r3, #2
 810155e:	fa02 f303 	lsl.w	r3, r2, r3
 8101562:	69ba      	ldr	r2, [r7, #24]
 8101564:	4313      	orrs	r3, r2
 8101566:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101568:	69fb      	ldr	r3, [r7, #28]
 810156a:	08da      	lsrs	r2, r3, #3
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	3208      	adds	r2, #8
 8101570:	69b9      	ldr	r1, [r7, #24]
 8101572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101576:	687b      	ldr	r3, [r7, #4]
 8101578:	681b      	ldr	r3, [r3, #0]
 810157a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810157c:	69fb      	ldr	r3, [r7, #28]
 810157e:	005b      	lsls	r3, r3, #1
 8101580:	2203      	movs	r2, #3
 8101582:	fa02 f303 	lsl.w	r3, r2, r3
 8101586:	43db      	mvns	r3, r3
 8101588:	69ba      	ldr	r2, [r7, #24]
 810158a:	4013      	ands	r3, r2
 810158c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810158e:	683b      	ldr	r3, [r7, #0]
 8101590:	685b      	ldr	r3, [r3, #4]
 8101592:	f003 0203 	and.w	r2, r3, #3
 8101596:	69fb      	ldr	r3, [r7, #28]
 8101598:	005b      	lsls	r3, r3, #1
 810159a:	fa02 f303 	lsl.w	r3, r2, r3
 810159e:	69ba      	ldr	r2, [r7, #24]
 81015a0:	4313      	orrs	r3, r2
 81015a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81015a4:	687b      	ldr	r3, [r7, #4]
 81015a6:	69ba      	ldr	r2, [r7, #24]
 81015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81015aa:	683b      	ldr	r3, [r7, #0]
 81015ac:	685b      	ldr	r3, [r3, #4]
 81015ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81015b2:	2b00      	cmp	r3, #0
 81015b4:	f000 80e0 	beq.w	8101778 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81015b8:	4b2f      	ldr	r3, [pc, #188]	; (8101678 <HAL_GPIO_Init+0x238>)
 81015ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81015be:	4a2e      	ldr	r2, [pc, #184]	; (8101678 <HAL_GPIO_Init+0x238>)
 81015c0:	f043 0302 	orr.w	r3, r3, #2
 81015c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81015c8:	4b2b      	ldr	r3, [pc, #172]	; (8101678 <HAL_GPIO_Init+0x238>)
 81015ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81015ce:	f003 0302 	and.w	r3, r3, #2
 81015d2:	60fb      	str	r3, [r7, #12]
 81015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81015d6:	4a29      	ldr	r2, [pc, #164]	; (810167c <HAL_GPIO_Init+0x23c>)
 81015d8:	69fb      	ldr	r3, [r7, #28]
 81015da:	089b      	lsrs	r3, r3, #2
 81015dc:	3302      	adds	r3, #2
 81015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81015e4:	69fb      	ldr	r3, [r7, #28]
 81015e6:	f003 0303 	and.w	r3, r3, #3
 81015ea:	009b      	lsls	r3, r3, #2
 81015ec:	220f      	movs	r2, #15
 81015ee:	fa02 f303 	lsl.w	r3, r2, r3
 81015f2:	43db      	mvns	r3, r3
 81015f4:	69ba      	ldr	r2, [r7, #24]
 81015f6:	4013      	ands	r3, r2
 81015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	4a20      	ldr	r2, [pc, #128]	; (8101680 <HAL_GPIO_Init+0x240>)
 81015fe:	4293      	cmp	r3, r2
 8101600:	d052      	beq.n	81016a8 <HAL_GPIO_Init+0x268>
 8101602:	687b      	ldr	r3, [r7, #4]
 8101604:	4a1f      	ldr	r2, [pc, #124]	; (8101684 <HAL_GPIO_Init+0x244>)
 8101606:	4293      	cmp	r3, r2
 8101608:	d031      	beq.n	810166e <HAL_GPIO_Init+0x22e>
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	4a1e      	ldr	r2, [pc, #120]	; (8101688 <HAL_GPIO_Init+0x248>)
 810160e:	4293      	cmp	r3, r2
 8101610:	d02b      	beq.n	810166a <HAL_GPIO_Init+0x22a>
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	4a1d      	ldr	r2, [pc, #116]	; (810168c <HAL_GPIO_Init+0x24c>)
 8101616:	4293      	cmp	r3, r2
 8101618:	d025      	beq.n	8101666 <HAL_GPIO_Init+0x226>
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	4a1c      	ldr	r2, [pc, #112]	; (8101690 <HAL_GPIO_Init+0x250>)
 810161e:	4293      	cmp	r3, r2
 8101620:	d01f      	beq.n	8101662 <HAL_GPIO_Init+0x222>
 8101622:	687b      	ldr	r3, [r7, #4]
 8101624:	4a1b      	ldr	r2, [pc, #108]	; (8101694 <HAL_GPIO_Init+0x254>)
 8101626:	4293      	cmp	r3, r2
 8101628:	d019      	beq.n	810165e <HAL_GPIO_Init+0x21e>
 810162a:	687b      	ldr	r3, [r7, #4]
 810162c:	4a1a      	ldr	r2, [pc, #104]	; (8101698 <HAL_GPIO_Init+0x258>)
 810162e:	4293      	cmp	r3, r2
 8101630:	d013      	beq.n	810165a <HAL_GPIO_Init+0x21a>
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	4a19      	ldr	r2, [pc, #100]	; (810169c <HAL_GPIO_Init+0x25c>)
 8101636:	4293      	cmp	r3, r2
 8101638:	d00d      	beq.n	8101656 <HAL_GPIO_Init+0x216>
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	4a18      	ldr	r2, [pc, #96]	; (81016a0 <HAL_GPIO_Init+0x260>)
 810163e:	4293      	cmp	r3, r2
 8101640:	d007      	beq.n	8101652 <HAL_GPIO_Init+0x212>
 8101642:	687b      	ldr	r3, [r7, #4]
 8101644:	4a17      	ldr	r2, [pc, #92]	; (81016a4 <HAL_GPIO_Init+0x264>)
 8101646:	4293      	cmp	r3, r2
 8101648:	d101      	bne.n	810164e <HAL_GPIO_Init+0x20e>
 810164a:	2309      	movs	r3, #9
 810164c:	e02d      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 810164e:	230a      	movs	r3, #10
 8101650:	e02b      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 8101652:	2308      	movs	r3, #8
 8101654:	e029      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 8101656:	2307      	movs	r3, #7
 8101658:	e027      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 810165a:	2306      	movs	r3, #6
 810165c:	e025      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 810165e:	2305      	movs	r3, #5
 8101660:	e023      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 8101662:	2304      	movs	r3, #4
 8101664:	e021      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 8101666:	2303      	movs	r3, #3
 8101668:	e01f      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 810166a:	2302      	movs	r3, #2
 810166c:	e01d      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 810166e:	2301      	movs	r3, #1
 8101670:	e01b      	b.n	81016aa <HAL_GPIO_Init+0x26a>
 8101672:	bf00      	nop
 8101674:	580000c0 	.word	0x580000c0
 8101678:	58024400 	.word	0x58024400
 810167c:	58000400 	.word	0x58000400
 8101680:	58020000 	.word	0x58020000
 8101684:	58020400 	.word	0x58020400
 8101688:	58020800 	.word	0x58020800
 810168c:	58020c00 	.word	0x58020c00
 8101690:	58021000 	.word	0x58021000
 8101694:	58021400 	.word	0x58021400
 8101698:	58021800 	.word	0x58021800
 810169c:	58021c00 	.word	0x58021c00
 81016a0:	58022000 	.word	0x58022000
 81016a4:	58022400 	.word	0x58022400
 81016a8:	2300      	movs	r3, #0
 81016aa:	69fa      	ldr	r2, [r7, #28]
 81016ac:	f002 0203 	and.w	r2, r2, #3
 81016b0:	0092      	lsls	r2, r2, #2
 81016b2:	4093      	lsls	r3, r2
 81016b4:	69ba      	ldr	r2, [r7, #24]
 81016b6:	4313      	orrs	r3, r2
 81016b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81016ba:	4938      	ldr	r1, [pc, #224]	; (810179c <HAL_GPIO_Init+0x35c>)
 81016bc:	69fb      	ldr	r3, [r7, #28]
 81016be:	089b      	lsrs	r3, r3, #2
 81016c0:	3302      	adds	r3, #2
 81016c2:	69ba      	ldr	r2, [r7, #24]
 81016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81016c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81016d0:	693b      	ldr	r3, [r7, #16]
 81016d2:	43db      	mvns	r3, r3
 81016d4:	69ba      	ldr	r2, [r7, #24]
 81016d6:	4013      	ands	r3, r2
 81016d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81016da:	683b      	ldr	r3, [r7, #0]
 81016dc:	685b      	ldr	r3, [r3, #4]
 81016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81016e2:	2b00      	cmp	r3, #0
 81016e4:	d003      	beq.n	81016ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81016e6:	69ba      	ldr	r2, [r7, #24]
 81016e8:	693b      	ldr	r3, [r7, #16]
 81016ea:	4313      	orrs	r3, r2
 81016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81016ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81016f2:	69bb      	ldr	r3, [r7, #24]
 81016f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81016fa:	685b      	ldr	r3, [r3, #4]
 81016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81016fe:	693b      	ldr	r3, [r7, #16]
 8101700:	43db      	mvns	r3, r3
 8101702:	69ba      	ldr	r2, [r7, #24]
 8101704:	4013      	ands	r3, r2
 8101706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101708:	683b      	ldr	r3, [r7, #0]
 810170a:	685b      	ldr	r3, [r3, #4]
 810170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101710:	2b00      	cmp	r3, #0
 8101712:	d003      	beq.n	810171c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101714:	69ba      	ldr	r2, [r7, #24]
 8101716:	693b      	ldr	r3, [r7, #16]
 8101718:	4313      	orrs	r3, r2
 810171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810171c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101720:	69bb      	ldr	r3, [r7, #24]
 8101722:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101724:	697b      	ldr	r3, [r7, #20]
 8101726:	685b      	ldr	r3, [r3, #4]
 8101728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810172a:	693b      	ldr	r3, [r7, #16]
 810172c:	43db      	mvns	r3, r3
 810172e:	69ba      	ldr	r2, [r7, #24]
 8101730:	4013      	ands	r3, r2
 8101732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101734:	683b      	ldr	r3, [r7, #0]
 8101736:	685b      	ldr	r3, [r3, #4]
 8101738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810173c:	2b00      	cmp	r3, #0
 810173e:	d003      	beq.n	8101748 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101740:	69ba      	ldr	r2, [r7, #24]
 8101742:	693b      	ldr	r3, [r7, #16]
 8101744:	4313      	orrs	r3, r2
 8101746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101748:	697b      	ldr	r3, [r7, #20]
 810174a:	69ba      	ldr	r2, [r7, #24]
 810174c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810174e:	697b      	ldr	r3, [r7, #20]
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101754:	693b      	ldr	r3, [r7, #16]
 8101756:	43db      	mvns	r3, r3
 8101758:	69ba      	ldr	r2, [r7, #24]
 810175a:	4013      	ands	r3, r2
 810175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810175e:	683b      	ldr	r3, [r7, #0]
 8101760:	685b      	ldr	r3, [r3, #4]
 8101762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101766:	2b00      	cmp	r3, #0
 8101768:	d003      	beq.n	8101772 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810176a:	69ba      	ldr	r2, [r7, #24]
 810176c:	693b      	ldr	r3, [r7, #16]
 810176e:	4313      	orrs	r3, r2
 8101770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101772:	697b      	ldr	r3, [r7, #20]
 8101774:	69ba      	ldr	r2, [r7, #24]
 8101776:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101778:	69fb      	ldr	r3, [r7, #28]
 810177a:	3301      	adds	r3, #1
 810177c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810177e:	683b      	ldr	r3, [r7, #0]
 8101780:	681a      	ldr	r2, [r3, #0]
 8101782:	69fb      	ldr	r3, [r7, #28]
 8101784:	fa22 f303 	lsr.w	r3, r2, r3
 8101788:	2b00      	cmp	r3, #0
 810178a:	f47f ae63 	bne.w	8101454 <HAL_GPIO_Init+0x14>
  }
}
 810178e:	bf00      	nop
 8101790:	bf00      	nop
 8101792:	3724      	adds	r7, #36	; 0x24
 8101794:	46bd      	mov	sp, r7
 8101796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179a:	4770      	bx	lr
 810179c:	58000400 	.word	0x58000400

081017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81017a0:	b480      	push	{r7}
 81017a2:	b083      	sub	sp, #12
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	6078      	str	r0, [r7, #4]
 81017a8:	460b      	mov	r3, r1
 81017aa:	807b      	strh	r3, [r7, #2]
 81017ac:	4613      	mov	r3, r2
 81017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81017b0:	787b      	ldrb	r3, [r7, #1]
 81017b2:	2b00      	cmp	r3, #0
 81017b4:	d003      	beq.n	81017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81017b6:	887a      	ldrh	r2, [r7, #2]
 81017b8:	687b      	ldr	r3, [r7, #4]
 81017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81017bc:	e003      	b.n	81017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81017be:	887b      	ldrh	r3, [r7, #2]
 81017c0:	041a      	lsls	r2, r3, #16
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	619a      	str	r2, [r3, #24]
}
 81017c6:	bf00      	nop
 81017c8:	370c      	adds	r7, #12
 81017ca:	46bd      	mov	sp, r7
 81017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d0:	4770      	bx	lr

081017d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81017d2:	b480      	push	{r7}
 81017d4:	b085      	sub	sp, #20
 81017d6:	af00      	add	r7, sp, #0
 81017d8:	6078      	str	r0, [r7, #4]
 81017da:	460b      	mov	r3, r1
 81017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	695b      	ldr	r3, [r3, #20]
 81017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81017e4:	887a      	ldrh	r2, [r7, #2]
 81017e6:	68fb      	ldr	r3, [r7, #12]
 81017e8:	4013      	ands	r3, r2
 81017ea:	041a      	lsls	r2, r3, #16
 81017ec:	68fb      	ldr	r3, [r7, #12]
 81017ee:	43d9      	mvns	r1, r3
 81017f0:	887b      	ldrh	r3, [r7, #2]
 81017f2:	400b      	ands	r3, r1
 81017f4:	431a      	orrs	r2, r3
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	619a      	str	r2, [r3, #24]
}
 81017fa:	bf00      	nop
 81017fc:	3714      	adds	r7, #20
 81017fe:	46bd      	mov	sp, r7
 8101800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101804:	4770      	bx	lr
	...

08101808 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101810:	4b05      	ldr	r3, [pc, #20]	; (8101828 <HAL_HSEM_ActivateNotification+0x20>)
 8101812:	681a      	ldr	r2, [r3, #0]
 8101814:	4904      	ldr	r1, [pc, #16]	; (8101828 <HAL_HSEM_ActivateNotification+0x20>)
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	4313      	orrs	r3, r2
 810181a:	600b      	str	r3, [r1, #0]
#endif
}
 810181c:	bf00      	nop
 810181e:	370c      	adds	r7, #12
 8101820:	46bd      	mov	sp, r7
 8101822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101826:	4770      	bx	lr
 8101828:	58026510 	.word	0x58026510

0810182c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810182c:	b580      	push	{r7, lr}
 810182e:	b084      	sub	sp, #16
 8101830:	af00      	add	r7, sp, #0
 8101832:	60f8      	str	r0, [r7, #12]
 8101834:	460b      	mov	r3, r1
 8101836:	607a      	str	r2, [r7, #4]
 8101838:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810183a:	4b37      	ldr	r3, [pc, #220]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 810183c:	681b      	ldr	r3, [r3, #0]
 810183e:	f023 0201 	bic.w	r2, r3, #1
 8101842:	4935      	ldr	r1, [pc, #212]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101844:	68fb      	ldr	r3, [r7, #12]
 8101846:	4313      	orrs	r3, r2
 8101848:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	2b00      	cmp	r3, #0
 810184e:	d123      	bne.n	8101898 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101850:	f7ff fde2 	bl	8101418 <HAL_GetCurrentCPUID>
 8101854:	4603      	mov	r3, r0
 8101856:	2b03      	cmp	r3, #3
 8101858:	d158      	bne.n	810190c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810185a:	4b2f      	ldr	r3, [pc, #188]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 810185c:	691b      	ldr	r3, [r3, #16]
 810185e:	4a2e      	ldr	r2, [pc, #184]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101860:	f023 0301 	bic.w	r3, r3, #1
 8101864:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101866:	4b2d      	ldr	r3, [pc, #180]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101868:	691b      	ldr	r3, [r3, #16]
 810186a:	4a2c      	ldr	r2, [pc, #176]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810186c:	f043 0304 	orr.w	r3, r3, #4
 8101870:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101872:	f3bf 8f4f 	dsb	sy
}
 8101876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101878:	f3bf 8f6f 	isb	sy
}
 810187c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810187e:	7afb      	ldrb	r3, [r7, #11]
 8101880:	2b01      	cmp	r3, #1
 8101882:	d101      	bne.n	8101888 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101884:	bf30      	wfi
 8101886:	e000      	b.n	810188a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101888:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810188a:	4b24      	ldr	r3, [pc, #144]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810188c:	691b      	ldr	r3, [r3, #16]
 810188e:	4a23      	ldr	r2, [pc, #140]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101890:	f023 0304 	bic.w	r3, r3, #4
 8101894:	6113      	str	r3, [r2, #16]
 8101896:	e03c      	b.n	8101912 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	2b01      	cmp	r3, #1
 810189c:	d123      	bne.n	81018e6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810189e:	f7ff fdbb 	bl	8101418 <HAL_GetCurrentCPUID>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b01      	cmp	r3, #1
 81018a6:	d133      	bne.n	8101910 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81018a8:	4b1b      	ldr	r3, [pc, #108]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018aa:	695b      	ldr	r3, [r3, #20]
 81018ac:	4a1a      	ldr	r2, [pc, #104]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018ae:	f023 0302 	bic.w	r3, r3, #2
 81018b2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81018b4:	4b19      	ldr	r3, [pc, #100]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018b6:	691b      	ldr	r3, [r3, #16]
 81018b8:	4a18      	ldr	r2, [pc, #96]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018ba:	f043 0304 	orr.w	r3, r3, #4
 81018be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81018c0:	f3bf 8f4f 	dsb	sy
}
 81018c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81018c6:	f3bf 8f6f 	isb	sy
}
 81018ca:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81018cc:	7afb      	ldrb	r3, [r7, #11]
 81018ce:	2b01      	cmp	r3, #1
 81018d0:	d101      	bne.n	81018d6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81018d2:	bf30      	wfi
 81018d4:	e000      	b.n	81018d8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81018d6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81018d8:	4b10      	ldr	r3, [pc, #64]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018da:	691b      	ldr	r3, [r3, #16]
 81018dc:	4a0f      	ldr	r2, [pc, #60]	; (810191c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81018de:	f023 0304 	bic.w	r3, r3, #4
 81018e2:	6113      	str	r3, [r2, #16]
 81018e4:	e015      	b.n	8101912 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81018e6:	f7ff fd97 	bl	8101418 <HAL_GetCurrentCPUID>
 81018ea:	4603      	mov	r3, r0
 81018ec:	2b03      	cmp	r3, #3
 81018ee:	d106      	bne.n	81018fe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81018f0:	4b09      	ldr	r3, [pc, #36]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018f2:	691b      	ldr	r3, [r3, #16]
 81018f4:	4a08      	ldr	r2, [pc, #32]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018f6:	f023 0304 	bic.w	r3, r3, #4
 81018fa:	6113      	str	r3, [r2, #16]
 81018fc:	e009      	b.n	8101912 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81018fe:	4b06      	ldr	r3, [pc, #24]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101900:	695b      	ldr	r3, [r3, #20]
 8101902:	4a05      	ldr	r2, [pc, #20]	; (8101918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101904:	f023 0304 	bic.w	r3, r3, #4
 8101908:	6153      	str	r3, [r2, #20]
 810190a:	e002      	b.n	8101912 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101910:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101912:	3710      	adds	r7, #16
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	58024800 	.word	0x58024800
 810191c:	e000ed00 	.word	0xe000ed00

08101920 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101920:	b580      	push	{r7, lr}
 8101922:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101924:	f7ff fd78 	bl	8101418 <HAL_GetCurrentCPUID>
 8101928:	4603      	mov	r3, r0
 810192a:	2b03      	cmp	r3, #3
 810192c:	d101      	bne.n	8101932 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810192e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101930:	e001      	b.n	8101936 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101932:	bf40      	sev
    __WFE ();
 8101934:	bf20      	wfe
}
 8101936:	bf00      	nop
 8101938:	bd80      	pop	{r7, pc}
	...

0810193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810193c:	b480      	push	{r7}
 810193e:	b089      	sub	sp, #36	; 0x24
 8101940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101942:	4bb3      	ldr	r3, [pc, #716]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101944:	691b      	ldr	r3, [r3, #16]
 8101946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810194a:	2b18      	cmp	r3, #24
 810194c:	f200 8155 	bhi.w	8101bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8101950:	a201      	add	r2, pc, #4	; (adr r2, 8101958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101956:	bf00      	nop
 8101958:	081019bd 	.word	0x081019bd
 810195c:	08101bfb 	.word	0x08101bfb
 8101960:	08101bfb 	.word	0x08101bfb
 8101964:	08101bfb 	.word	0x08101bfb
 8101968:	08101bfb 	.word	0x08101bfb
 810196c:	08101bfb 	.word	0x08101bfb
 8101970:	08101bfb 	.word	0x08101bfb
 8101974:	08101bfb 	.word	0x08101bfb
 8101978:	081019e3 	.word	0x081019e3
 810197c:	08101bfb 	.word	0x08101bfb
 8101980:	08101bfb 	.word	0x08101bfb
 8101984:	08101bfb 	.word	0x08101bfb
 8101988:	08101bfb 	.word	0x08101bfb
 810198c:	08101bfb 	.word	0x08101bfb
 8101990:	08101bfb 	.word	0x08101bfb
 8101994:	08101bfb 	.word	0x08101bfb
 8101998:	081019e9 	.word	0x081019e9
 810199c:	08101bfb 	.word	0x08101bfb
 81019a0:	08101bfb 	.word	0x08101bfb
 81019a4:	08101bfb 	.word	0x08101bfb
 81019a8:	08101bfb 	.word	0x08101bfb
 81019ac:	08101bfb 	.word	0x08101bfb
 81019b0:	08101bfb 	.word	0x08101bfb
 81019b4:	08101bfb 	.word	0x08101bfb
 81019b8:	081019ef 	.word	0x081019ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81019bc:	4b94      	ldr	r3, [pc, #592]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	f003 0320 	and.w	r3, r3, #32
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	d009      	beq.n	81019dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81019c8:	4b91      	ldr	r3, [pc, #580]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	08db      	lsrs	r3, r3, #3
 81019ce:	f003 0303 	and.w	r3, r3, #3
 81019d2:	4a90      	ldr	r2, [pc, #576]	; (8101c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81019d4:	fa22 f303 	lsr.w	r3, r2, r3
 81019d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81019da:	e111      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81019dc:	4b8d      	ldr	r3, [pc, #564]	; (8101c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81019de:	61bb      	str	r3, [r7, #24]
    break;
 81019e0:	e10e      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81019e2:	4b8d      	ldr	r3, [pc, #564]	; (8101c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019e4:	61bb      	str	r3, [r7, #24]
    break;
 81019e6:	e10b      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81019e8:	4b8c      	ldr	r3, [pc, #560]	; (8101c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81019ea:	61bb      	str	r3, [r7, #24]
    break;
 81019ec:	e108      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81019ee:	4b88      	ldr	r3, [pc, #544]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81019f2:	f003 0303 	and.w	r3, r3, #3
 81019f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81019f8:	4b85      	ldr	r3, [pc, #532]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81019fc:	091b      	lsrs	r3, r3, #4
 81019fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101a04:	4b82      	ldr	r3, [pc, #520]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a08:	f003 0301 	and.w	r3, r3, #1
 8101a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101a0e:	4b80      	ldr	r3, [pc, #512]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101a12:	08db      	lsrs	r3, r3, #3
 8101a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101a18:	68fa      	ldr	r2, [r7, #12]
 8101a1a:	fb02 f303 	mul.w	r3, r2, r3
 8101a1e:	ee07 3a90 	vmov	s15, r3
 8101a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101a2a:	693b      	ldr	r3, [r7, #16]
 8101a2c:	2b00      	cmp	r3, #0
 8101a2e:	f000 80e1 	beq.w	8101bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101a32:	697b      	ldr	r3, [r7, #20]
 8101a34:	2b02      	cmp	r3, #2
 8101a36:	f000 8083 	beq.w	8101b40 <HAL_RCC_GetSysClockFreq+0x204>
 8101a3a:	697b      	ldr	r3, [r7, #20]
 8101a3c:	2b02      	cmp	r3, #2
 8101a3e:	f200 80a1 	bhi.w	8101b84 <HAL_RCC_GetSysClockFreq+0x248>
 8101a42:	697b      	ldr	r3, [r7, #20]
 8101a44:	2b00      	cmp	r3, #0
 8101a46:	d003      	beq.n	8101a50 <HAL_RCC_GetSysClockFreq+0x114>
 8101a48:	697b      	ldr	r3, [r7, #20]
 8101a4a:	2b01      	cmp	r3, #1
 8101a4c:	d056      	beq.n	8101afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8101a4e:	e099      	b.n	8101b84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101a50:	4b6f      	ldr	r3, [pc, #444]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a52:	681b      	ldr	r3, [r3, #0]
 8101a54:	f003 0320 	and.w	r3, r3, #32
 8101a58:	2b00      	cmp	r3, #0
 8101a5a:	d02d      	beq.n	8101ab8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101a5c:	4b6c      	ldr	r3, [pc, #432]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	08db      	lsrs	r3, r3, #3
 8101a62:	f003 0303 	and.w	r3, r3, #3
 8101a66:	4a6b      	ldr	r2, [pc, #428]	; (8101c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101a68:	fa22 f303 	lsr.w	r3, r2, r3
 8101a6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	ee07 3a90 	vmov	s15, r3
 8101a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a78:	693b      	ldr	r3, [r7, #16]
 8101a7a:	ee07 3a90 	vmov	s15, r3
 8101a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a86:	4b62      	ldr	r3, [pc, #392]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a8e:	ee07 3a90 	vmov	s15, r3
 8101a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101ab6:	e087      	b.n	8101bc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101ab8:	693b      	ldr	r3, [r7, #16]
 8101aba:	ee07 3a90 	vmov	s15, r3
 8101abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101aca:	4b51      	ldr	r3, [pc, #324]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ad2:	ee07 3a90 	vmov	s15, r3
 8101ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101afa:	e065      	b.n	8101bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101afc:	693b      	ldr	r3, [r7, #16]
 8101afe:	ee07 3a90 	vmov	s15, r3
 8101b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b0e:	4b40      	ldr	r3, [pc, #256]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b16:	ee07 3a90 	vmov	s15, r3
 8101b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101b3e:	e043      	b.n	8101bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101b40:	693b      	ldr	r3, [r7, #16]
 8101b42:	ee07 3a90 	vmov	s15, r3
 8101b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8101b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b52:	4b2f      	ldr	r3, [pc, #188]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b5a:	ee07 3a90 	vmov	s15, r3
 8101b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101b82:	e021      	b.n	8101bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101b84:	693b      	ldr	r3, [r7, #16]
 8101b86:	ee07 3a90 	vmov	s15, r3
 8101b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b96:	4b1e      	ldr	r3, [pc, #120]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b9e:	ee07 3a90 	vmov	s15, r3
 8101ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101bc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101bc8:	4b11      	ldr	r3, [pc, #68]	; (8101c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101bcc:	0a5b      	lsrs	r3, r3, #9
 8101bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101bd2:	3301      	adds	r3, #1
 8101bd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101bd6:	683b      	ldr	r3, [r7, #0]
 8101bd8:	ee07 3a90 	vmov	s15, r3
 8101bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8101be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101bec:	ee17 3a90 	vmov	r3, s15
 8101bf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101bf2:	e005      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	61bb      	str	r3, [r7, #24]
    break;
 8101bf8:	e002      	b.n	8101c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101bfa:	4b07      	ldr	r3, [pc, #28]	; (8101c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101bfc:	61bb      	str	r3, [r7, #24]
    break;
 8101bfe:	bf00      	nop
  }

  return sysclockfreq;
 8101c00:	69bb      	ldr	r3, [r7, #24]
}
 8101c02:	4618      	mov	r0, r3
 8101c04:	3724      	adds	r7, #36	; 0x24
 8101c06:	46bd      	mov	sp, r7
 8101c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c0c:	4770      	bx	lr
 8101c0e:	bf00      	nop
 8101c10:	58024400 	.word	0x58024400
 8101c14:	03d09000 	.word	0x03d09000
 8101c18:	003d0900 	.word	0x003d0900
 8101c1c:	007a1200 	.word	0x007a1200
 8101c20:	46000000 	.word	0x46000000
 8101c24:	4c742400 	.word	0x4c742400
 8101c28:	4a742400 	.word	0x4a742400
 8101c2c:	4af42400 	.word	0x4af42400

08101c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101c30:	b580      	push	{r7, lr}
 8101c32:	b082      	sub	sp, #8
 8101c34:	af00      	add	r7, sp, #0
 8101c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	2b00      	cmp	r3, #0
 8101c3c:	d101      	bne.n	8101c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101c3e:	2301      	movs	r3, #1
 8101c40:	e049      	b.n	8101cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101c48:	b2db      	uxtb	r3, r3
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d106      	bne.n	8101c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	2200      	movs	r2, #0
 8101c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101c56:	6878      	ldr	r0, [r7, #4]
 8101c58:	f7ff f972 	bl	8100f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	2202      	movs	r2, #2
 8101c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	681a      	ldr	r2, [r3, #0]
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	3304      	adds	r3, #4
 8101c6c:	4619      	mov	r1, r3
 8101c6e:	4610      	mov	r0, r2
 8101c70:	f000 faae 	bl	81021d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	2201      	movs	r2, #1
 8101c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	2201      	movs	r2, #1
 8101c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	2201      	movs	r2, #1
 8101c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	2201      	movs	r2, #1
 8101c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	2201      	movs	r2, #1
 8101c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	2201      	movs	r2, #1
 8101ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	2201      	movs	r2, #1
 8101ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	2201      	movs	r2, #1
 8101cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	2201      	movs	r2, #1
 8101cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	2201      	movs	r2, #1
 8101cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	2201      	movs	r2, #1
 8101cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	2201      	movs	r2, #1
 8101cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101cd4:	2300      	movs	r3, #0
}
 8101cd6:	4618      	mov	r0, r3
 8101cd8:	3708      	adds	r7, #8
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bd80      	pop	{r7, pc}

08101cde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8101cde:	b580      	push	{r7, lr}
 8101ce0:	b082      	sub	sp, #8
 8101ce2:	af00      	add	r7, sp, #0
 8101ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	2b00      	cmp	r3, #0
 8101cea:	d101      	bne.n	8101cf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8101cec:	2301      	movs	r3, #1
 8101cee:	e049      	b.n	8101d84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101cf6:	b2db      	uxtb	r3, r3
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	d106      	bne.n	8101d0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	2200      	movs	r2, #0
 8101d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8101d04:	6878      	ldr	r0, [r7, #4]
 8101d06:	f7ff f8f9 	bl	8100efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	2202      	movs	r2, #2
 8101d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681a      	ldr	r2, [r3, #0]
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	3304      	adds	r3, #4
 8101d1a:	4619      	mov	r1, r3
 8101d1c:	4610      	mov	r0, r2
 8101d1e:	f000 fa57 	bl	81021d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	2201      	movs	r2, #1
 8101d26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	2201      	movs	r2, #1
 8101d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	2201      	movs	r2, #1
 8101d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	2201      	movs	r2, #1
 8101d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	2201      	movs	r2, #1
 8101d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	2201      	movs	r2, #1
 8101d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	2201      	movs	r2, #1
 8101d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	2201      	movs	r2, #1
 8101d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	2201      	movs	r2, #1
 8101d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	2201      	movs	r2, #1
 8101d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	2201      	movs	r2, #1
 8101d76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	2201      	movs	r2, #1
 8101d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101d82:	2300      	movs	r3, #0
}
 8101d84:	4618      	mov	r0, r3
 8101d86:	3708      	adds	r7, #8
 8101d88:	46bd      	mov	sp, r7
 8101d8a:	bd80      	pop	{r7, pc}

08101d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	b084      	sub	sp, #16
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
 8101d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8101d96:	683b      	ldr	r3, [r7, #0]
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d109      	bne.n	8101db0 <HAL_TIM_PWM_Start+0x24>
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8101da2:	b2db      	uxtb	r3, r3
 8101da4:	2b01      	cmp	r3, #1
 8101da6:	bf14      	ite	ne
 8101da8:	2301      	movne	r3, #1
 8101daa:	2300      	moveq	r3, #0
 8101dac:	b2db      	uxtb	r3, r3
 8101dae:	e03c      	b.n	8101e2a <HAL_TIM_PWM_Start+0x9e>
 8101db0:	683b      	ldr	r3, [r7, #0]
 8101db2:	2b04      	cmp	r3, #4
 8101db4:	d109      	bne.n	8101dca <HAL_TIM_PWM_Start+0x3e>
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8101dbc:	b2db      	uxtb	r3, r3
 8101dbe:	2b01      	cmp	r3, #1
 8101dc0:	bf14      	ite	ne
 8101dc2:	2301      	movne	r3, #1
 8101dc4:	2300      	moveq	r3, #0
 8101dc6:	b2db      	uxtb	r3, r3
 8101dc8:	e02f      	b.n	8101e2a <HAL_TIM_PWM_Start+0x9e>
 8101dca:	683b      	ldr	r3, [r7, #0]
 8101dcc:	2b08      	cmp	r3, #8
 8101dce:	d109      	bne.n	8101de4 <HAL_TIM_PWM_Start+0x58>
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101dd6:	b2db      	uxtb	r3, r3
 8101dd8:	2b01      	cmp	r3, #1
 8101dda:	bf14      	ite	ne
 8101ddc:	2301      	movne	r3, #1
 8101dde:	2300      	moveq	r3, #0
 8101de0:	b2db      	uxtb	r3, r3
 8101de2:	e022      	b.n	8101e2a <HAL_TIM_PWM_Start+0x9e>
 8101de4:	683b      	ldr	r3, [r7, #0]
 8101de6:	2b0c      	cmp	r3, #12
 8101de8:	d109      	bne.n	8101dfe <HAL_TIM_PWM_Start+0x72>
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101df0:	b2db      	uxtb	r3, r3
 8101df2:	2b01      	cmp	r3, #1
 8101df4:	bf14      	ite	ne
 8101df6:	2301      	movne	r3, #1
 8101df8:	2300      	moveq	r3, #0
 8101dfa:	b2db      	uxtb	r3, r3
 8101dfc:	e015      	b.n	8101e2a <HAL_TIM_PWM_Start+0x9e>
 8101dfe:	683b      	ldr	r3, [r7, #0]
 8101e00:	2b10      	cmp	r3, #16
 8101e02:	d109      	bne.n	8101e18 <HAL_TIM_PWM_Start+0x8c>
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8101e0a:	b2db      	uxtb	r3, r3
 8101e0c:	2b01      	cmp	r3, #1
 8101e0e:	bf14      	ite	ne
 8101e10:	2301      	movne	r3, #1
 8101e12:	2300      	moveq	r3, #0
 8101e14:	b2db      	uxtb	r3, r3
 8101e16:	e008      	b.n	8101e2a <HAL_TIM_PWM_Start+0x9e>
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8101e1e:	b2db      	uxtb	r3, r3
 8101e20:	2b01      	cmp	r3, #1
 8101e22:	bf14      	ite	ne
 8101e24:	2301      	movne	r3, #1
 8101e26:	2300      	moveq	r3, #0
 8101e28:	b2db      	uxtb	r3, r3
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d001      	beq.n	8101e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8101e2e:	2301      	movs	r3, #1
 8101e30:	e0a1      	b.n	8101f76 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8101e32:	683b      	ldr	r3, [r7, #0]
 8101e34:	2b00      	cmp	r3, #0
 8101e36:	d104      	bne.n	8101e42 <HAL_TIM_PWM_Start+0xb6>
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	2202      	movs	r2, #2
 8101e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101e40:	e023      	b.n	8101e8a <HAL_TIM_PWM_Start+0xfe>
 8101e42:	683b      	ldr	r3, [r7, #0]
 8101e44:	2b04      	cmp	r3, #4
 8101e46:	d104      	bne.n	8101e52 <HAL_TIM_PWM_Start+0xc6>
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	2202      	movs	r2, #2
 8101e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101e50:	e01b      	b.n	8101e8a <HAL_TIM_PWM_Start+0xfe>
 8101e52:	683b      	ldr	r3, [r7, #0]
 8101e54:	2b08      	cmp	r3, #8
 8101e56:	d104      	bne.n	8101e62 <HAL_TIM_PWM_Start+0xd6>
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	2202      	movs	r2, #2
 8101e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101e60:	e013      	b.n	8101e8a <HAL_TIM_PWM_Start+0xfe>
 8101e62:	683b      	ldr	r3, [r7, #0]
 8101e64:	2b0c      	cmp	r3, #12
 8101e66:	d104      	bne.n	8101e72 <HAL_TIM_PWM_Start+0xe6>
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	2202      	movs	r2, #2
 8101e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101e70:	e00b      	b.n	8101e8a <HAL_TIM_PWM_Start+0xfe>
 8101e72:	683b      	ldr	r3, [r7, #0]
 8101e74:	2b10      	cmp	r3, #16
 8101e76:	d104      	bne.n	8101e82 <HAL_TIM_PWM_Start+0xf6>
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	2202      	movs	r2, #2
 8101e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101e80:	e003      	b.n	8101e8a <HAL_TIM_PWM_Start+0xfe>
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	2202      	movs	r2, #2
 8101e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	681b      	ldr	r3, [r3, #0]
 8101e8e:	2201      	movs	r2, #1
 8101e90:	6839      	ldr	r1, [r7, #0]
 8101e92:	4618      	mov	r0, r3
 8101e94:	f000 fd0c 	bl	81028b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	4a38      	ldr	r2, [pc, #224]	; (8101f80 <HAL_TIM_PWM_Start+0x1f4>)
 8101e9e:	4293      	cmp	r3, r2
 8101ea0:	d013      	beq.n	8101eca <HAL_TIM_PWM_Start+0x13e>
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	4a37      	ldr	r2, [pc, #220]	; (8101f84 <HAL_TIM_PWM_Start+0x1f8>)
 8101ea8:	4293      	cmp	r3, r2
 8101eaa:	d00e      	beq.n	8101eca <HAL_TIM_PWM_Start+0x13e>
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	4a35      	ldr	r2, [pc, #212]	; (8101f88 <HAL_TIM_PWM_Start+0x1fc>)
 8101eb2:	4293      	cmp	r3, r2
 8101eb4:	d009      	beq.n	8101eca <HAL_TIM_PWM_Start+0x13e>
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	4a34      	ldr	r2, [pc, #208]	; (8101f8c <HAL_TIM_PWM_Start+0x200>)
 8101ebc:	4293      	cmp	r3, r2
 8101ebe:	d004      	beq.n	8101eca <HAL_TIM_PWM_Start+0x13e>
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	4a32      	ldr	r2, [pc, #200]	; (8101f90 <HAL_TIM_PWM_Start+0x204>)
 8101ec6:	4293      	cmp	r3, r2
 8101ec8:	d101      	bne.n	8101ece <HAL_TIM_PWM_Start+0x142>
 8101eca:	2301      	movs	r3, #1
 8101ecc:	e000      	b.n	8101ed0 <HAL_TIM_PWM_Start+0x144>
 8101ece:	2300      	movs	r3, #0
 8101ed0:	2b00      	cmp	r3, #0
 8101ed2:	d007      	beq.n	8101ee4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	681b      	ldr	r3, [r3, #0]
 8101ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101ee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	4a25      	ldr	r2, [pc, #148]	; (8101f80 <HAL_TIM_PWM_Start+0x1f4>)
 8101eea:	4293      	cmp	r3, r2
 8101eec:	d022      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101ef6:	d01d      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	4a25      	ldr	r2, [pc, #148]	; (8101f94 <HAL_TIM_PWM_Start+0x208>)
 8101efe:	4293      	cmp	r3, r2
 8101f00:	d018      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	681b      	ldr	r3, [r3, #0]
 8101f06:	4a24      	ldr	r2, [pc, #144]	; (8101f98 <HAL_TIM_PWM_Start+0x20c>)
 8101f08:	4293      	cmp	r3, r2
 8101f0a:	d013      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	4a22      	ldr	r2, [pc, #136]	; (8101f9c <HAL_TIM_PWM_Start+0x210>)
 8101f12:	4293      	cmp	r3, r2
 8101f14:	d00e      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	4a1a      	ldr	r2, [pc, #104]	; (8101f84 <HAL_TIM_PWM_Start+0x1f8>)
 8101f1c:	4293      	cmp	r3, r2
 8101f1e:	d009      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	4a1e      	ldr	r2, [pc, #120]	; (8101fa0 <HAL_TIM_PWM_Start+0x214>)
 8101f26:	4293      	cmp	r3, r2
 8101f28:	d004      	beq.n	8101f34 <HAL_TIM_PWM_Start+0x1a8>
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	4a16      	ldr	r2, [pc, #88]	; (8101f88 <HAL_TIM_PWM_Start+0x1fc>)
 8101f30:	4293      	cmp	r3, r2
 8101f32:	d115      	bne.n	8101f60 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	689a      	ldr	r2, [r3, #8]
 8101f3a:	4b1a      	ldr	r3, [pc, #104]	; (8101fa4 <HAL_TIM_PWM_Start+0x218>)
 8101f3c:	4013      	ands	r3, r2
 8101f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101f40:	68fb      	ldr	r3, [r7, #12]
 8101f42:	2b06      	cmp	r3, #6
 8101f44:	d015      	beq.n	8101f72 <HAL_TIM_PWM_Start+0x1e6>
 8101f46:	68fb      	ldr	r3, [r7, #12]
 8101f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101f4c:	d011      	beq.n	8101f72 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	681a      	ldr	r2, [r3, #0]
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f042 0201 	orr.w	r2, r2, #1
 8101f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101f5e:	e008      	b.n	8101f72 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	681a      	ldr	r2, [r3, #0]
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	f042 0201 	orr.w	r2, r2, #1
 8101f6e:	601a      	str	r2, [r3, #0]
 8101f70:	e000      	b.n	8101f74 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101f74:	2300      	movs	r3, #0
}
 8101f76:	4618      	mov	r0, r3
 8101f78:	3710      	adds	r7, #16
 8101f7a:	46bd      	mov	sp, r7
 8101f7c:	bd80      	pop	{r7, pc}
 8101f7e:	bf00      	nop
 8101f80:	40010000 	.word	0x40010000
 8101f84:	40010400 	.word	0x40010400
 8101f88:	40014000 	.word	0x40014000
 8101f8c:	40014400 	.word	0x40014400
 8101f90:	40014800 	.word	0x40014800
 8101f94:	40000400 	.word	0x40000400
 8101f98:	40000800 	.word	0x40000800
 8101f9c:	40000c00 	.word	0x40000c00
 8101fa0:	40001800 	.word	0x40001800
 8101fa4:	00010007 	.word	0x00010007

08101fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8101fa8:	b580      	push	{r7, lr}
 8101faa:	b086      	sub	sp, #24
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	60f8      	str	r0, [r7, #12]
 8101fb0:	60b9      	str	r1, [r7, #8]
 8101fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101fb4:	2300      	movs	r3, #0
 8101fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8101fb8:	68fb      	ldr	r3, [r7, #12]
 8101fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101fbe:	2b01      	cmp	r3, #1
 8101fc0:	d101      	bne.n	8101fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8101fc2:	2302      	movs	r3, #2
 8101fc4:	e0ff      	b.n	81021c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8101fc6:	68fb      	ldr	r3, [r7, #12]
 8101fc8:	2201      	movs	r2, #1
 8101fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	2b14      	cmp	r3, #20
 8101fd2:	f200 80f0 	bhi.w	81021b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8101fd6:	a201      	add	r2, pc, #4	; (adr r2, 8101fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8101fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101fdc:	08102031 	.word	0x08102031
 8101fe0:	081021b7 	.word	0x081021b7
 8101fe4:	081021b7 	.word	0x081021b7
 8101fe8:	081021b7 	.word	0x081021b7
 8101fec:	08102071 	.word	0x08102071
 8101ff0:	081021b7 	.word	0x081021b7
 8101ff4:	081021b7 	.word	0x081021b7
 8101ff8:	081021b7 	.word	0x081021b7
 8101ffc:	081020b3 	.word	0x081020b3
 8102000:	081021b7 	.word	0x081021b7
 8102004:	081021b7 	.word	0x081021b7
 8102008:	081021b7 	.word	0x081021b7
 810200c:	081020f3 	.word	0x081020f3
 8102010:	081021b7 	.word	0x081021b7
 8102014:	081021b7 	.word	0x081021b7
 8102018:	081021b7 	.word	0x081021b7
 810201c:	08102135 	.word	0x08102135
 8102020:	081021b7 	.word	0x081021b7
 8102024:	081021b7 	.word	0x081021b7
 8102028:	081021b7 	.word	0x081021b7
 810202c:	08102175 	.word	0x08102175
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8102030:	68fb      	ldr	r3, [r7, #12]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	68b9      	ldr	r1, [r7, #8]
 8102036:	4618      	mov	r0, r3
 8102038:	f000 f964 	bl	8102304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810203c:	68fb      	ldr	r3, [r7, #12]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	699a      	ldr	r2, [r3, #24]
 8102042:	68fb      	ldr	r3, [r7, #12]
 8102044:	681b      	ldr	r3, [r3, #0]
 8102046:	f042 0208 	orr.w	r2, r2, #8
 810204a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810204c:	68fb      	ldr	r3, [r7, #12]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	699a      	ldr	r2, [r3, #24]
 8102052:	68fb      	ldr	r3, [r7, #12]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	f022 0204 	bic.w	r2, r2, #4
 810205a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810205c:	68fb      	ldr	r3, [r7, #12]
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	6999      	ldr	r1, [r3, #24]
 8102062:	68bb      	ldr	r3, [r7, #8]
 8102064:	691a      	ldr	r2, [r3, #16]
 8102066:	68fb      	ldr	r3, [r7, #12]
 8102068:	681b      	ldr	r3, [r3, #0]
 810206a:	430a      	orrs	r2, r1
 810206c:	619a      	str	r2, [r3, #24]
      break;
 810206e:	e0a5      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8102070:	68fb      	ldr	r3, [r7, #12]
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	68b9      	ldr	r1, [r7, #8]
 8102076:	4618      	mov	r0, r3
 8102078:	f000 f9d4 	bl	8102424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810207c:	68fb      	ldr	r3, [r7, #12]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	699a      	ldr	r2, [r3, #24]
 8102082:	68fb      	ldr	r3, [r7, #12]
 8102084:	681b      	ldr	r3, [r3, #0]
 8102086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810208a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810208c:	68fb      	ldr	r3, [r7, #12]
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	699a      	ldr	r2, [r3, #24]
 8102092:	68fb      	ldr	r3, [r7, #12]
 8102094:	681b      	ldr	r3, [r3, #0]
 8102096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810209a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810209c:	68fb      	ldr	r3, [r7, #12]
 810209e:	681b      	ldr	r3, [r3, #0]
 81020a0:	6999      	ldr	r1, [r3, #24]
 81020a2:	68bb      	ldr	r3, [r7, #8]
 81020a4:	691b      	ldr	r3, [r3, #16]
 81020a6:	021a      	lsls	r2, r3, #8
 81020a8:	68fb      	ldr	r3, [r7, #12]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	430a      	orrs	r2, r1
 81020ae:	619a      	str	r2, [r3, #24]
      break;
 81020b0:	e084      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81020b2:	68fb      	ldr	r3, [r7, #12]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	68b9      	ldr	r1, [r7, #8]
 81020b8:	4618      	mov	r0, r3
 81020ba:	f000 fa3d 	bl	8102538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81020be:	68fb      	ldr	r3, [r7, #12]
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	69da      	ldr	r2, [r3, #28]
 81020c4:	68fb      	ldr	r3, [r7, #12]
 81020c6:	681b      	ldr	r3, [r3, #0]
 81020c8:	f042 0208 	orr.w	r2, r2, #8
 81020cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	681b      	ldr	r3, [r3, #0]
 81020d2:	69da      	ldr	r2, [r3, #28]
 81020d4:	68fb      	ldr	r3, [r7, #12]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	f022 0204 	bic.w	r2, r2, #4
 81020dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	69d9      	ldr	r1, [r3, #28]
 81020e4:	68bb      	ldr	r3, [r7, #8]
 81020e6:	691a      	ldr	r2, [r3, #16]
 81020e8:	68fb      	ldr	r3, [r7, #12]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	430a      	orrs	r2, r1
 81020ee:	61da      	str	r2, [r3, #28]
      break;
 81020f0:	e064      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81020f2:	68fb      	ldr	r3, [r7, #12]
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	68b9      	ldr	r1, [r7, #8]
 81020f8:	4618      	mov	r0, r3
 81020fa:	f000 faa5 	bl	8102648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	69da      	ldr	r2, [r3, #28]
 8102104:	68fb      	ldr	r3, [r7, #12]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810210c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810210e:	68fb      	ldr	r3, [r7, #12]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	69da      	ldr	r2, [r3, #28]
 8102114:	68fb      	ldr	r3, [r7, #12]
 8102116:	681b      	ldr	r3, [r3, #0]
 8102118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810211c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810211e:	68fb      	ldr	r3, [r7, #12]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	69d9      	ldr	r1, [r3, #28]
 8102124:	68bb      	ldr	r3, [r7, #8]
 8102126:	691b      	ldr	r3, [r3, #16]
 8102128:	021a      	lsls	r2, r3, #8
 810212a:	68fb      	ldr	r3, [r7, #12]
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	430a      	orrs	r2, r1
 8102130:	61da      	str	r2, [r3, #28]
      break;
 8102132:	e043      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8102134:	68fb      	ldr	r3, [r7, #12]
 8102136:	681b      	ldr	r3, [r3, #0]
 8102138:	68b9      	ldr	r1, [r7, #8]
 810213a:	4618      	mov	r0, r3
 810213c:	f000 faee 	bl	810271c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	681b      	ldr	r3, [r3, #0]
 8102144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102146:	68fb      	ldr	r3, [r7, #12]
 8102148:	681b      	ldr	r3, [r3, #0]
 810214a:	f042 0208 	orr.w	r2, r2, #8
 810214e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8102150:	68fb      	ldr	r3, [r7, #12]
 8102152:	681b      	ldr	r3, [r3, #0]
 8102154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102156:	68fb      	ldr	r3, [r7, #12]
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	f022 0204 	bic.w	r2, r2, #4
 810215e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8102166:	68bb      	ldr	r3, [r7, #8]
 8102168:	691a      	ldr	r2, [r3, #16]
 810216a:	68fb      	ldr	r3, [r7, #12]
 810216c:	681b      	ldr	r3, [r3, #0]
 810216e:	430a      	orrs	r2, r1
 8102170:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8102172:	e023      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8102174:	68fb      	ldr	r3, [r7, #12]
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	68b9      	ldr	r1, [r7, #8]
 810217a:	4618      	mov	r0, r3
 810217c:	f000 fb32 	bl	81027e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102186:	68fb      	ldr	r3, [r7, #12]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810218e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8102190:	68fb      	ldr	r3, [r7, #12]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810219e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81021a6:	68bb      	ldr	r3, [r7, #8]
 81021a8:	691b      	ldr	r3, [r3, #16]
 81021aa:	021a      	lsls	r2, r3, #8
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	430a      	orrs	r2, r1
 81021b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81021b4:	e002      	b.n	81021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81021b6:	2301      	movs	r3, #1
 81021b8:	75fb      	strb	r3, [r7, #23]
      break;
 81021ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	2200      	movs	r2, #0
 81021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 81021c6:	4618      	mov	r0, r3
 81021c8:	3718      	adds	r7, #24
 81021ca:	46bd      	mov	sp, r7
 81021cc:	bd80      	pop	{r7, pc}
 81021ce:	bf00      	nop

081021d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81021d0:	b480      	push	{r7}
 81021d2:	b085      	sub	sp, #20
 81021d4:	af00      	add	r7, sp, #0
 81021d6:	6078      	str	r0, [r7, #4]
 81021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	681b      	ldr	r3, [r3, #0]
 81021de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	4a40      	ldr	r2, [pc, #256]	; (81022e4 <TIM_Base_SetConfig+0x114>)
 81021e4:	4293      	cmp	r3, r2
 81021e6:	d013      	beq.n	8102210 <TIM_Base_SetConfig+0x40>
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81021ee:	d00f      	beq.n	8102210 <TIM_Base_SetConfig+0x40>
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	4a3d      	ldr	r2, [pc, #244]	; (81022e8 <TIM_Base_SetConfig+0x118>)
 81021f4:	4293      	cmp	r3, r2
 81021f6:	d00b      	beq.n	8102210 <TIM_Base_SetConfig+0x40>
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	4a3c      	ldr	r2, [pc, #240]	; (81022ec <TIM_Base_SetConfig+0x11c>)
 81021fc:	4293      	cmp	r3, r2
 81021fe:	d007      	beq.n	8102210 <TIM_Base_SetConfig+0x40>
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	4a3b      	ldr	r2, [pc, #236]	; (81022f0 <TIM_Base_SetConfig+0x120>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d003      	beq.n	8102210 <TIM_Base_SetConfig+0x40>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	4a3a      	ldr	r2, [pc, #232]	; (81022f4 <TIM_Base_SetConfig+0x124>)
 810220c:	4293      	cmp	r3, r2
 810220e:	d108      	bne.n	8102222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102218:	683b      	ldr	r3, [r7, #0]
 810221a:	685b      	ldr	r3, [r3, #4]
 810221c:	68fa      	ldr	r2, [r7, #12]
 810221e:	4313      	orrs	r3, r2
 8102220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	4a2f      	ldr	r2, [pc, #188]	; (81022e4 <TIM_Base_SetConfig+0x114>)
 8102226:	4293      	cmp	r3, r2
 8102228:	d01f      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102230:	d01b      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	4a2c      	ldr	r2, [pc, #176]	; (81022e8 <TIM_Base_SetConfig+0x118>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d017      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	4a2b      	ldr	r2, [pc, #172]	; (81022ec <TIM_Base_SetConfig+0x11c>)
 810223e:	4293      	cmp	r3, r2
 8102240:	d013      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	4a2a      	ldr	r2, [pc, #168]	; (81022f0 <TIM_Base_SetConfig+0x120>)
 8102246:	4293      	cmp	r3, r2
 8102248:	d00f      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	4a29      	ldr	r2, [pc, #164]	; (81022f4 <TIM_Base_SetConfig+0x124>)
 810224e:	4293      	cmp	r3, r2
 8102250:	d00b      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	4a28      	ldr	r2, [pc, #160]	; (81022f8 <TIM_Base_SetConfig+0x128>)
 8102256:	4293      	cmp	r3, r2
 8102258:	d007      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	4a27      	ldr	r2, [pc, #156]	; (81022fc <TIM_Base_SetConfig+0x12c>)
 810225e:	4293      	cmp	r3, r2
 8102260:	d003      	beq.n	810226a <TIM_Base_SetConfig+0x9a>
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	4a26      	ldr	r2, [pc, #152]	; (8102300 <TIM_Base_SetConfig+0x130>)
 8102266:	4293      	cmp	r3, r2
 8102268:	d108      	bne.n	810227c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810226a:	68fb      	ldr	r3, [r7, #12]
 810226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8102272:	683b      	ldr	r3, [r7, #0]
 8102274:	68db      	ldr	r3, [r3, #12]
 8102276:	68fa      	ldr	r2, [r7, #12]
 8102278:	4313      	orrs	r3, r2
 810227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810227c:	68fb      	ldr	r3, [r7, #12]
 810227e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102282:	683b      	ldr	r3, [r7, #0]
 8102284:	695b      	ldr	r3, [r3, #20]
 8102286:	4313      	orrs	r3, r2
 8102288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	68fa      	ldr	r2, [r7, #12]
 810228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102290:	683b      	ldr	r3, [r7, #0]
 8102292:	689a      	ldr	r2, [r3, #8]
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102298:	683b      	ldr	r3, [r7, #0]
 810229a:	681a      	ldr	r2, [r3, #0]
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	4a10      	ldr	r2, [pc, #64]	; (81022e4 <TIM_Base_SetConfig+0x114>)
 81022a4:	4293      	cmp	r3, r2
 81022a6:	d00f      	beq.n	81022c8 <TIM_Base_SetConfig+0xf8>
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	4a12      	ldr	r2, [pc, #72]	; (81022f4 <TIM_Base_SetConfig+0x124>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d00b      	beq.n	81022c8 <TIM_Base_SetConfig+0xf8>
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	4a11      	ldr	r2, [pc, #68]	; (81022f8 <TIM_Base_SetConfig+0x128>)
 81022b4:	4293      	cmp	r3, r2
 81022b6:	d007      	beq.n	81022c8 <TIM_Base_SetConfig+0xf8>
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	4a10      	ldr	r2, [pc, #64]	; (81022fc <TIM_Base_SetConfig+0x12c>)
 81022bc:	4293      	cmp	r3, r2
 81022be:	d003      	beq.n	81022c8 <TIM_Base_SetConfig+0xf8>
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	4a0f      	ldr	r2, [pc, #60]	; (8102300 <TIM_Base_SetConfig+0x130>)
 81022c4:	4293      	cmp	r3, r2
 81022c6:	d103      	bne.n	81022d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81022c8:	683b      	ldr	r3, [r7, #0]
 81022ca:	691a      	ldr	r2, [r3, #16]
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	2201      	movs	r2, #1
 81022d4:	615a      	str	r2, [r3, #20]
}
 81022d6:	bf00      	nop
 81022d8:	3714      	adds	r7, #20
 81022da:	46bd      	mov	sp, r7
 81022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e0:	4770      	bx	lr
 81022e2:	bf00      	nop
 81022e4:	40010000 	.word	0x40010000
 81022e8:	40000400 	.word	0x40000400
 81022ec:	40000800 	.word	0x40000800
 81022f0:	40000c00 	.word	0x40000c00
 81022f4:	40010400 	.word	0x40010400
 81022f8:	40014000 	.word	0x40014000
 81022fc:	40014400 	.word	0x40014400
 8102300:	40014800 	.word	0x40014800

08102304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102304:	b480      	push	{r7}
 8102306:	b087      	sub	sp, #28
 8102308:	af00      	add	r7, sp, #0
 810230a:	6078      	str	r0, [r7, #4]
 810230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	6a1b      	ldr	r3, [r3, #32]
 8102312:	f023 0201 	bic.w	r2, r3, #1
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	6a1b      	ldr	r3, [r3, #32]
 810231e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	685b      	ldr	r3, [r3, #4]
 8102324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	699b      	ldr	r3, [r3, #24]
 810232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810232c:	68fb      	ldr	r3, [r7, #12]
 810232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	f023 0303 	bic.w	r3, r3, #3
 810233e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102340:	683b      	ldr	r3, [r7, #0]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	68fa      	ldr	r2, [r7, #12]
 8102346:	4313      	orrs	r3, r2
 8102348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810234a:	697b      	ldr	r3, [r7, #20]
 810234c:	f023 0302 	bic.w	r3, r3, #2
 8102350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8102352:	683b      	ldr	r3, [r7, #0]
 8102354:	689b      	ldr	r3, [r3, #8]
 8102356:	697a      	ldr	r2, [r7, #20]
 8102358:	4313      	orrs	r3, r2
 810235a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	4a2c      	ldr	r2, [pc, #176]	; (8102410 <TIM_OC1_SetConfig+0x10c>)
 8102360:	4293      	cmp	r3, r2
 8102362:	d00f      	beq.n	8102384 <TIM_OC1_SetConfig+0x80>
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	4a2b      	ldr	r2, [pc, #172]	; (8102414 <TIM_OC1_SetConfig+0x110>)
 8102368:	4293      	cmp	r3, r2
 810236a:	d00b      	beq.n	8102384 <TIM_OC1_SetConfig+0x80>
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	4a2a      	ldr	r2, [pc, #168]	; (8102418 <TIM_OC1_SetConfig+0x114>)
 8102370:	4293      	cmp	r3, r2
 8102372:	d007      	beq.n	8102384 <TIM_OC1_SetConfig+0x80>
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	4a29      	ldr	r2, [pc, #164]	; (810241c <TIM_OC1_SetConfig+0x118>)
 8102378:	4293      	cmp	r3, r2
 810237a:	d003      	beq.n	8102384 <TIM_OC1_SetConfig+0x80>
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	4a28      	ldr	r2, [pc, #160]	; (8102420 <TIM_OC1_SetConfig+0x11c>)
 8102380:	4293      	cmp	r3, r2
 8102382:	d10c      	bne.n	810239e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8102384:	697b      	ldr	r3, [r7, #20]
 8102386:	f023 0308 	bic.w	r3, r3, #8
 810238a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810238c:	683b      	ldr	r3, [r7, #0]
 810238e:	68db      	ldr	r3, [r3, #12]
 8102390:	697a      	ldr	r2, [r7, #20]
 8102392:	4313      	orrs	r3, r2
 8102394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8102396:	697b      	ldr	r3, [r7, #20]
 8102398:	f023 0304 	bic.w	r3, r3, #4
 810239c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	4a1b      	ldr	r2, [pc, #108]	; (8102410 <TIM_OC1_SetConfig+0x10c>)
 81023a2:	4293      	cmp	r3, r2
 81023a4:	d00f      	beq.n	81023c6 <TIM_OC1_SetConfig+0xc2>
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	4a1a      	ldr	r2, [pc, #104]	; (8102414 <TIM_OC1_SetConfig+0x110>)
 81023aa:	4293      	cmp	r3, r2
 81023ac:	d00b      	beq.n	81023c6 <TIM_OC1_SetConfig+0xc2>
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	4a19      	ldr	r2, [pc, #100]	; (8102418 <TIM_OC1_SetConfig+0x114>)
 81023b2:	4293      	cmp	r3, r2
 81023b4:	d007      	beq.n	81023c6 <TIM_OC1_SetConfig+0xc2>
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	4a18      	ldr	r2, [pc, #96]	; (810241c <TIM_OC1_SetConfig+0x118>)
 81023ba:	4293      	cmp	r3, r2
 81023bc:	d003      	beq.n	81023c6 <TIM_OC1_SetConfig+0xc2>
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	4a17      	ldr	r2, [pc, #92]	; (8102420 <TIM_OC1_SetConfig+0x11c>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d111      	bne.n	81023ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81023c6:	693b      	ldr	r3, [r7, #16]
 81023c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81023cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81023ce:	693b      	ldr	r3, [r7, #16]
 81023d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81023d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81023d6:	683b      	ldr	r3, [r7, #0]
 81023d8:	695b      	ldr	r3, [r3, #20]
 81023da:	693a      	ldr	r2, [r7, #16]
 81023dc:	4313      	orrs	r3, r2
 81023de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81023e0:	683b      	ldr	r3, [r7, #0]
 81023e2:	699b      	ldr	r3, [r3, #24]
 81023e4:	693a      	ldr	r2, [r7, #16]
 81023e6:	4313      	orrs	r3, r2
 81023e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	693a      	ldr	r2, [r7, #16]
 81023ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	68fa      	ldr	r2, [r7, #12]
 81023f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81023f6:	683b      	ldr	r3, [r7, #0]
 81023f8:	685a      	ldr	r2, [r3, #4]
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	697a      	ldr	r2, [r7, #20]
 8102402:	621a      	str	r2, [r3, #32]
}
 8102404:	bf00      	nop
 8102406:	371c      	adds	r7, #28
 8102408:	46bd      	mov	sp, r7
 810240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810240e:	4770      	bx	lr
 8102410:	40010000 	.word	0x40010000
 8102414:	40010400 	.word	0x40010400
 8102418:	40014000 	.word	0x40014000
 810241c:	40014400 	.word	0x40014400
 8102420:	40014800 	.word	0x40014800

08102424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102424:	b480      	push	{r7}
 8102426:	b087      	sub	sp, #28
 8102428:	af00      	add	r7, sp, #0
 810242a:	6078      	str	r0, [r7, #4]
 810242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	6a1b      	ldr	r3, [r3, #32]
 8102432:	f023 0210 	bic.w	r2, r3, #16
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	6a1b      	ldr	r3, [r3, #32]
 810243e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	685b      	ldr	r3, [r3, #4]
 8102444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	699b      	ldr	r3, [r3, #24]
 810244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810244c:	68fb      	ldr	r3, [r7, #12]
 810244e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102458:	68fb      	ldr	r3, [r7, #12]
 810245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810245e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102460:	683b      	ldr	r3, [r7, #0]
 8102462:	681b      	ldr	r3, [r3, #0]
 8102464:	021b      	lsls	r3, r3, #8
 8102466:	68fa      	ldr	r2, [r7, #12]
 8102468:	4313      	orrs	r3, r2
 810246a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810246c:	697b      	ldr	r3, [r7, #20]
 810246e:	f023 0320 	bic.w	r3, r3, #32
 8102472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8102474:	683b      	ldr	r3, [r7, #0]
 8102476:	689b      	ldr	r3, [r3, #8]
 8102478:	011b      	lsls	r3, r3, #4
 810247a:	697a      	ldr	r2, [r7, #20]
 810247c:	4313      	orrs	r3, r2
 810247e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	4a28      	ldr	r2, [pc, #160]	; (8102524 <TIM_OC2_SetConfig+0x100>)
 8102484:	4293      	cmp	r3, r2
 8102486:	d003      	beq.n	8102490 <TIM_OC2_SetConfig+0x6c>
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	4a27      	ldr	r2, [pc, #156]	; (8102528 <TIM_OC2_SetConfig+0x104>)
 810248c:	4293      	cmp	r3, r2
 810248e:	d10d      	bne.n	81024ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8102490:	697b      	ldr	r3, [r7, #20]
 8102492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8102496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8102498:	683b      	ldr	r3, [r7, #0]
 810249a:	68db      	ldr	r3, [r3, #12]
 810249c:	011b      	lsls	r3, r3, #4
 810249e:	697a      	ldr	r2, [r7, #20]
 81024a0:	4313      	orrs	r3, r2
 81024a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81024a4:	697b      	ldr	r3, [r7, #20]
 81024a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81024aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	4a1d      	ldr	r2, [pc, #116]	; (8102524 <TIM_OC2_SetConfig+0x100>)
 81024b0:	4293      	cmp	r3, r2
 81024b2:	d00f      	beq.n	81024d4 <TIM_OC2_SetConfig+0xb0>
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	4a1c      	ldr	r2, [pc, #112]	; (8102528 <TIM_OC2_SetConfig+0x104>)
 81024b8:	4293      	cmp	r3, r2
 81024ba:	d00b      	beq.n	81024d4 <TIM_OC2_SetConfig+0xb0>
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	4a1b      	ldr	r2, [pc, #108]	; (810252c <TIM_OC2_SetConfig+0x108>)
 81024c0:	4293      	cmp	r3, r2
 81024c2:	d007      	beq.n	81024d4 <TIM_OC2_SetConfig+0xb0>
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	4a1a      	ldr	r2, [pc, #104]	; (8102530 <TIM_OC2_SetConfig+0x10c>)
 81024c8:	4293      	cmp	r3, r2
 81024ca:	d003      	beq.n	81024d4 <TIM_OC2_SetConfig+0xb0>
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	4a19      	ldr	r2, [pc, #100]	; (8102534 <TIM_OC2_SetConfig+0x110>)
 81024d0:	4293      	cmp	r3, r2
 81024d2:	d113      	bne.n	81024fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81024d4:	693b      	ldr	r3, [r7, #16]
 81024d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81024da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81024dc:	693b      	ldr	r3, [r7, #16]
 81024de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81024e4:	683b      	ldr	r3, [r7, #0]
 81024e6:	695b      	ldr	r3, [r3, #20]
 81024e8:	009b      	lsls	r3, r3, #2
 81024ea:	693a      	ldr	r2, [r7, #16]
 81024ec:	4313      	orrs	r3, r2
 81024ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81024f0:	683b      	ldr	r3, [r7, #0]
 81024f2:	699b      	ldr	r3, [r3, #24]
 81024f4:	009b      	lsls	r3, r3, #2
 81024f6:	693a      	ldr	r2, [r7, #16]
 81024f8:	4313      	orrs	r3, r2
 81024fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	693a      	ldr	r2, [r7, #16]
 8102500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	68fa      	ldr	r2, [r7, #12]
 8102506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8102508:	683b      	ldr	r3, [r7, #0]
 810250a:	685a      	ldr	r2, [r3, #4]
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	697a      	ldr	r2, [r7, #20]
 8102514:	621a      	str	r2, [r3, #32]
}
 8102516:	bf00      	nop
 8102518:	371c      	adds	r7, #28
 810251a:	46bd      	mov	sp, r7
 810251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102520:	4770      	bx	lr
 8102522:	bf00      	nop
 8102524:	40010000 	.word	0x40010000
 8102528:	40010400 	.word	0x40010400
 810252c:	40014000 	.word	0x40014000
 8102530:	40014400 	.word	0x40014400
 8102534:	40014800 	.word	0x40014800

08102538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102538:	b480      	push	{r7}
 810253a:	b087      	sub	sp, #28
 810253c:	af00      	add	r7, sp, #0
 810253e:	6078      	str	r0, [r7, #4]
 8102540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6a1b      	ldr	r3, [r3, #32]
 8102546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	6a1b      	ldr	r3, [r3, #32]
 8102552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	685b      	ldr	r3, [r3, #4]
 8102558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	69db      	ldr	r3, [r3, #28]
 810255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102560:	68fb      	ldr	r3, [r7, #12]
 8102562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810256c:	68fb      	ldr	r3, [r7, #12]
 810256e:	f023 0303 	bic.w	r3, r3, #3
 8102572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102574:	683b      	ldr	r3, [r7, #0]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	68fa      	ldr	r2, [r7, #12]
 810257a:	4313      	orrs	r3, r2
 810257c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810257e:	697b      	ldr	r3, [r7, #20]
 8102580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8102586:	683b      	ldr	r3, [r7, #0]
 8102588:	689b      	ldr	r3, [r3, #8]
 810258a:	021b      	lsls	r3, r3, #8
 810258c:	697a      	ldr	r2, [r7, #20]
 810258e:	4313      	orrs	r3, r2
 8102590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	4a27      	ldr	r2, [pc, #156]	; (8102634 <TIM_OC3_SetConfig+0xfc>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d003      	beq.n	81025a2 <TIM_OC3_SetConfig+0x6a>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	4a26      	ldr	r2, [pc, #152]	; (8102638 <TIM_OC3_SetConfig+0x100>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d10d      	bne.n	81025be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81025a2:	697b      	ldr	r3, [r7, #20]
 81025a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81025a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81025aa:	683b      	ldr	r3, [r7, #0]
 81025ac:	68db      	ldr	r3, [r3, #12]
 81025ae:	021b      	lsls	r3, r3, #8
 81025b0:	697a      	ldr	r2, [r7, #20]
 81025b2:	4313      	orrs	r3, r2
 81025b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81025b6:	697b      	ldr	r3, [r7, #20]
 81025b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81025bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	4a1c      	ldr	r2, [pc, #112]	; (8102634 <TIM_OC3_SetConfig+0xfc>)
 81025c2:	4293      	cmp	r3, r2
 81025c4:	d00f      	beq.n	81025e6 <TIM_OC3_SetConfig+0xae>
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	4a1b      	ldr	r2, [pc, #108]	; (8102638 <TIM_OC3_SetConfig+0x100>)
 81025ca:	4293      	cmp	r3, r2
 81025cc:	d00b      	beq.n	81025e6 <TIM_OC3_SetConfig+0xae>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	4a1a      	ldr	r2, [pc, #104]	; (810263c <TIM_OC3_SetConfig+0x104>)
 81025d2:	4293      	cmp	r3, r2
 81025d4:	d007      	beq.n	81025e6 <TIM_OC3_SetConfig+0xae>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	4a19      	ldr	r2, [pc, #100]	; (8102640 <TIM_OC3_SetConfig+0x108>)
 81025da:	4293      	cmp	r3, r2
 81025dc:	d003      	beq.n	81025e6 <TIM_OC3_SetConfig+0xae>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	4a18      	ldr	r2, [pc, #96]	; (8102644 <TIM_OC3_SetConfig+0x10c>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d113      	bne.n	810260e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81025e6:	693b      	ldr	r3, [r7, #16]
 81025e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81025ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81025ee:	693b      	ldr	r3, [r7, #16]
 81025f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81025f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	695b      	ldr	r3, [r3, #20]
 81025fa:	011b      	lsls	r3, r3, #4
 81025fc:	693a      	ldr	r2, [r7, #16]
 81025fe:	4313      	orrs	r3, r2
 8102600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8102602:	683b      	ldr	r3, [r7, #0]
 8102604:	699b      	ldr	r3, [r3, #24]
 8102606:	011b      	lsls	r3, r3, #4
 8102608:	693a      	ldr	r2, [r7, #16]
 810260a:	4313      	orrs	r3, r2
 810260c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	693a      	ldr	r2, [r7, #16]
 8102612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	68fa      	ldr	r2, [r7, #12]
 8102618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810261a:	683b      	ldr	r3, [r7, #0]
 810261c:	685a      	ldr	r2, [r3, #4]
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	697a      	ldr	r2, [r7, #20]
 8102626:	621a      	str	r2, [r3, #32]
}
 8102628:	bf00      	nop
 810262a:	371c      	adds	r7, #28
 810262c:	46bd      	mov	sp, r7
 810262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102632:	4770      	bx	lr
 8102634:	40010000 	.word	0x40010000
 8102638:	40010400 	.word	0x40010400
 810263c:	40014000 	.word	0x40014000
 8102640:	40014400 	.word	0x40014400
 8102644:	40014800 	.word	0x40014800

08102648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102648:	b480      	push	{r7}
 810264a:	b087      	sub	sp, #28
 810264c:	af00      	add	r7, sp, #0
 810264e:	6078      	str	r0, [r7, #4]
 8102650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	6a1b      	ldr	r3, [r3, #32]
 8102656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	6a1b      	ldr	r3, [r3, #32]
 8102662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	685b      	ldr	r3, [r3, #4]
 8102668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	69db      	ldr	r3, [r3, #28]
 810266e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8102670:	68fb      	ldr	r3, [r7, #12]
 8102672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102684:	683b      	ldr	r3, [r7, #0]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	021b      	lsls	r3, r3, #8
 810268a:	68fa      	ldr	r2, [r7, #12]
 810268c:	4313      	orrs	r3, r2
 810268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8102690:	693b      	ldr	r3, [r7, #16]
 8102692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8102698:	683b      	ldr	r3, [r7, #0]
 810269a:	689b      	ldr	r3, [r3, #8]
 810269c:	031b      	lsls	r3, r3, #12
 810269e:	693a      	ldr	r2, [r7, #16]
 81026a0:	4313      	orrs	r3, r2
 81026a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	4a18      	ldr	r2, [pc, #96]	; (8102708 <TIM_OC4_SetConfig+0xc0>)
 81026a8:	4293      	cmp	r3, r2
 81026aa:	d00f      	beq.n	81026cc <TIM_OC4_SetConfig+0x84>
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	4a17      	ldr	r2, [pc, #92]	; (810270c <TIM_OC4_SetConfig+0xc4>)
 81026b0:	4293      	cmp	r3, r2
 81026b2:	d00b      	beq.n	81026cc <TIM_OC4_SetConfig+0x84>
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	4a16      	ldr	r2, [pc, #88]	; (8102710 <TIM_OC4_SetConfig+0xc8>)
 81026b8:	4293      	cmp	r3, r2
 81026ba:	d007      	beq.n	81026cc <TIM_OC4_SetConfig+0x84>
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	4a15      	ldr	r2, [pc, #84]	; (8102714 <TIM_OC4_SetConfig+0xcc>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d003      	beq.n	81026cc <TIM_OC4_SetConfig+0x84>
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	4a14      	ldr	r2, [pc, #80]	; (8102718 <TIM_OC4_SetConfig+0xd0>)
 81026c8:	4293      	cmp	r3, r2
 81026ca:	d109      	bne.n	81026e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81026cc:	697b      	ldr	r3, [r7, #20]
 81026ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81026d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81026d4:	683b      	ldr	r3, [r7, #0]
 81026d6:	695b      	ldr	r3, [r3, #20]
 81026d8:	019b      	lsls	r3, r3, #6
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4313      	orrs	r3, r2
 81026de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	697a      	ldr	r2, [r7, #20]
 81026e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68fa      	ldr	r2, [r7, #12]
 81026ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81026ec:	683b      	ldr	r3, [r7, #0]
 81026ee:	685a      	ldr	r2, [r3, #4]
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	693a      	ldr	r2, [r7, #16]
 81026f8:	621a      	str	r2, [r3, #32]
}
 81026fa:	bf00      	nop
 81026fc:	371c      	adds	r7, #28
 81026fe:	46bd      	mov	sp, r7
 8102700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102704:	4770      	bx	lr
 8102706:	bf00      	nop
 8102708:	40010000 	.word	0x40010000
 810270c:	40010400 	.word	0x40010400
 8102710:	40014000 	.word	0x40014000
 8102714:	40014400 	.word	0x40014400
 8102718:	40014800 	.word	0x40014800

0810271c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810271c:	b480      	push	{r7}
 810271e:	b087      	sub	sp, #28
 8102720:	af00      	add	r7, sp, #0
 8102722:	6078      	str	r0, [r7, #4]
 8102724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	6a1b      	ldr	r3, [r3, #32]
 810272a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	6a1b      	ldr	r3, [r3, #32]
 8102736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	685b      	ldr	r3, [r3, #4]
 810273c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8102744:	68fb      	ldr	r3, [r7, #12]
 8102746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810274e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102750:	683b      	ldr	r3, [r7, #0]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	68fa      	ldr	r2, [r7, #12]
 8102756:	4313      	orrs	r3, r2
 8102758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810275a:	693b      	ldr	r3, [r7, #16]
 810275c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8102762:	683b      	ldr	r3, [r7, #0]
 8102764:	689b      	ldr	r3, [r3, #8]
 8102766:	041b      	lsls	r3, r3, #16
 8102768:	693a      	ldr	r2, [r7, #16]
 810276a:	4313      	orrs	r3, r2
 810276c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	4a17      	ldr	r2, [pc, #92]	; (81027d0 <TIM_OC5_SetConfig+0xb4>)
 8102772:	4293      	cmp	r3, r2
 8102774:	d00f      	beq.n	8102796 <TIM_OC5_SetConfig+0x7a>
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	4a16      	ldr	r2, [pc, #88]	; (81027d4 <TIM_OC5_SetConfig+0xb8>)
 810277a:	4293      	cmp	r3, r2
 810277c:	d00b      	beq.n	8102796 <TIM_OC5_SetConfig+0x7a>
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	4a15      	ldr	r2, [pc, #84]	; (81027d8 <TIM_OC5_SetConfig+0xbc>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d007      	beq.n	8102796 <TIM_OC5_SetConfig+0x7a>
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	4a14      	ldr	r2, [pc, #80]	; (81027dc <TIM_OC5_SetConfig+0xc0>)
 810278a:	4293      	cmp	r3, r2
 810278c:	d003      	beq.n	8102796 <TIM_OC5_SetConfig+0x7a>
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	4a13      	ldr	r2, [pc, #76]	; (81027e0 <TIM_OC5_SetConfig+0xc4>)
 8102792:	4293      	cmp	r3, r2
 8102794:	d109      	bne.n	81027aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8102796:	697b      	ldr	r3, [r7, #20]
 8102798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810279c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810279e:	683b      	ldr	r3, [r7, #0]
 81027a0:	695b      	ldr	r3, [r3, #20]
 81027a2:	021b      	lsls	r3, r3, #8
 81027a4:	697a      	ldr	r2, [r7, #20]
 81027a6:	4313      	orrs	r3, r2
 81027a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	697a      	ldr	r2, [r7, #20]
 81027ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	68fa      	ldr	r2, [r7, #12]
 81027b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81027b6:	683b      	ldr	r3, [r7, #0]
 81027b8:	685a      	ldr	r2, [r3, #4]
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	693a      	ldr	r2, [r7, #16]
 81027c2:	621a      	str	r2, [r3, #32]
}
 81027c4:	bf00      	nop
 81027c6:	371c      	adds	r7, #28
 81027c8:	46bd      	mov	sp, r7
 81027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ce:	4770      	bx	lr
 81027d0:	40010000 	.word	0x40010000
 81027d4:	40010400 	.word	0x40010400
 81027d8:	40014000 	.word	0x40014000
 81027dc:	40014400 	.word	0x40014400
 81027e0:	40014800 	.word	0x40014800

081027e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81027e4:	b480      	push	{r7}
 81027e6:	b087      	sub	sp, #28
 81027e8:	af00      	add	r7, sp, #0
 81027ea:	6078      	str	r0, [r7, #4]
 81027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	6a1b      	ldr	r3, [r3, #32]
 81027f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	6a1b      	ldr	r3, [r3, #32]
 81027fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	685b      	ldr	r3, [r3, #4]
 8102804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810280c:	68fb      	ldr	r3, [r7, #12]
 810280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102818:	683b      	ldr	r3, [r7, #0]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	021b      	lsls	r3, r3, #8
 810281e:	68fa      	ldr	r2, [r7, #12]
 8102820:	4313      	orrs	r3, r2
 8102822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8102824:	693b      	ldr	r3, [r7, #16]
 8102826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810282a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810282c:	683b      	ldr	r3, [r7, #0]
 810282e:	689b      	ldr	r3, [r3, #8]
 8102830:	051b      	lsls	r3, r3, #20
 8102832:	693a      	ldr	r2, [r7, #16]
 8102834:	4313      	orrs	r3, r2
 8102836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	4a18      	ldr	r2, [pc, #96]	; (810289c <TIM_OC6_SetConfig+0xb8>)
 810283c:	4293      	cmp	r3, r2
 810283e:	d00f      	beq.n	8102860 <TIM_OC6_SetConfig+0x7c>
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	4a17      	ldr	r2, [pc, #92]	; (81028a0 <TIM_OC6_SetConfig+0xbc>)
 8102844:	4293      	cmp	r3, r2
 8102846:	d00b      	beq.n	8102860 <TIM_OC6_SetConfig+0x7c>
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	4a16      	ldr	r2, [pc, #88]	; (81028a4 <TIM_OC6_SetConfig+0xc0>)
 810284c:	4293      	cmp	r3, r2
 810284e:	d007      	beq.n	8102860 <TIM_OC6_SetConfig+0x7c>
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	4a15      	ldr	r2, [pc, #84]	; (81028a8 <TIM_OC6_SetConfig+0xc4>)
 8102854:	4293      	cmp	r3, r2
 8102856:	d003      	beq.n	8102860 <TIM_OC6_SetConfig+0x7c>
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	4a14      	ldr	r2, [pc, #80]	; (81028ac <TIM_OC6_SetConfig+0xc8>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d109      	bne.n	8102874 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8102860:	697b      	ldr	r3, [r7, #20]
 8102862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8102866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8102868:	683b      	ldr	r3, [r7, #0]
 810286a:	695b      	ldr	r3, [r3, #20]
 810286c:	029b      	lsls	r3, r3, #10
 810286e:	697a      	ldr	r2, [r7, #20]
 8102870:	4313      	orrs	r3, r2
 8102872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	697a      	ldr	r2, [r7, #20]
 8102878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	68fa      	ldr	r2, [r7, #12]
 810287e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8102880:	683b      	ldr	r3, [r7, #0]
 8102882:	685a      	ldr	r2, [r3, #4]
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	693a      	ldr	r2, [r7, #16]
 810288c:	621a      	str	r2, [r3, #32]
}
 810288e:	bf00      	nop
 8102890:	371c      	adds	r7, #28
 8102892:	46bd      	mov	sp, r7
 8102894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102898:	4770      	bx	lr
 810289a:	bf00      	nop
 810289c:	40010000 	.word	0x40010000
 81028a0:	40010400 	.word	0x40010400
 81028a4:	40014000 	.word	0x40014000
 81028a8:	40014400 	.word	0x40014400
 81028ac:	40014800 	.word	0x40014800

081028b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81028b0:	b480      	push	{r7}
 81028b2:	b087      	sub	sp, #28
 81028b4:	af00      	add	r7, sp, #0
 81028b6:	60f8      	str	r0, [r7, #12]
 81028b8:	60b9      	str	r1, [r7, #8]
 81028ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81028bc:	68bb      	ldr	r3, [r7, #8]
 81028be:	f003 031f 	and.w	r3, r3, #31
 81028c2:	2201      	movs	r2, #1
 81028c4:	fa02 f303 	lsl.w	r3, r2, r3
 81028c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	6a1a      	ldr	r2, [r3, #32]
 81028ce:	697b      	ldr	r3, [r7, #20]
 81028d0:	43db      	mvns	r3, r3
 81028d2:	401a      	ands	r2, r3
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	6a1a      	ldr	r2, [r3, #32]
 81028dc:	68bb      	ldr	r3, [r7, #8]
 81028de:	f003 031f 	and.w	r3, r3, #31
 81028e2:	6879      	ldr	r1, [r7, #4]
 81028e4:	fa01 f303 	lsl.w	r3, r1, r3
 81028e8:	431a      	orrs	r2, r3
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	621a      	str	r2, [r3, #32]
}
 81028ee:	bf00      	nop
 81028f0:	371c      	adds	r7, #28
 81028f2:	46bd      	mov	sp, r7
 81028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028f8:	4770      	bx	lr
	...

081028fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81028fc:	b480      	push	{r7}
 81028fe:	b085      	sub	sp, #20
 8102900:	af00      	add	r7, sp, #0
 8102902:	6078      	str	r0, [r7, #4]
 8102904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8102906:	2300      	movs	r3, #0
 8102908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102910:	2b01      	cmp	r3, #1
 8102912:	d101      	bne.n	8102918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8102914:	2302      	movs	r3, #2
 8102916:	e065      	b.n	81029e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	2201      	movs	r2, #1
 810291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8102920:	68fb      	ldr	r3, [r7, #12]
 8102922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8102926:	683b      	ldr	r3, [r7, #0]
 8102928:	68db      	ldr	r3, [r3, #12]
 810292a:	4313      	orrs	r3, r2
 810292c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102934:	683b      	ldr	r3, [r7, #0]
 8102936:	689b      	ldr	r3, [r3, #8]
 8102938:	4313      	orrs	r3, r2
 810293a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810293c:	68fb      	ldr	r3, [r7, #12]
 810293e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8102942:	683b      	ldr	r3, [r7, #0]
 8102944:	685b      	ldr	r3, [r3, #4]
 8102946:	4313      	orrs	r3, r2
 8102948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810294a:	68fb      	ldr	r3, [r7, #12]
 810294c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8102950:	683b      	ldr	r3, [r7, #0]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	4313      	orrs	r3, r2
 8102956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	691b      	ldr	r3, [r3, #16]
 8102962:	4313      	orrs	r3, r2
 8102964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8102966:	68fb      	ldr	r3, [r7, #12]
 8102968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810296c:	683b      	ldr	r3, [r7, #0]
 810296e:	695b      	ldr	r3, [r3, #20]
 8102970:	4313      	orrs	r3, r2
 8102972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8102974:	68fb      	ldr	r3, [r7, #12]
 8102976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810297a:	683b      	ldr	r3, [r7, #0]
 810297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810297e:	4313      	orrs	r3, r2
 8102980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8102988:	683b      	ldr	r3, [r7, #0]
 810298a:	699b      	ldr	r3, [r3, #24]
 810298c:	041b      	lsls	r3, r3, #16
 810298e:	4313      	orrs	r3, r2
 8102990:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	4a16      	ldr	r2, [pc, #88]	; (81029f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8102998:	4293      	cmp	r3, r2
 810299a:	d004      	beq.n	81029a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	4a14      	ldr	r2, [pc, #80]	; (81029f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81029a2:	4293      	cmp	r3, r2
 81029a4:	d115      	bne.n	81029d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81029ac:	683b      	ldr	r3, [r7, #0]
 81029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029b0:	051b      	lsls	r3, r3, #20
 81029b2:	4313      	orrs	r3, r2
 81029b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81029bc:	683b      	ldr	r3, [r7, #0]
 81029be:	69db      	ldr	r3, [r3, #28]
 81029c0:	4313      	orrs	r3, r2
 81029c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 81029ca:	683b      	ldr	r3, [r7, #0]
 81029cc:	6a1b      	ldr	r3, [r3, #32]
 81029ce:	4313      	orrs	r3, r2
 81029d0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	68fa      	ldr	r2, [r7, #12]
 81029d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	2200      	movs	r2, #0
 81029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81029e2:	2300      	movs	r3, #0
}
 81029e4:	4618      	mov	r0, r3
 81029e6:	3714      	adds	r7, #20
 81029e8:	46bd      	mov	sp, r7
 81029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ee:	4770      	bx	lr
 81029f0:	40010000 	.word	0x40010000
 81029f4:	40010400 	.word	0x40010400

081029f8 <__libc_init_array>:
 81029f8:	b570      	push	{r4, r5, r6, lr}
 81029fa:	4d0d      	ldr	r5, [pc, #52]	; (8102a30 <__libc_init_array+0x38>)
 81029fc:	4c0d      	ldr	r4, [pc, #52]	; (8102a34 <__libc_init_array+0x3c>)
 81029fe:	1b64      	subs	r4, r4, r5
 8102a00:	10a4      	asrs	r4, r4, #2
 8102a02:	2600      	movs	r6, #0
 8102a04:	42a6      	cmp	r6, r4
 8102a06:	d109      	bne.n	8102a1c <__libc_init_array+0x24>
 8102a08:	4d0b      	ldr	r5, [pc, #44]	; (8102a38 <__libc_init_array+0x40>)
 8102a0a:	4c0c      	ldr	r4, [pc, #48]	; (8102a3c <__libc_init_array+0x44>)
 8102a0c:	f000 f820 	bl	8102a50 <_init>
 8102a10:	1b64      	subs	r4, r4, r5
 8102a12:	10a4      	asrs	r4, r4, #2
 8102a14:	2600      	movs	r6, #0
 8102a16:	42a6      	cmp	r6, r4
 8102a18:	d105      	bne.n	8102a26 <__libc_init_array+0x2e>
 8102a1a:	bd70      	pop	{r4, r5, r6, pc}
 8102a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8102a20:	4798      	blx	r3
 8102a22:	3601      	adds	r6, #1
 8102a24:	e7ee      	b.n	8102a04 <__libc_init_array+0xc>
 8102a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8102a2a:	4798      	blx	r3
 8102a2c:	3601      	adds	r6, #1
 8102a2e:	e7f2      	b.n	8102a16 <__libc_init_array+0x1e>
 8102a30:	08102a78 	.word	0x08102a78
 8102a34:	08102a78 	.word	0x08102a78
 8102a38:	08102a78 	.word	0x08102a78
 8102a3c:	08102a7c 	.word	0x08102a7c

08102a40 <memset>:
 8102a40:	4402      	add	r2, r0
 8102a42:	4603      	mov	r3, r0
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d100      	bne.n	8102a4a <memset+0xa>
 8102a48:	4770      	bx	lr
 8102a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8102a4e:	e7f9      	b.n	8102a44 <memset+0x4>

08102a50 <_init>:
 8102a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102a52:	bf00      	nop
 8102a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102a56:	bc08      	pop	{r3}
 8102a58:	469e      	mov	lr, r3
 8102a5a:	4770      	bx	lr

08102a5c <_fini>:
 8102a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102a5e:	bf00      	nop
 8102a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102a62:	bc08      	pop	{r3}
 8102a64:	469e      	mov	lr, r3
 8102a66:	4770      	bx	lr
